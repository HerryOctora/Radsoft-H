using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Text;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;
using RFSRepository;
using OfficeOpenXml.Drawing.Chart;
using System.Xml;


namespace RFSRepositoryThree
{
    public class CustomClient21Reps
    {
        Host _host = new Host();

        public class FFSSetup_21
        {
            public DateTime Date { get; set; }
            public string PaymentDate { get; set; }
            public int FundPK { get; set; }
            public string Col1 { get; set; }
            public string Col2 { get; set; }
            public string Col3 { get; set; }
            public string Col4 { get; set; }
            public string Col5 { get; set; }
            public string Col6 { get; set; }
            public string Col7 { get; set; }
            public string Col8 { get; set; }
            public string Col9 { get; set; }
            public string Col10 { get; set; }
            public string Col11 { get; set; }
            public string Col12 { get; set; }
            public string Col13 { get; set; }
            public string Col14 { get; set; }
            public string Col15 { get; set; }
            public string Col16 { get; set; }
            public string Col17 { get; set; }
            public string Col18 { get; set; }
            public string Col19 { get; set; }
            public string Col20 { get; set; }
            public string Col21 { get; set; }
            public string Col22 { get; set; }
            public string Col23 { get; set; }
            public int Col24 { get; set; }

            public decimal AUM { get; set; }
            public decimal Nav { get; set; }
            public decimal Unit { get; set; }

            public string InstrumentType { get; set; }
            public decimal ExposurePercent { get; set; }
            public string SectorName { get; set; }

            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }

            public decimal CloseInd { get; set; }
            public int IndexPK { get; set; }

            public decimal ReturnLastMonth { get; set; }
            public decimal Return3Month { get; set; }
            public decimal ReturnLast1Year { get; set; }
            public decimal ReturnYTD { get; set; }
            public decimal ReturnInception { get; set; }

            public decimal RateIndex { get; set; }
            public decimal ReturnLastMonthIndex { get; set; }
            public decimal Return3Monthindex { get; set; }
            public decimal ReturnLast1YearIndex { get; set; }
            public decimal ReturnYTDIndex { get; set; }
            public decimal ReturnInceptionIndex { get; set; }

            public decimal RateIndex_A { get; set; }
            public decimal ReturnLastMonthIndex_A { get; set; }
            public decimal Return3Monthindex_A { get; set; }
            public decimal ReturnLast1YearIndex_A { get; set; }
            public decimal ReturnYTDIndex_A { get; set; }
            public decimal ReturnInceptionIndex_A { get; set; }

            public decimal RateIndex1 { get; set; }
            public decimal RateIndex2 { get; set; }

            public decimal TotalDevidend { get; set; }
            public decimal Price { get; set; }

        }


        private class KomisiPenjualanValuation
        {
            public string NoRef { get; set; }
            public string ClientName { get; set; }
            public string NamaAgent { get; set; }
            public string Address { get; set; }
            public string Subject { get; set; }
            public decimal TotalSubsAmount { get; set; }
            public decimal TotalSubscription { get; set; }
            public decimal SubsFee { get; set; }
            public decimal UpfrontFee { get; set; }
            public decimal UpfrontFeeDownline { get; set; }
            public decimal MFee { get; set; }
            public decimal Tax { get; set; }
            public decimal PPH23 { get; set; }
            public decimal PPH21 { get; set; }
            public decimal Commission { get; set; }
            public string BankName { get; set; }
            public string AccName { get; set; }
            public string Periode { get; set; }
            public string AccNumber { get; set; }
            public string periode { get; set; }

        }

        public class RekapKomisiPembayaranAgent
        {
            public string NamaAgent { get; set; }
            public decimal TotalSubscription { get; set; }
            public decimal SubscriptionFee { get; set; }
            public decimal UpfrontFee { get; set; }
            public decimal UpfrontFeeDownline { get; set; }
            public decimal ManagementFee { get; set; }
            public decimal TotalKomisi { get; set; }
            public decimal PPH21 { get; set; }
            public decimal TotalKomisiSetelah { get; set; }
            public string NamaAccount { get; set; }
            public string Bank { get; set; }
            public string NoRekening { get; set; }


            public string NamaAgentCIMB { get; set; }
            public decimal TotalKomisiCIMB { get; set; }
            public decimal PPH21CIMB { get; set; }
            public decimal TotalKomisiSetelahCIMB { get; set; }
            public string NamaAccountCIMB { get; set; }
            public string BankCIMB { get; set; }
            public string NoRekeningCIMB { get; set; }

            public string NamaAgentNonCIMB { get; set; }
            public decimal TotalKomisiNonCIMB { get; set; }
            public decimal PPH21NonCIMB { get; set; }
            public decimal TotalKomisiSetelahNonCIMB { get; set; }
            public string NamaAccountNonCIMB { get; set; }
            public string BankNonCIMB { get; set; }
            public string NoRekeningNonCIMB { get; set; }

        }

        public class SummaryTotalCommission
        {
            public string Month { get; set; }
            public string AgentName { get; set; }
            public string Valuation { get; set; }
            public decimal CommissionForMonth { get; set; }
            public decimal CommissionYDT { get; set; }
            public decimal DPP { get; set; }
            public decimal PPHPerBulan { get; set; }
            public decimal PPHYDT { get; set; }
        }

        public class BatchAllSubsRedemp
        {
            public int ClientSubscriptionPK { get; set; }
            public int ClientRedemptionPK { get; set; }
            public int ClientSwitchingPK { get; set; }
            public DateTime NAVDate { get; set; }
            public int FundPK { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string TransactionType { get; set; }
            public string IFUA { get; set; }
            public string ClientName { get; set; }
            public string AgentName { get; set; }
            public decimal AgentTrxPercent { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal SubsFeePercent { get; set; }
            public decimal SubsFeeAmount { get; set; }
            public decimal RedFeePercent { get; set; }
            public decimal RedFeeAmount { get; set; }
            public decimal NetAmount { get; set; }
            public decimal Nav { get; set; }
            public decimal Unit { get; set; }
            public string Remarks { get; set; }
            public string FundIDFrom { get; set; }
            public decimal GrossAmountFrom { get; set; }
            public decimal SwitchFeePercentFrom { get; set; }
            public decimal SwitchFeeAmountFrom { get; set; }
            public decimal NetAmountFrom { get; set; }
            public decimal NavFrom { get; set; }
            public decimal UnitFrom { get; set; }
            public string FundIDTo { get; set; }
            public decimal GrossAmountTo { get; set; }
            public decimal SwitchFeePercentTo { get; set; }
            public decimal SwitchFeeAmountTo { get; set; }
            public decimal NetAmountTo { get; set; }
            public decimal NavTo { get; set; }
            public decimal UnitTo { get; set; }


        }

        public class DailyDealBoard
        {
            public string FundPK { get; set; }
            public string BankName { get; set; }
            public string Attn { get; set; }
            public string Fax { get; set; }
            public string Phone { get; set; }
            public DateTime Date { get; set; }
            public string FundName { get; set; }
            public int Baris { get; set; }
            public int TotalSent { get; set; }
            public string Reference { get; set; }

        }

        public class AgentSharingFeeReport
        {
            public string FundName { get; set; }
            public string AgentName { get; set; }
            public string SellingAgentPK { get; set; }
            public decimal MFeePercent { get; set; }
            public string Currency { get; set; }
            public string DateFrom { get; set; }
            public string DateTo { get; set; }
            public string Date { get; set; }
            public decimal Nav { get; set; }
            public decimal SubsUnit { get; set; }
            public decimal SubsAmount { get; set; }
            public decimal RedempUnit { get; set; }
            public decimal RedempAmount { get; set; }
            public decimal SwitchInUnit { get; set; }
            public decimal SwitchInAmount { get; set; }
            public decimal SwitchOutUnit { get; set; }
            public decimal SwitchOutAmount { get; set; }
            public decimal UnitAmount { get; set; }
            public decimal AUM { get; set; }
            public decimal MGTFee { get; set; }
            public decimal FeeShare { get; set; }
            public decimal SharingFee { get; set; }
            public decimal RebateFeePercent { get; set; }
            public decimal Percentage { get; set; }
            public string FundType { get; set; }
            public bool BitisAgentBank { get; set; }
            public string MFeeType { get; set; }
            public string SharingFeeType { get; set; }


        }

        public class AgentTrackingRpt
        {
            public string ClientCategory { get; set; }
            public string DownloadMode { get; set; }
            public string ReportName { get; set; }
            public int FundPK { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public int FundClientPK { get; set; }
            public string FundClientID { get; set; }
            public string ClientName { get; set; }
            public string AgentName { get; set; }
            public string CurrencyID { get; set; }
            public decimal SalesAmount { get; set; }
            public decimal SalesUnit { get; set; }
            public DateTime DateFrom { get; set; }
            public DateTime DateTo { get; set; }
            public string CIF { get; set; }
            public decimal Charge { get; set; }
            public decimal Commission { get; set; }
            public decimal UnitBalance { get; set; }
            public decimal CashBalance { get; set; }
            public decimal SwitchingAmount { get; set; }
            public decimal SwitchingUnit { get; set; }
            public decimal RedemptionAmount { get; set; }
            public decimal RedemptionUnit { get; set; }
            public decimal ManagementFeeAmount { get; set; }
            public decimal TrailFeeAmount { get; set; }
            public string SharingFeeType { get; set; }
            public decimal OtherFee { get; set; }
            public decimal LastNAV { get; set; }
            public decimal OldManagementFee { get; set; }
            public decimal AUM { get; set; }

            public string FundType { get; set; }
            public string MFeeType { get; set; }
            public decimal SwitchingInAmount { get; set; }
            public decimal SwitchingInUnit { get; set; }
            public decimal SwitchingOutAmount { get; set; }
            public decimal SwitchingOutUnit { get; set; }

        }

        public class PPH21PPH23
        {
            public string Tahun { get; set; }
            public int Komisi { get; set; }
            public int Bruto { get; set; }
            public int PKP { get; set; }
            public int PKPKomulatif { get; set; }
            public string TarifPasal17 { get; set; }
            public string TarifNPWP { get; set; }
            public int PPH21Terhutang { get; set; }
            public int BuktiPotong { get; set; }
        }

        public class BrokerCommissionReport
        {
            public int FundPK { get; set; }
            public string CounterpartName { get; set; }
            public string FundName { get; set; }
            public decimal DoneAmount { get; set; }
            public decimal CommissionAmount { get; set; }
            public decimal TotalAmount { get; set; }
            public decimal Percentage { get; set; }
        }

        private class AgentCommissionCSV
        {
            public string Subject { get; set; }
            public decimal Commission { get; set; }
            public string AccName { get; set; }
            public string AccNumber { get; set; }
            public string Currency { get; set; }
            public string Row { get; set; }
            public string PaymentDate { get; set; }
            public string Blank { get; set; }

        }

        private class ListUnitPerClientCode
        {
            public string FundCode { get; set; }
            public string ClientName { get; set; }
            public string Email { get; set; }
            public string Address { get; set; }
            public decimal NoOfUnit { get; set; }
            public string Institution { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal NAV { get; set; }

        }

        private class ConsolidationReport
        {
            public string Name { get; set; }
            public string SID { get; set; }
            public string Email { get; set; }
            public string Fund { get; set; }
            public decimal NAVperUnit { get; set; }
            public decimal Unit { get; set; }
            public string Currency { get; set; }
            public decimal BalanceIDR { get; set; }
            public decimal BalanceUSD { get; set; }
        }

        public ClientSubscriptionAddNew ClientSubscription_Add(ClientSubscription _clientSubscription, bool _havePrivillege)
        {
            try
            {
                string _insertCommand = "INSERT INTO [dbo].[ClientSubscription] " +
                "([ClientSubscriptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate]," +
                " [NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount]," +
                " [SubscriptionFeePercent],[SubscriptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[Type],[BitImmediateTransaction],[FeeType],[ReferenceSInvest],[Tenor],[InterestRate],[PaymentTerm],[SumberDana],[TransactionPromoPK],[OtherAmount],";
                string _paramaterCommand = "@NAVDate,@ValueDate,@NAV,@FundPK,@FundClientPK,@CashRefPK,@CurrencyPK," +
                "@Description,@CashAmount,@UnitAmount,@TotalCashAmount,@TotalUnitAmount,@SubscriptionFeePercent,@SubscriptionFeeAmount,@AgentPK,@AgentFeePercent,@AgentFeeAmount,@Type,@BitImmediateTransaction,@FeeType,@ReferenceSInvest,@Tenor,@InterestRate,@PaymentTerm,@SumberDana,@TransactionPromoPK,@OtherAmount,";


                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        if (_havePrivillege)
                        {
                            cmd.CommandText = "Declare @newClientSubscriptionPK int \n " +
                                 "Select @newClientSubscriptionPK = isnull(max(ClientSubscriptionPK),0) + 1 from ClientSubscription \n " +
                                _insertCommand + "[IsBoTransaction],[EntryUsersID],[EntryTime],[ApprovedUsersID],[ApprovedTime],LastUpdate) " +
                                 "Select @newClientSubscriptionPK ,1,@status," + _paramaterCommand + "1,@EntryUsersID,@EntryTime,@ApprovedUsersID,@ApprovedTime,@LastUpdate \n " +
                                 "Select @newClientSubscriptionPK newClientSubscriptionPK, 1 newHistoryPK ";
                            cmd.Parameters.AddWithValue("@ApprovedUsersID", _clientSubscription.EntryUsersID);
                            cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
                        }
                        else
                        {
                            cmd.CommandText = "Declare @newClientSubscriptionPK int \n " +
                                 "Select @newClientSubscriptionPK = isnull(max(ClientSubscriptionPK),0) + 1 from ClientSubscription \n " +
                                _insertCommand + "[IsBoTransaction],[EntryUsersID],[EntryTime],LastUpdate)" +
                                "Select @newClientSubscriptionPK ,1,@status," + _paramaterCommand + "1,@EntryUsersID,@EntryTime,@LastUpdate \n " +
                                 "Select @newClientSubscriptionPK newClientSubscriptionPK, 1 newHistoryPK ";
                        }


                        cmd.Parameters.AddWithValue("@status", _havePrivillege ? 2 : 1);
                        cmd.Parameters.AddWithValue("@Type", _clientSubscription.Type);
                        cmd.Parameters.AddWithValue("@NAVDate", _clientSubscription.NAVDate);
                        cmd.Parameters.AddWithValue("@ValueDate", _clientSubscription.ValueDate);
                        cmd.Parameters.AddWithValue("@SumberDana", _clientSubscription.SumberDana);
                        cmd.Parameters.AddWithValue("@NAV", _clientSubscription.NAV);
                        cmd.Parameters.AddWithValue("@FundPK", _clientSubscription.FundPK);
                        cmd.Parameters.AddWithValue("@FundClientPK", _clientSubscription.FundClientPK);
                        cmd.Parameters.AddWithValue("@CashRefPK", _clientSubscription.CashRefPK);
                        cmd.Parameters.AddWithValue("@CurrencyPK", _clientSubscription.CurrencyPK);
                        cmd.Parameters.AddWithValue("@Description", _clientSubscription.Description);
                        cmd.Parameters.AddWithValue("@ReferenceSInvest", _clientSubscription.ReferenceSInvest);
                        cmd.Parameters.AddWithValue("@CashAmount", _clientSubscription.CashAmount);
                        cmd.Parameters.AddWithValue("@UnitAmount", _clientSubscription.UnitAmount);
                        cmd.Parameters.AddWithValue("@TotalCashAmount", _clientSubscription.TotalCashAmount);
                        cmd.Parameters.AddWithValue("@TotalUnitAmount", _clientSubscription.TotalUnitAmount);
                        cmd.Parameters.AddWithValue("@SubscriptionFeePercent", _clientSubscription.SubscriptionFeePercent);
                        cmd.Parameters.AddWithValue("@SubscriptionFeeAmount", _clientSubscription.SubscriptionFeeAmount);
                        cmd.Parameters.AddWithValue("@AgentPK", _clientSubscription.AgentPK);
                        cmd.Parameters.AddWithValue("@AgentFeePercent", _clientSubscription.AgentFeePercent);
                        cmd.Parameters.AddWithValue("@AgentFeeAmount", _clientSubscription.AgentFeeAmount);
                        cmd.Parameters.AddWithValue("@BitImmediateTransaction", _clientSubscription.BitImmediateTransaction);
                        cmd.Parameters.AddWithValue("@FeeType", _clientSubscription.FeeType);
                        cmd.Parameters.AddWithValue("@Tenor", _clientSubscription.Tenor);
                        cmd.Parameters.AddWithValue("@InterestRate", _clientSubscription.InterestRate);
                        cmd.Parameters.AddWithValue("@TransactionPromoPK", _clientSubscription.TransactionPromoPK);
                        cmd.Parameters.AddWithValue("@PaymentTerm", _clientSubscription.PaymentTerm);
                        cmd.Parameters.AddWithValue("@OtherAmount", _clientSubscription.OtherAmount);
                        cmd.Parameters.AddWithValue("@EntryUsersID", _clientSubscription.EntryUsersID);
                        cmd.Parameters.AddWithValue("@EntryTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new ClientSubscriptionAddNew()
                                {
                                    ClientSubscriptionPK = Convert.ToInt32(dr["newClientSubscriptionPK"]),
                                    HistoryPK = Convert.ToInt64(dr["newHistoryPK"]),
                                    Message = "Insert Client Subscription Success"
                                };
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public ClientSwitchingAddNew ClientSwitching_Add(ClientSwitching _clientSwitching, bool _havePrivillege)
        {
            try
            {

                string _insertCommand = "INSERT INTO [dbo].[ClientSwitching] " +
                "([ClientSwitchingPK],[HistoryPK],[Status],[NAVDate],[ValueDate],[PaymentDate]," +
                "[NAVFundFrom],[NAVFundTo],[FundPKFrom],[FundPKTo],[FundClientPK],[CashRefPKFrom],[CashRefPKTo],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[SwitchingFeePercent],[SwitchingFeeAmount],[TotalCashAmountFundFrom],[TotalCashAmountFundTo],[TotalUnitAmountFundFrom], " +
                "[TotalUnitAmountFundTo],[BitSwitchingAll],[TransferType],[FeeType],[FeeTypeMethod],[ReferenceSInvest],[AgentPK],[Type],";
                string _paramaterCommand = "@NAVDate,@ValueDate,@PaymentDate,@NAVFundFrom,@NAVFundTo,@FundPKFrom,@FundPKTo,@FundClientPK,@CashRefPKFrom,@CashRefPKTo,@CurrencyPK," +
                "@Description,@CashAmount,@UnitAmount,@SwitchingFeePercent,@SwitchingFeeAmount,@TotalCashAmountFundFrom,@TotalCashAmountFundTo,@TotalUnitAmountFundFrom,@TotalUnitAmountFundTo,@BitSwitchingAll,@TransferType,@FeeType,@FeeTypeMethod,@ReferenceSInvest,@AgentPK,@Type,";


                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        if (_havePrivillege)
                        {
                            cmd.CommandText = "Declare @newClientSwitchingPK int \n " +
                                 "Select @newClientSwitchingPK = isnull(max(ClientSwitchingPK),0) + 1 from ClientSwitching \n " +
                                _insertCommand + "[IsBoTransaction],[EntryUsersID],[EntryTime],[ApprovedUsersID],[ApprovedTime],LastUpdate) " +
                                 "Select @newClientSwitchingPK ,1,@status," + _paramaterCommand + "1,@EntryUsersID,@EntryTime,@ApprovedUsersID,@ApprovedTime,@LastUpdate \n " +
                                 "Select @newClientSwitchingPK newClientSwitchingPK, 1 newHistoryPK ";
                            cmd.Parameters.AddWithValue("@ApprovedUsersID", _clientSwitching.EntryUsersID);
                            cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
                        }
                        else
                        {
                            cmd.CommandText = "Declare @newClientSwitchingPK int \n " +
                                 "Select @newClientSwitchingPK = isnull(max(ClientSwitchingPK),0) + 1 from ClientSwitching \n " +
                                _insertCommand + "[IsBoTransaction],[EntryUsersID],[EntryTime],LastUpdate)" +
                                "Select @newClientSwitchingPK ,1,@status," + _paramaterCommand + "1,@EntryUsersID,@EntryTime,@LastUpdate \n " +
                                 "Select @newClientSwitchingPK newClientSwitchingPK, 1 newHistoryPK ";
                        }
                        cmd.Parameters.AddWithValue("@status", _havePrivillege ? 2 : 1);
                        cmd.Parameters.AddWithValue("@Type", _clientSwitching.Type);
                        cmd.Parameters.AddWithValue("@NAVDate", _clientSwitching.NAVDate);
                        cmd.Parameters.AddWithValue("@ValueDate", _clientSwitching.ValueDate);
                        cmd.Parameters.AddWithValue("@PaymentDate", _clientSwitching.PaymentDate);
                        cmd.Parameters.AddWithValue("@NAVFundFrom", _clientSwitching.NAVFundFrom);
                        cmd.Parameters.AddWithValue("@NAVFundTo", _clientSwitching.NAVFundTo);
                        cmd.Parameters.AddWithValue("@FundPKFrom", _clientSwitching.FundPKFrom);
                        cmd.Parameters.AddWithValue("@FundPKTo", _clientSwitching.FundPKTo);
                        cmd.Parameters.AddWithValue("@FundClientPK", _clientSwitching.FundClientPK);
                        cmd.Parameters.AddWithValue("@CashRefPKFrom", _clientSwitching.CashRefPKFrom);
                        cmd.Parameters.AddWithValue("@CashRefPKTo", _clientSwitching.CashRefPKTo);
                        cmd.Parameters.AddWithValue("@CurrencyPK", _clientSwitching.CurrencyPK);
                        cmd.Parameters.AddWithValue("@AgentPK", _clientSwitching.AgentPK);
                        cmd.Parameters.AddWithValue("@TransferType", _clientSwitching.TransferType);
                        cmd.Parameters.AddWithValue("@Description", _clientSwitching.Description);
                        cmd.Parameters.AddWithValue("@ReferenceSInvest", _clientSwitching.ReferenceSInvest);
                        cmd.Parameters.AddWithValue("@CashAmount", _clientSwitching.CashAmount);
                        cmd.Parameters.AddWithValue("@UnitAmount", _clientSwitching.UnitAmount);
                        cmd.Parameters.AddWithValue("@FeeType", _clientSwitching.FeeType);
                        cmd.Parameters.AddWithValue("@SwitchingFeePercent", _clientSwitching.SwitchingFeePercent);
                        cmd.Parameters.AddWithValue("@SwitchingFeeAmount", _clientSwitching.SwitchingFeeAmount);
                        cmd.Parameters.AddWithValue("@TotalCashAmountFundFrom", _clientSwitching.TotalCashAmountFundFrom);
                        cmd.Parameters.AddWithValue("@TotalCashAmountFundTo", _clientSwitching.TotalCashAmountFundTo);
                        cmd.Parameters.AddWithValue("@TotalUnitAmountFundFrom", _clientSwitching.TotalUnitAmountFundFrom);
                        cmd.Parameters.AddWithValue("@TotalUnitAmountFundTo", _clientSwitching.TotalUnitAmountFundTo);
                        cmd.Parameters.AddWithValue("@BitSwitchingAll", _clientSwitching.BitSwitchingAll);
                        cmd.Parameters.AddWithValue("@FeeTypeMethod", _clientSwitching.FeeTypeMethod);
                        cmd.Parameters.AddWithValue("@EntryUsersID", _clientSwitching.EntryUsersID);
                        cmd.Parameters.AddWithValue("@EntryTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new ClientSwitchingAddNew()
                                {
                                    ClientSwitchingPK = Convert.ToInt32(dr["newClientSwitchingPK"]),
                                    HistoryPK = Convert.ToInt64(dr["newHistoryPK"]),
                                    Message = "Insert Client Switching Success"
                                };
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public Boolean GenerateReportCommission(string _userID, CommissionRpt _commissionRpt)
        {
            #region Agent Sharing Fee Report
            if (_commissionRpt.ReportName.Equals("Agent Sharing Fee Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
                           
DECLARE @Table TABLE
(
	AgentPK INT,
	FundPK INT
	
)

	
DECLARE @FundPK int
Declare @AgentPK INT
    
CREATE TABLE #TempSharingFee
(
FundPK int,
FundName nvarchar(1000),
AgentPK int,
AgentName nvarchar(1000),
MFeePercent Numeric(20,6), 	
CurrencyID nvarchar(5),                            
MfeeDate datetime,
CloseNAV Numeric(20,6),
SubsUnit Numeric(24,4),
SubsAmount Numeric(24,2),
RedempUnit Numeric(24,4),
RedempAmount Numeric(24,2),
SwitchInUnit Numeric(24,4),
SwitchInAmount Numeric(24,2),
SwitchOutUnit Numeric(24,4),
SwitchOutAmount Numeric(24,2),
MFeeDateUnit numeric(24,4),
AUM Numeric(24,6),
ManagementFee Numeric(24,6),
SharingFee Numeric(24,6),
Percentage Numeric(24,6),
MFeeType nvarchar(100),   
SharingFeeType nvarchar(100)
)


INSERT INTO #TempSharingFee
Select  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.AgentPK,'') AgentPK
,isnull(C.Name,'') AgentName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(E.DescOne,'FLAT') MFeeType
,ISNULL(F.DescOne,'FLAT') SharingFeeType
from [dbo].DailyDataForAgentCommissionRpt A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join Agent C on A.AgentPK = C.AgentPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN dbo.MasterValue E ON A.MFeeType = E.Code AND E.ID = 'FundFeeType' AND E.status IN (1,2)
LEFT JOIN dbo.MasterValue F ON A.SharingFeeType = F.Code AND F.ID = 'AgentFeeType' AND F.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramAgent + _paramFund + @"


order by A.FundPK,A.AgentPK,A.MfeeDate


INSERT INTO @Table
( AgentPK, FundPK )
Select DISTINCT AgentPK,FundPK from #TempSharingFee
where MfeeDate between @DateFrom and @DateTo 
group by FundPK,AgentPK
having sum(ISNULL(AUM,0)) > 0 

	
SELECT  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.AgentPK,'') AgentPK
,isnull(C.Name,'') AgentName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(G.DescOne,'FLAT') MFeeType
,ISNULL(H.DescOne,'FLAT') SharingFeeType
from [DailyDataForAgentCommissionRpt] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join Agent C on A.AgentPK = C.AgentPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN @Table E ON A.FundPK = E.FundPK AND A.AgentPK = E.AgentPK
LEFT JOIN dbo.MasterValue G ON A.MFeeType = G.Code AND G.ID = 'FundFeeType' AND G.status IN (1,2)
LEFT JOIN dbo.MasterValue H ON A.SharingFeeType = H.Code AND H.ID = 'AgentFeeType' AND H.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramAgent + _paramFund + @"
AND E.AgentPK IS NOT null
order by A.FundPK,A.AgentPK,A.MfeeDate
                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AgentSharingFeeReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AgentSharingFeeReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Agent Sharing Fee Report");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AgentSharingFeeReport> rList = new List<AgentSharingFeeReport>();
                                        while (dr0.Read())
                                        {
                                            AgentSharingFeeReport rSingle = new AgentSharingFeeReport();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentName"]));
                                            rSingle.MFeePercent = Convert.ToDecimal(dr0["MFeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeePercent"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.Date = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.SwitchInUnit = Convert.ToDecimal(dr0["SwitchInUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInUnit"]));
                                            rSingle.SwitchInAmount = Convert.ToDecimal(dr0["SwitchInAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInAmount"]));
                                            rSingle.SwitchOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutUnit"]));
                                            rSingle.SwitchOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Percentage"]));

                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MFeeType"]));
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));

                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.MFeePercent, r.AgentName, r.Currency, r.Percentage, r.MFeeType, r.SharingFeeType } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Agent Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AgentName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.MFeePercent + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            //worksheet.Cells[incRowExcel, 8].Value = "(6221) 2783 0889";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            string _cellSharingFee = "C" + incRowExcel;

                                            //worksheet.Cells[incRowExcel, 8].Value = "(6221) 2970 7333";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.MFeeType;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Value = "Units";
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Value = "Amount";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "Units";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Management Fee (" + rsHeader.Key.MFeePercent + ")"; ;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Value = "2.5%";
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "FeeShare(" + rsHeader.Key.Percentage + ")"; ;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnit + rsDetail.SwitchInUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsAmount + rsDetail.SwitchInAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempUnit + rsDetail.SwitchOutUnit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempAmount + rsDetail.SwitchOutAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.MGTFee;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.SharingFee;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":J" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + StartRow + ":I" + EndRow + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + StartRow + ":J" + EndRow + ")";

                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel++;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Agent Tracking Report
            else if (_commissionRpt.ReportName.Equals("Agent Tracking Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramAgent = "";
                            //string _SellingAgentOnly = "";

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =
                            @"
                          

Declare @DateToMinOne datetime
Declare @DateToMinTwo DATETIME
DECLARE @DateToMinThree DATETIME
DECLARE @UnitDate DATETIME
DECLARE @NAVDate datetime

Set @DateToMinOne = dbo.FWorkingDay(@DateTo,-1)
Set @DateToMinTwo = dbo.FWorkingDay(@DateTo,-2)
Set @DateToMinThree = dbo.FWorkingDay(@DateTo,-3)



SET @UnitDate = CASE WHEN dbo.CheckTodayIsHoliday(@DateTo) = 1 THEN 
					CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinTwo) = 1 THEN 
						@DateToMinThree ELSE @DateToMinTwo END ELSE CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinOne) = 1 THEN
							@DateToMinTwo ELSE @DateToMinOne END END


SET @NAVDate = case when dbo.CheckTodayIsHoliday(@DateTo) = 1 
	then @DateToMinOne else @DateTo END 


	DECLARE @NAV TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(22,8)
)

DECLARE @CFundPK int


Declare A Cursor For
	SELECT FundPK FROM Fund WHERE Status IN (1,2)
Open A
Fetch Next From A
INTO @CFundPK

While @@FETCH_STATUS = 0  
Begin
	
INSERT INTO @NAV
SELECT Date,FundPK,Nav FROM dbo.CloseNAV WHERE Date = 
(
	SELECT MAX(date) FROM CloseNAV WHERE status = 2
	AND Date <= @DateTo AND FundPK = @CFundPK
) AND status = 2 AND FundPK = @CFundPK


	Fetch Next From A 
	into @CFundPK
End	
Close A
Deallocate A

SELECT 
ISNULL(B.Name,'') ClientName
,ISNULL(B.ID,'') CIF
,isnull(E.Name,'') AgentName
,isnull(C.Name,'') FundName
,isnull(F.FundType,'') FundType
,isnull(D.ID,'') CurrencyID
,sum(isnull(A.SubsUnit,0)) SalesUnit
,sum(isnull(A.Subsamount,0)) SalesAmount
,sum(isnull(A.RedempUnit,0)) RedempUnit
,sum(isnull(A.RedempAmount,0)) RedempAmount
,sum(isnull(A.SwitchInUnit,0)) SwitchInUnit
,sum(isnull(A.SwitchInAmount,0)) SwitchInAmount
,sum(isnull(A.SwitchOutUnit,0)) SwitchOutUnit
,sum(isnull(A.SwitchOutAmount,0)) SwitchOutAmount
,isnull(F.Unit,0) UnitBalance
,isnull(F.Unit,0) * ISNULL(G.Nav,0) AUM 
,SUM(CASE WHEN @CurrencyType = 'Fee Convert to Rupiah' AND C.CurrencyPK <> 1 THEN ISNULL(A.Mfee,0) * ISNULL(H.Rate,0) ELSE ISNULL(A.Mfee,0) END) ManagementFee
,SUM(CASE WHEN @CurrencyType = 'Fee Convert to Rupiah' AND C.CurrencyPK <> 1 THEN ISNULL(A.AgentFee,0) * ISNULL(H.Rate,0) ELSE ISNULL(A.AgentFee,0) END) TrailFeeAmount
,0 OtherFee
,ISNULL(I.DescOne,'FLAT') MFeeType
,ISNULL(J.DescOne,'FLAT') SharingFeeType
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Agent B ON A.AgentPK = B.AgentPK AND B.status IN (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join Currency D on C.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
left join Agent E on B.AgentPK = E.AgentPK and E.status in (1,2)
LEFT JOIN
(
	Select A.AgentPK,A.FundPK,sum(isnull(UnitAmount,0)) Unit, MV.DescOne FundType from AgentFundPosition A 
	Left Join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2) 
	Left Join Fund C on A.FundPK = C.FundPK and C.Status in(1,2)
	left join MasterValue MV on C.Type = MV.Code and MV.ID = 'FundType' and MV.Status in(1,2)
	where date = @UnitDate

" + _paramAgent + _paramFund + @"

	GROUP BY A.AgentPK,A.FundPK,MV.DescOne
)F ON A.AgentPK = F.AgentPK AND A.FundPK = F.FundPK
LEFT JOIN @NAV G ON A.FundPK = G.FundPK 
LEFT JOIN dbo.CurrencyRate H ON C.CurrencyPK = H.CurrencyPK AND H.Date = @NAVDate AND H.status IN (1,2)
LEFT JOIN MasterValue I ON A.MFeeType = I.Code AND I.ID = 'FundFeeType' AND I.status IN (1,2)
LEFT JOIN MasterValue J ON A.SharingFeeType = J.Code AND J.ID = 'AgentFeeType' AND J.status IN (1,2)
WHERE ISNULL(B.Name,'') <> ''
AND A.MFeeDate BETWEEN @DateFrom AND @DateTo

" + _paramAgent + _paramFund + @"

GROUP BY
B.Name,B.ID
,E.Name,C.Name,D.ID,F.FundType,I.DescOne,F.Unit,G.NAV,J.DescOne


";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@CurrencyType", _commissionRpt.CurrencyType);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AgentTrackingReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AgentTrackingReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Agent Tracking Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AgentTrackingRpt> rList = new List<AgentTrackingRpt>();
                                        while (dr0.Read())
                                        {
                                            AgentTrackingRpt rSingle = new AgentTrackingRpt();
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            //rSingle.SID = Convert.ToString(dr0["SID"]);
                                            //rSingle.SIDName = Convert.ToString(dr0["SIDName"]);
                                            rSingle.CIF = Convert.ToString(dr0["CIF"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.SalesAmount = Convert.ToDecimal(dr0["SalesAmount"]);
                                            rSingle.SalesUnit = Convert.ToDecimal(dr0["SalesUnit"]);
                                            rSingle.RedemptionAmount = Convert.ToDecimal(dr0["RedempAmount"]);
                                            rSingle.RedemptionUnit = Convert.ToDecimal(dr0["RedempUnit"]);
                                            rSingle.SwitchingInUnit = Convert.ToDecimal(dr0["SwitchInUnit"]);
                                            rSingle.SwitchingInAmount = Convert.ToDecimal(dr0["SwitchInAmount"]);
                                            rSingle.SwitchingOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"]);
                                            rSingle.SwitchingOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitBalance"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.ManagementFeeAmount = Convert.ToDecimal(dr0["ManagementFee"]);
                                            rSingle.TrailFeeAmount = Convert.ToDecimal(dr0["TrailFeeAmount"]);
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"]);
                                            rSingle.OtherFee = Convert.ToDecimal(dr0["OtherFee"]);
                                            //rSingle.ClientCategory = Convert.ToString(dr0["ClientCategory"]);
                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"]);

                                            rList.Add(rSingle);

                                        }

                                        var QueryByClientID =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByClientID)
                                        {

                                            incRowExcel++;
                                            //Row A = 2
                                            int RowA = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                            worksheet.Cells[incRowExcel, 2].Value = _commissionRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date To :";
                                            worksheet.Cells[incRowExcel, 2].Value = _commissionRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                            incRowExcel++;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "Agent Name";
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Account No/ Client No ";
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Team";
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Fund Name";
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Fund Type";
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Currency";
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Sales Amount";
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Sales Unit";
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Redemption Amount";
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Redemption Unit";
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Switch In Amount";
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Swtitch In Unit";
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Switch Out Amount";
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Swtitch Out Unit";
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 15].Value = "No. of units";
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 16].Value = "AUM";
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Merge = true;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 17].Value = "Management Fee";
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Merge = true;
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 18].Value = "MFee Type";
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Merge = true;
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 19].Value = "Trailer Fee";
                                            worksheet.Cells["S" + RowB + ":S" + RowG].Merge = true;
                                            worksheet.Cells["S" + RowB + ":S" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["S" + RowB + ":S" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //TAMBAHAN
                                            worksheet.Cells[incRowExcel, 20].Value = "Traile Fee Type";
                                            worksheet.Cells["T" + RowB + ":T" + RowG].Merge = true;
                                            worksheet.Cells["T" + RowB + ":T" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["T" + RowB + ":T" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //
                                            worksheet.Cells[incRowExcel, 21].Value = "Transaction Fee";
                                            worksheet.Cells["U" + RowB + ":U" + RowG].Merge = true;
                                            worksheet.Cells["U" + RowB + ":U" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["U" + RowB + ":U" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + RowB + ":U" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":U" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":U" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":U" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel = incRowExcel + 2;
                                            //area header
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientName;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.SID;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.SIDName;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.CIF;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundType;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CurrencyID;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.SalesAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.SalesUnit;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.RedemptionAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.RedemptionUnit;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.SwitchingInAmount;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.SwitchingInUnit;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.SwitchingOutAmount;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.SwitchingOutUnit;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";


                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.CashBalance;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.ManagementFeeAmount;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.MFeeType;

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.TrailFeeAmount;
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.SharingFeeType;
                                                worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 21].Value = rsDetail.OtherFee;
                                                worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 24].Value = rsDetail.ClientCategory;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }
                                            int _endRow = incRowExcel - 1;
                                            worksheet.Cells["A" + _endRow + ":U" + _endRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":U" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":U" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        }





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 21];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 45;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).Width = 65;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;
                                        worksheet.Column(21).Width = 20;

                                        //worksheet.Cells["A3:R14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 CLIENT TRACKING REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();





                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region PPH21 PPH23 Report
            else if (_commissionRpt.ReportName.Equals("PPH21 PPH23 Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramAgent = "";
                            //string _SellingAgentOnly = "";

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =
                            @"
                            select 'jan' tahun, 1000 komisi, 500 bruto, 500 PKP, 500 PKPKomulatif, '5%' TarifPasal17, '100%' TarifNPWP, 100 PPH21Terhutang, 100 BuktiPotong
                            UNION ALL
                            select 'FEB' tahun, 2000 komisi, 500 bruto, 500 PKP, 500 PKPKomulatif, '5%' TarifPasal17, '100%' TarifNPWP, 200 PPH21Terhutang, 200 BuktiPotong
                            ";

                            cmd.CommandTimeout = 0;


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PPH21PPH23Report" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "PPH21PPH23Report" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("PPH21 PPH23 Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PPH21PPH23> rList = new List<PPH21PPH23>();
                                        while (dr0.Read())
                                        {
                                            PPH21PPH23 rSingle = new PPH21PPH23();
                                            rSingle.Tahun = Convert.ToString(dr0["Tahun"]);
                                            rSingle.Komisi = Convert.ToInt32(dr0["Komisi"]);
                                            rSingle.Bruto = Convert.ToInt32(dr0["Bruto"]);
                                            rSingle.PKP = Convert.ToInt32(dr0["PKP"]);
                                            rSingle.PKPKomulatif = Convert.ToInt32(dr0["PKPKomulatif"]);
                                            rSingle.TarifPasal17 = Convert.ToString(dr0["TarifPasal17"]);
                                            rSingle.TarifNPWP = Convert.ToString(dr0["TarifNPWP"]);
                                            rSingle.PPH21Terhutang = Convert.ToInt32(dr0["PPH21Terhutang"]);
                                            rSingle.BuktiPotong = Convert.ToInt32(dr0["BuktiPotong"]);

                                            rList.Add(rSingle);

                                        }

                                        var QueryByAgent =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByAgent)
                                        {
                                            incRowExcel++;
                                            //Row A = 2
                                            int RowA = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "Agent Name :";
                                            worksheet.Cells[incRowExcel, 2].Value = _commissionRpt.AgentFrom;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "2019";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "Komisi";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Bruto";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "PKP";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "PKPKomulatif";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "TarifPasal17";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "TarifNPWP";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "PPH21Terhutang";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "BuktiPotong";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                            incRowExcel++;
                                            //area header
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Tahun;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Komisi;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Bruto;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.PKP;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.PKPKomulatif;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.TarifPasal17;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.TarifNPWP;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.PPH21Terhutang;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BuktiPotong;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }
                                            int _endRow = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Bold = true;
                                        }





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;


                                        //worksheet.Cells["A3:R14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 CLIENT TRACKING REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();





                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Agent Commission Report
            if (_commissionRpt.ReportName.Equals("Agent Commission Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"

declare @DateMinOne datetime
set @DateMinOne = dbo.FWorkingDay(@datefrom,-1)

declare @StartBalance table
(
	FundPK int,
	AgentPK int,
	StartBalance numeric(19,4)
)

insert into @StartBalance
select FundPK,AgentPK,isnull(UnitAmount,0) from DailyDataForAgentCommissionRpt Where MfeeDate = @DateMinOne  


SELECT  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(A.AgentPK,'') AgentPK
,isnull(I.Name,'') AgentName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,A.NAVDate
,isnull(A.NAV,0) CloseNAV
,sum(isnull(A.SubsUnit,0)) SubsUnit
,sum(isnull(A.SubsAmount,0)) SubsAmount
,sum(isnull(A.RedempUnit,0)) RedempUnit
,sum(isnull(A.RedempAmount,0)) RedempAmount
,sum(isnull(A.SwitchInUnit,0)) SwitchInUnit
,sum(isnull(A.SwitchInAmount,0)) SwitchInAmount
,sum(isnull(A.SwitchOutUnit,0)) SwitchOutUnit
,sum(isnull(A.SwitchOutAmount,0)) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,sum(isnull(A.MFee,0)) ManagementFee
,sum(isnull(A.AgentFee,0)) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(G.DescOne,'FLAT') MFeeType
,ISNULL(H.DescOne,'FLAT') SharingFeeType
,ISNULL(J.StartBalance,0) StartBalance
from DailyDataForAgentCommissionRpt A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join Agent I on A.AgentPK = I.AgentPK and I.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN dbo.MasterValue G ON A.MFeeType = G.Code AND G.ID = 'FundFeeType' AND G.status IN (1,2)
LEFT JOIN dbo.MasterValue H ON A.SharingFeeType = H.Code AND H.ID = 'AgentFeeType' AND H.status IN (1,2)
left join @StartBalance J on A.FundPK = J.FundPK and A.AgentPK = J.AgentPK
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramAgent + _paramFund + @"

group by B.FundPK,B.Name,A.AgentPK,I.Name,A.MFeePercent,A.MFeeDate,A.NAV
,A.UnitAmount,A.AUM,A.AgentFeePercent,G.DescOne,H.DescOne,D.ID,A.FundPK,J.StartBalance,A.NAVDate

order by A.FundPK,A.AgentPK,A.MfeeDate
                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AgentCommissionReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AgentCommissionReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Agent Commission Report");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SharingFeeReport> rList = new List<SharingFeeReport>();
                                        while (dr0.Read())
                                        {
                                            SharingFeeReport rSingle = new SharingFeeReport();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            //rSingle.FundClientName = Convert.ToString(dr0["FundClientName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientName"]));
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentName"]));
                                            rSingle.ManagementFeePercent = Convert.ToDecimal(dr0["MfeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MfeePercent"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.MfeeDate = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.NAVDate = Convert.ToString(dr0["NAVDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NAVDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.SwitchInUnit = Convert.ToDecimal(dr0["SwitchInUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInUnit"]));
                                            rSingle.SwitchInAmount = Convert.ToDecimal(dr0["SwitchInAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInAmount"]));
                                            rSingle.SwitchOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutUnit"]));
                                            rSingle.SwitchOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Percentage"]));

                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MFeeType"]));
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]));
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.ManagementFeePercent, r.AgentName, r.Currency, r.Percentage, r.MFeeType, r.SharingFeeType, r.StartBalance } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 9].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 9, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "AgentName";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AgentName;

                                            worksheet.Cells[incRowExcel, 9].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 9, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeePercent + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 9].Value = "(6221) 2983 0889";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 9, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                            //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            string _cellSharingFee = "C" + incRowExcel;


                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.MFeeType;

                                            worksheet.Cells[incRowExcel, 9].Value = "(6221) 2990 9333";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 9, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            //incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Mfee Date";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "NAV Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":E" + RowB].Merge = true;
                                            worksheet.Cells["D" + RowB + ":E" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 4].Value = "Units";
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 5].Value = "Amount";
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":G" + RowB].Merge = true;
                                            worksheet.Cells["F" + RowB + ":G" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 6].Value = "Units";
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 7].Value = "Amount";
                                            worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Management Fee (" + rsHeader.Key.ManagementFeePercent + ")"; ;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 10].Value = "2.5%";
                                            worksheet.Cells[RowG, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 10].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.StartBalance;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;
                                                int _prevRow;

                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.MfeeDate).ToString("MM/dd/yyyy");
                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.NAVDate).ToString("MM/dd/yyyy");
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsUnit + rsDetail.SwitchInUnit;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SubsAmount + rsDetail.SwitchInAmount;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempUnit + rsDetail.SwitchOutUnit;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.RedempAmount + rsDetail.SwitchOutAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                _prevRow = incRowExcel - 1;
                                                worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _prevRow + "+D" + incRowExcel + "-F" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(C" + incRowExcel + "*H" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.MGTFee;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":J" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + StartRow + ":C" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + StartRow + ":D" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + StartRow + ":I" + EndRow + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + StartRow + ":J" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Calculate();
                                            // worksheet.Cells[incRowExcel, 4].Calculate();
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 6].Calculate();
                                            //worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel = incRowExcel + 2;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 27;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Summary Total Commission
            if (_commissionRpt.ReportName.Equals("Summary Total Commission"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                            select 'January' Month, 'Agent Name' AgentName, 'valuation' Valuation,100 CommissionForMonth,200 CommissionYDT,300 DPP, 400 PPHPerBulan, 500 PPHYDT
                            UNION ALL
                           select 'January' Month, 'Agent Name' AgentName, 'valuation' Valuation,100 CommissionForMonth,200 CommissionYDT,300 DPP, 400 PPHPerBulan, 500 PPHYDT
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SummaryTotalCommission" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SummaryTotalCommission" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Summary Total Commission");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SummaryTotalCommission> rList = new List<SummaryTotalCommission>();
                                        while (dr0.Read())
                                        {

                                            SummaryTotalCommission rSingle = new SummaryTotalCommission();
                                            rSingle.Month = Convert.ToString(dr0["Month"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.Valuation = Convert.ToString(dr0["Valuation"]);
                                            rSingle.CommissionForMonth = Convert.ToDecimal(dr0["CommissionForMonth"]);
                                            rSingle.CommissionYDT = Convert.ToDecimal(dr0["CommissionYDT"]);
                                            rSingle.DPP = Convert.ToDecimal(dr0["DPP"]);
                                            rSingle.PPHPerBulan = Convert.ToDecimal(dr0["PPHPerBulan"]);
                                            rSingle.PPHYDT = Convert.ToDecimal(dr0["PPHYDT"]);





                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Summary Total Commision periode 2019";
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;


                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1].Value = "Month";
                                        worksheet.Cells[incRowExcel, 2].Value = "Agent Name";
                                        worksheet.Cells[incRowExcel, 3].Value = "valuation";
                                        worksheet.Cells[incRowExcel, 4].Value = "Commission For Month";
                                        worksheet.Cells[incRowExcel, 5].Value = "Commission YDT";
                                        worksheet.Cells[incRowExcel, 6].Value = "DPP (50% dari Komisi YTD)";
                                        worksheet.Cells[incRowExcel, 7].Value = "PPH/bulan";
                                        worksheet.Cells[incRowExcel, 8].Value = "PPH YDT";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        foreach (var rsHeader in GroupByReference)
                                        {





                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Month; ;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Valuation;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.CommissionForMonth;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CommissionYDT;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DPP;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.PPHPerBulan;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.PPHYDT;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }





                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 21;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Summary Total Commission";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_commissionRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Rekap Pembayaran Komisi Agent
            if (_commissionRpt.ReportName.Equals("Rekap Pembayaran Komisi Agent"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                                DECLARE @PPHCutOff NUMERIC(22,4)
                                SET @PPHCutOff = 0

                                DECLARE @table TABLE
                                (
	                                Bulan INT,
	                                AgentPK INT,
	                                TotalPrevLastMonth NUMERIC(22,4),
	                                TotalThisMonth NUMERIC(22,4),
	                                TotalKomisi NUMERIC(22,4)
                                )

                                INSERT INTO @table
                                        ( Bulan ,
                                          AgentPK ,
                                          TotalPrevLastMonth ,
                                          TotalThisMonth,
		                                  TotalKomisi
                                        )

                                SELECT MONTH(NAVDate) Bulan
                                ,A.AgentPK
                                ,@PPHCutOff * 0.5
                                ,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff) * 0.5
                                ,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff)
                                FROM dbo.DailyDataForAgentCommissionRpt A
                                LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
                                LEFT JOIN 
								(
									Select CurrencyPK,Rate From CurrencyRate where date = (
										Select max(Date) from CurrencyRate where status = 2 and date <= @dateTo
									) and status = 2
								) C ON B.CurrencyPK = C.CurrencyPK 
                                LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
                                WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
                                AND D.BitPPH21 = 1
                                GROUP BY A.AgentPK,MONTH(NAVDate)



                                SELECT 
	                                C.Name NamaAgent,0 TotalSubscription,0 SubscriptionFee,0 UpfrontFee,0 UpfrontFeeDownline
	                                ,ISNULL(A.TotalKomisi,0) ManagementFee,ISNULL(A.TotalKomisi,0) TotalKomisi
	
	                                ,CASE WHEN ISNULL(A.TotalKomisi,0) <> 0 THEN
										 CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
											* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
												ELSE B.RangeTo * B.Percentage / 100 END 
													ELSE 0 END PPH21
												
	
	                                ,ISNULL(A.TotalThisMonth,0) - CASE WHEN ISNULL(A.TotalKomisi,0) <> 0 THEN
										 CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
											* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
												ELSE B.RangeTo * B.Percentage / 100 END 
													ELSE 0 END TotalKomisiSetelah
	
	                                ,ISNULL(C.BeneficiaryName,'') NamaAccount
	                                ,ISNULL(C.BankInformation,'') Bank
	                                ,ISNULL(C.NoRek,'') NoRekening
	
                                FROM @table A
                                LEFT JOIN
                                (
	                                SELECT * FROM dbo.PPH21Setup WHERE status = 2
	                                AND date =
	                                (
		                                SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
	                                )
                                )B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
                                LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
                                ORDER BY C.Name



                      
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RekapPembayaranKomisiAgent" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RekapPembayaranKomisiAgent" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("ALL");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RekapKomisiPembayaranAgent> rList = new List<RekapKomisiPembayaranAgent>();
                                        while (dr0.Read())
                                        {

                                            RekapKomisiPembayaranAgent rSingle = new RekapKomisiPembayaranAgent();
                                            rSingle.NamaAgent = Convert.ToString(dr0["NamaAgent"]);
                                            rSingle.TotalSubscription = Convert.ToDecimal(dr0["TotalSubscription"]);
                                            rSingle.SubscriptionFee = Convert.ToDecimal(dr0["SubscriptionFee"]);
                                            rSingle.UpfrontFee = Convert.ToDecimal(dr0["UpfrontFee"]);
                                            rSingle.UpfrontFeeDownline = Convert.ToDecimal(dr0["UpfrontFeeDownline"]);
                                            rSingle.ManagementFee = Convert.ToDecimal(dr0["ManagementFee"]);
                                            rSingle.TotalKomisi = Convert.ToDecimal(dr0["TotalKomisi"]);
                                            rSingle.PPH21 = Convert.ToDecimal(dr0["PPH21"]);
                                            rSingle.TotalKomisiSetelah = Convert.ToDecimal(dr0["TotalKomisiSetelah"]);
                                            rSingle.NamaAccount = Convert.ToString(dr0["NamaAccount"]);
                                            rSingle.Bank = Convert.ToString(dr0["Bank"]);
                                            rSingle.NoRekening = dr0["NoRekening"].ToString();





                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "REKAP KOMISI AGENT";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Pembayaran untuk Tahun/Bulan :";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("yyyy/MM");
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Valuation Transaction Date :";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " - " + Convert.ToDateTime(_commissionRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;





                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Agent";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Total Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Subscription Fee";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Upfront Fee";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Upfront Fee (Downline)";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Management Fee";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Total Komisi";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "PPH 21";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Total Komisi (Setelah)";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Nama Account";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Bank";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "No Rekening";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;




                                            incRowExcel = incRowExcel + 2;

                                            int first = incRowExcel;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaAgent;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TotalSubscription;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubscriptionFee;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.UpfrontFee;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.UpfrontFeeDownline;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.ManagementFee;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.TotalKomisi;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.PPH21;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.TotalKomisiSetelah;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.NamaAccount;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Bank;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.NoRekening;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }



                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Calculate();

                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Calculate();

                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Calculate();

                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 13, 13];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 32;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 23;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 21;
                                        worksheet.Column(11).AutoFit();
                                        worksheet.Column(12).AutoFit();
                                        worksheet.Column(13).AutoFit();




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Rekap Komisi Pembayaran Agent";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        //Juli 2016 (CIMB)
                                        worksheet = package.Workbook.Worksheets.Add("CIMB");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd2 = DbCon.CreateCommand())
                                        {


                                            cmd2.CommandText = @"
DECLARE @PPHCutOff NUMERIC(22,4)
SET @PPHCutOff = 0

DECLARE @table TABLE
(
	Bulan INT,
	AgentPK INT,
	TotalPrevLastMonth NUMERIC(22,4),
	TotalThisMonth NUMERIC(22,4),
	TotalKomisi NUMERIC(22,4)
)

INSERT INTO @table
        ( Bulan ,
          AgentPK ,
          TotalPrevLastMonth ,
          TotalThisMonth,
		  TotalKomisi
        )

SELECT MONTH(NAVDate) Bulan
,A.AgentPK
,@PPHCutOff * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff) * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff)
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
LEFT JOIN dbo.CurrencyRate C ON B.CurrencyPK = C.CurrencyPK AND C.Date = @DateTo
LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
AND D.BitPPH21 = 1
GROUP BY A.AgentPK,MONTH(NAVDate)



SELECT 
	C.Name NamaAgentCIMB,ISNULL(A.TotalKomisi,0) TotalKomisiCIMB
	
	,CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
	* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
		ELSE B.RangeTo * B.Percentage / 100 END PPH21CIMB
	
	,ISNULL(A.TotalThisMonth,0) - CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
	* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
		ELSE B.RangeTo * B.Percentage / 100 END TotalKomisiSetelahCIMB
	
	,ISNULL(C.BeneficiaryName,'') NamaAccountCIMB
	,ISNULL(C.BankInformation,'') BankCIMB
	,ISNULL(C.NoRek,'') NoRekeningCIMB
	
FROM @table A
LEFT JOIN
(
	SELECT * FROM dbo.PPH21Setup WHERE status = 2
	AND date =
	(
		SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
	)
)B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
where C.BankInformation like '%CIMB NIAGA%'
ORDER BY C.Name


                                ";

                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                                            cmd2.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);

                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                            {
                                                if (!dr2.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<RekapKomisiPembayaranAgent> rList2 = new List<RekapKomisiPembayaranAgent>();
                                                    while (dr2.Read())
                                                    {

                                                        RekapKomisiPembayaranAgent rSingle2 = new RekapKomisiPembayaranAgent();
                                                        rSingle2.NamaAgentCIMB = Convert.ToString(dr2["NamaAgentCIMB"]);
                                                        rSingle2.TotalKomisiCIMB = Convert.ToDecimal(dr2["TotalKomisiCIMB"]);
                                                        rSingle2.PPH21CIMB = Convert.ToDecimal(dr2["PPH21CIMB"]);
                                                        rSingle2.TotalKomisiSetelahCIMB = Convert.ToDecimal(dr2["TotalKomisiSetelahCIMB"]);
                                                        rSingle2.NamaAccountCIMB = Convert.ToString(dr2["NamaAccountCIMB"]);
                                                        rSingle2.BankCIMB = Convert.ToString(dr2["BankCIMB"]);
                                                        rSingle2.NoRekeningCIMB = dr2["NoRekeningCIMB"].ToString();


                                                        rList2.Add(rSingle2);

                                                    }



                                                    var GroupByReference2 =
                                                    from r in rList2
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "PEMBAYARAN KOMISI UNTUK AGENT CAM IDR :";
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Pembayaran untuk Tahun/Bulan :";
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("yyyy/MM");
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Valuation Transaction Date :";
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " - " + Convert.ToDateTime(_commissionRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel = incRowExcel + 2;
                                                    worksheet.Cells[incRowExcel, 1].Value = "CIMB NIAGA";
                                                    incRowExcel = incRowExcel + 2;
                                                    foreach (var rsHeader2 in GroupByReference2)
                                                    {



                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;

                                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Nama Agent";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Total Komisi";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 4].Value = "PPH 21";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 5].Value = "Total Komisi (Setelah)";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 6].Value = "Nama Account";
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                        worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Bank";
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                        worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                        worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 8].Value = "No Rekening";
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                        worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                        worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[RowB, 1, RowG, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[RowB, 1, RowG, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[RowB, 1, RowG, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[RowB, 1, RowG, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                        incRowExcel = incRowExcel + 2;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail2.NamaAgentCIMB;
                                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.TotalKomisiCIMB;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail2.PPH21CIMB;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail2.TotalKomisiSetelahCIMB;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail2.NamaAccountCIMB;
                                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail2.BankCIMB;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail2.NoRekeningCIMB;
                                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }
                                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();



                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        incRowExcel = incRowExcel + 5;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Review By";
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Approved By";
                                                        incRowExcel = incRowExcel + 6;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Indrawan Rahardja";
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Arief Hidajat";

                                                        worksheet.Cells[incRowExcel, 5].Value = "Charisma Siasi";

                                                        worksheet.Cells[incRowExcel, 7].Value = "Rianty Komarudin";
                                                    }


                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    string _rangeDetail = "A:T";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 20];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).Width = 32;
                                                    worksheet.Column(3).Width = 21;
                                                    worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).AutoFit();
                                                    worksheet.Column(8).Width = 25;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Rekap Pembayaran Komisi Agent";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        //Juli 2016 (NON CIMB)
                                        worksheet = package.Workbook.Worksheets.Add("NON CIMB");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd3 = DbCon.CreateCommand())
                                        {


                                            cmd3.CommandText = @"
DECLARE @PPHCutOff NUMERIC(22,4)
SET @PPHCutOff = 0

DECLARE @table TABLE
(
	Bulan INT,
	AgentPK INT,
	TotalPrevLastMonth NUMERIC(22,4),
	TotalThisMonth NUMERIC(22,4),
	TotalKomisi NUMERIC(22,4)
)

INSERT INTO @table
        ( Bulan ,
          AgentPK ,
          TotalPrevLastMonth ,
          TotalThisMonth,
		  TotalKomisi
        )

SELECT MONTH(NAVDate) Bulan
,A.AgentPK
,@PPHCutOff * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff) * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff)
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
LEFT JOIN dbo.CurrencyRate C ON B.CurrencyPK = C.CurrencyPK AND C.Date = @DateTo
LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
AND D.BitPPH21 = 1
GROUP BY A.AgentPK,MONTH(NAVDate)



SELECT 
	C.Name NamaAgentNonCIMB,ISNULL(A.TotalKomisi,0) TotalKomisiNonCIMB
	
	,CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
	* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
		ELSE B.RangeTo * B.Percentage / 100 END PPH21NonCIMB
	
	,ISNULL(A.TotalThisMonth,0) - CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
	* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
		ELSE B.RangeTo * B.Percentage / 100 END TotalKomisiSetelahNonCIMB
	
	,ISNULL(C.BeneficiaryName,'') NamaAccountNonCIMB
	,ISNULL(C.BankInformation,'') BankNonCIMB
	,ISNULL(C.NoRek,'') NoRekeningNonCIMB
	
FROM @table A
LEFT JOIN
(
	SELECT * FROM dbo.PPH21Setup WHERE status = 2
	AND date =
	(
		SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
	)
)B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
where C.BankInformation not like '%CIMB NIAGA%'
ORDER BY C.Name


                                ";

                                            cmd3.CommandTimeout = 0;
                                            cmd3.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                                            cmd3.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);

                                            using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                            {
                                                if (!dr3.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<RekapKomisiPembayaranAgent> rList3 = new List<RekapKomisiPembayaranAgent>();
                                                    while (dr3.Read())
                                                    {

                                                        RekapKomisiPembayaranAgent rSingle3 = new RekapKomisiPembayaranAgent();
                                                        rSingle3.NamaAgentNonCIMB = Convert.ToString(dr3["NamaAgentNonCIMB"]);
                                                        rSingle3.TotalKomisiNonCIMB = Convert.ToDecimal(dr3["TotalKomisiNonCIMB"]);
                                                        rSingle3.PPH21NonCIMB = Convert.ToDecimal(dr3["PPH21NonCIMB"]);
                                                        rSingle3.TotalKomisiSetelahNonCIMB = Convert.ToDecimal(dr3["TotalKomisiSetelahNonCIMB"]);
                                                        rSingle3.NamaAccountNonCIMB = Convert.ToString(dr3["NamaAccountNonCIMB"]);
                                                        rSingle3.BankNonCIMB = Convert.ToString(dr3["BankNonCIMB"]);
                                                        rSingle3.NoRekeningNonCIMB = dr3["NoRekeningNonCIMB"].ToString();


                                                        rList3.Add(rSingle3);

                                                    }



                                                    var GroupByReference3 =
                                                    from r in rList3
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "PEMBAYARAN KOMISI UNTUK AGENT CAM IDR :";
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Pembayaran untuk Tahun/Bulan :";
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("yyyy/MM");
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Valuation Transaction Date :";
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " - " + Convert.ToDateTime(_commissionRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel = incRowExcel + 2;
                                                    worksheet.Cells[incRowExcel, 1].Value = "NON CIMB NIAGA";
                                                    incRowExcel = incRowExcel + 2;
                                                    foreach (var rsHeader3 in GroupByReference3)
                                                    {



                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;

                                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Nama Agent";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Total Komisi";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 4].Value = "PPH 21";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 5].Value = "Total Komisi (Setelah)";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 6].Value = "Nama Account";
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                        worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Bank";
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                        worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                        worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 8].Value = "No Rekening";
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                        worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                        worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[RowB, 1, RowG, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[RowB, 1, RowG, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[RowB, 1, RowG, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[RowB, 1, RowG, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                        incRowExcel = incRowExcel + 2;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.NamaAgentNonCIMB;
                                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail3.TotalKomisiNonCIMB;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail3.PPH21NonCIMB;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail3.TotalKomisiSetelahNonCIMB;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail3.NamaAccountNonCIMB;
                                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail3.BankNonCIMB;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail3.NoRekeningNonCIMB;
                                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }
                                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();



                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        incRowExcel = incRowExcel + 5;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Review By";
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Approved By";
                                                        incRowExcel = incRowExcel + 6;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Indrawan Rahardja";
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Arief Hidajat";

                                                        worksheet.Cells[incRowExcel, 5].Value = "Charisma Siasi";

                                                        worksheet.Cells[incRowExcel, 7].Value = "Rianty Komarudin";
                                                    }


                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    string _rangeDetail = "A:T";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 20];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).Width = 32;
                                                    worksheet.Column(3).Width = 21;
                                                    worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).AutoFit();
                                                    worksheet.Column(8).Width = 25;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Rekap Pembayaran Komisi Agent";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        package.Save();
                                        if (_commissionRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Komisi Penjualan Valuation
            if (_commissionRpt.ReportName.Equals("Komisi Penjualan Valuation"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =
                                @"

DECLARE @PPHCutOff NUMERIC(22,4)
declare @Counter int
SET @PPHCutOff = 0

DECLARE @table TABLE
(
	Bulan INT,
	AgentPK INT,
	TotalPrevLastMonth NUMERIC(22,4),
	TotalThisMonth NUMERIC(22,4),
	TotalKomisi NUMERIC(22,4)
)

DECLARE @tablePPH23 TABLE
(
	Bulan INT,
	AgentPK INT,
	TotalMfee NUMERIC(22,4),
	PPH23 NUMERIC(22,4),
	PPN NUMERIC(22,4),
	TotalKomisi NUMERIC(22,4)
)

INSERT INTO @table
        ( Bulan ,
          AgentPK ,
          TotalPrevLastMonth ,
          TotalThisMonth,
		  TotalKomisi
        )

SELECT MONTH(NAVDate) Bulan
,A.AgentPK
,@PPHCutOff * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff) * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff)
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
 LEFT JOIN 
								(
									Select CurrencyPK,Rate From CurrencyRate where date = (
										Select max(Date) from CurrencyRate where status = 2 and date <= @dateTo
									) and status = 2
								) C ON B.CurrencyPK = C.CurrencyPK 
LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
AND D.BitPPH21 = 1 " + _paramAgent + @"
GROUP BY A.AgentPK,MONTH(NAVDate)

INSERT INTO @tablePPH23
        ( Bulan ,
          AgentPK ,
		  TotalMfee,
		  PPH23,
		  PPN,
		  TotalKomisi
        )

SELECT MONTH(NAVDate) Bulan
,A.AgentPK
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 )
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * D.PPH23Percent / 100 
,CASE WHEN D.BitPPN = 1 THEN  (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * 0.1 ELSE 0 END
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 )
  + CASE WHEN D.BitPPN = 1 THEN  (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * 0.1 ELSE 0 END
	- (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * D.PPH23Percent / 100 
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
 LEFT JOIN 
								(
									Select CurrencyPK,Rate From CurrencyRate where date = (
										Select max(Date) from CurrencyRate where status = 2 and date <= @dateTo
									) and status = 2
								) C ON B.CurrencyPK = C.CurrencyPK 
LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
AND D.BitPPH23 = 1 " + _paramAgent + @"
GROUP BY A.AgentPK,MONTH(NAVDate),D.PPH23Percent,D.BitPPN

	SELECT 
		@Counter =  count(*) +1000
	FROM @table A
	LEFT JOIN
	(
		SELECT * FROM dbo.PPH21Setup WHERE status = 2
		AND date =
		(
			SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
		)
	)B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
	LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)


SELECT 
	substring(cast(ROW_NUMBER() over (order by C.Name ) + 1000 as nvarchar),2,4) + '/CAM/OPR/' + substring(cast(DATEPART(m, @DateTo) + 100 as nvarchar),2,3) + '/' + cast(year(@dateto) as nvarchar(4)) NoRef, 'CAM-DE' ClientName,C.Name NamaAgent,0 TotalSubscription,0 SubsFee,0 UpfrontFee,0 UpfrontFeeDownline
	,ISNULL(A.TotalKomisi,0) MFee
	
	,CASE WHEN ISNULL(A.TotalKomisi,0) <> 0 THEN
		CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
	* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
		ELSE B.RangeTo * B.Percentage / 100 END
			ELSE 0 
				 END PPH21
	,0 PPH23
	,0 Tax
	,ISNULL(A.TotalKomisi,0) - (CASE WHEN ISNULL(A.TotalKomisi,0) <> 0 THEN
		CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
	* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
		ELSE B.RangeTo * B.Percentage / 100 END
			ELSE 0 
				 END) TotalKomisiSetelah
	
	,ISNULL(C.BeneficiaryName,'') AccName
	,ISNULL(C.BankInformation,'') BankName
	,ISNULL(C.NoRek,'') AccNumber
	,C.Address
	,'Komisi Penjualan valuation ' + datename(M,@DateTo) + ' ' + cast(year(@dateto) as nvarchar(4)) Subject
,datename(M,@DateTo) + ' ' + cast(year(@dateto) as nvarchar(4)) periode
FROM @table A
LEFT JOIN
(
	SELECT * FROM dbo.PPH21Setup WHERE status = 2
	AND date =
	(
		SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
	)
)B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
--ORDER BY C.Name

union all

SELECT 
	substring(cast(ROW_NUMBER() over (order by C.Name ) + @Counter as nvarchar),2,4) + '/CAM/OPR/' + substring(cast(DATEPART(m, @DateTo) + 100 as nvarchar),2,3) + '/' + cast(year(@dateto) as nvarchar(4)),'CAM-DE' ClientName,C.Name NamaAgent,0 TotalSubscription,0 SubscriptionFee,0 UpfrontFee,0 UpfrontFeeDownline
	,ISNULL(A.TotalMfee,0) ManagementFee,0 pph21,ISNULL(A.PPH23,0) PPH23,ISNULL(A.PPN,0) PPN,ISNULL(A.TotalKomisi,0) TotalKomisi
	,ISNULL(C.BeneficiaryName,'') NamaAccount
	,ISNULL(C.BankInformation,'') Bank
	,ISNULL(C.NoRek,'') NoRekening
	,C.Address
	,'Komisi Penjualan valuation ' + datename(M,@DateTo) + ' ' + cast(year(@dateto) as nvarchar(4)) Subject
,datename(M,@DateTo) + ' ' + cast(year(@dateto) as nvarchar(4)) periode
FROM @tablePPH23 A
LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
--ORDER BY C.Name



                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            //cmd.Parameters.AddWithValue("@Nomor", _commissionRpt.Nomor);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "KomisiPenjualanValuation" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "KomisiPenjualanValuation" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Komisi Penjualan Valuation");

                                        int incRowExcel = 0;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<KomisiPenjualanValuation> rList = new List<KomisiPenjualanValuation>();
                                        while (dr0.Read())
                                        {
                                            KomisiPenjualanValuation rSingle = new KomisiPenjualanValuation();
                                            //rSingle.Date = dr0["Date"].ToString();
                                            rSingle.ClientName = dr0["ClientName"].ToString();
                                            rSingle.NamaAgent = dr0["NamaAgent"].ToString();
                                            rSingle.Address = dr0["Address"].ToString();
                                            rSingle.Subject = dr0["Subject"].ToString();
                                            rSingle.TotalSubsAmount = Convert.ToDecimal(dr0["TotalSubscription"]);
                                            rSingle.SubsFee = Convert.ToDecimal(dr0["SubsFee"]);
                                            rSingle.UpfrontFee = Convert.ToDecimal(dr0["UpfrontFee"]);
                                            rSingle.UpfrontFeeDownline = Convert.ToDecimal(dr0["UpfrontFeeDownline"]);
                                            rSingle.MFee = Convert.ToDecimal(dr0["MFee"]);
                                            rSingle.Tax = Convert.ToDecimal(dr0["Tax"]);
                                            rSingle.PPH23 = Convert.ToDecimal(dr0["PPH23"]);
                                            rSingle.Commission = Convert.ToDecimal(dr0["TotalKomisiSetelah"]);
                                            rSingle.PPH21 = Convert.ToDecimal(dr0["PPH21"]);
                                            rSingle.BankName = dr0["BankName"].ToString();
                                            rSingle.AccName = dr0["AccName"].ToString();
                                            rSingle.Periode = dr0["Periode"].ToString();
                                            rSingle.AccNumber = dr0["AccNumber"].ToString();
                                            rSingle.NoRef = dr0["NoRef"].ToString();
                                            rSingle.periode = dr0["periode"].ToString();

                                            rList.Add(rSingle);

                                        }

                                        int _row;

                                        var QueryByAgent =
                                         from r in rList
                                         group r by new { r.PPH21, r.periode, r.NoRef, r.ClientName, r.Address, r.Subject, r.TotalSubsAmount, r.SubsFee, r.UpfrontFee, r.UpfrontFeeDownline, r.MFee, r.Tax, r.PPH23, r.Commission, r.BankName, r.AccName, r.AccNumber, r.Periode, r.NamaAgent } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryByAgent)
                                        {
                                            incRowExcel++;
                                            //Row A = 2
                                            int RowA = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + rsHeader.Key.NoRef;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Tanggal";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + Convert.ToDateTime(_commissionRpt.ParamDate).ToString("dd MMM yyyy");

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + rsHeader.Key.NamaAgent;

                                            incRowExcel++;
                                            _row = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = "Alamat";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + rsHeader.Key.Address;
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + rsHeader.Key.Subject;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dengan Hormat,";

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami kirimkan pembayaran komisi untuk periode " + rsHeader.Key.periode + " dengan data sebagai berikut :";

                                            incRowExcel++;
                                            _row = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1].Value = "Keterangan";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Dasar Perhitungan";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Jumlah";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "REKSADANA";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Total Subscription";
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.TotalSubsAmount;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Subscription Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.SubsFee;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Upfront Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.UpfrontFee;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Upfront Fee (downline)";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.UpfrontFeeDownline;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.MFee;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Total Komisi Gross";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.MFee;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;



                                            if (rsHeader.Key.PPH23 != 0)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "PPN 10 %";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.Tax;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            }

                                            incRowExcel++;
                                            if (rsHeader.Key.PPH23 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Value = "PPH 23";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.PPH23 * -1;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 3].Value = "PPH 21";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.PPH21 * -1;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            }

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 3].Value = "Komisi yang akan dibayarkan";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.Commission;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "_(* #,##0.00_);_(* (#,##0.00);_(* - ??_);_(@_)";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells["A" + _row + ":E" + incRowExcel].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                            worksheet.Cells["A" + _row + ":E" + _row].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian pemberitahuan dari kami, jika terdapat ketidaksesuaian dengan data diatas, mohon";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "kami diinformasikan secepatnya. Jika tidak ada perubahan, kami akan mengirimkan komisi";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "tersebut dalam 10 hari kerja pertama setiap bulan ke rekening sebagai berikut : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Bank Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + rsHeader.Key.BankName;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Acc. Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + rsHeader.Key.AccName;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Acc. Number";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + rsHeader.Key.AccNumber;


                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "Hormat kami,";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                            incRowExcel = incRowExcel + 7;
                                            worksheet.Cells[incRowExcel, 1].Value = "Arief Hidajat";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                            worksheet.Cells[incRowExcel, 3].Value = "              Charisma Siasi";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Size = 12;

                                            worksheet.Cells[incRowExcel, 5].Value = "Rianty Komarudin";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Size = 12;
                                            incRowExcel++;



                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = true;
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 13;
                                        worksheet.Column(2).Width = 9;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 30;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Agent Commission CSV CIMB APERD
            if (_commissionRpt.ReportName.Equals("Agent Commission CSV CIMB APERD"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =
                                @"

DECLARE @PPHCutOff NUMERIC(22,4)
declare @Counter int
SET @PPHCutOff = 0

DECLARE @Row int
DECLARE @Total NUMERIC(22,4)

DECLARE @Commission TABLE
(
NoRekening nvarchar(50),
NamaAgent nvarchar(50),
Currency nvarchar(10),
TotalKomisi numeric(19,0),
Subject nvarchar(300),
PaymentDate datetime

)

DECLARE @tablePPH23 TABLE
(
	Bulan INT,
	AgentPK INT,
	TotalMfee NUMERIC(22,4),
	PPH23 NUMERIC(22,4),
	PPN NUMERIC(22,4),
	TotalKomisi NUMERIC(22,4)
)



INSERT INTO @tablePPH23
        ( Bulan ,
          AgentPK ,
		  TotalMfee,
		  PPH23,
		  PPN,
		  TotalKomisi
        )

SELECT MONTH(NAVDate) Bulan
,A.AgentPK
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 )
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * D.PPH23Percent / 100 
,CASE WHEN D.BitPPN = 1 THEN  (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * 0.1 ELSE 0 END
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 )
  + CASE WHEN D.BitPPN = 1 THEN  (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * 0.1 ELSE 0 END
	- (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * D.PPH23Percent / 100 
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
 LEFT JOIN 
								(
									Select CurrencyPK,Rate From CurrencyRate where date = (
										Select max(Date) from CurrencyRate where status = 2 and date <= @dateTo
									) and status = 2
								) C ON B.CurrencyPK = C.CurrencyPK 
LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
AND D.BitPPH23 = 1 " + _paramAgent + @"
GROUP BY A.AgentPK,MONTH(NAVDate),D.PPH23Percent,D.BitPPN



insert into @Commission
SELECT ISNULL(C.NoRek,'') NoRekening,C.Name NamaAgent,'IDR' Currency,ROUND(ISNULL(A.TotalKomisi,0),0) TotalKomisi
,'Komisi Penjualan valuation ' + datename(M,dateadd(MONTH,-1,@PaymentDate)) + ' ' + cast(year(dateadd(MONTH,-1,@PaymentDate)) as nvarchar(4)) Subject
,@PaymentDate PaymentDate
FROM @tablePPH23 A
LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
where C.BankInformation like '%CIMB NIAGA%'
--ORDER BY C.Name


select @Row = count(*) from @Commission
select @Total = isnull(sum(TotalKomisi),0) from @Commission

select '2260100402009' AccNumber,'PT CIPTADANA ASSET MANAGEMENT' AccName,'IDR' Currency,@Total TotalCommission,
'Komisi Penjualan valuation ' + datename(M,dateadd(MONTH,-1,@PaymentDate)) + ' ' + cast(year(dateadd(MONTH,-1,@PaymentDate)) as nvarchar(4)) Subject,
CONVERT(VARCHAR(10), @Row) Row,CONVERT(VARCHAR(10), @PaymentDate, 112) PaymentDate
union all
select NoRekening,NamaAgent,Currency,TotalKomisi,Subject,'','' from @Commission


                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@PaymentDate", _commissionRpt.ParamDate);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "Agent_Commission_CSV_CIMB_APERD" + "_" + _userID + ".csv";
                                    //string pdfPath = Tools.ReportsPath + "Agent_Commission_CSV_CIMB_APERD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Agent Commission CSV CIMB APERD");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AgentCommissionCSV> rList = new List<AgentCommissionCSV>();
                                        while (dr0.Read())
                                        {
                                            AgentCommissionCSV rSingle = new AgentCommissionCSV();
                                            rSingle.Subject = dr0["Subject"].ToString();
                                            rSingle.Commission = Convert.ToDecimal(dr0["TotalCommission"]);
                                            rSingle.AccName = dr0["AccName"].ToString();
                                            rSingle.AccNumber = dr0["AccNumber"].ToString();
                                            rSingle.Currency = dr0["Currency"].ToString();
                                            rSingle.Row = dr0["Row"].ToString();
                                            rSingle.PaymentDate = dr0["PaymentDate"].ToString();
                                            rList.Add(rSingle);

                                        }

                                        var QueryByAgent =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryByAgent)
                                        {
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AccNumber;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccName;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Currency;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Commission;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subject;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Row;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.PaymentDate;
                                                incRowExcel++;
                                            }



                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 60;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Agent Commission CSV CIMB Non APERD
            if (_commissionRpt.ReportName.Equals("Agent Commission CSV CIMB Non APERD"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =
                                @"


DECLARE @PPHCutOff NUMERIC(22,4)
declare @Counter int
SET @PPHCutOff = 0


DECLARE @Row int
DECLARE @Total NUMERIC(22,4)

DECLARE @Commission TABLE
(
NoRekening nvarchar(50),
NamaAgent nvarchar(50),
Currency nvarchar(10),
TotalKomisi numeric(19,0),
Subject nvarchar(300),
PaymentDate datetime

)


DECLARE @table TABLE
(
	Bulan INT,
	AgentPK INT,
	TotalPrevLastMonth NUMERIC(22,4),
	TotalThisMonth NUMERIC(22,4),
	TotalKomisi NUMERIC(22,4)
)



INSERT INTO @table
        ( Bulan ,
          AgentPK ,
          TotalPrevLastMonth ,
          TotalThisMonth,
		  TotalKomisi
        )

SELECT MONTH(NAVDate) Bulan
,A.AgentPK
,@PPHCutOff * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff) * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff)
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
 LEFT JOIN 
								(
									Select CurrencyPK,Rate From CurrencyRate where date = (
										Select max(Date) from CurrencyRate where status = 2 and date <= @dateTo
									) and status = 2
								) C ON B.CurrencyPK = C.CurrencyPK 
LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
AND D.BitPPH21 = 1 " + _paramAgent + @"
GROUP BY A.AgentPK,MONTH(NAVDate)


	SELECT 
		@Counter =  count(*) +1000
	FROM @table A
	LEFT JOIN
	(
		SELECT * FROM dbo.PPH21Setup WHERE status = 2
		AND date =
		(
			SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
		)
	)B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
	LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)




insert into @Commission
SELECT ISNULL(C.NoRek,'') NoRekening,C.Name NamaAgent,'IDR' Currency,
ROUND(ISNULL(A.TotalKomisi,0) - (CASE WHEN ISNULL(A.TotalKomisi,0) <> 0 THEN
		CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
	* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
		ELSE B.RangeTo * B.Percentage / 100 END
			ELSE 0 
				 END),0)  TotalKomisi
,'Komisi Penjualan valuation ' + datename(M,dateadd(MONTH,-1,@PaymentDate)) + ' ' + cast(year(dateadd(MONTH,-1,@PaymentDate)) as nvarchar(4)) Subject
,@PaymentDate PaymentDate

FROM @table A
LEFT JOIN
(
	SELECT * FROM dbo.PPH21Setup WHERE status = 2
	AND date =
	(
		SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
	)
)B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
where C.BankInformation like '%CIMB NIAGA%'
--ORDER BY C.Name

select @Row = count(*) from @Commission
select @Total = isnull(sum(TotalKomisi),0) from @Commission

select '2260100402009' AccNumber,'PT CIPTADANA ASSET MANAGEMENT' AccName,'IDR' Currency,@Total TotalCommission,
'Komisi Penjualan valuation ' + datename(M,dateadd(MONTH,-1,@PaymentDate)) + ' ' + cast(year(dateadd(MONTH,-1,@PaymentDate)) as nvarchar(4)) Subject,
CONVERT(VARCHAR(10), @Row) Row,CONVERT(VARCHAR(10), @PaymentDate, 112) PaymentDate
union all
select NoRekening,NamaAgent,Currency,TotalKomisi,Subject,'','' from @Commission

                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@PaymentDate", _commissionRpt.ParamDate);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "Agent_Commission_CSV_CIMB_Non_APERD" + "_" + _userID + ".csv";
                                    //string pdfPath = Tools.ReportsPath + "Agent_Commission_CSV_CIMB_APERD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Agent Commission CSV CIMB Non APERD");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AgentCommissionCSV> rList = new List<AgentCommissionCSV>();
                                        while (dr0.Read())
                                        {
                                            AgentCommissionCSV rSingle = new AgentCommissionCSV();
                                            rSingle.Subject = dr0["Subject"].ToString();
                                            rSingle.Commission = Convert.ToDecimal(dr0["TotalCommission"]);
                                            rSingle.AccName = dr0["AccName"].ToString();
                                            rSingle.AccNumber = dr0["AccNumber"].ToString();
                                            rSingle.Currency = dr0["Currency"].ToString();
                                            rSingle.Row = dr0["Row"].ToString();
                                            rSingle.PaymentDate = dr0["PaymentDate"].ToString();
                                            rList.Add(rSingle);

                                        }

                                        var QueryByAgent =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryByAgent)
                                        {
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AccNumber;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccName;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Currency;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Commission;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subject;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Row;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.PaymentDate;
                                                incRowExcel++;
                                            }



                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 60;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Agent Commission CSV Non CIMB APERD
            if (_commissionRpt.ReportName.Equals("Agent Commission CSV Non CIMB APERD"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =
                                @"


declare @PPHCutOff NUMERIC(22,4)
declare @Counter int
SET @PPHCutOff = 0

DECLARE @Row int
DECLARE @Total NUMERIC(22,4)

DECLARE @Commission TABLE
(
NoRekening nvarchar(50),
NamaAgent nvarchar(50),
BankName nvarchar(100),
Currency nvarchar(10),
TotalKomisi numeric(19,0),
Subject nvarchar(300),
PaymentDate datetime

)

DECLARE @tablePPH23 TABLE
(
	Bulan INT,
	AgentPK INT,
	TotalMfee NUMERIC(22,4),
	PPH23 NUMERIC(22,4),
	PPN NUMERIC(22,4),
	TotalKomisi NUMERIC(22,4)
)



INSERT INTO @tablePPH23
        ( Bulan ,
          AgentPK ,
		  TotalMfee,
		  PPH23,
		  PPN,
		  TotalKomisi
        )

SELECT MONTH(NAVDate) Bulan
,A.AgentPK
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 )
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * D.PPH23Percent / 100 
,CASE WHEN D.BitPPN = 1 THEN  (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * 0.1 ELSE 0 END
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 )
  + CASE WHEN D.BitPPN = 1 THEN  (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * 0.1 ELSE 0 END
	- (SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 ) * D.PPH23Percent / 100 
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
 LEFT JOIN 
								(
									Select CurrencyPK,Rate From CurrencyRate where date = (
										Select max(Date) from CurrencyRate where status = 2 and date <= @dateTo
									) and status = 2
								) C ON B.CurrencyPK = C.CurrencyPK 
LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
AND D.BitPPH23 = 1 " + _paramAgent + @"
GROUP BY A.AgentPK,MONTH(NAVDate),D.PPH23Percent,D.BitPPN



insert into @Commission
SELECT ISNULL(C.NoRek,'') NoRekening,C.Name NamaAgent,C.BankInformation BankName,'IDR' Currency,ROUND(ISNULL(A.TotalKomisi,0),0) TotalKomisi
,'Komisi Penjualan valuation ' + datename(M,dateadd(MONTH,-1,@PaymentDate)) + ' ' + cast(year(dateadd(MONTH,-1,@PaymentDate)) as nvarchar(4)) Subject
,@PaymentDate PaymentDate
FROM @tablePPH23 A
LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
where C.BankInformation not like '%CIMB NIAGA%'
--ORDER BY C.Name


select @Row = count(*) from @Commission
select @Total = isnull(sum(TotalKomisi),0) from @Commission

select '2260100402009' AccNumber,'PT CIPTADANA ASSET MANAGEMENT' AccName,'IDR' Currency,@Total TotalCommission,
'Komisi Penjualan valuation ' + datename(M,dateadd(MONTH,-1,@PaymentDate)) + ' ' + cast(year(dateadd(MONTH,-1,@PaymentDate)) as nvarchar(4)) Subject,
CONVERT(VARCHAR(10), @Row) Row,CONVERT(VARCHAR(10), @PaymentDate, 112) PaymentDate,'' Blank
union all
select NoRekening,NamaAgent,Currency,TotalKomisi,Subject,BankName,'Y','Y' from @Commission


                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@PaymentDate", _commissionRpt.ParamDate);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "Agent_Commission_CSV_Non_CIMB_APERD" + "_" + _userID + ".csv";
                                    //string pdfPath = Tools.ReportsPath + "Agent_Commission_CSV_CIMB_APERD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Agent Commission CSV Non CIMB APERD");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AgentCommissionCSV> rList = new List<AgentCommissionCSV>();
                                        while (dr0.Read())
                                        {
                                            AgentCommissionCSV rSingle = new AgentCommissionCSV();
                                            rSingle.Subject = dr0["Subject"].ToString();
                                            rSingle.Commission = Convert.ToDecimal(dr0["TotalCommission"]);
                                            rSingle.AccName = dr0["AccName"].ToString();
                                            rSingle.AccNumber = dr0["AccNumber"].ToString();
                                            rSingle.Currency = dr0["Currency"].ToString();
                                            rSingle.Row = dr0["Row"].ToString();
                                            rSingle.PaymentDate = dr0["PaymentDate"].ToString();
                                            rSingle.Blank = dr0["Blank"].ToString();
                                            rList.Add(rSingle);

                                        }

                                        var QueryByAgent =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryByAgent)
                                        {
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AccNumber;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccName;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Currency;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Commission;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subject;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Row;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.PaymentDate;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Blank;
                                                incRowExcel++;
                                            }



                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 60;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Agent Commission CSV Non CIMB Non APERD
            if (_commissionRpt.ReportName.Equals("Agent Commission CSV Non CIMB Non APERD"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =
                                @"

DECLARE @PPHCutOff NUMERIC(22,4)
declare @Counter int
SET @PPHCutOff = 0


DECLARE @Row int
DECLARE @Total NUMERIC(22,4)

DECLARE @Commission TABLE
(
NoRekening nvarchar(50),
NamaAgent nvarchar(50),
BankName nvarchar(100),
Currency nvarchar(10),
TotalKomisi numeric(19,0),
Subject nvarchar(300),
PaymentDate datetime

)


DECLARE @table TABLE
(
	Bulan INT,
	AgentPK INT,
	TotalPrevLastMonth NUMERIC(22,4),
	TotalThisMonth NUMERIC(22,4),
	TotalKomisi NUMERIC(22,4)
)



INSERT INTO @table
        ( Bulan ,
          AgentPK ,
          TotalPrevLastMonth ,
          TotalThisMonth,
		  TotalKomisi
        )

SELECT MONTH(NAVDate) Bulan
,A.AgentPK
,@PPHCutOff * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff) * 0.5
,(SUM(A.MFee * CASE WHEN B.CurrencyPK <> 1 THEN C.Rate ELSE 1 END ) / 1.1 + @PPHCutOff)
FROM dbo.DailyDataForAgentCommissionRpt A
LEFT JOIN Fund B ON A.fundPK = B.FundpK AND B.Status IN (1,2)
 LEFT JOIN 
								(
									Select CurrencyPK,Rate From CurrencyRate where date = (
										Select max(Date) from CurrencyRate where status = 2 and date <= @dateTo
									) and status = 2
								) C ON B.CurrencyPK = C.CurrencyPK 
LEFT JOIN Agent D ON A.AgentPK = D.AgentPK AND D.status IN (1,2)
WHERE  NAVDate BETWEEN @Datefrom AND @DateTo
AND D.BitPPH21 = 1 " + _paramAgent + @"
GROUP BY A.AgentPK,MONTH(NAVDate)


	SELECT 
		@Counter =  count(*) +1000
	FROM @table A
	LEFT JOIN
	(
		SELECT * FROM dbo.PPH21Setup WHERE status = 2
		AND date =
		(
			SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
		)
	)B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
	LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)




insert into @Commission
SELECT ISNULL(C.NoRek,'') NoRekening,C.Name NamaAgent,C.BankInformation BankName,'IDR' Currency,
ROUND(ISNULL(A.TotalKomisi,0) - (CASE WHEN ISNULL(A.TotalKomisi,0) <> 0 THEN
		CASE WHEN A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo THEN (A.TotalThisMonth - B.RangeFrom + 1) 
	* (B.Percentage / 100 + CASE WHEN LEN(ISNULL(C.NPWPNo,'')) > 4 THEN 0 ELSE (B.Percentage / 100 * 0.2) END)
		ELSE B.RangeTo * B.Percentage / 100 END
			ELSE 0 
				 END),0)  TotalKomisi
,'Komisi Penjualan valuation ' + datename(M,dateadd(MONTH,-1,@PaymentDate)) + ' ' + cast(year(dateadd(MONTH,-1,@PaymentDate)) as nvarchar(4)) Subject
,@PaymentDate PaymentDate

FROM @table A
LEFT JOIN
(
	SELECT * FROM dbo.PPH21Setup WHERE status = 2
	AND date =
	(
		SELECT MAX(date) FROM dbo.PPH21Setup WHERE status = 2
	)
)B ON A.TotalThisMonth BETWEEN B.RangeFrom AND B.RangeTo or A.TotalThisMonth > B.RangeTo
LEFT JOIN Agent C ON A.AgentPK = C.AgentPK AND C.status IN (1,2)
where C.BankInformation not like '%CIMB NIAGA%'
--ORDER BY C.Name

select @Row = count(*) from @Commission
select @Total = isnull(sum(TotalKomisi),0) from @Commission

select '2260100402009' AccNumber,'PT CIPTADANA ASSET MANAGEMENT' AccName,'IDR' Currency,@Total TotalCommission,
'Komisi Penjualan valuation ' + datename(M,dateadd(MONTH,-1,@PaymentDate)) + ' ' + cast(year(dateadd(MONTH,-1,@PaymentDate)) as nvarchar(4)) Subject,
CONVERT(VARCHAR(10), @Row) Row,CONVERT(VARCHAR(10), @PaymentDate, 112) PaymentDate,'' Blank
union all
select NoRekening,NamaAgent,Currency,TotalKomisi,Subject,BankName,'Y','Y' from @Commission


                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@PaymentDate", _commissionRpt.ParamDate);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "Agent_Commission_CSV_Non_CIMB_Non_APERD" + "_" + _userID + ".csv";
                                    //string pdfPath = Tools.ReportsPath + "Agent_Commission_CSV_CIMB_APERD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Agent Commission CSV Non CIMB APERD");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AgentCommissionCSV> rList = new List<AgentCommissionCSV>();
                                        while (dr0.Read())
                                        {
                                            AgentCommissionCSV rSingle = new AgentCommissionCSV();
                                            rSingle.Subject = dr0["Subject"].ToString();
                                            rSingle.Commission = Convert.ToDecimal(dr0["TotalCommission"]);
                                            rSingle.AccName = dr0["AccName"].ToString();
                                            rSingle.AccNumber = dr0["AccNumber"].ToString();
                                            rSingle.Currency = dr0["Currency"].ToString();
                                            rSingle.Row = dr0["Row"].ToString();
                                            rSingle.PaymentDate = dr0["PaymentDate"].ToString();
                                            rSingle.Blank = dr0["Blank"].ToString();
                                            rList.Add(rSingle);

                                        }

                                        var QueryByAgent =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryByAgent)
                                        {
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AccNumber;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccName;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Currency;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Commission;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subject;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Row;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.PaymentDate;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Blank;
                                                incRowExcel++;
                                            }



                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 60;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            else
            {
                return false;
            }
        }


        public Boolean GenerateReportAccounting(string _userID, AccountingRpt _accountingRpt)
        {
            // yang uda dibenerin
            #region General Ledger
            if (_accountingRpt.ReportName.Equals("General Ledger"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4)";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                            }
                            cmd.CommandText = @"
	                        Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            ------
                            DECLARE @AccountRpt TABLE
                            (
                            AccountPK int
                            )

                            INSERT INTO @AccountRpt
                            ( AccountPK )
                            SELECT DISTINCT B.AccountPK 
                            FROM journal A  
                            LEFT join journalDetail B on A.JournalPK = B.JournalPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                            and A.PeriodPK = @PeriodPK 


                            DECLARE @AccountBalance TABLE
                            (
                            AccountPK INT,
                            StartBalance NUMERIC(22,4)
                            )

                            INSERT INTO @AccountBalance
                            ( AccountPK, StartBalance )
                            SELECT AccountPK,[dbo].[FGetStartAccountBalance](@ValueDateFrom,AccountPK) FROM @AccountRpt
                            ------


                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                            isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
                            isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                            B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance ,    
                            case when Reference = '' or Reference is null then 0 else cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) end RefNo       
                            from journal A    
                            left join journalDetail B on A.JournalPK = B.JournalPK    
                            left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)    
                            left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in (1,2)    
                            left join Office E on B.OfficePK = E.OfficePK and E.status in (1,2)    
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in (1,2)    
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in (1,2)    
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in (1,2)    
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in (1,2)  
                            LEFT JOIN @AccountBalance J ON B.AccountPK  = J.AccountPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                            and A.PeriodPK = @PeriodPK 
                             " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "GeneralLedger" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "GeneralLedger" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("General Ledger");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = dr0["RefNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByAccountID =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance, r.Rate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        int _rowEndBalanceUSD = 0;
                                        foreach (var rsHeader in GroupByAccountID)
                                        {

                                            if (rsHeader.Key.CurrencyID == "USD")
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 8].Value = "BEG BALANCE :";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 8].Value = "IN USD :";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.StartBalance / rsHeader.Key.Rate;
                                                worksheet.Cells[incRowExcel, 9].Calculate();

                                                _rowEndBalanceUSD = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "DEPT";
                                                worksheet.Cells[incRowExcel, 6].Value = "INST";
                                                worksheet.Cells[incRowExcel, 7].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 8].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 9].Value = "BALANCE";
                                                worksheet.Cells[incRowExcel, 10].Value = "RATE";
                                                worksheet.Cells[incRowExcel, 11].Value = "DEBIT IN USD";
                                                worksheet.Cells[incRowExcel, 12].Value = "CREDIT IN USD";
                                                worksheet.Cells[incRowExcel, 13].Value = "BALANCE IN USD";

                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 8].Value = "BEG BALANCE :";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "DEPT";
                                                worksheet.Cells[incRowExcel, 6].Value = "INST";
                                                worksheet.Cells[incRowExcel, 7].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 8].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 9].Value = "BALANCE";
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }


                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                //area detail

                                                if (rsHeader.Key.CurrencyID == "USD")
                                                {

                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;


                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.DepartmentID;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Formula = "I" + _rowEndBalance + "+G" + incRowExcel + "-H" + incRowExcel;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Formula = "I" + _rowEndBalance + "-G" + incRowExcel + "+H" + incRowExcel;
                                                    }
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Rate;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.Debit;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Credit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 13].Formula = "I" + _rowEndBalanceUSD + "+K" + incRowExcel + "-L" + incRowExcel;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 13].Formula = "I" + _rowEndBalanceUSD + "-K" + incRowExcel + "+L" + incRowExcel;
                                                    }


                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                    //worksheet.Cells[incRowExcel, 9].Calculate();
                                                }
                                                else
                                                {

                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.DepartmentID;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Formula = "I" + _rowEndBalance + "+G" + incRowExcel + "-H" + incRowExcel;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Formula = "I" + _rowEndBalance + "-G" + incRowExcel + "+H" + incRowExcel;
                                                    }
                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                    //worksheet.Cells[incRowExcel, 9].Calculate();
                                                }


                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;

                                                _no++;


                                            }

                                            worksheet.Cells["I" + _startRowDetail + ":I" + _rowEndBalance].Calculate();
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _rowEndBalanceUSD].Calculate();

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:M";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(10).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).Width = 30;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region General Ledger Plain
            else if (_accountingRpt.ReportName.Equals("General Ledger Plain"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4)";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                            }
                            cmd.CommandText = @"
                            Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            ------
                            DECLARE @AccountRpt TABLE
                            (
                            AccountPK int
                            )

                            INSERT INTO @AccountRpt
                            ( AccountPK )
                            SELECT DISTINCT B.AccountPK 
                            FROM journal A  
                            LEFT join journalDetail B on A.JournalPK = B.JournalPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                            and A.PeriodPK = @PeriodPK 


                            DECLARE @AccountBalance TABLE
                            (
                            AccountPK INT,
                            StartBalance NUMERIC(22,4),
                            StartRate NUMERIC(22,4)
                            )

                            INSERT INTO @AccountBalance
                            ( AccountPK, StartBalance, StartRate )
                            SELECT A.AccountPK,[dbo].[FGetStartAccountBalance](@ValueDateFrom,A.AccountPK),C.Rate FROM @AccountRpt A
                            left join Account B on A.AccountPK = B.AccountPK and B.status in (1,2)
                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.status in (1,2)
                            where C.Date = (select max(Date) from CurrencyRate where Date <= @valuedatefrom and status = 2) and B.CurrencyPK <> 1


                            INSERT INTO @AccountBalance
                            ( AccountPK, StartBalance, StartRate )
                            SELECT A.AccountPK,[dbo].[FGetStartAccountBalance](@ValueDateFrom,A.AccountPK),1 FROM @AccountRpt A
                            left join Account B on A.AccountPK = B.AccountPK and B.status in (1,2)
                            where B.CurrencyPK = 1
                            ------

                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                            isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
                            isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                            B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance ,    
                            cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) RefNo,isnull(J.StartRate,0)  StartRate      
                            from journal A    
                            left join journalDetail B on A.JournalPK = B.JournalPK and B.status in (1,2)    
                            left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)    
                            left join Currency D on C.CurrencyPK = D.CurrencyPK and D.status in (1,2)    
                            left join Office E on B.OfficePK = E.OfficePK and E.status in (1,2)    
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in (1,2)    
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in (1,2)    
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in (1,2)    
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in (1,2)  
                            LEFT JOIN @AccountBalance J ON B.AccountPK  = J.AccountPK    
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                            and A.PeriodPK = @PeriodPK
                             " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument + @"
                              order by A.ValueDate asc";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "GeneralLedgerPlain" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "GeneralLedgerPlain" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("General Ledger Plain");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {

                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.StartRate = dr0["StartRate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartRate"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                         from r in rList
                                         orderby r.AccountID, r.ValueDate ascending
                                         group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance, r.StartRate } into rGroup
                                         select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        int _rowEndBalanceUSD = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            if (rsHeader.Key.CurrencyID == "USD")
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 10].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 11].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 10].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 11].Value = _accountingRpt.ValueDateTo;
                                                incRowExcel++;



                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Color.SetColor(Color.White);

                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 10].Value = "BEG BALANCE";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 10].Value = "IN USD";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.StartBalance / rsHeader.Key.StartRate;
                                                //worksheet.Cells[incRowExcel, 11].Calculate();
                                                _rowEndBalanceUSD = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                                worksheet.Cells[incRowExcel, 8].Value = "RATE";
                                                worksheet.Cells[incRowExcel, 9].Value = "DEBIT IN USD";
                                                worksheet.Cells[incRowExcel, 10].Value = "CREDIT IN USD";
                                                worksheet.Cells[incRowExcel, 11].Value = "BALANCE IN USD";
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 7].Value = "BALANCE";

                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }


                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                if (rsHeader.Key.CurrencyID == "USD")
                                                {

                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                    //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Rate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Debit;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Credit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _rowEndBalanceUSD + "+I" + incRowExcel + "-J" + incRowExcel + ")";
                                                        ////worksheet.Cells[incRowExcel, 11].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _rowEndBalanceUSD + "-I" + incRowExcel + "+J" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                    }


                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                }
                                                else
                                                {

                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                    //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                        ////worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                }


                                                _rowEndBalance = incRowExcel;
                                                _rowEndBalanceUSD = incRowExcel;

                                                incRowExcel++;

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }

                                            worksheet.Cells["G" + _rowEndBalance + ":G" + _rowEndBalance].Calculate();
                                            worksheet.Cells["K" + _rowEndBalanceUSD + ":K" + _rowEndBalanceUSD].Calculate();

                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:K";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        }
                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(8).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 30;
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).Width = 30;
                                        worksheet.Column(11).Width = 30;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY PLAIN";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region General Ledger By INSTRUMENT
            else if (_accountingRpt.ReportName.Equals("General Ledger By INSTRUMENT"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramInstrument = "";
                            string _paramAccount = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0  ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1  ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0  ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4)  ";
                            }
                            cmd.CommandText = @"
                            
                            Create Table #ZParamFrom                  
                            (                   
                            AccountPK int,
                            InstrumentPK int
                            )      

                            CREATE CLUSTERED INDEX indx_ZFundFrom  ON #ZParamFrom (AccountPK,InstrumentPK);

                            Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2


                            insert into #ZParamFrom(AccountPK,InstrumentPK)
                            SELECT DISTINCT B.AccountPK, B.InstrumentPK
                            FROM journal A  
                            LEFT join journalDetail B on A.JournalPK = B.JournalPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                            and A.PeriodPK = @PeriodPK --and B.AccountPK in (6,31) --and B.InstrumentPK in (1967)--
                            " + _paramAccount + _paramInstrument + @"

                            DECLARE @AccountBalance TABLE
                            (
                            AccountPK INT,InstrumentPK INT,
                            StartBalance NUMERIC(22,4),
                            StartBalanceUSD NUMERIC(22,8)
                            )

                            INSERT INTO @AccountBalance
                            ( AccountPK,InstrumentPK, StartBalance, StartBalanceUSD )
                            SELECT A.AccountPK,InstrumentPK,[dbo].[FGetStartAccountBalanceByInstrumentPK](@ValueDateFrom,A.AccountPK,InstrumentPK),[dbo].[FGetStartAccountBalanceByInstrumentPK](@ValueDateFrom,A.AccountPK,InstrumentPK) / isnull(D.Rate,1) FROM #ZParamFrom A
                            left join Account B on A.AccountPK = B.AccountPK and B.status in (1,2)
                            left join Currency C on B.CurrencyPK = C.CurrencyPK and C.status in (1,2)
                            left join CurrencyRate D on C.CurrencyPK = D.CurrencyPK and D.status in (1,2)
                            and D.Date =(
                            Select Max(Date) From CurrencyRate where status = 2 and Date <= @valuedateFrom
                            ) and A.AccountPK in (select AccountPK from #ZParamFrom) and A.InstrumentPK in (select InstrumentPK from #ZParamFrom)
                            ------

                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName, 
                            D.ID CurrencyID,isnull(E.ID,'Belum Dialokasi') AS OfficeID,isnull(F.ID,'Belum Dialokasi') AS DepartmentID,isnull(G.ID,'Belum Dialokasi') AS AgentID,
                            isnull(H.ID,'Belum Dialokasi') AS ConsigneeID, 
                            isnull(I.ID,'Belum Dialokasi') AS InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,isnull(K.Rate,1) Rate, 
                            B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance,isnull(J.StartBalanceUSD,0) StartBalanceUSD ,isnull(I.CurrencyPK,1) CurrencyInstrument From Journal A
                            left join journalDetail B on A.JournalPK = B.JournalPK 
                            left join Account C on B.AccountPK = C.AccountPK and C.status in(1,2)
                            left join Currency D on C.CurrencyPK = D.CurrencyPK and D.status in(1,2)
                            left join Office E on B.OfficePK = E.OfficePK and E.status in(1,2) 
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in(1,2)
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in(1,2)
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in(1,2)
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in(1,2)
                            left join @AccountBalance J ON B.AccountPK  = J.AccountPK and B.InstrumentPK = J.InstrumentPK
                            left join CurrencyRate K ON D.CurrencyPK  = K.CurrencyPK and K.Status in (1,2)
                            and K.Date =(
                            Select Max(Date) From CurrencyRate where status = 2 and Date <= A.ValueDate
                            ) 
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo  and A.PeriodPK = @PeriodPK   " + _status + @" and B.Amount > 0
                            And B.AccountPK  in (select AccountPK from #ZParamFrom) And B.InstrumentPK  in (select InstrumentPK from #ZParamFrom) order by I.ID asc";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "GeneralLedgerByInstrument" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "GeneralLedgerByInstrument" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("General Ledger By Instrument");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.StartBalanceUSD = dr0["StartBalanceUSD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalanceUSD"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.CurrencyInstrument = dr0["CurrencyInstrument"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["CurrencyInstrument"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.ValueDate ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance, r.InstrumentID, r.StartBalanceUSD, r.CurrencyInstrument } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        int _rowEndBalanceUSD = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            if (rsHeader.Key.CurrencyID == "USD" || rsHeader.Key.CurrencyInstrument == 2)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 10].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 11].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 10].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 11].Value = _accountingRpt.ValueDateTo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "INST : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentID;


                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Color.SetColor(Color.White);

                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 10].Value = "BEG BALANCE";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 10].Value = "IN USD";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.StartBalanceUSD;
                                                //worksheet.Cells[incRowExcel, 11].Calculate();
                                                _rowEndBalanceUSD = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                                worksheet.Cells[incRowExcel, 8].Value = "RATE";
                                                worksheet.Cells[incRowExcel, 9].Value = "DEBIT IN USD";
                                                worksheet.Cells[incRowExcel, 10].Value = "CREDIT IN USD";
                                                worksheet.Cells[incRowExcel, 11].Value = "BALANCE IN USD";
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "INST : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 7].Value = "BALANCE";

                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }


                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                if (rsHeader.Key.CurrencyID == "USD" || rsHeader.Key.CurrencyInstrument == 2)
                                                {

                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                    //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Rate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Debit;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Credit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _rowEndBalanceUSD + "+I" + incRowExcel + "-J" + incRowExcel + ")";
                                                        ////worksheet.Cells[incRowExcel, 11].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _rowEndBalanceUSD + "-I" + incRowExcel + "+J" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                    }


                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                }
                                                else
                                                {

                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                    //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                        ////worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                }


                                                _rowEndBalance = incRowExcel;
                                                _rowEndBalanceUSD = incRowExcel;

                                                incRowExcel++;

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }

                                            worksheet.Cells["G" + _rowEndBalance + ":G" + _rowEndBalance].Calculate();
                                            worksheet.Cells["K" + _rowEndBalanceUSD + ":K" + _rowEndBalanceUSD].Calculate();

                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:K";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(8).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 12;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 30;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY BY INSTRUMENT";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region General Ledger By DEPT
            else if (_accountingRpt.ReportName.Equals("General Ledger By DEPT"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramDepartment = "";
                            string _paramAccount = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.Status not in (3,4)  ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0  and A.Status not in (3,4) ";
                            }
                            cmd.CommandText = @"
                            ------
                            DECLARE @AccountRpt TABLE
                            (
                            AccountPK int,
                            DepartmentPK int
                            )

                            INSERT INTO @AccountRpt
                            ( AccountPK,DepartmentPK )
                            SELECT DISTINCT B.AccountPK , B.DepartmentPK
                            FROM journal A  
                            LEFT join journalDetail B on A.JournalPK = B.JournalPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                            --and A.PeriodPK = @PeriodPK 


                            DECLARE @AccountBalance TABLE
                            (
                            AccountPK INT, DepartmentPK INT,
                            StartBalance NUMERIC(22,4)
                            )

                            INSERT INTO @AccountBalance
                            ( AccountPK,DepartmentPK, StartBalance )
                            SELECT AccountPK,DepartmentPK,[dbo].[FGetStartAccountBalanceByDepartmentPK](@ValueDateFrom,AccountPK,DepartmentPK) FROM @AccountRpt
                            ------

                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                            D.ID CurrencyID,E.ID OfficeID,isnull(F.ID,'Belum Dialokasi') AS DepartmentID,G.ID AgentID,H.ID ConsigneeID,    
                            I.ID InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                            B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance    
                            from journal A    
                            left join journalDetail B on A.JournalPK = B.JournalPK    
                            left join Account C on B.AccountPK = C.AccountPK and C.status in(1,2)  
                            left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in(1,2)  
                            left join Office E on B.OfficePK = E.OfficePK and E.status in(1,2)   
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in(1,2)   
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in(1,2) 
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in(1,2)   
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in(1,2) 
                            LEFT JOIN @AccountBalance J ON B.AccountPK  = J.AccountPK and B.DepartmentPK = J.DepartmentPK  
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo and year(A.ValueDate) = YEAR(@ValueDateTo) and A.description <> 'PERIOD CLOSING'    
                               " + _status + _paramDepartment + _paramAccount;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "GeneralLedgerByDept" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "GeneralLedgerByDept" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("General Ledger By Dept");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();



                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance, r.DepartmentID, r.Rate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        int _rowEndBalanceUSD = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            if (rsHeader.Key.CurrencyID == "USD")
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "DEPT ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.DepartmentID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "IN USD";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance / rsHeader.Key.Rate;
                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                _rowEndBalanceUSD = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                                worksheet.Cells[incRowExcel, 8].Value = "RATE";
                                                worksheet.Cells[incRowExcel, 9].Value = "DEBIT IN USD";
                                                worksheet.Cells[incRowExcel, 10].Value = "CREDIT IN USD";
                                                worksheet.Cells[incRowExcel, 11].Value = "BALANCE IN USD";
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "DEPT ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.DepartmentID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }


                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                if (rsHeader.Key.CurrencyID == "USD")
                                                {


                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                    //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Rate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Debit;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Credit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(G" + _rowEndBalanceUSD + "+I" + incRowExcel + "-J" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(G" + _rowEndBalanceUSD + "-I" + incRowExcel + "+J" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                    }


                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                }
                                                else
                                                {


                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                    //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                }

                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;

                                                _no++;


                                            }

                                            worksheet.Cells["G" + _rowEndBalance + ":G" + _rowEndBalance].Calculate();
                                            worksheet.Cells["K" + _rowEndBalanceUSD + ":K" + _rowEndBalanceUSD].Calculate();


                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:K";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(8).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).Width = 30;
                                        worksheet.Column(11).Width = 30;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY BY DEPT";
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region General Ledger By DIRECT
            else if (_accountingRpt.ReportName.Equals("General Ledger By DIRECT"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAgent = "";
                            string _paramAccount = "";


                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And G.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0  ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                            }
                            cmd.CommandText = @"
                                ------
                                DECLARE @AccountRpt TABLE
                                (
                                AccountPK int,
                                AgentPK int
                                )

                                INSERT INTO @AccountRpt
                                ( AccountPK,AgentPK )
                                SELECT DISTINCT B.AccountPK, B.AgentPK
                                FROM journal A  
                                LEFT join journalDetail B on A.JournalPK = B.JournalPK   
                                Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                                --and A.PeriodPK = @PeriodPK 


                                DECLARE @AccountBalance TABLE
                                (
                                AccountPK INT,AgentPK INT,
                                StartBalance NUMERIC(22,4)
                                )

                                INSERT INTO @AccountBalance
                                ( AccountPK,AgentPK, StartBalance )
                                SELECT AccountPK,AgentPK,[dbo].[FGetStartAccountBalanceByAgentPK](@ValueDateFrom,AccountPK,AgentPK) FROM @AccountRpt
                                ------

                                select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName, 
                                D.ID CurrencyID,isnull(E.ID,'Belum Dialokasi') AS OfficeID,isnull(F.ID,'Belum Dialokasi') AS DepartmentID,isnull(G.Name,'Belum Dialokasi') AS AgentName,isnull(H.ID,'') ConsigneeID, 
                                isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate, 
                                B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance 
                                from journal A 
                                left join journalDetail B on A.JournalPK = B.JournalPK 
                                left join Account C on B.AccountPK = C.AccountPK and C.status in(1,2) 
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in(1,2)
                                left join Office E on B.OfficePK = E.OfficePK and E.status in(1,2)
                                left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in(1,2)
                                left join Agent G on B.AgentPK = G.AgentPK and G.status in(1,2) 
                                left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in(1,2) 
                                left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in(1,2)
                                LEFT JOIN @AccountBalance J ON B.AccountPK  = J.AccountPK and B.AgentPK = J.AgentPK
                                Where A.ValueDate Between @ValueDateFrom and @ValueDateTo and year(A.ValueDate) = YEAR(@ValueDateTo)  and A.description <> 'PERIOD CLOSING'  " +
                                             _status + _paramAgent + _paramAccount +
                                            @" Order By A.ValueDate, A.JournalPK ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "GeneralLedgerByDirect" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "GeneralLedgerByDirect" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("General Ledger By Direct");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentName"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance, r.AgentID, r.Rate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        int _rowEndBalanceUSD = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            if (rsHeader.Key.CurrencyID == "USD")
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "DIRECT : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AgentID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "IN USD";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance / rsHeader.Key.Rate;


                                                _rowEndBalanceUSD = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                                worksheet.Cells[incRowExcel, 8].Value = "RATE";
                                                worksheet.Cells[incRowExcel, 9].Value = "DEBIT IN USD";
                                                worksheet.Cells[incRowExcel, 10].Value = "CREDIT IN USD";
                                                worksheet.Cells[incRowExcel, 11].Value = "BALANCE IN USD";

                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "DIRECT : ";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AgentID;
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE";
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {

                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {


                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                                worksheet.Cells[incRowExcel, 3].Value = "REF";
                                                worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                                worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                                worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                                worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }


                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsHeader.Key.CurrencyID == "USD")
                                                {
                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    //area detail

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;

                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Rate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Debit;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Credit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(G" + _rowEndBalanceUSD + "+I" + incRowExcel + "-J" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(G" + _rowEndBalanceUSD + "-I" + incRowExcel + "+J" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                    }


                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                }
                                                else
                                                {
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    //area detail

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;

                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                    if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                        ////worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();
                                                    }
                                                    if (_accountingRpt.DecimalPlaces == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 4)
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    }
                                                    else if (_accountingRpt.DecimalPlaces == 6)
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                    }
                                                    else
                                                    {

                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                    }
                                                }

                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }

                                            worksheet.Cells["G" + _rowEndBalance + ":G" + _rowEndBalance].Calculate();
                                            worksheet.Cells["K" + _rowEndBalanceUSD + ":K" + _rowEndBalanceUSD].Calculate();

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;
                                            worksheet.PrinterSettings.Scale = 70;
                                        }
                                        string _rangeDetail = "A:K";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(8).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).Width = 30;
                                        worksheet.Column(11).Width = 30;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY BY DIRECT";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            else
            {
                return false;
            }
        }

        public Boolean GenerateReportFundAccounting(string _userID, FundAccountingRpt _FundAccountingRpt)
        {
            #region Daily Deal Board
            if (_FundAccountingRpt.ReportName.Equals("DAILY DEAL BOARD"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            // FUND
                            cmd.CommandText = @"
                            
                            select distinct A.FundPK from Fund A
                            where A.status in (1,2)
                            " + _paramFund;

                            cmd.CommandTimeout = 0;

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {

                                if (dr0.HasRows)
                                {

                                    string filePath = Tools.ReportsPath + "DAILYDEALBOARD" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DAILYDEALBOARD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("DAILY DEAL BOARD");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailyDealBoard> rList = new List<DailyDealBoard>();
                                        while (dr0.Read())
                                        {
                                            DailyDealBoard rSingle = new DailyDealBoard();
                                            rSingle.FundPK = Convert.ToString(dr0["FundPK"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByFund =
                                        from r in rList
                                        orderby r.FundPK ascending
                                        group r by new { r.FundPK } into rGroup
                                        select rGroup;

                                        int incRowExcel = 1;
                                        //int _colCurrency = 0;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsHeader in GroupByFund)
                                        {




                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText =


                                                   @"   


DECLARE @table TABLE
(
	FundPK INT,
	Baris INT,
	TotalSent INT,
	Reference NVARCHAR(2000)
)


DECLARE @Reference NVARCHAR(1000)
SET @reference = ''

DECLARE @totalTrx INT
SET @totalTrx = 0

SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (1,4,16)
AND FundPK = @FundPK
GROUP BY CounterpartPK,InstrumentPK,TrxType

set @totalTrx =  @@ROWCOUNT

SELECT @Reference = @Reference + ' , ' + reference FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND FundPK = @FundPK
AND InstrumentTypePK IN (1,4,16)
order by Reference


INSERT INTO @table
        ( FundPK, Baris, TotalSent, Reference )

SELECT @FundPK,1,@totalTrx,@Reference

SET @reference = ''
SET @totalTrx = 0

SELECT @totalTrx=COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (2,3,13,15)
AND FundPK = @FundPK
GROUP BY CounterpartPK,InstrumentPK,TrxType


set @totalTrx =  @@ROWCOUNT

SELECT @Reference = @Reference + ' , ' + reference FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (2,3,13,15)
AND FundPK = @FundPK
order by Reference

INSERT INTO @table
        ( FundPK, Baris, TotalSent, Reference )

SELECT @FundPK,2,@totalTrx,@Reference


SET @reference = ''
SET @totalTrx = 0

SELECT @totalTrx=COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (12)
AND FundPK = @FundPK
GROUP BY CounterpartPK,InstrumentPK,TrxType

set @totalTrx =  @@ROWCOUNT

SELECT @Reference = @Reference + ' , ' + reference FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (12)
AND FundPK = @FundPK
order by Reference

INSERT INTO @table
        ( FundPK, Baris, TotalSent, Reference )

SELECT @FundPK,3,@totalTrx,@Reference


SET @reference = ''
SET @totalTrx = 0

SELECT @totalTrx=COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (5)
AND FundPK = @FundPK
GROUP BY CounterpartPK,InstrumentPK,TrxType

set @totalTrx =  @@ROWCOUNT

SELECT @Reference = @Reference + ' , ' + reference FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (5)
AND FundPK = @FundPK
order by Reference


INSERT INTO @table
        ( FundPK, Baris, TotalSent, Reference )

SELECT @FundPK,4,@totalTrx,@Reference


SET @reference = ''
SET @totalTrx = 0

SELECT @totalTrx = ClientSubscriptionPK FROM dbo.ClientSubscription WHERE status = 2 
AND NAVDate = @Date
AND FundPK = @FundPK



set @totalTrx =  @@ROWCOUNT


SELECT @Reference = @Reference + ' , ' + CASE when ISNULL(ReferenceSInvest,'') <> '' THEN ReferenceSInvest ELSE CAST(ClientSubscriptionPK AS NVARCHAR(100)) + '/SUB' END 
FROM dbo.ClientSubscription WHERE status = 2 
AND NAVDate = @Date
AND FundPK = @FundPK
order by ReferenceSInvest

INSERT INTO @table
        ( FundPK, Baris, TotalSent, Reference )

SELECT @FundPK,5,@totalTrx,@Reference


SET @reference = ''
SET @totalTrx = 0

SELECT @totalTrx = ClientRedemptionPK FROM dbo.ClientRedemption WHERE status = 2 
AND NAVDate = @Date
AND FundPK = @FundPK



set @totalTrx =  @@ROWCOUNT


SELECT @Reference = @Reference + ' , ' + CASE when ISNULL(ReferenceSInvest,'') <> '' THEN ReferenceSInvest ELSE CAST(ClientRedemptionPK AS NVARCHAR(100)) + '/RED' END 
FROM dbo.ClientRedemption WHERE status = 2 
AND NAVDate = @Date
AND FundPK = @FundPK
order by ReferenceSInvest


INSERT INTO @table
        ( FundPK,Baris, TotalSent, Reference )

SELECT @FundPK,6,@totalTrx,@Reference


SET @reference = ''
SET @totalTrx = 0

SELECT @totalTrx = ClientSwitchingPK FROM dbo.ClientSwitching WHERE status = 2 
AND NAVDate = @Date
AND (FundPKFrom = @FundPK OR FundPKTo = @FundPK)



set @totalTrx =  @@ROWCOUNT


SELECT @Reference = @Reference + ' , ' + CASE when ISNULL(ReferenceSInvest,'') <> '' THEN ReferenceSInvest ELSE CAST(ClientSwitchingPK AS NVARCHAR(100)) + '/SWI' END 
FROM dbo.ClientSwitching WHERE status = 2 
AND NAVDate = @Date
AND (FundPKFrom = @FundPK OR FundPKTo = @FundPK)
order by ReferenceSInvest

INSERT INTO @table
        ( FundPK,Baris, TotalSent, Reference )

SELECT @FundPK,7,@totalTrx,@Reference

--if exists (
--	select * from @Table where isnull(Reference,'') <> ''
--)
--BEGIN
 select * from @Table
--END
--ELSE
--BEGIN
--	return
--END

";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                                                    cmd1.ExecuteNonQuery();


                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {

                                                        if (dr1.HasRows)
                                                        {
                                                            incRowExcel++;
                                                            //worksheet.Cells[incRowExcel, 1].Value = "DAILY DEAL BOARD";
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            incRowExcel = incRowExcel + 2;
                                                            worksheet.Cells[incRowExcel, 1].Value = "TO";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankCustodianName(rsHeader.Key.FundPK);
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "ATTN";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankBranchAttendance(rsHeader.Key.FundPK);
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "FAX";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankBranchFax(rsHeader.Key.FundPK);
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Telp";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankBranchPhone(rsHeader.Key.FundPK);
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "From";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Company Telp";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyPhone();
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Subject";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = "DAILY DEAL BOARD";
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundName(rsHeader.Key.FundPK);
                                                            incRowExcel = incRowExcel + 3;

                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<DailyDealBoard> rList1 = new List<DailyDealBoard>();
                                                                while (dr1.Read())
                                                                {
                                                                    DailyDealBoard rSingle1 = new DailyDealBoard();
                                                                    rSingle1.FundPK = Convert.ToString(dr1["FundPK"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["FundPK"]));
                                                                    rSingle1.Baris = Convert.ToInt32(dr1["Baris"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["Baris"]));
                                                                    rSingle1.TotalSent = Convert.ToInt32(dr1["TotalSent"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["TotalSent"]));
                                                                    rSingle1.Reference = Convert.ToString(dr1["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["Reference"]));

                                                                    rList1.Add(rSingle1);

                                                                }

                                                                incRowExcel++;
                                                                var GroupByReference1 =
                                                                from r1 in rList1
                                                                group r1 by new { } into rGroup1
                                                                select rGroup1;

                                                                foreach (var rsHeader1 in GroupByReference1)
                                                                {

                                                                    worksheet.Cells[incRowExcel, 1].Value = "Type of Transaction";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Total Sent";
                                                                    worksheet.Cells[incRowExcel, 4].Value = "Reference Number";

                                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                    worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);



                                                                    int _inc; int _equity; int _bond; int _sbi; int _deposito;
                                                                    foreach (var rsDetail1 in rsHeader1)
                                                                    {
                                                                        _inc = incRowExcel;

                                                                        if (rsDetail1.Baris == 1)
                                                                        {
                                                                            _equity = _inc + 1;
                                                                            worksheet.Cells[_equity, 1].Value = "Purchase & Sale of Securities";
                                                                            worksheet.Cells[_equity, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_equity, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_equity, 2, _equity, 3].Merge = true;
                                                                            worksheet.Cells[_equity, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_equity, 2, _equity, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_equity, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 2)
                                                                        {
                                                                            _bond = _inc + 3;
                                                                            worksheet.Cells[_bond, 1].Value = "Purchase & Sale of Bond";
                                                                            worksheet.Cells[_bond, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_bond, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_bond, 2, _bond, 3].Merge = true;
                                                                            worksheet.Cells[_bond, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_bond, 2, _bond, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_bond, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 3)
                                                                        {
                                                                            _sbi = _inc + 4;
                                                                            worksheet.Cells[_sbi, 1].Value = "Purchase & Sale of SBI";
                                                                            worksheet.Cells[_sbi, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_sbi, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_sbi, 2, _sbi, 3].Merge = true;
                                                                            worksheet.Cells[_sbi, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_sbi, 2, _sbi, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_sbi, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                                                        }
                                                                        else if (rsDetail1.Baris == 4)
                                                                        {
                                                                            _deposito = _inc + 6;
                                                                            worksheet.Cells[_deposito, 1].Value = "Time Deposit Transaction";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                                                        }
                                                                        else if (rsDetail1.Baris == 5)
                                                                        {
                                                                            _deposito = _inc + 12;
                                                                            worksheet.Cells[_deposito, 1].Value = "Subscription";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 6)
                                                                        {
                                                                            _deposito = _inc + 13;
                                                                            worksheet.Cells[_deposito, 1].Value = "Redemption";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 7)
                                                                        {
                                                                            _deposito = _inc + 14;
                                                                            worksheet.Cells[_deposito, 1].Value = "Switching";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }

                                                                        worksheet.Cells[incRowExcel + 2, 1].Value = "Netting Instruction";
                                                                        worksheet.Cells[incRowExcel + 2, 2, incRowExcel + 2, 3].Merge = true;
                                                                        worksheet.Cells[incRowExcel + 2, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 2, 2, incRowExcel + 2, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 2, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        worksheet.Cells[incRowExcel + 5, 1].Value = "Purchase IPO";
                                                                        worksheet.Cells[incRowExcel + 5, 2, incRowExcel + 5, 3].Merge = true;
                                                                        worksheet.Cells[incRowExcel + 5, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 5, 2, incRowExcel + 5, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 5, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        worksheet.Cells[incRowExcel + 7, 1].Value = "Stock / Bond Closeing Price";
                                                                        worksheet.Cells[incRowExcel + 7, 2, incRowExcel + 7, 3].Merge = true;
                                                                        worksheet.Cells[incRowExcel + 7, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 7, 2, incRowExcel + 7, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 7, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        worksheet.Cells[incRowExcel + 8, 1].Value = "Others (Specify)";
                                                                        worksheet.Cells[incRowExcel + 8, 2, incRowExcel + 8, 3].Merge = true;
                                                                        worksheet.Cells[incRowExcel + 8, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 8, 2, incRowExcel + 8, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 8, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        worksheet.Cells[incRowExcel + 9, 1].Value = "Instruction Payment";
                                                                        worksheet.Cells[incRowExcel + 9, 2, incRowExcel + 9, 3].Merge = true;
                                                                        worksheet.Cells[incRowExcel + 9, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 9, 2, incRowExcel + 9, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 9, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        worksheet.Cells[incRowExcel + 10, 1].Value = "Instruction Change of Custody Fee";
                                                                        worksheet.Cells[incRowExcel + 10, 2, incRowExcel + 10, 3].Merge = true;
                                                                        worksheet.Cells[incRowExcel + 10, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 10, 2, incRowExcel + 10, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 10, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        worksheet.Cells[incRowExcel + 11, 1].Value = "Instruction Transfer Money";
                                                                        worksheet.Cells[incRowExcel + 11, 2, incRowExcel + 11, 3].Merge = true;
                                                                        worksheet.Cells[incRowExcel + 11, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 11, 2, incRowExcel + 11, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        worksheet.Cells[incRowExcel + 11, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                    }

                                                                    incRowExcel = incRowExcel + 10;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Value = "Approved by";
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.WrapText = true;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    incRowExcel = incRowExcel + 7;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Value = "Authorized signature";
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.WrapText = true;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    _endRowDetail = incRowExcel;
                                                                    incRowExcel = incRowExcel + 15;
                                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                                }


                                                            }

                                                        }
                                                    }
                                                }
                                            }




                                            //incRowExcel++;
                                        }





                                        //incRowExcel++;



                                        string _rangeDetail = "A:E";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 40;
                                        worksheet.Column(2).Width = 3;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 80;
                                        worksheet.Column(5).Width = 10;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20&B DAILY DEAL BOARD";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                    }

                                }

                                return true;
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

            #endregion

            #region Fund Portfolio
            if (_FundAccountingRpt.ReportName.Equals("Fund Portfolio"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
                                
select FP.FundPK , FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,FP.MaturityDate MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
FP.ClosePrice ClosePrice
,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) 
else 0 end AccrualHarian
,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate)
* datediff(day,DATEADD(month, DATEDIFF(month, 0, @ValueDate), 0),@ValueDate )
else FP.InterestPercent end Accrual
,FP.InterestPercent 
,FP.MarketValue MarketValue,
sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav , sum(FP.Balance/100) Lot ,case when I.InstrumentTypePK not in (4,5,6,16) then  sum((FP.MarketValue - FP.CostValue))/FP.CostValue * 100 else 0 end PercentFR 

,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) * I.TaxExpensePercent/100
else 0 end TaxAccInterest
,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance)
else 0 end AccInterestBond
,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) * I.TaxExpensePercent/100
else 0 end TaxAccInterestBond


,O.SInvestID,O.Name BankName,N.ID BranchID,FP.AcqDate
from fundposition FP   
left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
left join CloseNav CN on CN.Date = 
(
	SELECT MAX(Date) FROM dbo.CloseNav B WHERE Date <= @ValueDate 
	AND B.fundPK = CN.FundPK AND Status = 2
) and FP.FundPK = CN.FundPK and CN.status in (1,2)  
left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType'
left join BankBranch N on FP.BankBranchPK = N.BankBranchPK and N.status in (1,2)
left join Bank O on N.BankPK = O.BankPK and O.status in (1,2)
where FP.status in (1,2)  and FP.Date = @ValueDate and IT.GroupType in (1,3) " + _paramFund + @"
group by FP.FundPK,Fp.AvgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne,O.SInvestID,O.Name,N.ID,FP.AcqDate,I.TaxExpensePercent
--order by I.ID


UNION ALL
select FP.FundPK , FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,I.MaturityDate MaturityDate,sum(FP.Balance) Balance,sum(FP.CostValue) CostValue,  
FP.ClosePrice ClosePrice
,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
,0 AccrualHarian
, FP.InterestPercent Accrual
,FP.InterestPercent 
,sum(FP.MarketValue) MarketValue,
sum(FP.MarketValue) - sum(FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull((sum(FP.MarketValue / 
case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav , sum(FP.Balance/100) Lot ,case when I.InstrumentTypePK not in (4,5,6,16) then  (sum(FP.MarketValue) - sum(FP.CostValue))/sum(FP.CostValue) * 100 else 0 end PercentFR 

,0  TaxAccInterest
,sum(Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance)
else 0 end) AccInterestBond
,sum(Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) * I.TaxExpensePercent/100
else 0 end) TaxAccInterestBond


,O.SInvestID,O.Name BankName,N.ID BranchID,'' AcqDate
from fundposition FP   
left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
left join CloseNav CN on CN.Date = 
(
	SELECT MAX(Date) FROM dbo.CloseNav B WHERE Date <= @ValueDate 
	AND B.fundPK = CN.FundPK AND Status = 2
)
and FP.FundPK = CN.FundPK and CN.status in (1,2)  
left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType'
left join BankBranch N on FP.BankBranchPK = N.BankBranchPK and N.status in (1,2)
left join Bank O on N.BankPK = O.BankPK and O.status in (1,2)
where FP.status in (1,2)  and FP.Date = @ValueDate  and IT.GroupType in (2) " + _paramFund + @"
group by FP.FundPK,Fp.AvgPrice,FP.Date,I.InstrumentTypePK,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate   ,  
FP.ClosePrice ,FP.InterestPercent ,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,I.MaturityDate,M.DescOne,O.SInvestID,O.Name,N.ID,I.TaxExpensePercent
order by I.ID





                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundPortfolio" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundPortfolio" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "PortfolioValuationReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Portfolio Valuation Report");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PortfolioValuationReport> rList = new List<PortfolioValuationReport>();
                                        while (dr0.Read())
                                        {
                                            PortfolioValuationReport rSingle = new PortfolioValuationReport();
                                            rSingle.SecurityCode = Convert.ToString(dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]));
                                            rSingle.SecurityDescription = Convert.ToString(dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]));
                                            rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentTypeName"]));
                                            rSingle.QtyOfUnit = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.Lot = Convert.ToDecimal(dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]));
                                            rSingle.AverageCost = Convert.ToDecimal(dr0["AvgPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AvgPrice"]));
                                            rSingle.BookValue = Convert.ToDecimal(dr0["CostValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CostValue"]));
                                            rSingle.MarketPrice = Convert.ToDecimal(dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]));
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]));
                                            rSingle.UnrealizedProfitLoss = Convert.ToDecimal(dr0["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealised"]));
                                            rSingle.PercentFR = Convert.ToDecimal(dr0["PercentFR"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentFR"]));
                                            rSingle.BICode = Convert.ToString(dr0["SInvestID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SInvestID"]));
                                            rSingle.Branch = Convert.ToString(dr0["BranchID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BranchID"]));
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.TradeDate = Convert.ToString(dr0["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AcqDate"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.RateGross = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.AccIntTD = Convert.ToDecimal(dr0["AccrualHarian"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccrualHarian"]));
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]));
                                            rSingle.Fund = Convert.ToString(dr0["FundPK"]);
                                            rSingle.TaxExpensePercent = Convert.ToDecimal(dr0["TaxAccInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAccInterest"]));
                                            rSingle.AccInterestBond = Convert.ToDecimal(dr0["AccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccInterestBond"]));
                                            rSingle.TaxAccInterestBond = Convert.ToDecimal(dr0["TaxAccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAccInterestBond"]));
                                            rSingle.PercentOfAUM = Convert.ToDecimal(dr0["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentOfNav"]));

                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         orderby r.FundName, r.InstrumentTypePK, r.Date ascending
                                         group r by new { r.Fund, r.FundName, r.InstrumentTypeName, r.Date, r.InstrumentTypePK } into rGroup
                                         select rGroup;


                                        int incRowExcel = 0;

                                        incRowExcel = incRowExcel + 3;


                                        int _cash = 0;
                                        int _endCash = 0;



                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundName(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                            _cash = incRowExcel;
                                            worksheet.Cells[incRowExcel, 5].Value = "CASH AT BANK :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = Get_TotalAccountBalanceByFundPK(rsHeader.Key.Fund, 2, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "SINVEST CODE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundSinvestCode(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING PAYMENT :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = Get_OutstandingPaymentByFundPKByDate(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND TYPE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundType(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            _endCash = incRowExcel;
                                            worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING RECEIVABLE :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = Get_OutstandingReceivableByFundPKByDate(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;



                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy");
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "CASH PROJECTION :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _cash + ":F" + _endCash + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;




                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT TYPE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentTypeName;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastNav(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 5].Value = "AUM :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastAUMFromCloseNav(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 2;

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16) //Equity
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 3].Value = "Securities Description";
                                                worksheet.Cells[incRowExcel, 4].Value = "Qty Of Unit";
                                                worksheet.Cells[incRowExcel, 5].Value = "Lot";
                                                worksheet.Cells[incRowExcel, 6].Value = "Average Cost";
                                                worksheet.Cells[incRowExcel, 7].Value = "Book Value";
                                                worksheet.Cells[incRowExcel, 8].Value = "Market Price";
                                                worksheet.Cells[incRowExcel, 9].Value = "Market Value";
                                                worksheet.Cells[incRowExcel, 10].Value = "Unrealized Profit/(Loss)";
                                                worksheet.Cells[incRowExcel, 11].Value = "%fr P/L";
                                                worksheet.Cells[incRowExcel, 12].Value = "% of AUM";


                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            }

                                            else if (rsHeader.Key.InstrumentTypePK == 5) //Deposito
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                worksheet.Cells[incRowExcel, 2].Value = "TIME DEPOSIT";
                                                worksheet.Cells[incRowExcel, 3].Value = "BI CODE";
                                                worksheet.Cells[incRowExcel, 4].Value = "BRANCH";
                                                worksheet.Cells[incRowExcel, 5].Value = "Nominal";
                                                worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 8].Value = "Tax Accrued Interest";
                                                worksheet.Cells[incRowExcel, 9].Value = "Rate (Gross)";
                                                worksheet.Cells[incRowExcel, 10].Value = "Acc Int.TD";
                                                worksheet.Cells[incRowExcel, 11].Value = "% fr TA";
                                                worksheet.Cells[incRowExcel, 12].Value = "% of AUM";

                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            }

                                            else
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 3].Value = "Securities Description";
                                                worksheet.Cells[incRowExcel, 4].Value = "Qty Of Unit";
                                                worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 6].Value = "Tax Accrued Interest";
                                                worksheet.Cells[incRowExcel, 7].Value = "Accrued Interest";
                                                worksheet.Cells[incRowExcel, 8].Value = "Average Cost";
                                                worksheet.Cells[incRowExcel, 9].Value = "Book Value";
                                                worksheet.Cells[incRowExcel, 10].Value = "Market Price";
                                                worksheet.Cells[incRowExcel, 11].Value = "Market Value";
                                                worksheet.Cells[incRowExcel, 12].Value = "Unrealized Profit/(Loss)";
                                                worksheet.Cells[incRowExcel, 13].Value = "%fr P/L";
                                                worksheet.Cells[incRowExcel, 14].Value = "% of AUM";

                                                worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                            }

                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SecurityDescription;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.QtyOfUnit;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Lot;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AverageCost;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.MarketPrice;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnrealizedProfitLoss;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.PercentOfAUM;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                }

                                                else if (rsHeader.Key.InstrumentTypePK == 5)
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BICode;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Branch;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Nominal;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.TradeDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.TaxExpensePercent;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.RateGross;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.AccIntTD;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.PercentOfAUM;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SecurityDescription;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.QtyOfUnit;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.TaxAccInterestBond;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AccInterestBond;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.AverageCost;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketPrice;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnrealizedProfitLoss;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.PercentOfAUM;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";


                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 11].Formula = "100 * J" + incRowExcel + "/G" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();

                                            }
                                            else if (rsHeader.Key.InstrumentTypePK == 5)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                            }
                                            else
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 13].Formula = "100 * L" + incRowExcel + "/i" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Calculate();
                                            }

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 14];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 50;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 22;
                                        worksheet.Column(10).Width = 22;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 15;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 PORTFOLIO VALUATION REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Fund Portfolio Detail Acq
            if (_FundAccountingRpt.ReportName.Equals("Fund Portfolio Detail Acq"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
                                
Declare @PeriodPK int   
Select @PeriodPK = PeriodPK From Period Where DateFrom <= @ValueDate and Dateto >= @ValueDate and Status = 2  

select FP.FundPK , FP.AvgPrice AvgCost,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,FP.MaturityDate MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
FP.ClosePrice ClosePrice
,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
,Case when IT.Type =3 then ISNULL(FP.Balance * FP.InterestPercent / 100 /
CASE WHEN FP.InterestDaysType = 4 then 365 ELSE 360 END,0) * 0.8
else 0 end AccrualHarian
,Case when IT.Type =3 then  ISNULL(FP.Balance * FP.InterestPercent / 100 /
CASE WHEN FP.InterestDaysType = 4 then 365 ELSE 360 END,0) * 0.8 * DATEDIFF(day,FP.AcqDate,@valuedate)
else FP.InterestPercent end Accrual
,FP.InterestPercent 
,FP.MarketValue MarketValue,
sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav , sum(FP.Balance/100) Lot ,case when I.InstrumentTypePK not in (4,5,6,16) then  sum((FP.MarketValue - FP.CostValue))/FP.CostValue * 100 else 0 end PercentFR 

,Case when IT.Type =3 then  ISNULL(FP.Balance * FP.InterestPercent / 100 /
CASE WHEN FP.InterestDaysType = 4 then 365 ELSE 360 END,0) * I.TaxExpensePercent/100
else 0 end TaxAccInterest
,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance)
else 0 end AccInterestBond
,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) * I.TaxExpensePercent/100
else 0 end TaxAccInterestBond


,O.SInvestID,O.Name BankName,N.ID BranchID,FP.AcqDate,CASE WHEN FP.InterestDaysType = 4 then 365 ELSE 360 END DaysType,
DATEDIFF(day,FP.AcqDate,@valuedate) HoldingDays,'' LastCouponDate,'' NextCouponDate, ISNULL(FP.Balance * FP.InterestPercent / 100 /
CASE WHEN FP.InterestDaysType = 4 then 365 ELSE 360 END,0)  * 0.8 NetInterest,FP.AvgPrice AvgPrice,0 DaysCoupon
from fundposition FP   
left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
left join CloseNav CN on CN.Date = 
(
	SELECT MAX(Date) FROM dbo.CloseNav B WHERE Date <= @ValueDate 
	AND B.fundPK = CN.FundPK AND Status = 2
) and FP.FundPK = CN.FundPK and CN.status in (1,2)  
left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType'
left join BankBranch N on FP.BankBranchPK = N.BankBranchPK and N.status in (1,2)
left join Bank O on N.BankPK = O.BankPK and O.status in (1,2)
where FP.status in (1,2)  and FP.Date = @ValueDate and IT.GroupType in (1,3)   
" + _paramFund + @"
--And F.FundPK = 3
group by FP.FundPK,Fp.AvgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne,O.SInvestID,O.Name,N.ID,FP.AcqDate,I.TaxExpensePercent
--order by I.ID


UNION ALL
select FP.FundPK , FP.AvgPrice AvgCost,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,I.MaturityDate MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
FP.ClosePrice ClosePrice
,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
,0 AccrualHarian
, FP.InterestPercent Accrual
,FP.InterestPercent 
,FP.MarketValue MarketValue,
FP.MarketValue - FP.CostValue Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull((FP.MarketValue / 
case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End * 100),0) End PercentOfNav , FP.Balance/100 Lot ,case when I.InstrumentTypePK not in (4,5,6,16) then  (sum(FP.MarketValue) - sum(FP.CostValue))/sum(FP.CostValue) * 100 else 0 end PercentFR 

,0  TaxAccInterest
,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) * (100 - I.TaxExpensePercent)/100
else 0 end AccInterestBond
,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) * I.TaxExpensePercent/100
else 0 end TaxAccInterestBond


,O.SInvestID,O.Name BankName,N.ID BranchID,Fp.AcqDate AcqDate,CASE WHEN FP.InterestDaysType = 4 then 365 ELSE 360 END DaysType,
case when FP.AcqDate <= dbo.FgetLastCouponDate(@valuedate,FP.InstrumentPK) then DATEDIFF(day,dbo.FgetLastCouponDate(@valuedate,FP.InstrumentPK),@valuedate) else DATEDIFF(day,FP.AcqDate,@valuedate) end HoldingDays,
dbo.FgetLastCouponDate(@valuedate,FP.InstrumentPK) LastCouponDate,dbo.Fgetnextcoupondate(@valuedate,FP.InstrumentPK) NextCouponDate,
ISNULL(Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) else 0 end,0) * ( 100 - I.TaxExpensePercent )/100 * case when FP.AcqDate <= dbo.FgetLastCouponDate(@valuedate,FP.InstrumentPK) then DATEDIFF(day,dbo.FgetLastCouponDate(@valuedate,FP.InstrumentPK),@valuedate) else DATEDIFF(day,FP.AcqDate,@valuedate) end NetInterest,
isnull(P.DonePrice,isnull(Q.AvgPrice,0)) Avgprice,case when FP.InterestDaysType in (2,3,4) then DATEDIFF(day,dbo.FgetLastCouponDate(@valuedate,FP.InstrumentPK),dbo.Fgetnextcoupondate(@valuedate,FP.InstrumentPK)) else dbo.FgetDateDiffCorporateBond(dbo.FgetLastCouponDate(@valuedate,FP.InstrumentPK),dbo.Fgetnextcoupondate(@valuedate,FP.InstrumentPK)) end DaysCoupon
from fundposition FP   
left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
left join CloseNav CN on CN.Date = 
(
	SELECT MAX(Date) FROM dbo.CloseNav B WHERE Date <= @ValueDate 
	AND B.fundPK = CN.FundPK AND B.Status = 2
)
and FP.FundPK = CN.FundPK and CN.status in (1,2)  
left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType'
left join BankBranch N on FP.BankBranchPK = N.BankBranchPK and N.status in (1,2)
left join Bank O on N.BankPK = O.BankPK and O.status in (1,2)
left join Investment P on FP.InstrumentPK = P.InstrumentPK and FP.FundPK = P.FundPK and FP.AcqDate = P.SettlementDate and P.StatusSettlement = 2  and P.TrxBuy = 1
left join FundEndYearPortfolio Q on FP.InstrumentPK = Q.InstrumentPK and FP.FundPK = Q.FundPK and FP.AcqDate = Q.AcqDate and Q.PeriodPK = @PeriodPK
where FP.status in (1,2)  and FP.Date = @ValueDate  and IT.GroupType in (2) 
" + _paramFund + @"
--And F.FundPK = 3
group by Q.AvgPrice,P.DonePrice,FP.FundPK,Fp.AvgPrice,FP.Date,I.InstrumentTypePK,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate   ,  
FP.ClosePrice ,FP.InterestPercent ,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,I.MaturityDate,M.DescOne,O.SInvestID,O.Name,N.ID,I.TaxExpensePercent,FP.AcqDate,FP.Balance,Fp.AcqDate,Fp.Balance
,FP.Balance ,FP.CostValue, Fp.MarketValue
order by I.ID




                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundPortfolioDetailAcq" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundPortfolioDetailAcq" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "PortfolioValuationReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Portfolio Valuation Report");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PortfolioValuationReport> rList = new List<PortfolioValuationReport>();
                                        while (dr0.Read())
                                        {
                                            PortfolioValuationReport rSingle = new PortfolioValuationReport();
                                            rSingle.SecurityCode = Convert.ToString(dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]));
                                            rSingle.SecurityDescription = Convert.ToString(dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]));
                                            rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentTypeName"]));
                                            rSingle.QtyOfUnit = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.Lot = Convert.ToDecimal(dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]));
                                            rSingle.AverageCost = Convert.ToDecimal(dr0["AvgCost"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AvgCost"]));
                                            rSingle.BookValue = Convert.ToDecimal(dr0["CostValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CostValue"]));
                                            rSingle.MarketPrice = Convert.ToDecimal(dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]));
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]));
                                            rSingle.UnrealizedProfitLoss = Convert.ToDecimal(dr0["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealised"]));
                                            rSingle.PercentFR = Convert.ToDecimal(dr0["PercentFR"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentFR"]));
                                            rSingle.BICode = Convert.ToString(dr0["SInvestID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SInvestID"]));
                                            rSingle.Branch = Convert.ToString(dr0["BranchID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BranchID"]));
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.TradeDate = Convert.ToString(dr0["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AcqDate"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.RateGross = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.AccIntTD = Convert.ToDecimal(dr0["AccrualHarian"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccrualHarian"]));
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]));
                                            rSingle.Fund = Convert.ToString(dr0["FundPK"]);
                                            rSingle.TaxExpensePercent = Convert.ToDecimal(dr0["TaxAccInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAccInterest"]));
                                            rSingle.AccInterestBond = Convert.ToDecimal(dr0["AccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccInterestBond"]));
                                            rSingle.TaxAccInterestBond = Convert.ToDecimal(dr0["TaxAccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAccInterestBond"]));
                                            rSingle.PercentOfAUM = Convert.ToDecimal(dr0["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentOfNav"]));
                                            rSingle.DaysType = Convert.ToInt32(dr0["DaysType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["DaysType"]));
                                            rSingle.HoldingDays = Convert.ToInt32(dr0["HoldingDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["HoldingDays"]));
                                            rSingle.LastCouponDate = Convert.ToString(dr0["LastCouponDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastCouponDate"]));
                                            rSingle.NextCouponDate = Convert.ToString(dr0["NextCouponDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NextCouponDate"]));
                                            rSingle.NetInterest = Convert.ToDecimal(dr0["NetInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NetInterest"]));
                                            rSingle.HoldingAccrual = Convert.ToDecimal(dr0["Accrual"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Accrual"]));
                                            rSingle.AvgPrice = Convert.ToDecimal(dr0["AvgPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AvgPrice"]));
                                            rSingle.DaysCoupon = Convert.ToInt32(dr0["DaysCoupon"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["DaysCoupon"]));
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         orderby r.FundName, r.InstrumentTypePK, r.Date ascending
                                         group r by new { r.Fund, r.FundName, r.InstrumentTypeName, r.Date, r.InstrumentTypePK } into rGroup
                                         select rGroup;


                                        int incRowExcel = 0;

                                        incRowExcel = incRowExcel + 3;


                                        int _cash = 0;
                                        int _endCash = 0;



                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundName(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                            _cash = incRowExcel;
                                            worksheet.Cells[incRowExcel, 5].Value = "CASH AT BANK :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_TotalAccountBalanceByFundPK(rsHeader.Key.Fund, 2, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "SINVEST CODE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundSinvestCode(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING PAYMENT :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_OutstandingPaymentByFundPKByDate(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND TYPE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundType(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            _endCash = incRowExcel;
                                            worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING RECEIVABLE :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_OutstandingReceivableByFundPKByDate(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;



                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy");
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "CASH PROJECTION :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _cash + ":F" + _endCash + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;




                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT TYPE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentTypeName;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastNav(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 5].Value = "AUM :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastAUMFromCloseNav(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 2;

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16) //Equity
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 3].Value = "Securities Description";
                                                worksheet.Cells[incRowExcel, 4].Value = "Qty Of Unit";
                                                worksheet.Cells[incRowExcel, 5].Value = "Lot";
                                                worksheet.Cells[incRowExcel, 6].Value = "Average Cost";
                                                worksheet.Cells[incRowExcel, 7].Value = "Book Value";
                                                worksheet.Cells[incRowExcel, 8].Value = "Market Price";
                                                worksheet.Cells[incRowExcel, 9].Value = "Market Value";
                                                worksheet.Cells[incRowExcel, 10].Value = "Unrealized Profit/(Loss)";
                                                worksheet.Cells[incRowExcel, 11].Value = "%fr P/L";
                                                worksheet.Cells[incRowExcel, 12].Value = "% of AUM";


                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            }

                                            else if (rsHeader.Key.InstrumentTypePK == 5) //Deposito
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                worksheet.Cells[incRowExcel, 2].Value = "TIME DEPOSIT";
                                                worksheet.Cells[incRowExcel, 3].Value = "BI CODE";
                                                worksheet.Cells[incRowExcel, 4].Value = "BRANCH";
                                                worksheet.Cells[incRowExcel, 5].Value = "Rate (Gross)";
                                                worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                                worksheet.Cells[incRowExcel, 7].Value = "Trade Date";
                                                worksheet.Cells[incRowExcel, 8].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 9].Value = "Day Count";
                                                worksheet.Cells[incRowExcel, 10].Value = "Holding Days";
                                                worksheet.Cells[incRowExcel, 11].Value = "Daily Interest (Nett)";
                                                worksheet.Cells[incRowExcel, 12].Value = "Holding Interest (Nett)";
                                                worksheet.Cells[incRowExcel, 13].Value = "% of AUM";

                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            }

                                            else
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 3].Value = "Securities Description";
                                                worksheet.Cells[incRowExcel, 4].Value = "Qty Of Unit";
                                                worksheet.Cells[incRowExcel, 5].Value = "Average Cost";
                                                worksheet.Cells[incRowExcel, 6].Value = "Book Value";
                                                worksheet.Cells[incRowExcel, 7].Value = "Market Price";
                                                worksheet.Cells[incRowExcel, 8].Value = "Market Value";
                                                worksheet.Cells[incRowExcel, 9].Value = "Acq. Date";
                                                worksheet.Cells[incRowExcel, 10].Value = "Acq. Price";
                                                worksheet.Cells[incRowExcel, 11].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 12].Value = "Interest Percent";
                                                worksheet.Cells[incRowExcel, 13].Value = "Last Coupon";
                                                worksheet.Cells[incRowExcel, 14].Value = "Next Coupon";
                                                worksheet.Cells[incRowExcel, 15].Value = "Days between Coupon";
                                                worksheet.Cells[incRowExcel, 16].Value = "Holding Days";
                                                worksheet.Cells[incRowExcel, 17].Value = "Daily Interest (Nett)";
                                                worksheet.Cells[incRowExcel, 18].Value = "Holding Interest (Nett)";
                                                worksheet.Cells[incRowExcel, 19].Value = "Unrealized Profit/(Loss)";
                                                worksheet.Cells[incRowExcel, 20].Value = "%fr P/L";
                                                worksheet.Cells[incRowExcel, 21].Value = "% of AUM";

                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                            }

                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SecurityDescription;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.QtyOfUnit;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Lot;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AverageCost;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.MarketPrice;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnrealizedProfitLoss;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.PercentOfAUM;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                }

                                                else if (rsHeader.Key.InstrumentTypePK == 5)
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BICode;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Branch;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Nominal;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.RateGross;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.TradeDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.DaysType;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.HoldingDays;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.AccIntTD;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.HoldingAccrual;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.PercentOfAUM;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SecurityDescription;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.QtyOfUnit;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.AverageCost;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.MarketPrice;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Value = Convert.ToDateTime(rsDetail.TradeDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.AvgPrice;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.RateGross;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 13].Value = Convert.ToDateTime(rsDetail.LastCouponDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 14].Value = Convert.ToDateTime(rsDetail.NextCouponDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.DaysCoupon;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.HoldingDays;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.AccInterestBond;
                                                    worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.NetInterest;
                                                    worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.UnrealizedProfitLoss;
                                                    worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.PercentOfAUM;
                                                    worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0.00";





                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 11].Formula = "100 * J" + incRowExcel + "/G" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();

                                            }
                                            else if (rsHeader.Key.InstrumentTypePK == 5)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                            }
                                            else
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 20].Formula = "100 * S" + incRowExcel + "/F" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Calculate();
                                            }

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 14];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 50;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 22;
                                        worksheet.Column(10).Width = 22;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 15;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;
                                        worksheet.Column(21).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 PORTFOLIO VALUATION REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }


            #endregion

            #region Broker Commission Report
            if (_FundAccountingRpt.ReportName.Equals("Broker Commission Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            string _paramCounterpart = "";

                            if (!_host.findString(_FundAccountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.CounterpartFrom))
                            {
                                _paramCounterpart = "And A.CounterpartPK in ( " + _FundAccountingRpt.CounterpartFrom + " ) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }


                            cmd.CommandText =

                            @" declare @Total numeric(22,4)

                            select @Total = sum(A.DoneAmount)  from  
                            (
                            select A.CounterpartPK, A.FundPK, sum(DoneAmount) DoneAmount,sum(CommissionAmount) CommissionAmount,sum(TotalAmount) TotalAmount from Investment A
                            where ValueDate between @valuedateFrom and @valueDateTo and statussettlement  = 2 and A.InstrumentTypePK not in (5)  and A.CounterpartPK <> 172
                            " + _paramFund + _paramCounterpart + @"
                            group by A.CounterpartPK, A.FundPK,TrxTypeID
                            ) A




                            select A.FundPK,C.Name CounterpartName,B.Name FundName,sum(DoneAmount) DoneAmount,sum(CommissionAmount) CommissionAmount,sum(A.TotalAmount) TotalAmount, sum(A.DoneAmount)/@Total Percentage from  
                            (
                            select A.CounterpartPK, A.FundPK,sum(DoneAmount) DoneAmount,sum(CommissionAmount) CommissionAmount,sum(TotalAmount) TotalAmount from Investment A
                            where ValueDate between @valuedateFrom and @valueDateTo and statussettlement  = 2 and A.InstrumentTypePK not in (5)  and A.CounterpartPK <> 172
                            " + _paramFund + _paramCounterpart + @"
                            group by A.CounterpartPK, A.FundPK,TrxTypeID

                            ) A
                            left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                            left join counterpart C on A.CounterpartPK = C.CounterpartPK and C.status = 2
                            group by A.FundPK,C.Name,B.Name";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@valuedateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@valueDateTo", _FundAccountingRpt.ValueDateTo);

                            cmd.ExecuteNonQuery();


                            using (SqlDataReader dr1 = cmd.ExecuteReader())
                            {

                                if (dr1.HasRows)
                                {

                                    string filePath = Tools.ReportsPath + "BrokerCommissionReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BrokerCommissionReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Broker Commission Report");

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BrokerCommissionReport> rList1 = new List<BrokerCommissionReport>();
                                        while (dr1.Read())
                                        {

                                            BrokerCommissionReport rSingle1 = new BrokerCommissionReport();
                                            rSingle1.FundPK = Convert.ToInt32(dr1["FundPK"]);
                                            rSingle1.CounterpartName = Convert.ToString(dr1["CounterpartName"]);
                                            rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                            rSingle1.DoneAmount = Convert.ToDecimal(dr1["DoneAmount"]);
                                            rSingle1.CommissionAmount = Convert.ToDecimal(dr1["CommissionAmount"]);
                                            rSingle1.TotalAmount = Convert.ToDecimal(dr1["TotalAmount"]);
                                            rSingle1.Percentage = Convert.ToDecimal(dr1["Percentage"]);


                                            rList1.Add(rSingle1);
                                        }


                                        var GroupByReference1 =
                                        from r1 in rList1

                                        group r1 by new { r1.FundPK } into rGroup1
                                        select rGroup1;

                                        int incRowExcel = 1;
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "Counterpart Name";
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        worksheet.Cells[incRowExcel, 3].Value = "Done Amount";
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "Commission Amount";
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Total Amount";
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Percentage";
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells["A" + RowB + ":F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":F" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":F" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":F" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        incRowExcel++;



                                        foreach (var rsHeader1 in GroupByReference1)
                                        {

                                            incRowExcel++;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail1 in rsHeader1)
                                            {


                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail1.CounterpartName;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundName;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.DoneAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.CommissionAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail1.TotalAmount;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Percentage;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                incRowExcel++;
                                                no++;
                                                _endRowDetail = incRowExcel - 1;

                                            }
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSteelBlue);
                                            worksheet.Cells[incRowExcel, 2].Value = "SUBTOTAL :";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00%";



                                            //incRowExcel++;
                                        }

                                        incRowExcel++;

                                        // Buat TOTALAN

                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"  

                                                    declare @Total numeric(22,4)

                                                    select @Total = sum(A.DoneAmount)  from  
                                                    (
                                                    select A.CounterpartPK, A.FundPK, sum(DoneAmount) DoneAmount,sum(CommissionAmount) CommissionAmount,sum(TotalAmount) TotalAmount from Investment A
                                                    where ValueDate between @valuedateFrom and @valueDateTo and statussettlement  = 2 and A.InstrumentTypePK not in (5) and A.CounterpartPK <> 172
                                                    " + _paramFund + _paramCounterpart + @"
                                                    group by A.CounterpartPK, A.FundPK,TrxTypeID
                                                    ) A


                                                    select sum(DoneAmount) DoneAmount,sum(CommissionAmount) CommissionAmount,sum(TotalAmount) TotalAmount, sum(Percentage) Percentage  from  
                                                    (
                                                    select A.CounterpartPK, A.FundPK, sum(DoneAmount) DoneAmount,sum(CommissionAmount) CommissionAmount,sum(TotalAmount) TotalAmount,sum(A.DoneAmount)/@Total Percentage  from Investment A
                                                    where ValueDate between @valuedateFrom and @valueDateTo and statussettlement  = 2 and A.InstrumentTypePK not in (5)  and A.CounterpartPK <> 172
                                                    " + _paramFund + _paramCounterpart + @"
                                                    group by A.CounterpartPK, A.FundPK,TrxTypeID
                                                    ) A
                                                ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@valuedateFrom", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@valueDateTo", _FundAccountingRpt.ValueDateTo);


                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<BrokerCommissionReport> rList2 = new List<BrokerCommissionReport>();
                                                    while (dr2.Read())
                                                    {
                                                        BrokerCommissionReport rSingle2 = new BrokerCommissionReport();
                                                        rSingle2.DoneAmount = Convert.ToDecimal(dr2["DoneAmount"]);
                                                        rSingle2.CommissionAmount = Convert.ToDecimal(dr2["CommissionAmount"]);
                                                        rSingle2.TotalAmount = Convert.ToDecimal(dr2["TotalAmount"]);
                                                        rSingle2.Percentage = Convert.ToDecimal(dr2["Percentage"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        //worksheet.Cells[incRowExcel, 1].Value = "SUB TOTAL";
                                                        //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                        //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        incRowExcel++;
                                                        int _startTotal = incRowExcel;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {

                                                            worksheet.Cells[incRowExcel, 2].Value = "GRAND TOTAL";
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.DoneAmount;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail2.CommissionAmount;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail2.TotalAmount;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail2.Percentage;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00%";

                                                            incRowExcel++;
                                                        }

                                                        int _endTotal = incRowExcel;
                                                        //incRowExcel++;
                                                        //worksheet.Cells[incRowExcel, 2].Value = "GRAND TOTAL";
                                                        //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startTotal + ":C" + _endTotal + ")";
                                                        //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startTotal + ":D" + _endTotal + ")";
                                                        //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startTotal + ":E" + _endTotal + ")";
                                                        //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startTotal + ":F" + _endTotal + ")";
                                                        //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00%";

                                                    }



                                                }
                                            }
                                        }



                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(1).Width = 50;
                                        worksheet.Column(2).Width = 50;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 15;



                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;


                                    }

                                }


                                return true;


                            }

                        }


                    }






                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }


        //        public string PTPBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        //        {

        //            try
        //            {
        //                string _paramSettlementPK = "";

        //                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
        //                {
        //                    _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
        //                }
        //                else
        //                {
        //                    _paramSettlementPK = " And SettlementPK in (0) ";
        //                }
        //                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //                {
        //                    DbCon.Open();
        //                    using (SqlCommand cmd = DbCon.CreateCommand())
        //                    {
        //                        cmd.CommandTimeout = 0;
        //                        cmd.CommandText = @"

        //BEGIN  
        //SET NOCOUNT ON         

        //create table #Text(    
        //	InvestmentPK int,  
        //	[ResultText] [nvarchar](MAX)  NULL          
        //)           

        //create table #InvestmentTaxDataAcq (
        //	[InvestmentPK] [int],
        //	[AcqNo] int identity,
        //	[TrxType] [int],
        //	[Reference] [nvarchar](50),
        //	[DoneAmount] [numeric](30, 8),
        //	[AcqDate] [datetime],
        //	[AcqPrice] [numeric](19, 12),
        //	[AcqAmount] [numeric](30, 8),
        //	[IncomeTaxGainAmount] [numeric](30, 6),
        //	[DaysOfHoldingInterest] [int],
        //	[IncomeTaxInterestAmount] [numeric](30, 6),
        //	[TotalTaxIncomeAmount] [numeric](30, 6),
        //	[TaxExpensePercent] [numeric](30, 8),
        //	[TaxAmount] [numeric](30, 8),
        //	[DoneAccruedInterest] [numeric](30, 6),
        //	[HoldingInterestAmount] numeric(30,6)
        //)      

        //declare @InstrumentPK int
        //declare @FundPK int
        //declare @TrxType int
        //declare @CounterpartPK int
        //declare @InvestmentPK int
        //declare @Reference nvarchar(50) 
        //declare @DoneVolumeTotal numeric(32,0)
        //declare @DoneAmountTotal numeric(32,6)
        //declare @DoneAccruedInterestTotal numeric(32,6)
        //declare @IncomeTaxGainAmountTotal numeric(32,6)
        //declare @IncomeTaxInterestAmountTotal numeric(32,6)
        //declare @TotalAmountALL numeric(32,6)
        //declare @DoneAmount numeric(30, 8)
        //declare @AcqPrice numeric(30, 8)
        //declare @AcqAmount numeric(30, 8)
        //declare @IncomeTaxGainAmount numeric(30, 8)
        //declare @DaysOfHoldingInterest int
        //declare @IncomeTaxInterestAmount numeric(30, 8)
        //declare @TotalTaxIncomeAmount numeric(30, 8)
        //declare @TaxExpensePercent numeric(30, 8)
        //declare @TaxAmount numeric(30, 8)
        //declare @DoneAccruedInterest numeric(30, 8)
        //declare @AcqDate date
        //declare @DonePrice numeric(30, 8)
        //declare @HoldingInterestAmount numeric(30, 8)

        //truncate table #Text   
        //insert into #Text 
        //select 0,'Transaction Status|TA Reference ID|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|TA Reference No.|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'      

        //DECLARE A CURSOR FOR   
        //	select distinct InstrumentPK, FundPK, TrxType,CounterpartPK,DonePrice from Investment where ValueDate = @valuedate and StatusSettlement = 2  and InstrumentTypePK in (2,3,8,9,12,13,14,15)
        //    " + _paramSettlementPK + @"
        //OPEN A  
        //FETCH NEXT FROM A INTO @InstrumentPK,@FundPK,@TrxType,@CounterpartPK,@DonePrice

        //WHILE @@FETCH_STATUS = 0  
        //BEGIN  


        //	select top 1  @InvestmentPK = InvestmentPK from Investment where InstrumentPK = @InstrumentPK and FundPK = @FundPK and ValueDate = @valuedate and StatusSettlement = 2 and TrxType = @TrxType and CounterpartPK = @CounterpartPK and DonePrice = @DonePrice
        //	order by InvestmentPK

        //	select top 1 @Reference = Reference from Investment where InstrumentPK = @InstrumentPK and FundPK = @FundPK and ValueDate = @valuedate and StatusSettlement = 2 and TrxType = @TrxType and CounterpartPK = @CounterpartPK and DonePrice = @DonePrice
        //	order by Reference

        //	select @DoneVolumeTotal = sum(DoneVolume), @DoneAmountTotal = sum(DoneAmount), @DoneAccruedInterestTotal = sum(DoneAccruedInterest), @IncomeTaxGainAmountTotal = sum(IncomeTaxGainAmount), @IncomeTaxInterestAmountTotal = sum(IncomeTaxInterestAmount),@TotalAmountALL = sum(TotalAmount)  
        //	from Investment where InstrumentPK = @InstrumentPK and FundPK = @FundPK and ValueDate = @valuedate and StatusSettlement = 2 and TrxType = @TrxType and CounterpartPK = @CounterpartPK and DonePrice = @DonePrice


        //    truncate table  #InvestmentTaxDataAcq 

        //	DECLARE AB CURSOR FOR   
        //		select AcqVolume,AcqDate,AcqPrice,AcqVolume * AcqPrice/100,(DonePrice - AcqPrice)/100 * DoneVolume,
        //		case when AcqDate > LastCouponDate then (LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,AcqDate) , 112),'')))) else (LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,LastCouponDate) , 112),'')))) end
        //		,IncomeTaxInterestAmount,((DonePrice - AcqPrice)/100 * DoneVolume) + (IncomeTaxInterestAmount * (100/case when IncomeTaxInterestPercent = 0 then 1 else IncomeTaxInterestPercent end)),TaxExpensePercent,(((DonePrice - AcqPrice)/100 * DoneVolume) + (IncomeTaxInterestAmount * (100/case when IncomeTaxInterestPercent = 0 then 1 else IncomeTaxInterestPercent end))) * TaxExpensePercent/100 
        //		, DoneAccruedInterest, IncomeTaxInterestAmount * (100/case when IncomeTaxInterestPercent = 0 then 1 else IncomeTaxInterestPercent end)
        //		from Investment where ValueDate = @valuedate and StatusSettlement = 2 and InstrumentPk = @InstrumentPK and FundPK = @FundPK and TrxType = @TrxType and CounterpartPK = @CounterpartPK and DonePrice = @DonePrice

        //	OPEN AB  
        //	FETCH NEXT FROM AB INTO @DoneAmount,@AcqDate,@AcqPrice,@AcqAmount,@IncomeTaxGainAmount,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxExpensePercent,@TaxAmount,@DoneAccruedInterest,@HoldingInterestAmount

        //	WHILE @@FETCH_STATUS = 0  
        //	BEGIN  


        //		insert into #InvestmentTaxDataAcq([InvestmentPK],[TrxType],[Reference],[DoneAmount],[AcqDate],[AcqPrice],[AcqAmount],[IncomeTaxGainAmount],[DaysOfHoldingInterest],[IncomeTaxInterestAmount],[TotalTaxIncomeAmount],[TaxExpensePercent],[TaxAmount],[DoneAccruedInterest],[HoldingInterestAmount])
        //		select @InvestmentPK,@TrxType,@Reference,@DoneAmount,@AcqDate,@AcqPrice,@AcqAmount,@IncomeTaxGainAmount,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxExpensePercent,@TaxAmount,@DoneAccruedInterest,@HoldingInterestAmount



        //	FETCH NEXT FROM AB INTO @DoneAmount,@AcqDate,@AcqPrice,@AcqAmount,@IncomeTaxGainAmount,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxExpensePercent,@TaxAmount,@DoneAccruedInterest,@HoldingInterestAmount
        //	END  

        //	CLOSE AB  
        //	DEALLOCATE AB



        //	insert into #Text
        //    Select @InvestmentPK,
        //    'NEWM' --1
        //    + '|' + '' -- 2
        //    + '|' + '1' -- 3
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 4
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) --5
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),'')))) --6
        //    + '|' + @CompanyID --7
        //    + '|' + isnull(A.BrokerCode,'') --8
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) --9
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,'')))) --10
        //    + '|' + cast(isnull(A.TrxType,'') as nvarchar) --11
        //    + '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end -- 12
        //    + '|' + case when @DoneVolumeTotal = 0 then '0' else cast(isnull(cast(@DoneVolumeTotal as decimal(30,0)), '')as nvarchar) end --13
        //    + '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(sum(A.DonePrice * @DoneVolumeTotal)/100 as decimal(30,0)), '')as nvarchar) end --14
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))--15
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))--16
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) --17
        //    + '|' + case when @DoneAccruedInterestTotal = 0 then '0' else cast(isnull(cast(isnull(@DoneAccruedInterestTotal,0) as decimal(30,0)),'')as nvarchar) end --18 
        //    + '|' + ''--19
        //    + '|' + cast(isnull(cast(@IncomeTaxGainAmountTotal as decimal(30,0)), '')as nvarchar) --20
        //    + '|' + cast(isnull(cast(@IncomeTaxInterestAmountTotal as decimal(30,0)), '')as nvarchar) --21
        //    + '|' + case when @IncomeTaxGainAmountTotal + @IncomeTaxInterestAmountTotal < 0 then '0' else cast(isnull(cast(@IncomeTaxGainAmountTotal + @IncomeTaxInterestAmountTotal as decimal(30,0)), '')as nvarchar) end --22
        //    + '|' + case when @TotalAmountALL = 0 then '0' else cast(isnull(cast(isnull(@TotalAmountALL,0) as decimal(30,0)),'')as nvarchar) end  --23
        //    + '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end --24            
        //    + '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.TaxID,''))))   end --25             
        //    + '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end --26 
        //    + '|' + case when A.StatutoryType = 0 then '2' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.StatutoryType,'2')))) end --27
        //    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) --28
        //    + '|' + '' 
        //    from (      
        //    select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
        //    round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
        //    round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK = 3 then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
        //    round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,C.NPWP TaxID ,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentTrType from investment A
        //    left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
        //    left join Fund C on A.fundpk = C.fundpk and C.status = 2
        //    left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
        //    left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
        //    left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
        //    where    
        //    A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15) and A.InvestmentPK = @InvestmentPK
        //    and A.statusdealing = 2

        //    )A    
        //    Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
        //    A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
        //    A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,A.TaxID,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentTrType
        //    order by A.ValueDate Asc

        //	declare @counter int
        //	set @counter = 1
        //	while (@counter <= 10)
        //	begin
        //		update A set A.ResultText = A.ResultText
        //		+ case when B.TrxType = 1 then '' else --29
        //		+ '|' + case when B.TrxType = 1 then '' else '2' end --30  
        //		+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(B.Reference,'')))) end --31
        //		+ '|' + case when B.TrxType = 1 then '' else case when B.DoneAmount = 0 then '' else cast(isnull(cast(B.DoneAmount as decimal(30,0)), '')as nvarchar) end end --32
        //		+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.AcqDate, 112),'')))) end   --33 
        //		+ '|' + case when B.TrxType = 1 then '' else case when B.AcqPrice = 0 then '' else cast(isnull(cast(B.AcqPrice as decimal(30,6)), '')as nvarchar) end end --34    
        //		+ '|' + case when B.TrxType = 1 then '' else case when B.AcqAmount = 0 then '' else cast(isnull(cast(B.AcqAmount as decimal(30,0)), '')as nvarchar) end end    --35 
        //		+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxGainAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxGainAmount,0) as decimal(30,0)),'')as nvarchar) end  end --36
        //		+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.DaysOfHoldingInterest , 112),'')))) end --37
        //		+ '|' + case when B.TrxType = 1 then '' else case when B.DoneAccruedInterest = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.HoldingInterestAmount,0) as decimal(30,0)),'')as nvarchar) end  end --38
        //		+ '|' + case when B.TrxType = 1 then '' else case when B.TotalTaxIncomeAmount = 0 then cast(0 as nvarchar)  else cast(isnull(cast(B.TotalTaxIncomeAmount as decimal(30,0)),'')as nvarchar) end  end --39
        //		+ '|' + case when B.TrxType = 1 then '' else case when B.TaxExpensePercent = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end --40
        //		+ '|' + case when B.TrxType = 1 then '' else case when B.TaxAmount <= 0 then cast(0 as nvarchar) else cast(isnull(cast(B.TaxAmount as decimal(30,0)),'')as nvarchar) end  end --41
        //		End  
        //		from #Text A
        //		left join #InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
        //		where A.InvestmentPK != 0 and B.AcqNo = @counter

        //		set @counter = @counter + 1
        //	end	


        //FETCH NEXT FROM A INTO @InstrumentPK,@FundPK,@TrxType,@CounterpartPK,@DonePrice
        //END  

        //CLOSE A  
        //DEALLOCATE A  

        //select ResultText from #text 
        //END
        //                        ";

        //                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
        //                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



        //                        using (SqlDataReader dr = cmd.ExecuteReader())
        //                        {
        //                            if (dr.HasRows)
        //                            {
        //                                string filePath = Tools.SInvestTextPath + "PTP_Bond.txt";
        //                                FileInfo txtFile = new FileInfo(filePath);
        //                                if (txtFile.Exists)
        //                                {
        //                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
        //                                }

        //                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
        //                                {
        //                                    while (dr.Read())
        //                                    {
        //                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
        //                                    }
        //                                    return Tools.HtmlSinvestTextPath + "PTP_Bond.txt";
        //                                }

        //                            }
        //                            return null;
        //                        }

        //                    }
        //                }
        //            }

        //            catch (Exception err)
        //            {
        //                throw err;
        //            }

        //        }

        public string PTPBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
 BEGIN  
SET NOCOUNT ON         
DROP TABLE IF EXISTS dbo.#Text
DROP TABLE IF EXISTS dbo.#TaxAmount

create table #TaxAmount(      
InvestmentPK int,
TaxAmount [nvarchar](1000)  NULL,
TotalAmount [nvarchar](1000)  NULL          
)                        
        
truncate table #TaxAmount      


create table #Text(      
InvestmentPK int,
[ResultText] [nvarchar](max)  NULL          
)                        
        
truncate table #Text      
insert into #Text(InvestmentPK,ResultText)     
select 0,'Transaction Status|TA Reference ID|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|TA Reference No.|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'      
        
insert into #Text(InvestmentPK,ResultText) 
Select  A.InvestmentPK,
'NEWM' --1
+ '|' + ''
+ '|' + '1'
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
+ '|' + @CompanyID
+ '|' + isnull(A.BrokerCode,'')
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
+ '|' + cast(isnull(A.TrxType,'') as nvarchar)
+ '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
+ '|' + case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
+ '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) 
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + '0'
+ '|' + case when A.CapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,0)),'')as nvarchar) end 
+ '|' + case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,0)),'')as nvarchar) end 
+ '|' + case when A.TrxType = 1 then cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,0)) as nvarchar) else 'Tax Amount' end
+ '|' + case when A.TrxType = 1 then case when A.TotalAmount = 0 then '' else cast(isnull(cast(isnull(sum(A.DonePrice * A.Quantity)/100,0)  + isnull(A.InterestAmount,0) - isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal(30,0)),'') as nvarchar) end else 'Total Amount' end
+ '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end             
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankAccountNo,'')))) end              
+ '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end 
+ '|' + case when A.StatutoryType = 0 then '2' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.StatutoryType,'2')))) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))
+ '|' + '' 
from (      
select A.InvestmentPK,A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK in (3,8,9,15) then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,C.NPWP BankAccountNo ,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentTrType from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
left join InvestmentTaxDataAcq G on A.InvestmentPK = G.InvestmentPK and G.AcqNo = 1
where    
A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15) 
" + _paramSettlementPK + @" 
and A.statusdealing = 2 

)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentPK,A.InvestmentTrType
order by A.ValueDate Asc

								
						

declare @counter int
set @counter = 1
while (@counter <= 30)
begin
	update A set A.ResultText = A.ResultText
	+ case when B.TrxType = 1 then '' else 
	+ '|' + case when B.TrxType = 1 then '' else '2' end  
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(B.Reference,'')))) end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.DoneAmount = 0 then '' else cast(isnull(cast(B.DoneAmount as decimal(30,0)), '')as nvarchar) end end 
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.AcqDate, 112),'')))) end    
	+ '|' + case when B.TrxType = 1 then '' else case when B.AcqPrice = 0 then '' else cast(isnull(cast(B.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
	+ '|' + case when B.TrxType = 1 then '' else case when B.AcqAmount = 0 then '' else cast(isnull(B.AcqAmount, '') as nvarchar) end end     
	+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxGainAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxGainAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.DaysOfHoldingInterest , 112),'')))) end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxInterestAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxInterestAmount,0) as decimal(30,0)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TotalTaxIncomeAmount = 0 then cast(0 as nvarchar) when (B.IncomeTaxGainAmount + B.IncomeTaxInterestAmount) < 0 then cast(0 as nvarchar) else cast(isnull(cast(B.TotalTaxIncomeAmount as decimal(30,0)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TaxExpensePercent = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TaxAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(ceiling(B.TaxAmount) as decimal(30,0)),'')as nvarchar) end  end 
	End  
	from #Text A
	left join InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
	where A.InvestmentPK != 0 and B.AcqNo = @counter

	set @counter = @counter + 1
end	


insert into #TaxAmount
select A.InvestmentPK,cast(sum(CEILING(B.TaxAmount)) as numeric(30,2)), cast(round(A.DoneAmount,0) + round(A.DoneAccruedInterest,0) - sum(CEILING(B.TaxAmount))  as numeric(30,2)) from Investment A
left join InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 and A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15)
" + _paramSettlementPK + @" 
and A.statusdealing = 2 
group by A.InvestmentPK,A.DoneAmount,A.DoneAccruedInterest

update A set ResultText = REPLACE(ResultText,'Tax Amount',B.TaxAmount) from #Text A 
left join #TaxAmount B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 

update A set ResultText = REPLACE(ResultText,'Total Amount',B.TotalAmount) from #Text A 
left join #TaxAmount B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 

select ResultText from #text 
END                                

";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Bond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Bond.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public string PTPCrossFund_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        
BEGIN  
SET NOCOUNT ON         
  --DROP table #Text        
create table #Text(      
[ResultText] [nvarchar](1000)  NULL          
)                        
        
                              
                             
truncate table #Text      
insert into #Text     
select 'Transaction Status|Data Type|Trade ID|Trade Date|Settlement Date|Fund Code(Seller)|Fund Code(Buyer)|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|Trade ID|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'      

insert into #Text
Select  
'NEWM' --1
+ '|' + '1' --2
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) --3
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) --Trade Date --4
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),'')))) --5
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) --Fund Code(Seller) --6
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CrossFundCode,'')))) --Fund Code(Buyer) --7
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,'')))) --8
+ '|' + '' --trxtype --9
+ '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end --10
+ '|' + case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end --11
+ '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end --12
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),'')))) --13
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),'')))) --14
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) --15
+ '|' + case when A.InterestAmount = 0 then '' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end --16
+ '|' + '' --17
+ '|' + '' --case when A.TaxCapitalGainAmount = 0 then '' else cast(isnull(cast(isnull(A.TaxCapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end --18
+ '|' + '' --case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end --19
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(sum((A.CapitalGainAmount + A.InterestAmount)*A.TaxExpensePercent/100) as decimal(30,2)),'')as nvarchar)   end -- WHT Tax --20
+ '|' + case when A.TotalAmount = 0 then '' else cast(isnull(cast(isnull(A.TotalAmount,0) as decimal(30,2)),'')as nvarchar) end --21
+ '|' + case when A.SettlementMode in (1,2) then '5' else case when A.SettlementMode in (3,4)  then '6' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end  --22           
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.TaxID,''))))    --23     
+ '|' + case when A.PurposeOfTransaction = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.PurposeOfTransaction,'3'))) ) end 
+ '|' + '2' 
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Notes,''))))
+ '|' + '' 
--+ case when A.TrxType = 1 then '' else  
+ '|' + case when A.TrxType not in (1,2) then '' else '2' end  
+ '|' + case when A.TrxType not in (1,2) then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) end 
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end end  
+ '|' + case when A.TrxType not in (1,2) then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), AcqDate, 112),'')))) end    
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(A.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(sum(A.AcqPrice * A.AcqVolume)/100 as decimal(30,2)), '')as nvarchar) end end     
+ '|' + case when A.TrxType not in (1,2) then '' else cast(isnull(cast(isnull((A.DonePrice - A.AcqPrice)/100 * A.Quantity,0) as decimal(30,2)),'')as nvarchar)  end 
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.AcqDate > A.LastCouponDate then (LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,A.AcqDate) , 112),'')))) else (LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,A.LastCouponDate) , 112),'')))) end  end -- Day Holding
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar)   end 
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(sum(A.CapitalGainAmount + A.InterestAmount) as decimal(30,2)),'')as nvarchar)   end 
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(isnull(A.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar)   end 
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(sum((A.CapitalGainAmount + A.InterestAmount)*A.TaxExpensePercent/100) as decimal(30,2)),'')as nvarchar)   end 
--End
from (      
select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.Notes, A.TrxType,E.Code SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) TaxCapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,C.NPWP TaxID,Z.Sinvestcode CrossFundCode,
round((A.DonePrice-A.AcqPrice)/100 * A.DoneVolume,0) CapitalGainAmount,A.PurposeOfTransaction
 from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
left join Fund Z on A.CrossFundFromPK = Z.FundPK and Z.status = 2
where    
A.ValueDate =  @valuedate and A.InstrumentTypePK in (2,3,9,13,15) 
and A.statusdealing = 2 and statussettlement in (1,2) and A.TrxType = 2 --"+ _paramSettlementPK + @"
)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.TaxCapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,TaxID,A.CrossFundCode,A.CapitalGainAmount,A.PurposeOfTransaction
order by A.ValueDate Asc


select * from #text 
END
";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_CrossFundBond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_CrossFundBond.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public string ImportNonAPERDFundClientInd(string _fileSource, string _userID)
        {
            string _msg;
            DateTime _dateTime = DateTime.Now;
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //delete data yang lama
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table Z_CLIENT_IND";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.Z_CLIENT_IND";
                            bulkCopy.WriteToServer(CreateDataTableFromNonAPERDFundClientTempIndFileTxt(_fileSource));
                            _msg = "Import FundClient Individual Success";
                        }

                        // logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"  
                                  Declare @SACode nvarchar(100)
select @SACode = ID From Company where status in (1,2)

declare @max int
select @max = max(fundClientPK) from fundclient
select @max = isnull(@max,0) 


insert into [dbo].[FundClient](
FundClientPK,HistoryPK,Status,ID,Name
,SACode,SellingAgentPK,SID,InvestorType,ClientCategory,IFUACode
,NamaDepanInd,NamaTengahInd,NamaBelakangInd,Nationality,IdentitasInd1
,NoIdentitasInd1,ExpiredDateIdentitasInd1,NPWP,RegistrationNPWP,CountryOfBirth
,TempatLahir,TanggalLahir,JenisKelamin,Pendidikan,MotherMaidenName
,Agama,Pekerjaan,PenghasilanInd,StatusPerkawinan,SpouseName
,InvestorsRiskProfile,MaksudTujuanInd,SumberDanaInd,AssetOwner,OtherAlamatInd1
,OtherKodeKotaInd1,OtherKodePosInd1,AlamatInd1,KodeKotaInd1,KodePosInd1
,CountryofCorrespondence,AlamatInd2,KodeKotaInd2,KodePosInd2,CountryofDomicile
,TeleponRumah,TeleponSelular,fax,Email,StatementType
,FATCA,TIN,TINIssuanceCountry
,EntryTime,EntryUsersID,LastUpdate
)
select  
ROW_NUMBER() OVER(ORDER BY Name ASC) + @max,1,2,ISNULL(ClientCode,''),ISNULL(Name,'')
,Case when SACode = @SACode then '' else SACode end,0,SID,InvestorType,InvestorType,IFUA
,ISNULL(NamaDepanInd,''),ISNULL(NamaTengahInd,''),ISNULL(NamaBelakangInd,''),ISNULL(Nationality,''),IdentitasInd1
,NoIdentitasInd1,convert(datetime,convert(varchar(10),ExpiredDateIdentitasInd1,120)) ,NPWP,RegistrationNPWP,ISNULL(CountryOfBirth,'')
,ISNULL(TempatLahir,''),convert(datetime,convert(varchar(10),TanggalLahir,120)),ISNULL(JenisKelamin,0),ISNULL(Pendidikan,0),ISNULL(MotherMaidenName,'')
,isnull(Agama,0),ISNULL(Occupation,0),ISNULL(IncomeLevel,0),ISNULL(StatusPerkawinan,0),ISNULL(SpouseName,'')
,ISNULL(InvestorsRiskProfile,0),ISNULL(MaksudTujuanInd,0),ISNULL(SumberDanaInd,0),ISNULL(AssetOwner,0),ISNULL(OtherAlamatInd1,'')
,ISNULL(OtherKodeKotaInd1,0),ISNULL(OtherKodePosInd1,''),ISNULL(AlamatInd1,''),ISNULL(KodeKotaInd1,0),ISNULL(KodePosInd1,'')
,ISNULL(CountryofCorrespondence,''),ISNULL(AlamatInd2,''),ISNULL(KodeKotaInd2,0),ISNULL(KodePosInd2,''),ISNULL(CountryofDomicile,'')
,ISNULL(TeleponRumah,''),ISNULL(TeleponSelular,''),ISNULL(fax,''),ISNULL(Email,''),ISNULL(StatementType,0)
,ISNULL(FATCA,0),ISNULL(TIN,''),ISNULL(TINIssuanceCountry,'')
,OpeningDate,@UserID,@TimeNow
from Z_CLIENT_IND
where IFUA not in
(
	Select distinct ifuaCode from fundclient
) and LEFT(ClientCode,1) <> 'y'
                                ";
                                cmd1.CommandTimeout = 0;
                                cmd1.Parameters.AddWithValue("@UserID", _userID);
                                cmd1.Parameters.AddWithValue("@TimeNow", _dateTime);
                                cmd1.ExecuteNonQuery();
                            }
                            _msg = "Import FundClient Individual Success";

                        }



                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        private DataTable CreateDataTableFromNonAPERDFundClientTempIndFileTxt(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SACode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IFUA";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Name";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ClientCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ClientCategory";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NamaDepanInd";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NamaTengahInd";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NamaBelakangInd";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Nationality";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IdentitasInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NoIdentitasInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ExpiredDateIdentitasInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NPWP";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RegistrationNPWP";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CountryOfBirth";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TempatLahir";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TanggalLahir";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "JenisKelamin";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Pendidikan";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "MotherMaidenName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Agama";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Pekerjaan";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PenghasilanInd";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "StatusPerkawinan";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SpouseName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InvestorsRiskProfile";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "MaksudTujuanInd";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SumberDanaInd";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AssetOwner";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "OtherAlamatInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "OtherKodeKotaInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "OtherKodePosInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AlamatInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "KodeKotaInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "KodePosInd1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CountryofCorrespondence";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AlamatInd2";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "KodeKotaInd2";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "KodePosInd2";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CountryofDomicile";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TeleponRumah";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TeleponSelular";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Fax";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Email";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "StatementType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FATCA";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TIN";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TINIssuanceCountry";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Status";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "OpeningDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "DeactivationDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            StreamReader sr = new StreamReader(_fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });
                string _noIden = s[12].ToString();

                dr = dt.NewRow();
                dr["SACode"] = s[0];
                dr["SID"] = s[2];
                dr["IFUA"] = s[3];
                dr["Name"] = s[4];
                dr["ClientCode"] = s[5];
                dr["ClientCategory"] = s[6];
                dr["NamaDepanInd"] = s[7];
                dr["NamaTengahInd"] = s[8];
                dr["NamaBelakangInd"] = s[9];
                dr["Nationality"] = s[10];
                dr["IdentitasInd1"] = s[11];
                dr["NoIdentitasInd1"] = _noIden;
                dr["ExpiredDateIdentitasInd1"] = s[13];
                dr["NPWP"] = s[14];
                dr["RegistrationNPWP"] = s[15];
                dr["CountryOfBirth"] = s[16];
                dr["TempatLahir"] = s[17];
                dr["TanggalLahir"] = s[18];
                dr["JenisKelamin"] = s[19];
                dr["Pendidikan"] = s[20];
                dr["MotherMaidenName"] = s[21];
                dr["Agama"] = s[22];
                dr["Pekerjaan"] = s[23];
                dr["PenghasilanInd"] = s[24];
                dr["StatusPerkawinan"] = s[25];
                dr["SpouseName"] = s[26];
                dr["InvestorsRiskProfile"] = s[27];
                dr["MaksudTujuanInd"] = s[28];
                dr["SumberDanaInd"] = s[29];
                dr["AssetOwner"] = s[30];
                dr["OtherAlamatInd1"] = s[31];
                dr["OtherKodeKotaInd1"] = s[32];
                dr["OtherKodePosInd1"] = s[33];
                dr["AlamatInd1"] = s[34];
                dr["KodeKotaInd1"] = s[35];
                dr["KodePosInd1"] = s[37];
                dr["CountryofCorrespondence"] = s[38];
                dr["AlamatInd2"] = s[39];
                dr["KodeKotaInd2"] = s[40];
                dr["KodePosInd2"] = s[42];
                dr["CountryofDomicile"] = s[43];
                dr["TeleponRumah"] = s[44];
                dr["TeleponSelular"] = s[45];
                dr["Fax"] = s[46];
                dr["Email"] = s[47];
                dr["StatementType"] = s[48];
                dr["FATCA"] = s[49];
                dr["TIN"] = s[50];
                dr["TINIssuanceCountry"] = s[51];
                dr["Status"] = s[52];
                dr["OpeningDate"] = s[53];
                dr["DeactivationDate"] = s[54];

                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }


        #region NON APERD TRANSACTION TXT
        public string TransactionSubsRedempText(string _fileSource, string _userID)
        {
            string _msg = "";
            try
            {
                DateTime _now = DateTime.Now;

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table Z_TRANSACTION";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.Z_TRANSACTION";
                            bulkCopy.WriteToServer(CreateDataTableFromSubsRedempTempTxtFile(_fileSource));
                        }

                        // logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"       
        
        UPDATE Z_TRANSACTION
        
        SET nominal = '0' WHERE nominal = ''
        
        
        UPDATE Z_TRANSACTION
        SET nominal = '0' WHERE nominal is null
        
        UPDATE Z_TRANSACTION
        SET Unit = '0' WHERE Unit = ''
        
        
        UPDATE Z_TRANSACTION
        SET Unit = '0' WHERE Unit is null
        
        UPDATE Z_TRANSACTION
        SET FeeUnit = '0' WHERE FeeUnit = ''
        
        
        UPDATE Z_TRANSACTION
        SET FeeUnit = '0' WHERE FeeUnit is null
        
        UPDATE Z_TRANSACTION
        SET FeeNominal = '0' WHERE FeeNominal = ''
        
        
        UPDATE Z_TRANSACTION
        SET FeeNominal = '0' WHERE FeeNominal is null
        
        DELETE dbo.ClientSubscription
        WHERE ValueDate
        IN
        (
        	SELECT DISTINCT TransactionDate FROM dbo.Z_TRANSACTION
        	WHERE TransactionType = 'subscription'
        ) and Description = 'Data Migration'
             
        DELETE dbo.ClientRedemption
        WHERE ValueDate
        IN
        (
        	SELECT DISTINCT TransactionDate FROM dbo.Z_TRANSACTION
        	WHERE TransactionType = 'Redemption'
        ) and Description = 'Data Migration'
        
        
        DECLARE @MaxPK INT
        
        SELECT @MaxPK = MAX(ClientSubscriptionPK) + 1 FROM dbo.ClientSubscription
        
        SET @MaxPK = ISNULL(@MaxPK,0)
        
        INSERT INTO dbo.ClientSubscription
                ( ClientSubscriptionPK ,
                  HistoryPK ,Selected ,Status ,Notes ,Type ,FeeType ,NAVDate ,
                  ValueDate ,NAV ,FundPK ,
                  FundClientPK ,CashRefPK ,Description ,
                  CashAmount ,UnitAmount ,TotalCashAmount ,
                  TotalUnitAmount ,SubscriptionFeePercent ,
                  SubscriptionFeeAmount ,AgentPK ,
                  AgentFeePercent ,AgentFeeAmount ,
                  DepartmentPK ,CurrencyPK ,
                  AutoDebitDate ,IsBOTransaction ,
                  BitSinvest ,Posted ,
                  EntryUsersID ,
                  EntryTime ,
                 LastUpdate ,
                  BitImmediateTransaction ,
                  TransactionPK ,IsFrontSync ,
                  ReferenceSInvest ,BankRecipientPK ,
                  Tenor ,InterestRate ,PaymentTerm ,
                  SumberDana ,TransactionPromoPK
                )
        SELECT @maxPK + ROW_NUMBER() OVER(ORDER BY TransactionDate ASC),1,0,1,'',1,
        Case when CAST(isnull(A.FeeNominal,0) AS NUMERIC(22,4)) > 0 then 2 else 1 end
        ,TransactionDate,TransactionDate,0,
        B.FundPK,C.FundClientPK,0,'Data Migration',CAST(A.Nominal AS NUMERIC(22,4)),0,CAST(A.Nominal AS NUMERIC(22,4)) - CAST(A.FeeNominal AS NUMERIC(22,4)),0,0,
        CAST(A.FeeNominal AS NUMERIC(22,4)) ,C.SellingAgentPK,0,0
        ,1,1,0,1,0,0,@UsersID,@LastUpdate,@LastUpdate,0,'',0,A.ReferenceNo,0,0,0,0,0,0
        FROM Z_TRANSACTION A
        LEFT JOIN Fund B ON A.FundCode = B.SInvestCode AND B.status IN (1,2)
        LEFT JOIN Fundclient C ON A.IFUA = C.IFUACode AND C.status IN (1,2)
        WHERE A.TransactionType = 1
        and CHARINDEX('/',ISNULL(A.SAReference,'')) <> 7
        
        SELECT @MaxPK = MAX(ClientRedemptionPK) + 1 FROM dbo.ClientRedemption
        
        SET @MaxPK = ISNULL(@MaxPK,0)
        
        INSERT INTO dbo.ClientRedemption
                ( ClientRedemptionPK ,
                  HistoryPK ,Selected ,Status ,Notes ,Type ,FeeType ,NAVDate,
                  ValueDate ,PaymentDate,NAV ,FundPK ,
                  FundClientPK ,CashRefPK,BitRedemptionAll ,Description ,
                  CashAmount ,UnitAmount ,TotalCashAmount ,
                  TotalUnitAmount ,RedemptionFeePercent ,
                  RedemptionFeeAmount ,AgentPK ,
                  AgentFeePercent ,AgentFeeAmount ,
                  DepartmentPK ,CurrencyPK ,
                  IsBOTransaction ,
                  BitSinvest ,Posted ,
                  EntryUsersID ,
                  EntryTime ,
        		  LastUpdate ,
                  TransactionPK ,IsFrontSync ,
                  ReferenceSInvest ,BankRecipientPK,TransferType
                )
        
        
        SELECT @maxPK + ROW_NUMBER() OVER(ORDER BY TransactionDate ASC),1,0,1,'',1,
        Case when CAST(isnull(A.FeeNominal,0) AS NUMERIC(22,4)) > 0 then 2 else 1 end
        ,TransactionDate,TransactionDate,A.PaymentDate,0,
        B.FundPK,C.FundClientPK,0,CASE WHEN A.AllUnit = 'Y' THEN 1 ELSE 0 end,
        'Data Migration',CAST(A.Nominal AS NUMERIC(22,4)),CAST(A.Unit AS Decimal(22,4)),CAST(A.Nominal AS NUMERIC(22,4)) - CAST(A.FeeNominal AS NUMERIC(22,4)),0,0,A.FeeNominal,C.SellingAgentPK,0,0
        ,1,1,0,1,0,@UsersID,@LastUpdate,@LastUpdate,0,0,A.ReferenceNo,1,CASE WHEN A.TransferType = 'SKNBI' THEN 1 WHEN A.TransferType = 'RTGS' THEN 2 ELSE 3 end
        FROM Z_TRANSACTION A
        LEFT JOIN Fund B ON A.FundCode = B.SInvestCode AND B.status IN (1,2)
        LEFT JOIN Fundclient C ON A.IFUA = C.IFUACode AND C.status IN (1,2)
        WHERE A.TransactionType = 2 
        and CHARINDEX('/',ISNULL(A.SAReference,'')) <> 7
     
        
                                        ";

                                cmd1.Parameters.AddWithValue("@UsersID", _userID);
                                cmd1.Parameters.AddWithValue("@LastUpdate", _now);

                                cmd1.ExecuteNonQuery();

                            }
                            _msg = "Import Transaction Done";

                        }

                    }
                }



                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public string TransactionSwitchingText(string _fileSource, string _userID)
        {
            string _msg = "";
            try
            {
                DateTime _now = DateTime.Now;

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table Z_TRANSACTION_SWITCHING";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.Z_TRANSACTION_SWITCHING";
                            bulkCopy.WriteToServer(CreateDataTableFromSwitchingTempTxtFile(_fileSource));

                        }

                        // logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"     
        
        
        UPDATE Z_TRANSACTION_SWITCHING
        SET SwitchOutNominal = '0' WHERE SwitchOutNominal = ''
        
        UPDATE Z_TRANSACTION_SWITCHING
        SET SwitchOutUnit = '0' WHERE SwitchOutUnit = ''
        
        UPDATE Z_TRANSACTION_SWITCHING
        SET FeePercent = '0' WHERE FeePercent = ''
        
        UPDATE Z_TRANSACTION_SWITCHING
        SET Nominal = '0' WHERE Nominal = ''
        
        DELETE dbo.ClientSwitching
        WHERE ValueDate
        IN
        (
        	SELECT DISTINCT TransactionDate FROM dbo.Z_TRANSACTION_SWITCHING
        
        ) and Description = 'Data Migration'
        
        DECLARE @MaxPK INT
        
        SELECT @MaxPK = MAX(ClientswitchingPK) + 1 FROM dbo.Clientswitching
        
        SET @MaxPK = ISNULL(@MaxPK,0)
        
        INSERT INTO dbo.ClientSwitching
                ( ClientSwitchingPK ,          HistoryPK ,
                  Selected ,          Status ,
                  Notes ,          FeeType ,
                  FeeTypeMode ,          NAVDate ,
                  ValueDate ,          PaymentDate ,
                  NAVFundFrom ,          NAVFundTo ,
                  FundPKFrom ,          FundPKTo ,
                  FundClientPK ,          CashRefPKFrom ,
                  CashRefPKTo ,          TransferType ,
                  Description ,          BitSwitchingAll ,
                  CashAmount ,          UnitAmount ,
                  SwitchingFeePercent ,          SwitchingFeeAmount ,
                  TotalCashAmountFundFrom ,          TotalCashAmountFundTo ,
                  TotalUnitAmountFundFrom ,          TotalUnitAmountFundTo ,
                  CurrencyPK ,          IsBoTransaction ,
                  BitSinvest ,          FeeTypeMethod ,
                  Posted ,         
                  EntryUsersID ,          EntryTime ,
               
                  LastUpdate ,               IsProcessed ,
                  UserSwitchingPK ,          IsFrontSync ,
                  TransactionPK ,          ReferenceSInvest ,
                  AgentPK ,          Type
                )
        SELECT @MaxPK + ROW_NUMBER() OVER(ORDER BY TransactionDate ASC),1,0,1,'',FeeChargeFund ,1,TransactionDate,TransactionDate,PaymentDate,
        0,0,B.FundPK,C.FundPK,D.FundClientPK,0,0,CASE WHEN A.TransferType = 'SKNBI' THEN 1 WHEN A.TransferType = 'RTGS' THEN 2 ELSE 3 END,
        'Data Migration',CASE WHEN A.SwitchOutAllUnit = 'Y' THEN 1 ELSE 0 END, CAST(A.SwitchOutNominal AS NUMERIC(18,4)),CAST(A.SwitchOutUnit AS NUMERIC(18,4)) ,
        CAST(A.FeePercent AS NUMERIC(18,4)),CAST(A.Nominal AS NUMERIC(18,4)),
        CAST(A.SwitchOutNominal AS NUMERIC(18,4)) - CAST(A.Nominal AS NUMERIC(18,4)),0,0,0,1,1,0,1,0,@UsersID,@LastUpdate,@LastUpdate,0,0,0,
        '',A.ReferenceNo,D.SellingAgentPK,1
        FROM Z_TRANSACTION_SWITCHING A
        LEFT JOIN Fund B ON A.SwitchOutFundCode = B.SInvestCode AND B.status IN (1,2)
        LEFT JOIN Fund C ON A.SwitchInFundCode = C.SInvestCode AND C.status IN (1,2)
        LEFT JOIN FundClient D ON A.IFUA = D.IFUACode AND D.status IN (1,2)
        where CHARINDEX('/',ISNULL(A.SAReferenceNo,'')) <> 7
        ";

                                cmd1.Parameters.AddWithValue("@UsersID", _userID);
                                cmd1.Parameters.AddWithValue("@LastUpdate", _now);
                                cmd1.ExecuteNonQuery();

                            }
                            _msg = "Import Transaction Done";

                        }

                    }
                }



                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromSubsRedempTempTxtFile(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransactionDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransactionType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ReferenceNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Status";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMFeeAmendment";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMPaymentDateAmendment";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SACode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SAName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IFUA";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IFUAName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FundCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FundName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CBCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FundCCY";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Nominal";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Unit";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AllUnit";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FeeNominal";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FeeUnit";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FeePercent";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransferPath";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RedmSeqCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RedmBICCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RedmBIMemberCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RedmBankName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RedmPaymentNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RedmPaymentName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PaymentDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransferType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InputDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "UploadReference";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SAReference";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CBStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CBCompletionStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            StreamReader sr = new StreamReader(_fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });


                dr = dt.NewRow();

                dr["TransactionDate"] = s[0];
                dr["TransactionType"] = s[1];
                dr["ReferenceNo"] = s[2];
                dr["SACode"] = s[3];
                dr["IFUA"] = s[4];
                dr["FundCode"] = s[5];
                dr["Nominal"] = s[6];
                dr["Unit"] = s[7];
                dr["AllUnit"] = s[8];
                dr["FeeNominal"] = s[9];
                dr["FeeUnit"] = s[10];
                dr["FeePercent"] = s[11];
                dr["RedmSeqCode"] = s[12];
                dr["RedmBICCode"] = s[13];
                dr["RedmBIMemberCode"] = s[14];
                dr["RedmPaymentNo"] = s[15];
                dr["PaymentDate"] = s[16];
                dr["TransferType"] = s[17];
                dr["SAReference"] = s[18];

                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }

        private DataTable CreateDataTableFromSwitchingTempTxtFile(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransactionDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransactionType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ReferenceNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutIn";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Status";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMFeeAmendment";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMPaymentDateAmendment";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SACode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SAName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IFUA";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IFUAName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutFundCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutFundName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutCBCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutFundCCY";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutNominal";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutUnit";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutAllUnit";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FeeChargeFund";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Nominal";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Unit";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FeePercent";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInFundCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInFundName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInCBCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInFundCCY";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInAmountCCY";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInNominal";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInFundSubName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInFundSubNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PaymentDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransferType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InputDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "UploadReferenceNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SAReferenceNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutCBStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInCBStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchOutCBCompletionStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SwitchInCBCompletionStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            StreamReader sr = new StreamReader(_fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });


                dr = dt.NewRow();
                dr["TransactionDate"] = s[0];
                dr["TransactionType"] = s[1];
                dr["ReferenceNo"] = s[2];
                dr["SACode"] = s[3];
                dr["IFUA"] = s[4];
                dr["SwitchOutFundCode"] = s[5];
                dr["SwitchOutNominal"] = s[6];
                dr["SwitchOutUnit"] = s[7];
                dr["SwitchOutAllUnit"] = s[8];
                dr["FeeChargeFund"] = s[9];
                dr["Nominal"] = s[10];
                dr["Unit"] = s[11];
                dr["FeePercent"] = s[12];
                dr["SwitchInFundCode"] = s[13];
                dr["PaymentDate"] = s[14];
                dr["TransferType"] = s[15];
                dr["SAReferenceNo"] = s[16];


                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }

        #endregion


        public string Generate_PortfolioRevaluation(DateTime _date, string _usersID)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"      
          
                        Declare @InstrumentPK int 
Declare @LastVolume numeric(19,4) 
Declare @InstrumentTypePK int 
Declare @CadanganAccountPK int 
Declare @UnrealisedAccountPK int 
Declare @MarketValue Numeric(19,4) 
Declare @PortfolioValue Numeric(19,4) 
Declare @CadanganValue Numeric(19,4)  
Declare @MarginValue Numeric(19,4) 
Declare @Amount numeric(19,4) 
Declare @PrevMarketValue numeric(19,4) 
Declare @TrxAmount numeric(19,4) 
Declare @SellVolume numeric(19,4) 
Declare @SellAmount numeric(19,4) 
Declare @Sell int
Declare @Buy int
Declare @CompanyAccountTradingPK int
                        
create table #ReferenceTemp
(Reference nvarchar(50))

Declare @JourHeader int  
set @JourHeader = 0    
Declare @JournalPK int 
Declare @PeriodPK int 
Declare @Reference nvarchar(50)    
Select @PeriodPK = PeriodPK From Period Where DateFrom <= @Date and Dateto >= @Date and Status = 2  
Select @JournalPK = isnull(Max(JournalPK),0) from Journal    


insert into #ReferenceTemp (Reference)
exec getJournalReference @Date,'GJ',@Reference out  
 
set @JournalPK = @JournalPK + 1   
INSERT INTO [Journal]  
([JournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate]  
,[TrxNo],[TrxName],[Reference],[Type],[Description],[Posted],[PostedBy]  
,[PostedTime],[EntryUsersID],[EntryTime]  
,[ApprovedUsersID],[ApprovedTime],[DBUserID],LastUpdate)      
SELECT @JournalPK,1,2,'Portfolio Revaluation',@PeriodPK, @Date
,0,'',@Reference,1,'Portfolio Revaluation',1,@UsersID
,@TimeNow,@UsersID,@TimeNow,@UsersID,@TimeNow,@UsersID,@TimeNow 

Declare @AutoNo int 
set @AutoNo = 0   
DECLARE A CURSOR FOR 

Select InstrumentPK,LastVolume ,InstrumentTypePK,Buy,Sell,CompanyAccountTradingPK
from (
Select A.InstrumentPK,isnull(sum(A.BuyVolume) - sum(A.SellVolume),0) LastVolume ,A.InstrumentTypePK,sum(Buy) Buy, sum(Sell) Sell,CompanyAccountTradingPK    
from (
select InstrumentPK,sum(Volume) BuyVolume,0 SellVolume,InstrumentTypePK,0 Buy,0 Sell,CompanyAccountTradingPK from trxPortfolio 
where ValueDate < @Date and Posted = 1 and trxType = 1  and Revised = 0 and InstrumentTypePK <> 2 and status = 2
Group By InstrumentPK,InstrumentTypePK,CompanyAccountTradingPK  
UNION ALL   
select InstrumentPK,sum(Volume) BuyVolume,0 SellVolume,InstrumentTypePK,1 Buy,0 Sell,CompanyAccountTradingPK from trxPortfolio 
where ValueDate = @Date and Posted = 1 and trxType = 1  and Revised = 0 and InstrumentTypePK <> 2 and status = 2
Group By InstrumentPK,InstrumentTypePK,CompanyAccountTradingPK  
UNION ALL 
select InstrumentPK,0 BuyVolume,sum(Volume) SellVolume,InstrumentTypePK,0 Buy,0 Sell,CompanyAccountTradingPK from trxPortfolio 
where ValueDate < @Date and Posted = 1  and trxType = 2  and Revised = 0 and InstrumentTypePK <> 2 and status = 2
Group By InstrumentPK,InstrumentTypePK,CompanyAccountTradingPK  
UNION ALL   
select InstrumentPK,0 BuyVolume,sum(Volume) SellVolume,InstrumentTypePK,0 Buy,1 Sell,CompanyAccountTradingPK from trxPortfolio 
where ValueDate = @Date and Posted = 1  and trxType = 2  and Revised = 0 and InstrumentTypePK <> 2 and status = 2
Group By InstrumentPK,InstrumentTypePK,CompanyAccountTradingPK  


-- BOND
UNION ALL
select InstrumentPK,sum(Volume) BuyVolume,0 SellVolume,InstrumentTypePK,0 Buy,0 Sell,CompanyAccountTradingPK from trxPortfolio 
where SettledDate < @Date and Posted = 1 and trxType = 1  and Revised = 0 and InstrumentTypePK = 2 and status = 2
Group By InstrumentPK,InstrumentTypePK,CompanyAccountTradingPK  
UNION ALL   
select InstrumentPK,sum(Volume) BuyVolume,0 SellVolume,InstrumentTypePK,1 Buy,0 Sell,CompanyAccountTradingPK from trxPortfolio 
where dbo.fworkingday(SettledDate,1) = @Date and Posted = 1 and trxType = 1  and Revised = 0 and InstrumentTypePK = 2 and status = 2
Group By InstrumentPK,InstrumentTypePK,CompanyAccountTradingPK  
UNION ALL 
select InstrumentPK,0 BuyVolume,sum(Volume) SellVolume,InstrumentTypePK,0 Buy,0 Sell,CompanyAccountTradingPK from trxPortfolio 
where SettledDate < @Date and Posted = 1  and trxType = 2  and Revised = 0 and InstrumentTypePK = 2 and status = 2
Group By InstrumentPK,InstrumentTypePK ,CompanyAccountTradingPK 
UNION ALL   
select InstrumentPK,0 BuyVolume,sum(Volume) SellVolume,InstrumentTypePK,0 Buy,1 Sell,CompanyAccountTradingPK from trxPortfolio 
where SettledDate = @Date and Posted = 1  and trxType = 2  and Revised = 0 and InstrumentTypePK = 2 and status = 2
Group By InstrumentPK,InstrumentTypePK ,CompanyAccountTradingPK 
UNION ALL   
select A.InstrumentPK,sum(Balance) BuyVolume,0 SellVolume,1 InstrumentTypePK,0 Buy,0 Sell,1 from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
where Date = @Date and FundPK = 9999 
Group By A.InstrumentPK

)A 
Group By A.InstrumentPK,A.InstrumentTypePK,CompanyAccountTradingPK
)B
where (LastVolume <> 0) or (LastVolume = 0 and Sell = 1)

OPEN A 
FETCH NEXT FROM A 
INTO @InstrumentPk,@LastVolume,@InstrumentTypePK,@Buy,@Sell,@CompanyAccountTradingPK 
WHILE @@FETCH_STATUS = 0  
BEGIN 
set @MarketValue = 0 
If @InstrumentTypePK in (1,2,4) 
BEGIN 
IF (@InstrumentTypePK = 1)
BEGIN
    
IF(@CompanyAccountTradingPK = 1)
BEGIN
	Select @CadanganAccountPK = CadanganEquity ,@UnrealisedAccountPK = 257 From AccountingSetup 
	Where Status = 2
END
ELSE
BEGIN
	Select @CadanganAccountPK = CadanganEquity ,@UnrealisedAccountPK = 109 From AccountingSetup 
	Where Status = 2
END



    IF (@Sell = 1)
    BEGIN
	    set @MarketValue =  @LastVolume   * (dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc_ByCompanyAccountTradingPK(@date,@InstrumentPK,@CompanyAccountTradingPK))         
	    set @PrevMarketValue =  dbo.FGetLastVolumeAccByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK) * (dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc_ByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK)) 
	    select @Amount = @MarketValue - @PrevMarketValue 
		
    END
    ELSE
    BEGIN
        IF NOT EXISTS(select * from CorporateActionResult where FundPK = 9999 and Date = @Date and InstrumentPK = @InstrumentPK)
        BEGIN


	        set @MarketValue =  dbo.FGetLastVolumeAccByCompanyAccountTradingPK(@date,@InstrumentPK,@CompanyAccountTradingPK) * (dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc(@Date,@InstrumentPK))                 
            set @PrevMarketValue = dbo.FGetLastVolumeAccByCompanyAccountTradingPK(dbo.fworkingday(@date,-1),@InstrumentPK,@CompanyAccountTradingPK) * (dbo.FGetLastClosePriceForFundPosition(dbo.fworkingday(@date,-1),@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc(dbo.fworkingday(@date,-1),@InstrumentPK))      
            select @Amount = @MarketValue - @PrevMarketValue  
        END
        ELSE
        BEGIN
            set @MarketValue =  @LastVolume   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)            
            set @PrevMarketValue = dbo.FGetLastVolumeAccByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK) * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) 
            select @Amount = @MarketValue - @PrevMarketValue  
        END
    END

END
ELSE IF (@InstrumentTypePK = 2)
BEGIN
Select @CadanganAccountPK = CadanganBond ,@UnrealisedAccountPK = UnrealisedBond From AccountingSetup 
Where Status = 2


    IF (@Buy = 1) -- (LastPrice - PrevPrice) * VolumeYesterday
    BEGIN
        set @MarketValue =  dbo.FGetLastVolumeAccByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK)   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)/100            
	    set @PrevMarketValue =  dbo.FGetLastVolumeAccByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK) * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) /100
	    select @Amount = @MarketValue - @PrevMarketValue  
    END
	ELSE IF (@Sell = 1)
    BEGIN
	    set @MarketValue =  @LastVolume   * (dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc_ByCompanyAccountTradingPK(@date,@InstrumentPK,@CompanyAccountTradingPK))         
	    set @PrevMarketValue =  dbo.FGetLastVolumeAccByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK) * (dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc_ByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK)) 
	    select @Amount = @MarketValue - @PrevMarketValue 
		
    END
    ELSE
    BEGIN
	    set @MarketValue =  @LastVolume   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK) /100           
	    set @PrevMarketValue = @LastVolume * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) /100
	    select @Amount = @MarketValue - @PrevMarketValue  
    END

END
ELSE IF (@InstrumentTypePK = 4)
BEGIN
IF(@CompanyAccountTradingPK = 1)
BEGIN
	Select @CadanganAccountPK = CadanganReksadana ,@UnrealisedAccountPK = 258 From AccountingSetup 
	Where Status = 2
END
ELSE
BEGIN
	Select @CadanganAccountPK = CadanganReksadana ,@UnrealisedAccountPK = 107 From AccountingSetup 
	Where Status = 2
END



    IF (@Buy = 1) -- (LastPrice - PrevPrice) * VolumeYesterday
    BEGIN
	    set @MarketValue =  dbo.FGetLastVolumeAccByCompanyAccountTradingPK(@date,@InstrumentPK,@CompanyAccountTradingPK)   * (dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc_ByCompanyAccountTradingPK(@date,@InstrumentPK,@CompanyAccountTradingPK))          
	    set @PrevMarketValue =   dbo.FGetLastVolumeAccByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK)   * (dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc_ByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK))    
	    select @Amount = @MarketValue - @PrevMarketValue  

    END
	ELSE IF (@Sell = 1)
    BEGIN
	    set @MarketValue =  @LastVolume   * (dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc(@date,@InstrumentPK))         
	    set @PrevMarketValue =  dbo.FGetLastVolumeAccByCompanyAccountTradingPK(dbo.Fworkingday(@Date,-1),@InstrumentPK,@CompanyAccountTradingPK) * (dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) - dbo.FGetLastAvgFromInvestment_Acc(dbo.Fworkingday(@Date,-1),@InstrumentPK)) 
	    select @Amount = @MarketValue - @PrevMarketValue 
		
    END
    ELSE
    BEGIN
	    set @MarketValue =  @LastVolume   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)            
	    set @PrevMarketValue = @LastVolume * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) 
	    select @Amount = @MarketValue - @PrevMarketValue  
    END




END
			             
 
Declare @AllocDepartmentPK int 
Declare @AllocPercent numeric(18,8) 
declare @AfterAllocateAmount numeric(18,4) 
Declare @CounterAmount numeric(18,4) 
Declare @Count Int 
Declare @Inc int 
set @Inc = 0 set @CounterAmount = 0 
set @AfterAllocateAmount = 0   
Declare @RoundAmount numeric(19,4) 
Declare @RoundingDepartmentPK int 
Declare @LastAmount Numeric(19,4)  
Declare @FinalAmountAfterRounding numeric(19,4)  
If @Amount < 0 BEGIN       
--Mulai dari sini
Select @Count = isnull(Count(DepartmentPK) ,0) From AccountAllocateByCostCenterSetup 
where AccountPK =  @UnrealisedAccountPK and status = 2  
if @Count = 0 
begin 
Set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate)  
Select @JournalPK,@AutoNo,1,2,@UnrealisedAccountPK,1,0,isnull(@AllocDepartmentPk,3),0,0,@InstrumentPK,0,'','','D',Abs(@Amount),Abs(@Amount),0,1,Abs(@Amount),0,@UsersID,@TimeNow 
end   
else 
begin 
Declare B Cursor For 
Select departmentPK,AllocationPercentage From AccountAllocateByCostCenterSetup 
where AccountPK =  @UnrealisedAccountPK and status = 2 
Open B   
Fetch Next From B 
Into @AllocDepartmentPk,@AllocPercent  
While @@Fetch_Status  = 0 
Begin 	
Set @AfterAllocateAmount = abs(@amount) * @AllocPercent/100  
Set @CounterAmount =  @CounterAmount + @AfterAllocateAmount 
set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate) 
Select @JournalPK,@AutoNo,1,2,@UnrealisedAccountPK,1,0,isnull(@AllocDepartmentPk,3),0,0,@InstrumentPK,0,'','','D',isnull(@AfterAllocateAmount,0),   
isnull(@AfterAllocateAmount,0),0,1,isnull(@AfterAllocateAmount,0),0,@UsersID,@TimeNow  
set @Inc = @Inc + 1 
IF @Inc = @count 
begin Set @RoundAmount = @CounterAmount - abs(@Amount) 
if  @RoundAmount <> 0 
begin 
select top 1 @roundingDepartmentPK = DepartmentPK From AccountAllocateByCostCenterSetup  
where AccountPK = @UnrealisedAccountPK and status = 2 and BitRounding = 1  
Select @LastAmount =  Amount From JournalDetail 
where JournalPK = @JournalPK and AccountPK = @UnrealisedAccountPK and DepartmentPK = @RoundingDepartmentPK and status = 2 
set @FinalAmountAfterRounding = @lastAmount +  @RoundAmount  
Update JournalDetail Set Amount = @FinalAmountAfterRounding,Debit = @FinalAmountAfterRounding,baseDebit = @FinalAmountAfterRounding * CurrencyRate 
where JournalPK = @JournalPK and AccountPK = @UnrealisedAccountPK and DepartmentPK = @RoundingDepartmentPK and status = 2  end   end  
FETCH NEXT FROM B 
INTO  @AllocDepartmentPk,@AllocPercent  
End  
Close B 
DEALLOCATE  B  
end   
set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate) 
Select @JournalPK,@AutoNo,1,2,@CadanganAccountPK,1,0,3,0,0,@InstrumentPK,0,'','','C',abs(@amount), 0,abs(@amount),1,0,abs(@amount),@UsersID,@TimeNow 
END   
If @Amount > 0 
Begin   
set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate) 
Select @JournalPK,@AutoNo,1,2,@CadanganAccountPK,1,0,3,0,0,@InstrumentPK,0,'','','D',abs(@amount),abs(@amount),0,1,abs(@amount),0,@UsersID,@TimeNow   
set @AutoNo = @AutoNo + 1   

Select @Count = isnull(Count(DepartmentPK) ,0) From AccountAllocateByCostCenterSetup 
where AccountPK =  @UnrealisedAccountPK and status = 2  
if @Count = 0 
begin   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate)   
Select @JournalPK,@AutoNo,1,2,@UnrealisedAccountPK,1,0,3,0,0,@InstrumentPK,0,'','','C',abs(@amount), 0,abs(@amount),1,0,abs(@amount),@UsersID,@TimeNow 
end  
else 
begin 
Declare C Cursor For 
Select departmentPK,AllocationPercentage From AccountAllocateByCostCenterSetup 
where AccountPK =  @UnrealisedAccountPK and status = 2 
Open C   
Fetch Next From C 
Into @AllocDepartmentPk,@AllocPercent  
While @@Fetch_Status  = 0 
Begin 	
Set @AfterAllocateAmount = abs(@amount) * @AllocPercent/100  
Set @CounterAmount =  @CounterAmount + @AfterAllocateAmount 
set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate) 
Select @JournalPK,@AutoNo,1,2,@UnrealisedAccountPK,1,0,isnull(@AllocDepartmentPk,3),0,0,@InstrumentPK,0,'','','C',isnull(@AfterAllocateAmount,0),   
0,isnull(@AfterAllocateAmount,0),1,0,isnull(@AfterAllocateAmount,0),@UsersID,@TimeNow  
set @Inc = @Inc + 1 
IF @Inc = @count 
begin 
Set @RoundAmount = @CounterAmount - abs(@Amount) 
if  @RoundAmount <> 0 
begin 
select top 1 @roundingDepartmentPK = DepartmentPK From AccountAllocateByCostCenterSetup  
where AccountPK = @UnrealisedAccountPK and status = 2 and BitRounding = 1  
Select @LastAmount =  Amount From JournalDetail 
where JournalPK = @JournalPK and AccountPK = @UnrealisedAccountPK and DepartmentPK = @RoundingDepartmentPK and status = 2 
set @FinalAmountAfterRounding = @lastAmount  + @RoundAmount  
Update JournalDetail Set Amount = @FinalAmountAfterRounding,Debit = @FinalAmountAfterRounding,baseDebit = @FinalAmountAfterRounding * CurrencyRate 
where JournalPK = @JournalPK and AccountPK = @UnrealisedAccountPK and DepartmentPK = @RoundingDepartmentPK and status = 2  end   
end  
FETCH NEXT FROM C 
INTO  @AllocDepartmentPk,@AllocPercent  
End  
Close C 
DEALLOCATE  C  
end end end   

FETCH NEXT FROM A 
INTO @InstrumentPk,@LastVolume,@InstrumentTypePK,@Buy,@Sell, @CompanyAccountTradingPK
END 
CLOSE A  
DEALLOCATE A

DECLARE @combinedString VARCHAR(MAX)
SELECT @combinedString = COALESCE(@combinedString + ', ', '') + Reference
FROM #ReferenceTemp
IF (@combinedString is null)
BEGIN
    SELECT 'No Data Revaluation, Please Check Close Price' as Result
END
ELSE
BEGIN
    SELECT 'Portfolio Revaluation Success ! Reference is : ' + @combinedString as Result
END

                        
                        ";


                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@TimeNow", _dateTimeNow);


                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToString(dr["Result"]);

                            }
                            return "";
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public void GenerateCurrencyReval(CurrencyReval _CurrencyReval)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                 
DECLARE @UnrealizedAccountUSDPK INT
DECLARE @UnrealizedAccountSGDPK INT
DECLARE @unrealizedAccountPK INT


SELECT @UnrealizedAccountSGDPK = UnrealizedAccountSGD -- UnrealisedSGD
 , @UnrealizedAccountUSDPK = UnrealizedAccountUSD FROM dbo.AccountingSetup
WHERE status = 2

DECLARE @Balance NUMERIC(22,4)
DECLARE @BalanceIDR NUMERIC(22,4)
DECLARE @AccountPK INT
DECLARE @CurrencyPK INT
DECLARE @CurrID NVARCHAR(5)

DECLARE @UnrealisedAmount NUMERIC(22,4)
DECLARE @DiffRateAmount NUMERIC(22,4)
DECLARE @RateAmount NUMERIC	(22,4)
DECLARE @Rate NUMERIC(22,4)
DECLARE @JournalAmount NUMERIC(22,4)


create table #ReferenceTemp
(Reference nvarchar(50))

Declare @JourHeader int  
set @JourHeader = 0    
Declare @JournalPK int 
Declare @PeriodPK int 
Declare @Reference nvarchar(50)    
Declare @AutoNo int 

Select @PeriodPK = PeriodPK From Period Where @Date BETWEEN DateFrom AND DateTo AND status = 2 


DECLARE A CURSOR FOR

SELECT B.AccountPK,C.CurrencyPK,D.ID,ISNULL(SUM(B.Debit-B.Credit),0), ISNULL(SUM(B.BaseDebit-B.BaseCredit),0) 
FROM Journal A
LEFT JOIN dbo.JournalDetail B ON A.JournalPK = B.JournalPK
LEFT JOIN dbo.Account C ON B.AccountPK = C.AccountPK AND C.status IN (1,2)
LEFT JOIN dbo.Currency D ON C.CurrencyPK = D.CurrencyPK AND D.status IN (1,2)
WHERE A.Status <> 3 AND A.Posted = 1 AND A.Reversed = 0 
AND  C.CurrencyPK <> 1 and A.ValueDate <= @Date and A.PeriodPK = @PeriodPK
GROUP BY B.AccountPK,C.CurrencyPK,D.ID

OPEN A 
FETCH NEXT FROM A
INTO	@AccountPK,@CurrencyPK,@CurrID,@Balance,@BalanceIDR
WHILE @@FETCH_STATUS = 0  
BEGIN 
	SET @Rate = 0
	SET @UnrealisedAmount = 0
	SET @DiffRateAmount = 0
	SET @RateAmount = 0
	SET @JournalAmount = 0
	SELECT @Rate = Rate FROM dbo.CurrencyRate WHERE CurrencyPK = @CurrencyPK AND
    Date = @Date AND status = 2

	IF @Rate > 0 AND @Balance > 0
	BEGIN
		SET @RateAmount = @Balance * @Rate
	END

	SET @unrealizedAccountPK = CASE WHEN @CurrID = 'USD' THEN @UnrealizedAccountUSDPK
	 WHEN @CurrID =  'SGD' THEN @UnrealizedAccountSGDPK end


	SELECT @UnrealisedAmount = isnull(SUM(B.BaseDebit-B.BaseCredit),0)  FROM dbo.Journal A
	LEFT JOIN dbo.JournalDetail B ON A.JournalPK = B.JournalPK 
	WHERE A.Status <> 3 AND A.Posted = 1 AND A.Reversed = 0
	AND B.AccountPK = @unrealizedAccountPK and A.ValueDate between '08/01/19' and @Date

	SET @DiffRateAmount = @RateAmount - @BalanceIDR
	SET @JournalAmount = @DiffRateAmount

	--SELECT @DiffRateAmount diffRateAmount,@BalanceIDR BalanceIDr, @RateAmount RateAmount,@UnrealisedAmount UnrealisedAmount,@Balance
	IF(@JournalAmount > 0)
	BEGIN
		SET @JournalPK = 0
		SET	@AutoNo = 0
		SELECT 'Insert journal Unrealized C Account D'
		Select @JournalPK = isnull(Max(JournalPK),0) from Journal   

		insert into #ReferenceTemp (Reference)
		exec getJournalReference @Date,'GJ',@Reference out 
	
        set @JournalPK = @JournalPK + 1             
		INSERT INTO [Journal]  
		([JournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate]  
		,[TrxNo],[TrxName],[Reference],[Type],[Description],[Posted],[PostedBy]  
		,[PostedTime],[EntryUsersID],[EntryTime]  
		,[ApprovedUsersID],[ApprovedTime],[DBUserID],LastUpdate)     
		SELECT @JournalPK,1,2,'Generated By System',@PeriodPK, @Date
		,0,'',@Reference,5,'Currency Revaluation',1,@UsersID
		,@TimeNow,@UsersID,@TimeNow,@UsersID,@TimeNow,@UsersID,@TimeNow 
		  
        set @AutoNo = 1   
		INSERT INTO [JournalDetail]  
		([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
		,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
		,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
		,[BaseCredit],[LastUsersID],LastUpdate) 
		Select @JournalPK,@AutoNo,1,2,@AccountPK,@CurrencyPK,1,0,0,0,0,0,'Currency Reval By System'
		,'','D',ABS(@JournalAmount),0,0,1,ABS(@JournalAmount),0,@UsersID,@TimeNow 

		set @AutoNo = 2   
		INSERT INTO [JournalDetail]  
		([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
		,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
		,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
		,[BaseCredit],[LastUsersID],LastUpdate) 
		Select @JournalPK,@AutoNo,1,2,@unrealizedAccountPK,1,1,0,0,0,0,0,'Currency Reval By System'
		,'','C',ABS(@JournalAmount),0,ABS(@JournalAmount),1,0,ABS(@JournalAmount),@UsersID,@TimeNow 
	END
	
	IF(@JournalAmount < 0)
	BEGIN
		SELECT 'Insert journal Unrealized D Account C'
		SET @JournalPK = 0
		SET	@AutoNo = 0

		Select @JournalPK = isnull(Max(JournalPK),0) from Journal   

		insert into #ReferenceTemp (Reference)
		exec getJournalReference @Date,'GJ',@Reference out 
	
        set @JournalPK = @JournalPK + 1             
		INSERT INTO [Journal]  
		([JournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate]  
		,[TrxNo],[TrxName],[Reference],[Type],[Description],[Posted],[PostedBy]  
		,[PostedTime],[EntryUsersID],[EntryTime]  
		,[ApprovedUsersID],[ApprovedTime],[DBUserID],LastUpdate)     
		SELECT @JournalPK,1,2,'Generated By System',@PeriodPK, @Date
		,0,'',@Reference,5,'Currency Revaluation',1,@UsersID
		,@TimeNow,@UsersID,@TimeNow,@UsersID,@TimeNow,@UsersID,@TimeNow 
		  
        set @AutoNo = 1   
		INSERT INTO [JournalDetail]  
		([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
		,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
		,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
		,[BaseCredit],[LastUsersID],LastUpdate) 
		Select @JournalPK,@AutoNo,1,2,@unrealizedAccountPK,@CurrencyPK,1,0,0,0,0,0,'Currency Reval By System'
		,'','D',ABS(@JournalAmount),ABS(@JournalAmount),0,1,ABS(@JournalAmount),0,@UsersID,@TimeNow 
		
		set @AutoNo = 2   
		INSERT INTO [JournalDetail]  
		([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
		,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
		,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
		,[BaseCredit],[LastUsersID],LastUpdate) 
		Select @JournalPK,@AutoNo,1,2,@AccountPK,1,1,0,0,0,0,0,'Currency Reval By System'
		,'','C',ABS(@JournalAmount),0,0,1,0,ABS(@JournalAmount),@UsersID,@TimeNow 
	END

	FETCH NEXT FROM A 
	INTO @AccountPK,@CurrencyPK,@CurrID,@Balance,@BalanceIDR
END
CLOSE A
DEALLOCATE A

                        ";

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@Date", _CurrencyReval.ValueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _CurrencyReval.UsersID);
                        cmd.Parameters.AddWithValue("@TimeNow", DateTime.Now);
                        cmd.ExecuteNonQuery();


                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public string GenerateFFS(string _userID, FundAccountingRpt _FundAccountingRpt)
        {
            try
            {
                //GELOMBANG SATU

                #region Cipta_Syariah_Balance
                if (_FundAccountingRpt.FundPK == 37)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Syariah_Balance" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Syariah_Balance" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Syariah_Balance.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {
                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
                                                DECLARE @FFSFund TABLE 
                                                (
                                                Date DATETIME,
                                                FundPK INT
                                                )

                                                DECLARE @FFSFundPK int
                                                DECLARE @FFSDate datetime


                                                INSERT INTO @FFSFund (Date,FundPK)
                                                SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
                                                AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


                                                DECLARE @CloseNAV TABLE
                                                (
                                                Date DATETIME,
                                                FundPK INT,
                                                AUM numeric(32,2),
                                                Nav numeric(22,8)
                                                )


                                                INSERT INTO @CloseNAV
                                                ( Date, FundPK, AUM, Nav )
		
                                                SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
                                                left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
                                                where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
                                                and A.FundPK= @FundPK   and status = 2  


                                                DECLARE @BenchmarkA TABLE
                                                (
                                                Date DATETIME,
                                                FundPK INT,
                                                Rate numeric(22,8)
                                                )


                                                INSERT INTO @BenchmarkA
                                                ( Date, FundPK, Rate )
		
                                                SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
                                                left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
                                                where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 6)  
                                                and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 6



                                                DECLARE @BenchmarkB TABLE
                                                (
                                                Date DATETIME,
                                                FundPK INT,
                                                Rate numeric(22,8)
                                                )


                                                INSERT INTO @BenchmarkB
                                                ( Date, FundPK, Rate )
		
                                                SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
                                                left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
                                                where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0 and IndexPK = 8)  
                                                and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 8


                                                select A.Date,A.AUM,A.Nav,B.Rate RateIndex1,C.Rate RateIndex2 from @CloseNAV A
                                                left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
                                                left join @BenchmarkB C on A.Date = C.Date and A.FundPK = C.FundPK
                                                order by A.date asc ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Daily"];
                                                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Yield"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex1 = dr1["RateIndex1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex1"]);
                                                        rSingle1.RateIndex2 = dr1["RateIndex2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex2"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);


                                                        //rSingle1.RateIndex_A = dr1["RateIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex_A"]);
                                                        //rSingle1.ReturnLastMonthIndex_A = dr1["ReturnLastMonthIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex_A"]);
                                                        //rSingle1.Return3Monthindex_A = dr1["Return3Monthindex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex_A"]);
                                                        //rSingle1.ReturnLast1YearIndex_A = dr1["ReturnLast1YearIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex_A"]);
                                                        //rSingle1.ReturnYTDIndex_A = dr1["ReturnYTDIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex_A"]);
                                                        //rSingle1.ReturnInceptionIndex_A = dr1["ReturnInceptionIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex_A"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 3768;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex1;

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail1.RateIndex2;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.ReturnYTDIndex;


                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateIndex_A;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnInceptionIndex_A;

                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 25].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 26].Value = rsDetail1.ReturnInceptionIndex_A;

                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne



                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector where ExposurePercent > 0
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  where ExposurePercent > 0
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc  ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc

                                                 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Kas_Syariah
                else if (_FundAccountingRpt.FundPK == 34)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Kas_Syariah" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Kas_Syariah" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Kas_Syariah.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"
                                select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

                                               
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 7)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 7



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc

   ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 189;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.Date;




                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                select 'Money Market' InstrumentType,1 ExposurePercent ";

                                                cmd2.CommandTimeout = 0;
                                                //cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                //cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }






                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Dana_Cash
                else if (_FundAccountingRpt.FundPK == 30)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Cash" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Cash" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Dana_Cash.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"
                                select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 7)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 7



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc
 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 1518;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Date;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 25].Value = rsDetail1.ReturnYTDIndex;


                                                            //worksheet1.Cells[incRowExcel, 28].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 29].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 31].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
                                                select * from @A
                                                union all
                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }

                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
                                                
                                                declare @A table
                                                (
                                                InstrumentPK int, MV numeric(22,2)
                                                )					

                                                insert into @A																									
                                                select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
                                                left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
                                                where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                and B.InstrumentTypePK <> 5
                                                group by A.InstrumentPK
                                                order by MV desc

                                                select  B.ID InstrumentID,B.Name InstrumentName 
                                                from @A A 
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                order by B.ID asc

                                                 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Dana_Tunai
                else if (_FundAccountingRpt.FundPK == 2)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Tunai" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Tunai" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Dana_Tunai.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"
                                select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 7)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 7



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 1042;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnYTD;


                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex;
                                                            worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.Date;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }






                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Dana_Prima
                if (_FundAccountingRpt.FundPK == 15)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Prima" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Prima" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Dana_Prima.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 3)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 3




select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 1532;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV  
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc

 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Value_Equity
                if (_FundAccountingRpt.FundPK == 18)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Value_Equity" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Value_Equity" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Value_Equity.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 3)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 3




select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 520;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 25].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;




                                                        }


                                                    }





                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }

                        //worksheet.Cells[5, 2].Formula = "VLOOKUP(E2,Sheet1!$A:$K,5,0)";
                        //package.Workbook.Worksheets["INPUT"].Cells["B5"].Calculate();
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Saham_Unggulan_Syariah
                if (_FundAccountingRpt.FundPK == 19)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Saham_Unggulan_Syariah" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Saham_Unggulan_Syariah" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Saham_Unggulan_Syariah.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" 
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 6)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 6



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 241;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                 declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Saham_Unggulan
                if (_FundAccountingRpt.FundPK == 16)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Saham_Unggulan" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Saham_Unggulan" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Saham_Unggulan.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 3)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 3




select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 243;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_GTWS_Equity
                else if (_FundAccountingRpt.FundPK == 12)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_GTWS_Equity" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_GTWS_Equity" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_GTWS_Equity.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 3)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 3




select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 1610;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Bond
                else if (_FundAccountingRpt.FundPK == 1)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Bond" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Bond" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Bond.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"
                                select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"             
                                                

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2   and B.Date BETWEEN '08/01/19' AND @Date 




DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9  and B.Date BETWEEN '08/01/19' AND @Date



DECLARE @FCP TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)


INSERT INTO @FCP
( Date, FundPK, Unit )
		
SELECT  A.Date,A.FundPK,sum(UnitAmount)   from FundClientPosition A
where A.DATE BETWEEN '08/01/19' AND @Date and UnitAmount > 0
and A.FundPK= @FundPK  
group by A.Date,A.FundPK

DECLARE @FCP2 TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)

INSERT INTO @FCP2
( Date, FundPK, Unit )

SELECT  A.Date,A.FundPK,sum(B.Unit) Unit   from @FFSFund A
left join @FCP B  on A.FundPK = B.FundPK    
where B.DATE = (select max(date) From @FCP where date <= A.Date and FundPK = B.FundPK)  
and A.FundPK= @FundPK  
Group By A.Date,A.FundPK


select A.Date,A.AUM,A.Nav,B.Rate RateIndex,C.Unit from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @FCP2 C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc 

  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = dr1["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Unit"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 1306;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.Unit;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 26].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }

                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Dana_Lancar
                else if (_FundAccountingRpt.FundPK == 31)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Lancar" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Lancar" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Dana_Lancar.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"
                                select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

                                                 
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 7)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 7



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc   ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 742;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.Date;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }






                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Dinamika
                else if (_FundAccountingRpt.FundPK == 3)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Dinamika" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Dinamika" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Dinamika.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
                                                
                                                DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 3)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 3



DECLARE @BenchmarkB TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkB
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0 and IndexPK = 11)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 11


select A.Date,A.AUM,A.Nav,B.Rate RateIndex1,C.Rate RateIndex2 from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @BenchmarkB C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc
";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Yield"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.RateIndex1 = dr1["RateIndex1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex1"]);
                                                        rSingle1.RateIndex2 = dr1["RateIndex2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex2"]);


                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 2340;
                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnYTD;

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail1.RateIndex1;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail1.RateIndex2;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                 declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                           declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        //                                        // YIELD
                                        //                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        //                                        {
                                        //                                            DbCon5.Open();
                                        //                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                        //                                            {
                                        //                                                cmd5.CommandText =

                                        //                                                @" select A.Date,A.Nav,B.CloseInd RateIndex1,C.CloseInd RateIndex2 from CloseNav A
                                        //                                                left join BenchmarkIndex B on B.status = 2 and A.Date = B.Date and B.IndexPK = 3
                                        //                                                left join BenchmarkIndex C on C.status = 2 and A.Date = C.Date and C.IndexPK = 10
                                        //                                                where A.date between '09/01/19' and @Date and A.status = 2 and A.FundPK = @FundPK
                                        //                                                order by A.Date asc
                                        //                                                 ";

                                        //                                                cmd5.CommandTimeout = 0;
                                        //                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                        //                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                        //                                                cmd5.ExecuteNonQuery();


                                        //                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                        //                                                {

                                        //                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        //                                                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Yield1"];
                                        //                                                    //ATUR DATA GROUPINGNYA DULU
                                        //                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                        //                                                    while (dr5.Read())
                                        //                                                    {
                                        //                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                        //                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                        //                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                        //                                                        rSingle5.RateIndex1 = Convert.ToDecimal(dr5["RateIndex1"]);
                                        //                                                        rSingle5.RateIndex2 = Convert.ToDecimal(dr5["RateIndex2"]);
                                        //                                                        rList5.Add(rSingle5);

                                        //                                                    }


                                        //                                                    var QueryByFundID5 =
                                        //                                                        from r5 in rList5
                                        //                                                        group r5 by new { } into rGroup5
                                        //                                                        select rGroup5;


                                        //                                                    foreach (var rsHeader5 in QueryByFundID5)
                                        //                                                    {
                                        //                                                        int incRowExcel = 2262;
                                        //                                                        foreach (var rsDetail5 in rsHeader5)
                                        //                                                        {
                                        //                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                        //                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                        //                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.RateIndex1;
                                        //                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.RateIndex2;
                                        //                                                            incRowExcel++;
                                        //                                                        }


                                        //                                                    }



                                        //                                                }
                                        //                                            }
                                        //                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Ovo_Ekuitas
                else if (_FundAccountingRpt.FundPK == 14)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Ovo_Ekuitas" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Ovo_Ekuitas" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Ovo_Ekuitas.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 3)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 3



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 1613;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                             declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Sakura_Cash
                else if (_FundAccountingRpt.FundPK == 33)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Sakura_Cash" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Sakura_Cash" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Sakura_Cash.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"
                                select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

                                                    
                                               
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 7)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 7



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc   ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 345;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.Date;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.ReturnYTDIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                select 'Money Market' InstrumentType,1 ExposurePercent ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }






                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Sakura_Equity
                else if (_FundAccountingRpt.FundPK == 13)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Sakura_Equity" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Sakura_Equity" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Sakura_Equity.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 1)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 1


select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK

order by A.date asc 
  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 357;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                 declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                           declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Syariah_Equity
                else if (_FundAccountingRpt.FundPK == 20)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Syariah_Equity" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Syariah_Equity" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Syariah_Equity.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {
                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
                                                
                                                DECLARE @FFSFund TABLE 
                                                (
                                                Date DATETIME,
                                                FundPK INT
                                                )

                                                DECLARE @FFSFundPK int
                                                DECLARE @FFSDate datetime


                                                INSERT INTO @FFSFund (Date,FundPK)
                                                SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
                                                AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


                                                DECLARE @CloseNAV TABLE
                                                (
                                                Date DATETIME,
                                                FundPK INT,
                                                AUM numeric(32,2),
                                                Nav numeric(22,8)
                                                )


                                                INSERT INTO @CloseNAV
                                                ( Date, FundPK, AUM, Nav )
		
                                                SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
                                                left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
                                                where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
                                                and A.FundPK= @FundPK   and status = 2  


                                                DECLARE @BenchmarkA TABLE
                                                (
                                                Date DATETIME,
                                                FundPK INT,
                                                Rate numeric(22,8)
                                                )


                                                INSERT INTO @BenchmarkA
                                                ( Date, FundPK, Rate )
		
                                                SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
                                                left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
                                                where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 6)  
                                                and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 6



                                                DECLARE @BenchmarkB TABLE
                                                (
                                                Date DATETIME,
                                                FundPK INT,
                                                Rate numeric(22,8)
                                                )


                                                INSERT INTO @BenchmarkB
                                                ( Date, FundPK, Rate )
		
                                                SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
                                                left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
                                                where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0 and IndexPK = 8)  
                                                and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 8


                                                select A.Date,A.AUM,A.Nav,B.Rate RateIndex1,C.Rate RateIndex2 from @CloseNAV A
                                                left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
                                                left join @BenchmarkB C on A.Date = C.Date and A.FundPK = C.FundPK
                                                order by A.date asc ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex1 = dr1["RateIndex1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex1"]);
                                                        rSingle1.RateIndex2 = dr1["RateIndex2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex2"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);


                                                        //rSingle1.RateIndex_A = dr1["RateIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex_A"]);
                                                        //rSingle1.ReturnLastMonthIndex_A = dr1["ReturnLastMonthIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex_A"]);
                                                        //rSingle1.Return3Monthindex_A = dr1["Return3Monthindex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex_A"]);
                                                        //rSingle1.ReturnLast1YearIndex_A = dr1["ReturnLast1YearIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex_A"]);
                                                        //rSingle1.ReturnYTDIndex_A = dr1["ReturnYTDIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex_A"]);
                                                        //rSingle1.ReturnInceptionIndex_A = dr1["ReturnInceptionIndex_A"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex_A"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 3770;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.RateIndex1;
                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex2;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnYTDIndex;


                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.RateIndex_A;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInceptionIndex_A;

                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 25].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 26].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInceptionIndex_A;

                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne



                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector where ExposurePercent > 0
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  where ExposurePercent > 0
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc  ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Penyertaan_Terbatas_Ciptadana_Infrastruktur_Indonesia
                else if (_FundAccountingRpt.FundPK == 44)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Penyertaan_Terbatas_Ciptadana_Infrastruktur_Indonesia" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Penyertaan_Terbatas_Ciptadana_Infrastruktur_Indonesia" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Penyertaan_Terbatas_Ciptadana_Infrastruktur_Indonesia.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend Infra"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 20;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 20;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Rencana_Cerdas
                else if (_FundAccountingRpt.FundPK == 5)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Rencana_Cerdas" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Rencana_Cerdas" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Rencana_Cerdas.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 3)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 3



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 7327;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 25].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector where ExposurePercent > 0
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector   where ExposurePercent > 0
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Terproteksi_Cipta_Proteksi_Dinamis_I
                else if (_FundAccountingRpt.FundPK == 4)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Terproteksi_Cipta_Proteksi_Dinamis_I" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Terproteksi_Cipta_Proteksi_Dinamis_I" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Terproteksi_Cipta_Proteksi_Dinamis_I.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 46;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.CloseInd;
                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END  ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 46;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Terproteksi_Cipta_Proteksi_Dinamis_III
                else if (_FundAccountingRpt.FundPK == 47)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Terproteksi_Cipta_Proteksi_Dinamis_III" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Terproteksi_Cipta_Proteksi_Dinamis_III" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Terproteksi_Cipta_Proteksi_Dinamis_III.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (3) and A.FundPK = B.FundPK
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 40;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.CloseInd;
                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 40;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Terproteksi_Cipta_Proteksi_III
                else if (_FundAccountingRpt.FundPK == 48)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Terproteksi_Cipta_Proteksi_III" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Terproteksi_Cipta_Proteksi_III" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Terproteksi_Cipta_Proteksi_III.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend CP3"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  
                                                    declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 58;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.CloseInd;
                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 58;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }



                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Terproteksi_Cipta_Proteksi_IV
                else if (_FundAccountingRpt.FundPK == 49)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Terproteksi_Cipta_Proteksi_IV" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Terproteksi_Cipta_Proteksi_IV" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Terproteksi_Cipta_Proteksi_IV.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend CP4"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 34;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.CloseInd;
                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 34;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion

                //GELOMBANG DUA
                #region Cipta_Obligasi_Dollar
                if (_FundAccountingRpt.FundPK == 21)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_Dollar" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_Dollar" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Obligasi_Dollar.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2   and B.Date BETWEEN '08/01/19' AND @Date 




DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9  and B.Date BETWEEN '08/01/19' AND @Date



DECLARE @FCP TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)


INSERT INTO @FCP
( Date, FundPK, Unit )
		
SELECT  A.Date,A.FundPK,sum(UnitAmount)   from FundClientPosition A
where A.DATE BETWEEN '08/01/19' AND @Date and UnitAmount > 0
and A.FundPK= @FundPK  
group by A.Date,A.FundPK

DECLARE @FCP2 TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)

INSERT INTO @FCP2
( Date, FundPK, Unit )

SELECT  A.Date,A.FundPK,sum(B.Unit) Unit   from @FFSFund A
left join @FCP B  on A.FundPK = B.FundPK    
where B.DATE = (select max(date) From @FCP where date <= A.Date and FundPK = B.FundPK)  
and A.FundPK= @FundPK  
Group By A.Date,A.FundPK


select A.Date,A.AUM,A.Nav,B.Rate RateIndex,C.Unit from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @FCP2 C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc 
  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 635;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                            worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 26].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 28].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                 declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Obligasi_Gemilang
                if (_FundAccountingRpt.FundPK == 22)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_Gemilang" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_Gemilang" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Obligasi_Gemilang.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2   and B.Date BETWEEN '08/01/19' AND @Date 




DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9  and B.Date BETWEEN '08/01/19' AND @Date



DECLARE @FCP TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)


INSERT INTO @FCP
( Date, FundPK, Unit )
		
SELECT  A.Date,A.FundPK,sum(UnitAmount)   from FundClientPosition A
where A.DATE BETWEEN '08/01/19' AND @Date and UnitAmount > 0
and A.FundPK= @FundPK  
group by A.Date,A.FundPK

DECLARE @FCP2 TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)

INSERT INTO @FCP2
( Date, FundPK, Unit )

SELECT  A.Date,A.FundPK,sum(B.Unit) Unit   from @FFSFund A
left join @FCP B  on A.FundPK = B.FundPK    
where B.DATE = (select max(date) From @FCP where date <= A.Date and FundPK = B.FundPK)  
and A.FundPK= @FundPK  
Group By A.Date,A.FundPK


select A.Date,A.AUM,A.Nav,B.Rate RateIndex,C.Unit from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @FCP2 C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc      ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = dr1["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Unit"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 547;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                            worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnLast1Year;
                                                            ////worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLast1YearIndex;
                                                            ////worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 31].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 28].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                             declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Obligasi_Prima
                if (_FundAccountingRpt.FundPK == 23)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_Prima" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_Prima" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Obligasi_Prima.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2   and B.Date BETWEEN '08/01/19' AND @Date 




DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9  and B.Date BETWEEN '08/01/19' AND @Date



DECLARE @FCP TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)


INSERT INTO @FCP
( Date, FundPK, Unit )
		
SELECT  A.Date,A.FundPK,sum(UnitAmount)   from FundClientPosition A
where A.DATE BETWEEN '08/01/19' AND @Date and UnitAmount > 0
and A.FundPK= @FundPK  
group by A.Date,A.FundPK

DECLARE @FCP2 TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)

INSERT INTO @FCP2
( Date, FundPK, Unit )

SELECT  A.Date,A.FundPK,sum(B.Unit) Unit   from @FFSFund A
left join @FCP B  on A.FundPK = B.FundPK    
where B.DATE = (select max(date) From @FCP where date <= A.Date and FundPK = B.FundPK)  
and A.FundPK= @FundPK  
Group By A.Date,A.FundPK


select A.Date,A.AUM,A.Nav,B.Rate RateIndex,C.Unit from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @FCP2 C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc  
  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = dr1["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Unit"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 364;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                            worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnLast1Year;
                                                            ////worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLast1YearIndex;
                                                            ////worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 31].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 29].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Obligasi_Rupiah
                if (_FundAccountingRpt.FundPK == 26)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_Rupiah" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_Rupiah" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Obligasi_Rupiah.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2   and B.Date BETWEEN '08/01/19' AND @Date 




DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9  and B.Date BETWEEN '08/01/19' AND @Date



DECLARE @FCP TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)


INSERT INTO @FCP
( Date, FundPK, Unit )
		
SELECT  A.Date,A.FundPK,sum(UnitAmount)   from FundClientPosition A
where A.DATE BETWEEN '08/01/19' AND @Date and UnitAmount > 0
and A.FundPK= @FundPK  
group by A.Date,A.FundPK

DECLARE @FCP2 TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)

INSERT INTO @FCP2
( Date, FundPK, Unit )

SELECT  A.Date,A.FundPK,sum(B.Unit) Unit   from @FFSFund A
left join @FCP B  on A.FundPK = B.FundPK    
where B.DATE = (select max(date) From @FCP where date <= A.Date and FundPK = B.FundPK)  
and A.FundPK= @FundPK  
Group By A.Date,A.FundPK


select A.Date,A.AUM,A.Nav,B.Rate RateIndex,C.Unit from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @FCP2 C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc 

  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = dr1["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Unit"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 636;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                            worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnLast1Year;
                                                            ////worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLast1YearIndex;
                                                            ////worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 26].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 32].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 29].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                 declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Obligasi_USD
                if (_FundAccountingRpt.FundPK == 25)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_USD" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_USD" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Obligasi_USD.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2   and B.Date BETWEEN '08/01/19' AND @Date 




DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9  and B.Date BETWEEN '08/01/19' AND @Date



DECLARE @FCP TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)


INSERT INTO @FCP
( Date, FundPK, Unit )
		
SELECT  A.Date,A.FundPK,sum(UnitAmount)   from FundClientPosition A
where A.DATE BETWEEN '08/01/19' AND @Date and UnitAmount > 0
and A.FundPK= @FundPK  
group by A.Date,A.FundPK

DECLARE @FCP2 TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)

INSERT INTO @FCP2
( Date, FundPK, Unit )

SELECT  A.Date,A.FundPK,sum(B.Unit) Unit   from @FFSFund A
left join @FCP B  on A.FundPK = B.FundPK    
where B.DATE = (select max(date) From @FCP where date <= A.Date and FundPK = B.FundPK)  
and A.FundPK= @FundPK  
Group By A.Date,A.FundPK


select A.Date,A.AUM,A.Nav,B.Rate RateIndex,C.Unit from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @FCP2 C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc    ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = dr1["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Unit"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 227;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                            worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnLast1Year;
                                                            ////worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLast1YearIndex;
                                                            ////worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 26].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 28].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                  declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Obligasi_OPTI
                if (_FundAccountingRpt.FundPK == 27)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_OPTI" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_OPTI" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Obligasi_OPTI.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"   

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2   and B.Date BETWEEN '08/01/19' AND @Date 




DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9  and B.Date BETWEEN '08/01/19' AND @Date



DECLARE @FCP TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)


INSERT INTO @FCP
( Date, FundPK, Unit )
		
SELECT  A.Date,A.FundPK,sum(UnitAmount)   from FundClientPosition A
where A.DATE BETWEEN '08/01/19' AND @Date and UnitAmount > 0
and A.FundPK= @FundPK  
group by A.Date,A.FundPK

DECLARE @FCP2 TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)

INSERT INTO @FCP2
( Date, FundPK, Unit )

SELECT  A.Date,A.FundPK,sum(B.Unit) Unit   from @FFSFund A
left join @FCP B  on A.FundPK = B.FundPK    
where B.DATE = (select max(date) From @FCP where date <= A.Date and FundPK = B.FundPK)  
and A.FundPK= @FundPK  
Group By A.Date,A.FundPK


select A.Date,A.AUM,A.Nav,B.Rate RateIndex,C.Unit from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @FCP2 C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc 
  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = dr1["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Unit"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 643;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                            worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnLast1Year;
                                                            ////worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLast1YearIndex;
                                                            ////worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 31].Value = rsDetail1.Date;
                                                            ////worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 29].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                 declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                             declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Obligasi_OGUL
                if (_FundAccountingRpt.FundPK == 24)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_OGUL" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Obligasi_OGUL" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Obligasi_OGUL.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"   

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2   and B.Date BETWEEN '08/01/19' AND @Date 




DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9  and B.Date BETWEEN '08/01/19' AND @Date



DECLARE @FCP TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)


INSERT INTO @FCP
( Date, FundPK, Unit )
		
SELECT  A.Date,A.FundPK,sum(UnitAmount)   from FundClientPosition A
where A.DATE BETWEEN '08/01/19' AND @Date and UnitAmount > 0
and A.FundPK= @FundPK  
group by A.Date,A.FundPK

DECLARE @FCP2 TABLE
(
Date DATETIME,
FundPK INT,
Unit numeric(22,8)
)

INSERT INTO @FCP2
( Date, FundPK, Unit )

SELECT  A.Date,A.FundPK,sum(B.Unit) Unit   from @FFSFund A
left join @FCP B  on A.FundPK = B.FundPK    
where B.DATE = (select max(date) From @FCP where date <= A.Date and FundPK = B.FundPK)  
and A.FundPK= @FundPK  
Group By A.Date,A.FundPK


select A.Date,A.AUM,A.Nav,B.Rate RateIndex,C.Unit from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @FCP2 C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc 
 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = dr1["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Unit"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 66;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                            worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnLast1Year;
                                                            ////worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLast1YearIndex;
                                                            ////worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 31].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 29].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_INDX
                if (_FundAccountingRpt.FundPK == 29)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_INDX" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_INDX" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_INDX.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 8)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 8


select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK

order by A.date asc 
  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 402;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Nav;

                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 25].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 26].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc  ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["INPUT"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Dana_Likuid
                if (_FundAccountingRpt.FundPK == 32)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Likuid" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Dana_Likuid" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Dana_Likuid.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" 
DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,12)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 7)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 7



select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc 
  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 922;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region DIRE_XCID
                else if (_FundAccountingRpt.FundPK == 57)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_DIRE_XCID" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_DIRE_XCID" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "DIRE_XCID.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 89;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.CloseInd;
                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END  ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        //// Allocation of Sector
                                        //using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        //{
                                        //    DbCon3.Open();
                                        //    using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                        //    {
                                        //        cmd3.CommandText =

                                        //        @"
                                        //        declare @MV Table
                                        //        (
                                        //        Date datetime,
                                        //        FundPK int,
                                        //        MarketValue numeric(22,2)
                                        //        )


                                        //        declare @Sector Table
                                        //        (
                                        //        SectorName nvarchar(200),
                                        //        InstrumentType nvarchar(50),
                                        //        ExposurePercent numeric(22,4)
                                        //        )

                                        //        declare @SectorName Table
                                        //        (
                                        //        SectorName nvarchar(200),
                                        //        ExposurePercent numeric(22,4)
                                        //        )


                                        //        INSERT INTO @MV
                                        //        SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                        //        (
                                        //        select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                        //        ) AND status = 2 AND FundPK = @FundPK
                                        //        group by Date,FundPK


                                        //        insert into @Sector
                                        //        select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                        //        else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                        //        isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                        //        left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                        //        left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                        //        and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                        //        (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                        //        left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                        //        left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                        //        left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                        //        left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                        //        where D.DescOne is not null and A.GroupType in (1)
                                        //        group by G.Name,D.DescOne


                                        //        union all
                                        //        select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                        //        else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                        //        isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                        //        left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                        //        left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                        //        and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                        //        (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                        //        left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                        //        left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                        //        left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                        //        left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                        //        where D.DescOne is not null and A.GroupType in (2)
                                        //        group by D.DescOne



                                        //         if exists(select * from @Sector)
                                        //        BEGIN
                                        //         insert into @SectorName
                                        //         select SectorName,ExposurePercent from @Sector
                                        //         union all
                                        //         select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                        //        END
                                        //        ELSE
                                        //        BEGIN
                                        //         insert into @SectorName
                                        //         select 'Money Market',1 ExposurePercent
                                        //        END



                                        //        select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                        //        , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                        //        cmd3.CommandTimeout = 0;
                                        //        cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                        //        cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                        //        cmd3.ExecuteNonQuery();


                                        //        using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                        //        {

                                        //            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                        //            //ATUR DATA GROUPINGNYA DULU
                                        //            List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                        //            while (dr3.Read())
                                        //            {
                                        //                FFSSetup_21 rSingle3 = new FFSSetup_21();
                                        //                rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                        //                rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                        //                rList3.Add(rSingle3);

                                        //            }


                                        //            var QueryByFundID3 =
                                        //                from r3 in rList3
                                        //                group r3 by new { } into rGroup3
                                        //                select rGroup3;



                                        //            foreach (var rsHeader3 in QueryByFundID3)
                                        //            {
                                        //                int incRowExcel = 36;
                                        //                foreach (var rsDetail3 in rsHeader3)
                                        //                {
                                        //                    worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                        //                    worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                        //                    incRowExcel++;
                                        //                }


                                        //            }



                                        //        }
                                        //    }
                                        //}


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '02/1/2020' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '02/1/2020' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '02/1/2020' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 94;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }



                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region DIRE_XCIS
                else if (_FundAccountingRpt.FundPK == 56)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_DIRE_XCIS" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_DIRE_XCIS" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "DIRE_XCIS.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 16;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.CloseInd;
                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END  ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        //// Allocation of Sector
                                        //using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        //{
                                        //    DbCon3.Open();
                                        //    using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                        //    {
                                        //        cmd3.CommandText =

                                        //        @"
                                        //        declare @MV Table
                                        //        (
                                        //        Date datetime,
                                        //        FundPK int,
                                        //        MarketValue numeric(22,2)
                                        //        )


                                        //        declare @Sector Table
                                        //        (
                                        //        SectorName nvarchar(200),
                                        //        InstrumentType nvarchar(50),
                                        //        ExposurePercent numeric(22,4)
                                        //        )

                                        //        declare @SectorName Table
                                        //        (
                                        //        SectorName nvarchar(200),
                                        //        ExposurePercent numeric(22,4)
                                        //        )


                                        //        INSERT INTO @MV
                                        //        SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                        //        (
                                        //        select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                        //        ) AND status = 2 AND FundPK = @FundPK
                                        //        group by Date,FundPK


                                        //        insert into @Sector
                                        //        select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                        //        else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                        //        isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                        //        left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                        //        left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                        //        and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                        //        (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                        //        left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                        //        left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                        //        left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                        //        left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                        //        where D.DescOne is not null and A.GroupType in (1)
                                        //        group by G.Name,D.DescOne


                                        //        union all
                                        //        select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                        //        else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                        //        isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                        //        left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                        //        left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                        //        and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                        //        (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                        //        left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                        //        left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                        //        left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                        //        left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                        //        where D.DescOne is not null and A.GroupType in (2)
                                        //        group by D.DescOne



                                        //         if exists(select * from @Sector)
                                        //        BEGIN
                                        //         insert into @SectorName
                                        //         select SectorName,ExposurePercent from @Sector
                                        //         union all
                                        //         select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                        //        END
                                        //        ELSE
                                        //        BEGIN
                                        //         insert into @SectorName
                                        //         select 'Money Market',1 ExposurePercent
                                        //        END



                                        //        select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                        //        , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                        //        cmd3.CommandTimeout = 0;
                                        //        cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                        //        cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                        //        cmd3.ExecuteNonQuery();


                                        //        using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                        //        {

                                        //            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                        //            //ATUR DATA GROUPINGNYA DULU
                                        //            List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                        //            while (dr3.Read())
                                        //            {
                                        //                FFSSetup_21 rSingle3 = new FFSSetup_21();
                                        //                rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                        //                rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                        //                rList3.Add(rSingle3);

                                        //            }


                                        //            var QueryByFundID3 =
                                        //                from r3 in rList3
                                        //                group r3 by new { } into rGroup3
                                        //                select rGroup3;



                                        //            foreach (var rsHeader3 in QueryByFundID3)
                                        //            {
                                        //                int incRowExcel = 36;
                                        //                foreach (var rsDetail3 in rsHeader3)
                                        //                {
                                        //                    worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                        //                    worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                        //                    incRowExcel++;
                                        //                }


                                        //            }



                                        //        }
                                        //    }
                                        //}


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '02/1/2020' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '02/1/2020' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '02/1/2020' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 21;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region DIRE_DYNA
                else if (_FundAccountingRpt.FundPK == 55)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_DIRE_DYNA" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_DIRE_DYNA" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "DIRE_DYNA.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 14;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.CloseInd;
                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END  ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        //// Allocation of Sector
                                        //using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        //{
                                        //    DbCon3.Open();
                                        //    using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                        //    {
                                        //        cmd3.CommandText =

                                        //        @"
                                        //        declare @MV Table
                                        //        (
                                        //        Date datetime,
                                        //        FundPK int,
                                        //        MarketValue numeric(22,2)
                                        //        )


                                        //        declare @Sector Table
                                        //        (
                                        //        SectorName nvarchar(200),
                                        //        InstrumentType nvarchar(50),
                                        //        ExposurePercent numeric(22,4)
                                        //        )

                                        //        declare @SectorName Table
                                        //        (
                                        //        SectorName nvarchar(200),
                                        //        ExposurePercent numeric(22,4)
                                        //        )


                                        //        INSERT INTO @MV
                                        //        SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                        //        (
                                        //        select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                        //        ) AND status = 2 AND FundPK = @FundPK
                                        //        group by Date,FundPK


                                        //        insert into @Sector
                                        //        select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                        //        else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                        //        isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                        //        left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                        //        left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                        //        and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                        //        (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                        //        left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                        //        left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                        //        left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                        //        left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                        //        where D.DescOne is not null and A.GroupType in (1)
                                        //        group by G.Name,D.DescOne


                                        //        union all
                                        //        select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                        //        else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                        //        isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                        //        left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                        //        left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                        //        and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                        //        (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                        //        left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                        //        left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                        //        left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                        //        left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                        //        where D.DescOne is not null and A.GroupType in (2)
                                        //        group by D.DescOne



                                        //         if exists(select * from @Sector)
                                        //        BEGIN
                                        //         insert into @SectorName
                                        //         select SectorName,ExposurePercent from @Sector
                                        //         union all
                                        //         select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                        //        END
                                        //        ELSE
                                        //        BEGIN
                                        //         insert into @SectorName
                                        //         select 'Money Market',1 ExposurePercent
                                        //        END



                                        //        select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                        //        , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                        //        cmd3.CommandTimeout = 0;
                                        //        cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                        //        cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                        //        cmd3.ExecuteNonQuery();


                                        //        using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                        //        {

                                        //            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                        //            //ATUR DATA GROUPINGNYA DULU
                                        //            List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                        //            while (dr3.Read())
                                        //            {
                                        //                FFSSetup_21 rSingle3 = new FFSSetup_21();
                                        //                rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                        //                rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                        //                rList3.Add(rSingle3);

                                        //            }


                                        //            var QueryByFundID3 =
                                        //                from r3 in rList3
                                        //                group r3 by new { } into rGroup3
                                        //                select rGroup3;



                                        //            foreach (var rsHeader3 in QueryByFundID3)
                                        //            {
                                        //                int incRowExcel = 36;
                                        //                foreach (var rsDetail3 in rsHeader3)
                                        //                {
                                        //                    worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                        //                    worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                        //                    incRowExcel++;
                                        //                }


                                        //            }



                                        //        }
                                        //    }
                                        //}


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '02/1/2020' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '02/1/2020' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '02/1/2020' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 19;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Kasih_Berimbang
                if (_FundAccountingRpt.FundPK == 36)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Kasih_Berimbang" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Kasih_Berimbang" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Kasih_Berimbang.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 5)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 5



DECLARE @BenchmarkB TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkB
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0 and IndexPK = 9)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 9


select A.Date,A.AUM,A.Nav,B.Rate RateIndex1,C.Rate RateIndex2 from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
left join @BenchmarkB C on A.Date = C.Date and A.FundPK = C.FundPK
order by A.date asc  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Yield"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex1 = dr1["RateIndex1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex1"]);
                                                        rSingle1.RateIndex2 = dr1["RateIndex2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex2"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 240;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail1.RateIndex1;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail1.RateIndex2;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                                AND fundPK = @FundPK)
                                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                                AND fundPK = @FundPK)
                                                                Group By A.AUM,NAV  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                                declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["INPUT"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }


                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Proteksi_X
                if (_FundAccountingRpt.FundPK == 58)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Proteksi_X" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Proteksi_X" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Proteksi_X.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 11;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '11/01/19' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '11/01/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 11;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Proteksi_XIV
                if (_FundAccountingRpt.FundPK == 60)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Proteksi_XIV" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Proteksi_XIV" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Proteksi_XIV.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 11;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '11/01/19' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '11/01/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 11;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion

                //GELOMBANG TIGA
                #region RDPT_Cipta_Daya_Cipta_Gemilang
                else if (_FundAccountingRpt.FundPK == 40)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Daya_Cipta_Gemilang" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Daya_Cipta_Gemilang" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "RDPT_Cipta_Daya_Cipta_Gemilang.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 28;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 28;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region RDPT_Cipta_Intiroda_Makmur
                else if (_FundAccountingRpt.FundPK == 41)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Intiroda_Makmur" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Intiroda_Makmur" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "RDPT_Cipta_Intiroda_Makmur.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 36;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 36;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region RDPT_Cipta_Roda_Prima_Lancar
                else if (_FundAccountingRpt.FundPK == 39)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Roda_Prima_Lancar" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Roda_Prima_Lancar" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "RDPT_Cipta_Roda_Prima_Lancar.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 37;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 37;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region RDPT_Cipta_Kartunindo_Perkasa_Abadi
                else if (_FundAccountingRpt.FundPK == 42)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Kartunindo_Perkasa_Abadi" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Kartunindo_Perkasa_Abadi" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "RDPT_Cipta_Kartunindo_Perkasa_Abadi.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 28;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 28;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region RDPT_Cipta_Keritang_Buana_Mining_Syariah
                else if (_FundAccountingRpt.FundPK == 45)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Keritang_Buana_Mining_Syariah" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Keritang_Buana_Mining_Syariah" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "RDPT_Cipta_Keritang_Buana_Mining_Syariah.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 17;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 17;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region SA_KSP_Sejahtera_Bersama
                else if (_FundAccountingRpt.FundPK == 11)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_SA_KSP_Sejahtera_Bersama" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_SA_KSP_Sejahtera_Bersama" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "SA_KSP_Sejahtera_Bersama.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 4;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 4;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Sinar_Menara_Deli
                else if (_FundAccountingRpt.FundPK == 61)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Sinar_Menara_Deli" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Sinar_Menara_Deli" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Sinar_Menara_Deli.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '08/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 21;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int
                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                AUM numeric(32,2),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,AUM AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A


                                                select A.Date,A.AUM AUM,Nav Nav,sum(UnitAmount) Unit from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                left join @Month C on A.Date = C.Date
                                                left join FundClientPosition D on A.FundPK = D.FundPK and D.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by A.Date,A.AUM,Nav
                                                order by A.Date
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = Convert.ToDecimal(dr5["Unit"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 21;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Proteksi_IX
                if (_FundAccountingRpt.FundPK == 54)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Proteksi_IX" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Proteksi_IX" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Proteksi_IX.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 15;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '11/01/19' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '11/01/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 15;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region Cipta_Utama_Ekuitas
                else if (_FundAccountingRpt.FundPK == 17)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_Utama_Ekuitas" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_Utama_Ekuitas" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Utama_Ekuitas.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"                                                 
                                                DECLARE @FFSFund TABLE 
                                                (
                                                Date DATETIME,
                                                FundPK INT
                                                )

                                                DECLARE @FFSFundPK int
                                                DECLARE @FFSDate datetime


                                                INSERT INTO @FFSFund (Date,FundPK)
                                                SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
                                                AND A.date BETWEEN '08/01/19' AND @Date and FundPK = @FundPK


                                                DECLARE @CloseNAV TABLE
                                                (
                                                Date DATETIME,
                                                FundPK INT,
                                                AUM numeric(32,2),
                                                Nav numeric(22,8)
                                                )


                                                INSERT INTO @CloseNAV
                                                ( Date, FundPK, AUM, Nav )
		
                                                SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
                                                left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
                                                where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
                                                and A.FundPK= @FundPK   and status = 2  


                                                DECLARE @BenchmarkA TABLE
                                                (
                                                Date DATETIME,
                                                FundPK INT,
                                                Rate numeric(22,12)
                                                )


                                                INSERT INTO @BenchmarkA
                                                ( Date, FundPK, Rate )
		
                                                SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
                                                left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
                                                where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 3)  
                                                and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 3



                                                select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
                                                left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
                                                order by A.date asc
                                                  ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 587;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @" select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                             declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion


                #region Cipta_ETF_Index_LQ45
                if (_FundAccountingRpt.FundPK == 63)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_Cipta_ETF_Index_LQ45" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_Cipta_ETF_Index_LQ45" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "ETF_Index_LQ45.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

DECLARE @FFSFund TABLE 
(
Date DATETIME,
FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime




INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN '02/01/2020' AND @Date and FundPK = @FundPK




DECLARE @CloseNAV TABLE
(
Date DATETIME,
FundPK INT,
AUM numeric(32,2),
Nav numeric(22,8)
)


INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
and A.FundPK= @FundPK   and status = 2  


DECLARE @BenchmarkA TABLE
(
Date DATETIME,
FundPK INT,
Rate numeric(22,8)
)


INSERT INTO @BenchmarkA
( Date, FundPK, Rate )
		
SELECT  A.Date,A.FundPK,B.CloseInd   from @FFSFund A
left join BenchmarkIndex B  on A.FundPK = B.FundPK and B.status = 2       
where B.DATE = (select max(date) From BenchmarkIndex where date <= A.Date and FundPK = @FundPK and status = 2 and CloseInd > 0  and IndexPK = 1)  
and A.FundPK= @FundPK   and status = 2  and B.IndexPK = 1




select A.Date,A.AUM,A.Nav,B.Rate RateIndex from @CloseNAV A
left join @BenchmarkA B on A.Date = B.Date and A.FundPK = B.FundPK
order by A.date asc 
";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 52;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV  
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 36;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc

 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region RDPT_Cipta_Proteksi_XIII
                if (_FundAccountingRpt.FundPK == 64)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Proteksi_XIII" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Proteksi_XIII" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "Cipta_Proteksi_XIII.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK
";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        //rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 8;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV  
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc

 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '12/01/19' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '12/01/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 8;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region RDPT_Cipta_Industri
                if (_FundAccountingRpt.FundPK == 65)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Industri" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Industri" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "RDPT_Industri.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend Industri"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK
";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        //rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 5;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV  
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc

 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '12/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '12/01/19' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '12/01/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 5;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion

                #region RDPT_Cipta_Properti
                if (_FundAccountingRpt.FundPK == 59)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Properti" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Properti" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "RDPT_Properti.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend Properti"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @" select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                AND fundPK = @FundPK)
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  

declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '09/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '09/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK
";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        //rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                        //rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                        //rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                        //rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                        //rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);

                                                        //rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                        //rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                        //rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                        //rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                        //rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                        //rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);

                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 7;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.ReturnLastMonth;
                                                            //worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.Return3Month;
                                                            //worksheet1.Cells[incRowExcel, 7].Value = rsDetail1.ReturnLast1Year;
                                                            //worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.ReturnYTD;

                                                            //worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.RateIndex;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.ReturnLastMonthIndex;
                                                            //worksheet1.Cells[incRowExcel, 14].Value = rsDetail1.Return3Monthindex;
                                                            //worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.ReturnLast1YearIndex;
                                                            //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnInceptionIndex;
                                                            //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.ReturnYTDIndex;

                                                            //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.Date;
                                                            //worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnInception;
                                                            //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;


                                                            incRowExcel++;



                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,NAV  
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))

                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc

 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '09/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                PaymentDate datetime,
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                Price numeric(19,8),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select PaymentDate,case when dbo.CheckTodayIsHoliday(EOMONTH(PaymentDate)) = 1 then dbo.fworkingday(EOMONTH(PaymentDate),-1) else EOMONTH(PaymentDate) end Date,
                                                ExDate NavDate,B.Nav,B.AUM,isnull(A.DistributedIncomePerUnit,0),CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '09/01/19' and A.status = 2 and Posted = 1 and Revised = 0


                                                select isnull(D.PaymentDate,'') PaymentDate,A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,isnull(D.TotalDevidend,0) TotalDevidend,isnull(D.Price,0) Price from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                left join FundClientPosition E on E.Date = A.date and E.FundPK = @FundPK
                                                where C.Date between '09/01/19' and @Date and A.status  = 2 and A.FundPK = @FundPK 
                                                group by D.PaymentDate,A.Date,A.AUM,A.Nav,D.TotalDevidend,D.Price
                                                order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.PaymentDate = Convert.ToString(dr5["PaymentDate"]);
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.Unit = dr5["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Unit"]);
                                                        rSingle5.Price = dr5["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Price"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 7;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;

                                                            if (Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy") == "01/01/1900")
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = "";
                                                            }
                                                            else
                                                            {
                                                                worksheet2.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail5.PaymentDate).ToString("MM/dd/yyyy");
                                                            }




                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail5.Price;
                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail5.Unit;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion
                #region RDPT_Cipta_Unggulan_Syariah
                if (_FundAccountingRpt.FundPK == 28)
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Unggulan_Syariah" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet_RDPT_Cipta_Unggulan_Syariah" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "RDPT_Cipta_Unggulan_Syariah.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Dividend"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = @Date
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        // Benchmark Index
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"  declare @CMonth int

                                                    create table #A
                                                    (
                                                    Month int
                                                    )

                                                    declare @NAV table
                                                    (
                                                    Date datetime,
                                                    CloseInd numeric(18,8),
                                                    IndexPK int,
                                                    AUM numeric(22,12),
                                                    Nav numeric(18,8),
                                                    Unit  numeric(22,12),
                                                    Month int

                                                    )

                                                    declare @Month table
                                                    (
                                                    date datetime

                                                    )

                                                    insert into @NAV
                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                    where A.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                    insert into #A
                                                    select 1
                                                    insert into #A
                                                    select 2
                                                    insert into #A
                                                    select 3
                                                    insert into #A
                                                    select 4
                                                    insert into #A
                                                    select 5
                                                    insert into #A
                                                    select 6
                                                    insert into #A
                                                    select 7
                                                    insert into #A
                                                    select 8
                                                    insert into #A
                                                    select 9
                                                    insert into #A
                                                    select 10
                                                    insert into #A
                                                    select 11
                                                    insert into #A
                                                    select 12

                                                    DECLARE A CURSOR FOR       
                                                    SELECT * from #A

                                                    OPEN A        
                                                    FETCH NEXT FROM A INTO @CMonth      
                                                    WHILE @@FETCH_STATUS = 0       
                                                    BEGIN   

                                                    insert into @Month
                                                    select top 1 Date from @NAV where Month = @CMonth
                                                    group by Date
                                                    order by date desc

                                                    FETCH NEXT FROM A INTO @CMonth  
                                                    END               

                                                    CLOSE A            
                                                    DEALLOCATE A


                                                    select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit from CloseNAV A
                                                    left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) 
                                                    left join @Month C on A.Date = C.Date
                                                    where C.Date between '11/1/19' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Sheet1"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.CloseInd = dr1["CloseInd"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["CloseInd"]);
                                                        rSingle1.IndexPK = dr1["IndexPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["IndexPK"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;


                                                    int incRowExcel = 11;

                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                            //worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.CloseInd;

                                                            incRowExcel++;




                                                        }


                                                    }



                                                }
                                            }
                                        }




                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                            worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                            worksheet.Cells[10, 5].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        //// Allocation of Sector
                                        //using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        //{
                                        //    DbCon3.Open();
                                        //    using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                        //    {
                                        //        cmd3.CommandText =

                                        //        @"
                                        //    declare @MV Table
                                        //    (
                                        //    Date datetime,
                                        //    FundPK int,
                                        //    MarketValue numeric(22,2)
                                        //    )


                                        //    declare @Sector Table
                                        //    (
                                        //    SectorName nvarchar(200),
                                        //    InstrumentType nvarchar(50),
                                        //    ExposurePercent numeric(22,4)
                                        //    )

                                        //    declare @SectorName Table
                                        //    (
                                        //    SectorName nvarchar(200),
                                        //    ExposurePercent numeric(22,4)
                                        //    )


                                        //    INSERT INTO @MV
                                        //    SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                        //    (
                                        //    select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                        //    ) AND status = 2 AND FundPK = @FundPK
                                        //    group by Date,FundPK


                                        //    insert into @Sector
                                        //    select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                        //    else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                        //    isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                        //    left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                        //    left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                        //    and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                        //    (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                        //    left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                        //    left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                        //    left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                        //    left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                        //    where D.DescOne is not null and A.GroupType in (1)
                                        //    group by G.Name,D.DescOne


                                        //    union all
                                        //    select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                        //    else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                        //    isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                        //    left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                        //    left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                        //    and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                        //    (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                        //    left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                        //    left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                        //    left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                        //    left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                        //    where D.DescOne is not null and A.GroupType in (2)
                                        //    group by D.DescOne



                                        //     if exists(select * from @Sector)
                                        //    BEGIN
                                        //     insert into @SectorName
                                        //     select SectorName,ExposurePercent from @Sector
                                        //     union all
                                        //     select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                        //    END
                                        //    ELSE
                                        //    BEGIN
                                        //     insert into @SectorName
                                        //     select 'Money Market',1 ExposurePercent
                                        //    END



                                        //    select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                        //    , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                        //        cmd3.CommandTimeout = 0;
                                        //        cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                        //        cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                        //        cmd3.ExecuteNonQuery();


                                        //        using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                        //        {

                                        //            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                        //            //ATUR DATA GROUPINGNYA DULU
                                        //            List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                        //            while (dr3.Read())
                                        //            {
                                        //                FFSSetup_21 rSingle3 = new FFSSetup_21();
                                        //                rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                        //                rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                        //                rList3.Add(rSingle3);

                                        //            }


                                        //            var QueryByFundID3 =
                                        //                from r3 in rList3
                                        //                group r3 by new { } into rGroup3
                                        //                select rGroup3;



                                        //            foreach (var rsHeader3 in QueryByFundID3)
                                        //            {
                                        //                int incRowExcel = 36;
                                        //                foreach (var rsDetail3 in rsHeader3)
                                        //                {
                                        //                    worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                        //                    worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                        //                    incRowExcel++;
                                        //                }


                                        //            }



                                        //        }
                                        //    }
                                        //}


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                                
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 26;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // DIVIDEN
                                        using (SqlConnection DbCon5 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon5.Open();
                                            using (SqlCommand cmd5 = DbCon5.CreateCommand())
                                            {
                                                cmd5.CommandText =

                                                @"

                                                declare @CMonth int

                                                create table #A
                                                (
                                                Month int
                                                )

                                                declare @NAV table
                                                (
                                                Date datetime,
                                                CloseInd numeric(18,8),
                                                IndexPK int,
                                                AUM numeric(22,12),
                                                Nav numeric(18,8),
                                                Unit  numeric(22,12),
                                                Month int

                                                )

                                                declare @Month table
                                                (
                                                date datetime

                                                )

                                                insert into @NAV
                                                select A.Date,isnull(CloseInd/100,0) CloseInd,isnull(IndexPK,0) IndexPK,AUM/1000000000 AUM,Nav Nav,AUM/NAV Unit,month(A.Date) from CloseNAV A
                                                left join BenchmarkIndex B on A.Date = B.Date and B.status in (1,2) and IndexPK  in (0) -- di mappingan excel ga ada index nya
                                                where A.Date between '02/1/2020' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK



                                                insert into #A
                                                select 1
                                                insert into #A
                                                select 2
                                                insert into #A
                                                select 3
                                                insert into #A
                                                select 4
                                                insert into #A
                                                select 5
                                                insert into #A
                                                select 6
                                                insert into #A
                                                select 7
                                                insert into #A
                                                select 8
                                                insert into #A
                                                select 9
                                                insert into #A
                                                select 10
                                                insert into #A
                                                select 11
                                                insert into #A
                                                select 12

                                                DECLARE A CURSOR FOR       
                                                SELECT * from #A

                                                OPEN A        
                                                FETCH NEXT FROM A INTO @CMonth      
                                                WHILE @@FETCH_STATUS = 0       
                                                BEGIN   

                                                insert into @Month
                                                select top 1 Date from @NAV where Month = @CMonth
                                                group by Date
                                                order by date desc

                                                FETCH NEXT FROM A INTO @CMonth  
                                                END               

                                                CLOSE A            
                                                DEALLOCATE A

                                                declare @DistributedIncome table
                                                (
                                                Date datetime,
                                                NavDate datetime,
                                                Nav numeric(19,8),
                                                AUM numeric(19,2),
                                                TotalDevidend numeric(19,2)
                                                )

                                                insert into @DistributedIncome
                                                select EOMONTH(PaymentDate) Date,ExDate NavDate,B.Nav,B.AUM,CashAmount TotalDevidend from DistributedIncome A
                                                left join CloseNAV B on A.ExDate = B.Date and B.status = 2 and B.FundPK = @FundPK
                                                where A.FundPK = @FundPK and PaymentDate >= '02/1/2020' and A.status = 2 and Posted = 1 and Revised = 0


                                                select A.Date,0 CloseInd,0 IndexPK,A.AUM AUM,A.Nav Nav,A.AUM/A.NAV Unit,isnull(D.TotalDevidend,0) TotalDevidend from CloseNAV A
                                                left join @Month C on A.Date = C.Date
                                                left join @DistributedIncome D on D.Date = C.date
                                                where C.Date between '02/1/2020' and @Date and A.status  = 2 and A.FundPK = @FundPK order by A.Date,IndexPK
                                                 ";

                                                cmd5.CommandTimeout = 0;
                                                cmd5.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd5.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd5.ExecuteNonQuery();


                                                using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList5 = new List<FFSSetup_21>();
                                                    while (dr5.Read())
                                                    {
                                                        FFSSetup_21 rSingle5 = new FFSSetup_21();
                                                        rSingle5.Date = Convert.ToDateTime(dr5["Date"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.Nav = dr5["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr5["Nav"]);
                                                        rSingle5.TotalDevidend = Convert.ToDecimal(dr5["TotalDevidend"]);
                                                        rList5.Add(rSingle5);

                                                    }


                                                    var QueryByFundID5 =
                                                        from r5 in rList5
                                                        group r5 by new { } into rGroup5
                                                        select rGroup5;

                                                    int incRowExcel = 7;

                                                    foreach (var rsHeader5 in QueryByFundID5)
                                                    {

                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail5.Date;
                                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail5.Nav;
                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail5.AUM;
                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail5.TotalDevidend;

                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                    }


                                }

                            }
                        }
                        //package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
                #endregion


                else
                {
                    string filePath = Tools.ReportsPath + "FundFactSheet" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "FundFactSheet" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "21\\FFS\\" + "21_FFSTemplate.xlsx", filePath, true);

                    FileInfo existingFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets["FactSheet"];

                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText = @"
                            select * from FFSSetup_21 where FundPK = @FundPK and Date = @Date and status = 2 ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {
                                        List<FFSSetup_21> rList = new List<FFSSetup_21>();
                                        while (dr01.Read())
                                        {
                                            FFSSetup_21 rSingle = new FFSSetup_21();
                                            rSingle.Date = Convert.ToDateTime(dr01["Date"]);
                                            rSingle.FundPK = Convert.ToInt32(dr01["FundPK"]);
                                            rSingle.Col1 = Convert.ToString(dr01["Col1"]);
                                            rSingle.Col2 = Convert.ToString(dr01["Col2"]);
                                            rSingle.Col3 = Convert.ToString(dr01["Col3"]);
                                            rSingle.Col4 = Convert.ToString(dr01["Col4"]);
                                            rSingle.Col5 = Convert.ToString(dr01["Col5"]);
                                            rSingle.Col6 = Convert.ToString(dr01["Col6"]);
                                            rSingle.Col7 = Convert.ToString(dr01["Col7"]);
                                            rSingle.Col8 = Convert.ToString(dr01["Col8"]);
                                            rSingle.Col9 = Convert.ToString(dr01["Col9"]);
                                            rSingle.Col10 = Convert.ToString(dr01["Col10"]);
                                            rSingle.Col11 = Convert.ToString(dr01["Col11"]);
                                            rSingle.Col12 = Convert.ToString(dr01["Col12"]);
                                            rSingle.Col13 = Convert.ToString(dr01["Col13"]);
                                            rSingle.Col14 = Convert.ToString(dr01["Col14"]);
                                            rSingle.Col15 = Convert.ToString(dr01["Col15"]);
                                            rSingle.Col16 = Convert.ToString(dr01["Col16"]);
                                            rSingle.Col17 = Convert.ToString(dr01["Col17"]);
                                            rSingle.Col18 = Convert.ToString(dr01["Col18"]);
                                            rSingle.Col19 = Convert.ToString(dr01["Col19"]);
                                            rSingle.Col20 = Convert.ToString(dr01["Col20"]);
                                            rSingle.Col21 = Convert.ToString(dr01["Col21"]);
                                            rSingle.Col22 = Convert.ToString(dr01["Col22"]);
                                            rSingle.Col23 = Convert.ToString(dr01["Col23"]);
                                            rSingle.Col24 = Convert.ToInt32(dr01["Col24"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID =
                                         from r in rList
                                         group r by new { r.Col1, r.Col2 } into rGroup
                                         select rGroup;

                                        //int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByClientID)
                                        {

                                            worksheet.Cells[2, 7].Value = rsHeader.Key.Col1;
                                            worksheet.Cells[5, 7].Value = rsHeader.Key.Col2;
                                            worksheet.Cells[7, 7].Value = _FundAccountingRpt.ValueDateFrom;


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[14, 2].Value = rsDetail.Col3;
                                                worksheet.Cells[23, 2].Value = rsDetail.Col4;
                                                worksheet.Cells[24, 2].Value = rsDetail.Col5;
                                                worksheet.Cells[25, 2].Value = rsDetail.Col6;
                                                worksheet.Cells[28, 2].Value = rsDetail.Col7;
                                                worksheet.Cells[31, 2].Value = rsDetail.Col8;
                                                worksheet.Cells[34, 2].Value = rsDetail.Col9;
                                                worksheet.Cells[37, 2].Value = rsDetail.Col10;
                                                worksheet.Cells[40, 2].Value = rsDetail.Col11;
                                                worksheet.Cells[43, 2].Value = rsDetail.Col12;
                                                worksheet.Cells[46, 2].Value = rsDetail.Col13;
                                                worksheet.Cells[49, 2].Value = rsDetail.Col14;
                                                worksheet.Cells[52, 2].Value = rsDetail.Col15;

                                                worksheet.Cells[12, 7].Value = rsDetail.Col16;
                                                worksheet.Cells[15, 7].Value = rsDetail.Col17;
                                                worksheet.Cells[18, 7].Value = rsDetail.Col18;
                                                worksheet.Cells[21, 7].Value = rsDetail.Col19;

                                                worksheet.Cells[28, 7].Value = rsDetail.Col20;
                                                worksheet.Cells[31, 7].Value = rsDetail.Col21;
                                                worksheet.Cells[57, 7].Value = rsDetail.Col22;
                                                worksheet.Cells[58, 7].Value = rsDetail.Col23;

                                                worksheet.Cells[53, 7].Value = _FundAccountingRpt.ValueDateFrom;

                                                if (rsDetail.Col24 == 1)
                                                {
                                                    Image img = Image.FromFile(Tools.ReportImageFFSRisk1);
                                                    ExcelPicture pic = worksheet.Drawings.AddPicture("Sample", img);
                                                    pic.SetPosition(61, 0, 6, 0);
                                                }
                                                else if (rsDetail.Col24 == 2)
                                                {
                                                    Image img = Image.FromFile(Tools.ReportImageFFSRisk2);
                                                    ExcelPicture pic = worksheet.Drawings.AddPicture("Sample", img);
                                                    pic.SetPosition(61, 0, 6, 0);
                                                }
                                                else if (rsDetail.Col24 == 3)
                                                {
                                                    Image img = Image.FromFile(Tools.ReportImageFFSRisk3);
                                                    ExcelPicture pic = worksheet.Drawings.AddPicture("Sample", img);
                                                    pic.SetPosition(61, 0, 6, 0);
                                                }
                                                else if (rsDetail.Col24 == 4)
                                                {
                                                    Image img = Image.FromFile(Tools.ReportImageFFSRisk4);
                                                    ExcelPicture pic = worksheet.Drawings.AddPicture("Sample", img);
                                                    pic.SetPosition(61, 0, 6, 0);
                                                }
                                                else if (rsDetail.Col24 == 5)
                                                {
                                                    Image img = Image.FromFile(Tools.ReportImageFFSRisk5);
                                                    ExcelPicture pic = worksheet.Drawings.AddPicture("Sample", img);
                                                    pic.SetPosition(61, 0, 6, 0);
                                                }


                                            }


                                        }

                                        // NAV,AUM,UNIT
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"select A.AUM/1000000000 AUM,Nav Nav,sum(UnitAmount) Unit from CloseNav A
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and status  = 2 and A.Date = @date
                                                Group By A.AUM,NAV 
                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Input"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList1 = new List<FFSSetup_21>();
                                                    while (dr1.Read())
                                                    {
                                                        FFSSetup_21 rSingle1 = new FFSSetup_21();
                                                        rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rList1.Add(rSingle1);

                                                    }


                                                    var QueryByFundID1 =
                                                        from r1 in rList1
                                                        group r1 by new { } into rGroup1
                                                        select rGroup1;



                                                    foreach (var rsHeader1 in QueryByFundID1)
                                                    {

                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet1.Cells[1, 2].Value = rsDetail1.Nav;
                                                            worksheet1.Cells[2, 2].Value = rsDetail1.AUM;
                                                            worksheet1.Cells[3, 2].Value = rsDetail1.Unit;


                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Allocation of Investment
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                            
                                                declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )
	
                                                declare @A Table
                                                (
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,8)
                                                )


                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @A
                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                group by D.DescOne 

                                                if exists(select * from @A)
                                                BEGIN
	                                                select * from @A
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                END
                                                ELSE
                                                BEGIN
	                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                END ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Input"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList2 = new List<FFSSetup_21>();
                                                    while (dr2.Read())
                                                    {
                                                        FFSSetup_21 rSingle2 = new FFSSetup_21();
                                                        rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                        rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                        rList2.Add(rSingle2);

                                                    }


                                                    var QueryByFundID2 =
                                                        from r2 in rList2
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;



                                                    foreach (var rsHeader2 in QueryByFundID2)
                                                    {
                                                        int incRowExcel = 6;
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail2.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }



                                        // Allocation of Sector
                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =

                                                @"
                                            declare @MV Table
                                            (
                                            Date datetime,
                                            FundPK int,
                                            MarketValue numeric(22,2)
                                            )


                                            declare @Sector Table
                                            (
                                            SectorName nvarchar(200),
                                            InstrumentType nvarchar(50),
                                            ExposurePercent numeric(22,4)
                                            )

                                            declare @SectorName Table
                                            (
                                            SectorName nvarchar(200),
                                            ExposurePercent numeric(22,4)
                                            )
	

                                            INSERT INTO @MV
                                            SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                            (
                                            select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                            ) AND status = 2 AND FundPK = @FundPK
                                            group by Date,FundPK


                                            insert into @Sector
                                            select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                            where D.DescOne is not null and A.GroupType in (1)
                                            group by G.Name,D.DescOne


                                            union all
                                            select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                            else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                            isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                            left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                            left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                            and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                            (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                            left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                            left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                            left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                            left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                            where D.DescOne is not null and A.GroupType in (2)
                                            group by D.DescOne



                                             if exists(select * from @Sector)
                                            BEGIN
	                                            insert into @SectorName
	                                            select SectorName,ExposurePercent from @Sector
	                                            union all
	                                            select 'Money Market',case when sum(ExposurePercent) >= 1 then 0 else 1 - sum(ExposurePercent) end from @Sector  
                                            END
                                            ELSE
                                            BEGIN
	                                            insert into @SectorName
	                                            select 'Money Market',1 ExposurePercent
                                            END



                                            select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                            , ExposurePercent from @SectorName order by ExposurePercent desc ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Input"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList3 = new List<FFSSetup_21>();
                                                    while (dr3.Read())
                                                    {
                                                        FFSSetup_21 rSingle3 = new FFSSetup_21();
                                                        rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                        rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                        rList3.Add(rSingle3);

                                                    }


                                                    var QueryByFundID3 =
                                                        from r3 in rList3
                                                        group r3 by new { } into rGroup3
                                                        select rGroup3;



                                                    foreach (var rsHeader3 in QueryByFundID3)
                                                    {
                                                        int incRowExcel = 13;
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                            incRowExcel++;
                                                        }


                                                    }



                                                }
                                            }
                                        }


                                        // Top 5 Holding
                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon4.Open();
                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                            {
                                                cmd4.CommandText =

                                                @"
                                            
declare @A table
(
InstrumentPK int, MV numeric(22,2)
)					

insert into @A																									
select top 5 A.InstrumentPK, sum(MarketValue) MV from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
and B.InstrumentTypePK <> 5
group by A.InstrumentPK
order by MV desc

select  B.ID InstrumentID,B.Name InstrumentName 
from @A A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
order by B.ID asc
 ";

                                                cmd4.CommandTimeout = 0;
                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                                cmd4.ExecuteNonQuery();


                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Input"];
                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<FFSSetup_21> rList4 = new List<FFSSetup_21>();
                                                    while (dr4.Read())
                                                    {
                                                        FFSSetup_21 rSingle4 = new FFSSetup_21();
                                                        rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                        rSingle4.InstrumentName = Convert.ToString(dr4["InstrumentName"]);
                                                        rList4.Add(rSingle4);

                                                    }


                                                    var QueryByFundID4 =
                                                        from r4 in rList4
                                                        group r4 by new { } into rGroup4
                                                        select rGroup4;



                                                    foreach (var rsHeader4 in QueryByFundID4)
                                                    {
                                                        int incRowExcel = 30;
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail4.InstrumentName;
                                                            incRowExcel++;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];

                                    }
                                }
                            }
                        }
                        ////package.Workbook.Calculate();

                        package.Save();
                        return filePath;
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public Boolean ClientSubscriptionBatchFormBySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ClientSubscription _clientSubscription)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @" SELECT CU.ID CurrencyID,'Subscription' Type,ClientSubscriptionPK,
                            BC.ContactPerson ContactPerson,BN.ID + ' - ' + BC.ID BankCustodiID,
                            BC.Fax1 FaxNo,ValueDate Date,NavDate NavDate, 
                            F.Name FundName,FC.id ClientID, Fc.Name ClientName,
                            CS.NAV NAVAmount,CashAmount,unitamount UnitAmount, 
                            CS.SubscriptionFeePercent FeePercent,CS.SubscriptionFeeAmount FeeAmount, 
                            CS.NAVDate SettlementDate,CS.Description Remark,CS.TotalCashAmount NetAmount,
                            0 SrHolder from ClientSubscription CS   
                            left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                            left join Fund F ON CS.FundPK = F.FundPK  and F.status = 2   
                            left join FundCashRef FCR ON CS.CashRefPK = FCR.FundCashRefPK  and FCR.status = 2   
                            left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                            left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                            left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2  
                            WHERE CS.NAVDate between @DateFrom and @DateTo and CS.Selected = 1 and CS.Type <> 3 and CS.status not in(3,4)
                        ";


                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "BatchFormSUBInstructionBySelected_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "BatchFormSUBInstructionBySelected_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "UnitRegistryReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Batch Form SUB Instruction");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                    while (dr0.Read())
                                    {
                                        UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        rSingle.ClientSubscriptionPK = Convert.ToInt32(dr0["ClientSubscriptionPK"]);
                                        rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                        rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                        rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                        rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                        rSingle.Nav = Convert.ToDecimal(dr0["NAVAmount"]);
                                        rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                        rSingle.SrHolder = Convert.ToInt32(dr0["SrHolder"]);
                                        rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                        rSingle.CashBalance = Convert.ToDecimal(dr0["CashAmount"]);
                                        rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitAmount"]);
                                        rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                        rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                        rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                        rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                        rSingle.BankCustodiID = Convert.ToString(dr0["BankCustodiID"]);
                                        rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                        rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                        rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                        rList.Add(rSingle);

                                    }


                                    var QueryByFundID =
                                        from r in rList
                                        group r by new { r.FundName, r.Date, r.SettlementDate, r.ContactPerson, r.FaxNo, r.BankCustodiID } into rGroup
                                        select rGroup;

                                    int incRowExcel = 1;

                                    foreach (var rsHeader in QueryByFundID)
                                    {
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "SUBSCRIPTION";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Size = 30;
                                        worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "BATCH FORM";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Size = 30;
                                        worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;


                                        int RowZ = incRowExcel;
                                        incRowExcel = incRowExcel + 4;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 24;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Date ";
                                        worksheet.Cells[incRowExcel, 9].Value = ": ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;



                                        incRowExcel++;
                                        worksheet.Row(incRowExcel).Height = 100;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.WrapText = true;
                                        //worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 8].Value = "To ";
                                        worksheet.Cells[incRowExcel, 9].Value = ": ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.BankCustodiID;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Phone No";
                                        worksheet.Cells[incRowExcel, 3].Value = ": ";
                                        worksheet.Cells[incRowExcel, 4].Value = _host.Get_CompanyPhone();
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 8].Value = "Attention ";
                                        worksheet.Cells[incRowExcel, 9].Value = ": ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.ContactPerson;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Fax No";
                                        worksheet.Cells[incRowExcel, 3].Value = ": ";
                                        worksheet.Cells[incRowExcel, 4].Value = _host.Get_CompanyFax();
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 8].Value = "Fax Number ";
                                        worksheet.Cells[incRowExcel, 9].Value = ": ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.FaxNo;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;



                                        incRowExcel++;


                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Value = "Please kindly receive our Subscription of unit holders as follow : ";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        //Row A = 2
                                        int RowA = incRowExcel;

                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Name ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;


                                        //Row B = 3
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;


                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Holder";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 2].Value = "ID";
                                        worksheet.Cells[RowG, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 2].Style.Font.Bold = true;


                                        worksheet.Cells[incRowExcel, 3].Value = "Name";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                        worksheet.Cells[incRowExcel, 5].Value = "NAV Date";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Gross IDR";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "Fee";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + RowB + ":H" + RowB].Merge = true;
                                        worksheet.Cells["G" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 7].Value = "%";
                                        worksheet.Cells[RowG, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                        worksheet.Cells[RowG, 8].Value = "Amount";
                                        worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                        worksheet.Cells[RowG, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 9].Value = "Net IDR";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells["I" + RowB + ":J" + RowG].Merge = true;
                                        worksheet.Cells["I" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 11].Value = "Remark";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        incRowExcel++;

                                        // Row C = 4
                                        int RowC = incRowExcel;

                                        incRowExcel++;
                                        //area header

                                        int _no = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            //Row D = 5
                                            int RowD = incRowExcel;
                                            int RowE = incRowExcel + 1;


                                            //ThickBox Border

                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.SrHolder;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.NAVDate;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.CashBalance;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.FeePercent;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeeAmount;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.NetAmount;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.Remark;
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;

                                        }
                                        worksheet.Cells["A" + _endRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 5].Value = "Total :";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Approved by,";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 7;
                                        worksheet.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 7;
                                        int _RowA = incRowExcel;
                                        int _RowB = incRowExcel + 1;

                                        if (_clientSubscription.Signature1 != 1)
                                        {

                                            worksheet.Cells[_RowA, 3].Value = _host.Get_SignatureName(_clientSubscription.Signature1);
                                            worksheet.Cells["C" + _RowA + ":D" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 3].Value = _host.Get_PositionSignature(_clientSubscription.Signature1);
                                            worksheet.Cells["C" + _RowB + ":D" + _RowB].Merge = true;
                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 3].Value = "";
                                            worksheet.Cells["C" + _RowA + ":D" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 3].Value = "";
                                            worksheet.Cells["C" + _RowB + ":D" + _RowB].Merge = true;
                                        }


                                        if (_clientSubscription.Signature2 != 1)
                                        {
                                            worksheet.Cells[_RowA, 5].Value = _host.Get_SignatureName(_clientSubscription.Signature2);
                                            worksheet.Cells["E" + _RowA + ":F" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 5].Value = _host.Get_PositionSignature(_clientSubscription.Signature2);
                                            worksheet.Cells["E" + _RowB + ":F" + _RowB].Merge = true;


                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 5].Value = "";
                                            worksheet.Cells["E" + _RowA + ":F" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 5].Value = "";
                                            worksheet.Cells["E" + _RowB + ":F" + _RowB].Merge = true;
                                        }

                                        if (_clientSubscription.Signature3 != 1)
                                        {
                                            worksheet.Cells[_RowA, 7].Value = _host.Get_SignatureName(_clientSubscription.Signature3);
                                            worksheet.Cells["G" + _RowA + ":H" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 7].Value = _host.Get_PositionSignature(_clientSubscription.Signature3);
                                            worksheet.Cells["G" + _RowB + ":H" + _RowB].Merge = true;


                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 7].Value = "";
                                            worksheet.Cells["G" + _RowA + ":H" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 7].Value = "";
                                            worksheet.Cells["G" + _RowB + ":H" + _RowB].Merge = true;
                                        }

                                        if (_clientSubscription.Signature4 != 1)
                                        {
                                            worksheet.Cells[_RowA, 9].Value = _host.Get_SignatureName(_clientSubscription.Signature4);
                                            worksheet.Cells["I" + _RowA + ":J" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 9].Value = _host.Get_PositionSignature(_clientSubscription.Signature4);
                                            worksheet.Cells["I" + _RowB + ":J" + _RowB].Merge = true;
                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 9].Value = "";
                                            worksheet.Cells["I" + _RowA + ":J" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 9].Value = "";
                                            worksheet.Cells["I" + _RowB + ":J" + _RowB].Merge = true;
                                        }




                                        incRowExcel = incRowExcel + 8;
                                        worksheet.Row(incRowExcel).PageBreak = true;

                                    }
                                    //incRowExcel++;
                                    int _lastRow = incRowExcel;

                                    string _rangeA = "A5:K" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 28;
                                    }

                                    worksheet.DeleteRow(_lastRow);
                                    //worksheet.DeleteRow(_lastRow + 1);
                                    //worksheet.DeleteRow(_lastRow + 2);
                                    //worksheet.DeleteRow(_lastRow + 3);

                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                    worksheet.Column(1).Width = 10;
                                    worksheet.Column(2).Width = 15;
                                    worksheet.Column(3).Width = 2;
                                    worksheet.Column(4).Width = 100;
                                    worksheet.Column(5).Width = 30;
                                    worksheet.Column(6).Width = 40;
                                    worksheet.Column(7).Width = 35;
                                    worksheet.Column(8).Width = 35;
                                    worksheet.Column(9).Width = 2;
                                    worksheet.Column(10).Width = 40;
                                    worksheet.Column(11).Width = 35;

                                    //worksheet.Column(1).AutoFit();
                                    //worksheet.Column(2).AutoFit();
                                    //worksheet.Column(3).AutoFit();
                                    //worksheet.Column(4).AutoFit();
                                    //worksheet.Column(5).AutoFit();
                                    //worksheet.Column(6).AutoFit();
                                    //worksheet.Column(7).AutoFit();
                                    //worksheet.Column(8).AutoFit();
                                    //worksheet.Column(9).AutoFit();
                                    //worksheet.Column(10).AutoFit();
                                    //worksheet.Column(11).AutoFit();

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form \n";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border


                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }
                            }
                        }

                    }

                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }


        public Boolean ClientRedemptionAmountBatchFormBySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ClientRedemption _clientRedemption)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"SELECT case when BankRecipientPK=1 then B1.ID else case when BankRecipientPK= 2 then B2.ID  else B3.ID end  end BankName,    
                                   case when BankRecipientPK=1 then FC.NomorRekening1 else case when BankRecipientPK= 2 then FC.NomorRekening2  else FC.NomorRekening3 end  end RekNo,  
                                   case when BankRecipientPK=1 then FC.NamaNasabah1 else case when BankRecipientPK= 2 then FC.NamaNasabah2  else FC.NamaNasabah3 end  end AccountHolderName,CU.ID CurrencyID,FC.NomorRekening1 RekNo,'Redemption' Type,
                                   ClientRedemptionPK,BC.ContactPerson ContactPerson,BN.ID + ' - ' + BC.ID BankCustodiID,BC.Fax1 FaxNo,ValueDate Date,NavDate NavDate, F.Name FundName,FC.id ClientID, Fc.Name ClientName,CR.NAV NAVAmount,CashAmount,unitamount UnitAmount, CR.RedemptionFeePercent FeePercent,CR.RedemptionFeeAmount FeeAmount, CR.PaymentDate SettlementDate,CR.Description Remark,CR.TotalCashAmount NetAmount,0 SrHolder from ClientRedemption CR   
                                   left join FundClient FC ON CR.fundclientpk = FC.fundclientpk  and FC.status = 2  
                                   left join Fund F ON CR.FundPK = F.FundPK  AND F.Status = 2 
                                   left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                                   left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                                   left join Currency CU ON CU.CurrencyPK = CR.CurrencyPK  and CU.status = 2  
                                   left join Bank B1 ON FC.NamaBank1 = B1.BankPK  and B1.status = 2  
                                   left join Bank B2 ON FC.NamaBank2 = B2.BankPK  and B2.status = 2 
                                   left join Bank B3 ON FC.NamaBank3 = B3.BankPK  and B3.status = 2  
                                   WHERE  CR.NAVDate between @DateFrom and @DateTo and CR.Selected = 1 and CR.Status not in(3,4)  and CR.Type <> 3  ";

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "BatchFormREDAmountInstructionBySelected_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "BatchFormREDAmountInstructionBySelected_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "UnitRegistryReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Batch Form RED Unit Instruction");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                    while (dr0.Read())
                                    {
                                        UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        rSingle.ClientRedemptionPK = Convert.ToInt32(dr0["ClientRedemptionPK"]);
                                        rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                        rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                        rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                        rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                        rSingle.Nav = Convert.ToDecimal(dr0["NAVAmount"]);
                                        rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                        rSingle.SrHolder = Convert.ToInt32(dr0["SrHolder"]);
                                        rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                        rSingle.CashBalance = Convert.ToDecimal(dr0["CashAmount"]);
                                        rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitAmount"]);
                                        rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                        rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                        rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                        rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                        rSingle.BankCustodiID = Convert.ToString(dr0["BankCustodiID"]);
                                        rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                        rSingle.RekNo = Convert.ToString(dr0["RekNo"]);
                                        rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                        rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                        rSingle.BankName = Convert.ToString(dr0["BankName"]);
                                        rSingle.AccountHolderName = Convert.ToString(dr0["AccountHolderName"]);
                                        rList.Add(rSingle);

                                    }


                                    var QueryByFundID =
                                        from r in rList
                                        group r by new { r.FundName, r.Date, r.SettlementDate, r.NAVDate, r.ContactPerson, r.FaxNo, r.BankCustodiID } into rGroup
                                        select rGroup;

                                    int incRowExcel = 1;

                                    //worksheet.Cells[incRowExcel, 1].Value = "REDEMPTION BATCH FORM";
                                    //worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                    //worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Size = 28;
                                    //worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;



                                    //else if (_unitRegistryRpt.Type == "Redemption")
                                    //{
                                    //    worksheet.Cells[incRowExcel, 1].Value = "REDEMPTION BATCH FORM";
                                    //    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                    //    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Size = 28;

                                    //}



                                    foreach (var rsHeader in QueryByFundID)
                                    {




                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "REDEMPTION";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Size = 30;
                                        worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "BATCH FORM";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Size = 30;
                                        worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;


                                        int RowZ = incRowExcel;
                                        incRowExcel = incRowExcel + 4;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 24;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Date ";
                                        worksheet.Cells[incRowExcel, 9].Value = ": ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;



                                        incRowExcel++;
                                        int _rowAddress = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells["A" + incRowExcel + ":E" + _rowAddress].Style.WrapText = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + _rowAddress].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + _rowAddress].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                        worksheet.Cells[incRowExcel, 8].Value = "To ";
                                        worksheet.Cells[incRowExcel, 9].Value = ": ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.BankCustodiID;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 8].Value = "Attention ";
                                        worksheet.Cells[incRowExcel, 9].Value = ": ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.ContactPerson;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 8].Value = "Fax Number ";
                                        worksheet.Cells[incRowExcel, 9].Value = ": ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.FaxNo;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Phone No";
                                        worksheet.Cells[incRowExcel, 3].Value = ": ";
                                        worksheet.Cells[incRowExcel, 4].Value = _host.Get_CompanyPhone();
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fax No";
                                        worksheet.Cells[incRowExcel, 3].Value = ": ";
                                        worksheet.Cells[incRowExcel, 4].Value = _host.Get_CompanyFax();
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                        incRowExcel++;


                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Value = "Please kindly receive our Redemption of unit holders as follow : ";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        //Row A = 2
                                        int RowA = incRowExcel;

                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Name ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Trade Date ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "NAV Date ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.NAVDate;
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        if (_clientRedemption.HideDate == false)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Payment Date ";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.SettlementDate;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        }
                                        incRowExcel = incRowExcel + 2;


                                        //Row B = 3
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;


                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Holder";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 2].Value = "ID";
                                        worksheet.Cells[RowG, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 2].Style.Font.Bold = true;


                                        worksheet.Cells[incRowExcel, 3].Value = "Name";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Amount";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + RowB + ":F" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "Fee";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + RowB + ":H" + RowB].Merge = true;
                                        worksheet.Cells["G" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 7].Value = "%";
                                        worksheet.Cells[RowG, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                        worksheet.Cells[RowG, 8].Value = "Amount";
                                        worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                        worksheet.Cells[RowG, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 9].Value = "Benef Acc No";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells["I" + RowB + ":J" + RowG].Merge = true;
                                        worksheet.Cells["I" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 11].Value = "Remark";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        incRowExcel++;

                                        // Row C = 4
                                        int RowC = incRowExcel;

                                        incRowExcel++;
                                        //area header

                                        int _no = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            //Row D = 5
                                            int RowD = incRowExcel;
                                            int RowE = incRowExcel + 1;


                                            //ThickBox Border

                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            //worksheet.Cells["A" + RowD + ":K" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + RowD + ":K" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.SrHolder;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashBalance;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.FeePercent;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeeAmount;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 10].Value = "Bank Info : " + rsDetail.BankName + " A/C No. " + rsDetail.RekNo + " " + rsDetail.AccountHolderName;
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 10].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.Remark;
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 11].Style.WrapText = true;
                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;

                                        }
                                        worksheet.Cells["A" + _endRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 4].Value = "Total :";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                        worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Approved by,";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 7;
                                        worksheet.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 7;
                                        int _RowA = incRowExcel;
                                        int _RowB = incRowExcel + 1;

                                        if (_clientRedemption.Signature1 != 1)
                                        {

                                            worksheet.Cells[_RowA, 3].Value = _host.Get_SignatureName(_clientRedemption.Signature1);
                                            worksheet.Cells["C" + _RowA + ":D" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 3].Value = _host.Get_PositionSignature(_clientRedemption.Signature1);
                                            worksheet.Cells["C" + _RowB + ":D" + _RowB].Merge = true;
                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 3].Value = "";
                                            worksheet.Cells["C" + _RowA + ":D" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 3].Value = "";
                                            worksheet.Cells["C" + _RowB + ":D" + _RowB].Merge = true;
                                        }


                                        if (_clientRedemption.Signature2 != 1)
                                        {
                                            worksheet.Cells[_RowA, 5].Value = _host.Get_SignatureName(_clientRedemption.Signature2);
                                            worksheet.Cells["E" + _RowA + ":F" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 5].Value = _host.Get_PositionSignature(_clientRedemption.Signature2);
                                            worksheet.Cells["E" + _RowB + ":F" + _RowB].Merge = true;


                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 5].Value = "";
                                            worksheet.Cells["E" + _RowA + ":F" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 5].Value = "";
                                            worksheet.Cells["E" + _RowB + ":F" + _RowB].Merge = true;
                                        }

                                        if (_clientRedemption.Signature3 != 1)
                                        {
                                            worksheet.Cells[_RowA, 7].Value = _host.Get_SignatureName(_clientRedemption.Signature3);
                                            worksheet.Cells["G" + _RowA + ":H" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 7].Value = _host.Get_PositionSignature(_clientRedemption.Signature3);
                                            worksheet.Cells["G" + _RowB + ":H" + _RowB].Merge = true;


                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 7].Value = "";
                                            worksheet.Cells["G" + _RowA + ":H" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 7].Value = "";
                                            worksheet.Cells["G" + _RowB + ":H" + _RowB].Merge = true;
                                        }

                                        if (_clientRedemption.Signature4 != 1)
                                        {
                                            worksheet.Cells[_RowA, 9].Value = _host.Get_SignatureName(_clientRedemption.Signature4);
                                            worksheet.Cells["I" + _RowA + ":J" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 9].Value = _host.Get_PositionSignature(_clientRedemption.Signature4);
                                            worksheet.Cells["I" + _RowB + ":J" + _RowB].Merge = true;
                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 9].Value = "";
                                            worksheet.Cells["I" + _RowA + ":J" + _RowA].Merge = true;
                                            worksheet.Cells[_RowB, 9].Value = "";
                                            worksheet.Cells["I" + _RowB + ":J" + _RowB].Merge = true;
                                        }

                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Row(incRowExcel).PageBreak = true;

                                    }
                                    //incRowExcel++;
                                    int _lastRow = incRowExcel;

                                    string _rangeA = "A5:K" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 28;
                                    }

                                    worksheet.DeleteRow(_lastRow);
                                    //worksheet.DeleteRow(_lastRow + 1);
                                    //worksheet.DeleteRow(_lastRow + 2);
                                    //worksheet.DeleteRow(_lastRow + 3);

                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                    worksheet.Column(1).Width = 15;
                                    worksheet.Column(2).Width = 20;
                                    worksheet.Column(3).Width = 2;
                                    worksheet.Column(4).Width = 100;
                                    worksheet.Column(5).Width = 30;
                                    worksheet.Column(6).Width = 40;
                                    worksheet.Column(7).Width = 35;
                                    worksheet.Column(8).Width = 35;
                                    worksheet.Column(9).Width = 2;
                                    worksheet.Column(10).Width = 40;
                                    worksheet.Column(11).Width = 35;

                                    //worksheet.Column(1).AutoFit();
                                    //worksheet.Column(2).AutoFit();
                                    //worksheet.Column(3).AutoFit();
                                    //worksheet.Column(4).AutoFit();
                                    //worksheet.Column(5).AutoFit();
                                    //worksheet.Column(6).AutoFit();
                                    //worksheet.Column(7).AutoFit();
                                    //worksheet.Column(8).AutoFit();
                                    //worksheet.Column(9).AutoFit();
                                    //worksheet.Column(10).AutoFit();
                                    //worksheet.Column(11).AutoFit();



                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B REDEMPTION \n &28&B Batch Form";



                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }
                            }
                        }

                    }

                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }


        public Boolean ClientSwitchingBatchFormBySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ClientSwitching _clientswitching)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText =

                        @" BEGIN
                            SELECT 'Switching' Type,ClientSwitchingPK,D.ContactPerson ContactPerson,D.ID BankBranchID,D.Fax1 FaxNo,ValueDate Date,NavDate NavDate, C.ID FundIDFrom,C1.ID FundIDTo, C.Name FundNameFrom,C1.Name FundNameTo,B.ID ClientID, 
                            B.Name ClientName,A.NAVFundFrom NAVFundFrom,A.NAVFundTo NAVFundTo,CashAmount CashFundFrom,unitamount UnitAmount, A.SwitchingFeePercent FeePercent,A.SwitchingFeeAmount FeeAmount, 
                            A.PaymentDate SettlementDate,A.Description Remark,A.TotalUnitAmountFundFrom TotalUnitFundFrom,A.TotalCashAmountFundFrom TotalCashFundFrom,A.TotalCashAmountFundTo TotalCashFundTo,B.NPWP NPWP,  E.Name Agent,F.Name Mgt  from ClientSwitching A    
                            left join FundClient B ON B.fundclientpk = A.fundclientpk and B.status = 2   
                            left join Fund C ON A.FundPKFrom = C.FundPK  and C.status = 2  
                            left join Fund C1 ON A.FundPKTo = C1.FundPK  and C1.status = 2     
                            left join BankBranch D ON C.BankBranchPK = D.BankBranchPK  and D.status = 2
                            left join Agent E on B.SellingAgentPK = E.AgentPK and E.Status = 2
                            left join Agent F on E.ParentPK = F.AgentPK and F.Status = 2  
                            WHERE   A.status not in (3,4) and NAVDate between @DateFrom and @DateTo and A.Selected = 1  and A.Type <> 3 
                            END  ";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "BatchFormSWITCHInstructionBySelected" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "BatchFormSWITCHInstructionBySelected" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "UnitRegistryReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Switching Report");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                    while (dr0.Read())
                                    {
                                        UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        rSingle.ClientSwitchingPK = Convert.ToInt32(dr0["ClientSwitchingPK"]);
                                        rSingle.FundIDFrom = Convert.ToString(dr0["FundIDFrom"]);
                                        rSingle.FundIDTo = Convert.ToString(dr0["FundIDTo"]);
                                        rSingle.FundNameFrom = Convert.ToString(dr0["FundNameFrom"]);
                                        rSingle.FundNameTo = Convert.ToString(dr0["FundNameTo"]);
                                        rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                        rSingle.NAVFundFrom = Convert.ToDecimal(dr0["NAVFundFrom"]);
                                        rSingle.NAVFundTo = Convert.ToDecimal(dr0["NAVFundTo"]);
                                        rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                        rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                        rSingle.TotalUnitFundFrom = Convert.ToDecimal(dr0["TotalUnitFundFrom"]);
                                        rSingle.CashFundFrom = Convert.ToDecimal(dr0["CashFundFrom"]);
                                        rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                        rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                        rSingle.TotalCashFundFrom = Convert.ToDecimal(dr0["TotalCashFundFrom"]);
                                        rSingle.TotalCashFundTo = Convert.ToDecimal(dr0["TotalCashFundTo"]);
                                        rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                        rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                        rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                        rSingle.BankCustodiID = Convert.ToString(dr0["BankBranchID"]);
                                        rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                        rSingle.NPWP = Convert.ToString(dr0["NPWP"]);
                                        rSingle.Agent = Convert.ToString(dr0["Agent"]);
                                        rSingle.Mgt = Convert.ToString(dr0["Mgt"]);
                                        rList.Add(rSingle);

                                    }


                                    var QueryByFundID =
                                        from r in rList
                                        group r by new { r.FundNameFrom, r.NAVDate, r.ContactPerson, r.FaxNo, r.BankCustodiID } into rGroup
                                        select rGroup;

                                    int incRowExcel = 1;


                                    foreach (var rsHeader in QueryByFundID)
                                    {


                                        //incRowExcel = incRowExcel + 2;
                                        //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 5].Value = "SWITCHING";
                                        //worksheet.Cells[incRowExcel, 5].Style.Font.Size = 30;
                                        //worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        //worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 5].Value = "BATCH FORM";
                                        //worksheet.Cells[incRowExcel, 5].Style.Font.Size = 30;
                                        //worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        //worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;

                                        int RowZ = incRowExcel;
                                        incRowExcel = incRowExcel + 4;

                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 24;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "To ";
                                        worksheet.Cells[incRowExcel, 10].Value = ": ";
                                        worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.BankCustodiID;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        worksheet.Row(incRowExcel).Height = 200;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 11].Value = "Custodian Services";
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Value = "Attention ";
                                        worksheet.Cells[incRowExcel, 10].Value = ": ";
                                        worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.ContactPerson;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Value = "Fax ";
                                        worksheet.Cells[incRowExcel, 10].Value = ": ";
                                        worksheet.Cells[incRowExcel, 11].Value = _host.Get_CompanyFax();
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 1].Value = "Tel : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyPhone();
                                        worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 3].Value = "Fax : ";
                                        worksheet.Cells[incRowExcel, 4].Value = _host.Get_CompanyFax();
                                        worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 5].Value = "SWITCHING BATCH FORM";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Size = 65;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel = incRowExcel + 2;

                                        //incRowExcel++;
                                        //Row A = 2
                                        int RowA = incRowExcel;

                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Name ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundNameFrom;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "NAV Date ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = ": ";
                                        worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.NAVDate;
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        incRowExcel++;


                                        incRowExcel = incRowExcel + 1;

                                        //Row B = 3
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        worksheet.Row(RowB).Height = 100;
                                        worksheet.Row(RowG).Height = 100;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "CUSTOMER ID";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "NAME";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "SWITCH FROM";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + RowB + ":K" + RowB].Merge = true;
                                        worksheet.Cells["E" + RowB + ":J" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":J" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 5].Value = "FUND";
                                        worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + RowG + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowG + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowG + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 6].Value = "NO. OF UNITS";
                                        worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                        worksheet.Cells["F" + RowG + ":F" + RowG].Merge = true;
                                        worksheet.Cells["F" + RowG + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowG + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 7].Value = "NOMINAL AMOUNT";
                                        worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + RowG + ":G" + RowG].Merge = true;
                                        worksheet.Cells["G" + RowG + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + RowG + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 8].Value = "% FEE";
                                        worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                        worksheet.Cells["H" + RowG + ":H" + RowG].Merge = true;
                                        worksheet.Cells["H" + RowG + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + RowG + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 9].Value = "AMOUNT FEE";
                                        worksheet.Cells[RowG, 9].Style.Font.Bold = true;
                                        worksheet.Cells["I" + RowG + ":I" + RowG].Merge = true;
                                        worksheet.Cells["I" + RowG + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowG + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 10].Value = "NET AMOUNT";
                                        worksheet.Cells[RowG, 10].Style.Font.Bold = true;
                                        worksheet.Cells["J" + RowG + ":K" + RowG].Merge = true;
                                        worksheet.Cells["J" + RowG + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["J" + RowG + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 12].Value = "SWITCH TO";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells["L" + RowB + ":M" + RowB].Merge = true;
                                        worksheet.Cells["L" + RowB + ":L" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["L" + RowB + ":L" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 12].Value = "FUND";
                                        worksheet.Cells[RowG, 12].Style.Font.Bold = true;
                                        worksheet.Cells["L" + RowG + ":L" + RowG].Merge = true;
                                        worksheet.Cells["L" + RowG + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["L" + RowG + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 13].Value = "NET AMOUNT";
                                        worksheet.Cells[RowG, 13].Style.Font.Bold = true;
                                        worksheet.Cells["M" + RowG + ":M" + RowG].Merge = true;
                                        worksheet.Cells["M" + RowG + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["M" + RowG + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 14].Value = "REMARKS";
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                        worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                        incRowExcel++;

                                        // Row C = 4
                                        int RowC = incRowExcel;

                                        incRowExcel++;
                                        //area header

                                        int _no = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            //Row D = 5
                                            int RowD = incRowExcel;
                                            int RowE = incRowExcel + 1;
                                            int RowH = RowB + 2;
                                            int RowI = RowB + 3;


                                            //ThickBox Border

                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientID;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundIDFrom;
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.TotalUnitFundFrom;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashFundFrom;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeePercent;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.FeeAmount;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalCashFundFrom;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail.FundIDTo;
                                            //worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalCashFundTo;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail.Remark;
                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;

                                        }


                                        worksheet.Cells["A" + _endRowDetail + ":N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 4].Value = "Total :";
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                        worksheet.Cells[incRowExcel, 11].Calculate();
                                        worksheet.Cells[incRowExcel, 13].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        incRowExcel = incRowExcel + 10;

                                        worksheet.Cells[incRowExcel, 1].Value = "Approved by,";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 7;
                                        worksheet.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        incRowExcel = incRowExcel + 20;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1].Value = _clientswitching.Signature1Desc;
                                        worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 5].Value = _clientswitching.Signature2Desc;
                                        worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 8].Value = _clientswitching.Signature3Desc;
                                        worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 12].Value = _clientswitching.Signature4Desc;
                                        incRowExcel++;

                                        worksheet.Row(incRowExcel).PageBreak = true;

                                    }
                                    //incRowExcel++;
                                    int _lastRow = incRowExcel;

                                    string _rangeA = "A5:N" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 50;
                                    }

                                    worksheet.DeleteRow(_lastRow);

                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 15];
                                    worksheet.Column(1).Width = 25;
                                    worksheet.Column(2).Width = 75;
                                    worksheet.Column(3).Width = 25;
                                    worksheet.Column(4).Width = 80;
                                    worksheet.Column(5).Width = 95;
                                    worksheet.Column(6).Width = 60;
                                    worksheet.Column(7).Width = 90;
                                    worksheet.Column(8).Width = 65;
                                    worksheet.Column(9).Width = 65;
                                    worksheet.Column(10).Width = 5;
                                    worksheet.Column(11).Width = 65;
                                    worksheet.Column(12).Width = 65;
                                    worksheet.Column(13).Width = 65;
                                    worksheet.Column(14).Width = 55;


                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B REDEMPTION \n &28&B Batch Form";

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }
                            }
                        }

                    }

                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }


        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            #region Batch All Subs and Redemp
            if (_unitRegistryRpt.ReportName.Equals("Batch All Subs and Redemp"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And B.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            string _paramFundTo = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundTo = "And A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundTo = "";
                            }


                            cmd.CommandText = @"
                            
                            select distinct A.FundPK,B.Name FundName from ClientSubscription A
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            where  A.status = 2 and ValueDate between @DateFrom and @DateTo
                            " + _paramFund;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {

                                if (dr0.HasRows)
                                {

                                    string filePath = Tools.ReportsPath + "BatchAllSubsandRedemp" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BatchAllSubsandRedemp" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("SUBSCRIPTION");
                                        ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("REDEMPTION");
                                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("SWITCHING");

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BatchAllSubsRedemp> rList = new List<BatchAllSubsRedemp>();
                                        while (dr0.Read())
                                        {
                                            BatchAllSubsRedemp rSingle = new BatchAllSubsRedemp();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                        from r in rList
                                        orderby r.FundPK, r.FundName ascending
                                        group r by new { r.FundPK, r.FundName } into rGroup
                                        select rGroup;

                                        int incRowExcel = 4;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            //worksheet.Cells[incRowExcel, 3].Value = ":";
                                            //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText =

                                                   @"Declare @AgentDefault nvarchar(100)
                                                Declare @AgentSubscription table
                                                (
                                                ClientSubscriptionPK int,
                                                AgentPK int,
                                                AgentTrxpercent numeric(18,4)
                                                )

                                                insert into @AgentSubscription
                                                select A.ClientSubscriptionPK,A.AgentPK,AgentTrxPercent from AgentSubscription A
                                                left join ClientSubscription B on A.ClientSubscriptionPK = B.ClientSubscriptionPK
                                                where B.Type <> 3 and B.Posted = 1 and B.Status = 2 and B.Revised = 0 and NAVDate between @dateFrom and @dateto  " + _paramFund + @"

                                                select @AgentDefault = Name from Agent where AgentPK = 1 and status in (1,2)

                                                SELECT A.ClientSubscriptionPK,NAVDate,B.ID FundID,'SUBS' TransactionType,case when isnull(C.IFUACode,'') = '' then C.SACode else C.IFUACode end IFUA,
                                                C.Name ClientName,case when isnull(E.Name,'') = '' then @AgentDefault else E.Name end Agent,
                                                ISNULL(D.AgentTrxPercent/100,1) AgentTrxPercent,ISNULL(A.CashAmount,0) GrossIDR,ISNULL(A.SubscriptionFeePercent/100,0) SubsFeePercent,ISNULL(A.SubscriptionFeeAmount,0) SubsFeeAmount,
                                                ISNULL(A.TotalCashAmount,0) NetIDR,ISNULL(A.NAV,0) Nav,ISNULL(A.TotalUnitAmount,0) Unit,ISNULL(A.Description,'') Remarks
                                                FROM dbo.ClientSubscription A (NOLOCK)
                                                LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.status in (1,2)
                                                LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
                                                LEFT JOIN @AgentSubscription D ON A.ClientSubscriptionPK = D.ClientSubscriptionPK
                                                LEFT JOIN Agent E (NOLOCK) ON D.AgentPK = E.AgentPK AND E.status IN (1,2)
                                                WHERE A.status = 2
                                                AND A.NAVDate BETWEEN @DateFrom AND @DateTo  and A.Type <> 3 " + _paramFund + @"
                                                order by A.ValueDate,FundID,IFUA,ClientName,A.ClientSubscriptionPK,E.AgentPK Asc";

                                                    cmd1.CommandTimeout = 0;
                                                    //cmd1.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd1.ExecuteNonQuery();


                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {

                                                        if (dr1.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<BatchAllSubsRedemp> rList1 = new List<BatchAllSubsRedemp>();
                                                                while (dr1.Read())
                                                                {
                                                                    BatchAllSubsRedemp rSingle1 = new BatchAllSubsRedemp();
                                                                    rSingle1.ClientSubscriptionPK = Convert.ToInt32(dr1["ClientSubscriptionPK"]);
                                                                    rSingle1.ClientName = Convert.ToString(dr1["IFUA"]);
                                                                    rSingle1.NAVDate = Convert.ToDateTime(dr1["NAVDate"]);
                                                                    rSingle1.FundID = Convert.ToString(dr1["FundID"]);
                                                                    rSingle1.TransactionType = Convert.ToString(dr1["TransactionType"]);
                                                                    rSingle1.IFUA = Convert.ToString(dr1["IFUA"]);
                                                                    rSingle1.ClientName = Convert.ToString(dr1["ClientName"]);
                                                                    rSingle1.AgentName = Convert.ToString(dr1["Agent"]);
                                                                    rSingle1.AgentTrxPercent = Convert.ToDecimal(dr1["AgentTrxPercent"]);
                                                                    rSingle1.GrossAmount = Convert.ToDecimal(dr1["GrossIDR"]);
                                                                    rSingle1.SubsFeePercent = Convert.ToDecimal(dr1["SubsFeePercent"]);
                                                                    rSingle1.SubsFeeAmount = Convert.ToDecimal(dr1["SubsFeeAmount"]);
                                                                    rSingle1.NetAmount = Convert.ToDecimal(dr1["NetIDR"]);
                                                                    rSingle1.Nav = Convert.ToDecimal(dr1["Nav"]);
                                                                    rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                                    rSingle1.Remarks = Convert.ToString(dr1["Remarks"]);
                                                                    rList1.Add(rSingle1);

                                                                }


                                                                var QueryByClientID1 =
                                                                from r in rList1
                                                                group r by new { } into rGroup1
                                                                select rGroup1;


                                                                incRowExcel = 4;

                                                                foreach (var rsHeader1 in QueryByClientID1)
                                                                {

                                                                    worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "NAV Date";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "Fund Name";
                                                                    worksheet.Cells[incRowExcel, 4].Value = "IFUA";
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Name";
                                                                    worksheet.Cells[incRowExcel, 6].Value = "Agent Name";
                                                                    worksheet.Cells[incRowExcel, 7].Value = "%";
                                                                    worksheet.Cells[incRowExcel, 8].Value = "Gross IDR";
                                                                    worksheet.Cells[incRowExcel, 9].Value = "Fee %";
                                                                    worksheet.Cells[incRowExcel, 10].Value = "Fee Amount";
                                                                    worksheet.Cells[incRowExcel, 11].Value = "Net IDR";
                                                                    worksheet.Cells[incRowExcel, 12].Value = "NAV";
                                                                    worksheet.Cells[incRowExcel, 13].Value = "Unit";
                                                                    worksheet.Cells[incRowExcel, 14].Value = "Remark";
                                                                    string _range = "A" + incRowExcel + ":N" + incRowExcel;

                                                                    using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                    {
                                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                                        r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                                        r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                                        r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                        r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                                        r.Style.Font.Size = 11;
                                                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                                        r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                                        r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                                                    }

                                                                    _range = "A" + incRowExcel + ":N" + incRowExcel;
                                                                    using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                    {
                                                                        r.Style.Font.Size = 11;
                                                                        r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }

                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                                    incRowExcel++;
                                                                    int _no = 1;

                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    //int _endRowDetail = 0;
                                                                    //end area header
                                                                    int _clientSubsPK = 0;

                                                                    foreach (var rsDetail1 in rsHeader1)
                                                                    {

                                                                        _range = "A" + incRowExcel + ":N" + incRowExcel;
                                                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                        {
                                                                            r.Style.Font.Size = 11;
                                                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                                        }
                                                                        //area detail
                                                                        if (_clientSubsPK != rsDetail1.ClientSubscriptionPK)
                                                                        {
                                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail1.NAVDate).ToShortDateString();
                                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.FundID;
                                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.IFUA;
                                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.ClientName;
                                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail1.GrossAmount;
                                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail1.SubsFeePercent;
                                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000%";
                                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail1.SubsFeeAmount;
                                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail1.NetAmount;
                                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail1.Nav;
                                                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail1.Unit;
                                                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00000000";
                                                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail1.Remarks;
                                                                            _no++;
                                                                            _endRowDetail = incRowExcel;
                                                                        }


                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.AgentName;
                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail1.AgentTrxPercent;
                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000%";



                                                                        incRowExcel++;
                                                                        _range = "A" + incRowExcel + ":N" + incRowExcel;
                                                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                        {
                                                                            r.Style.Font.Size = 11;
                                                                        }

                                                                        //_endRowDetail = incRowExcel;

                                                                        //incRowExcel++;


                                                                        _clientSubsPK = rsDetail1.ClientSubscriptionPK;

                                                                    }

                                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00000000";
                                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";

                                                                    incRowExcel = incRowExcel + 2;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Approved By,";
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                    incRowExcel = incRowExcel + 4;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                    worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                                                    incRowExcel = incRowExcel + 6;

                                                                }


                                                            }

                                                        }
                                                    }
                                                }


                                                string _rangeDetail = "A:N";

                                                using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                    r.Style.Font.Size = 11;
                                                    r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                }

                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                worksheet.PrinterSettings.FitToPage = true;
                                                worksheet.PrinterSettings.FitToWidth = 1;
                                                worksheet.PrinterSettings.FitToHeight = 0;
                                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];
                                                worksheet.Column(1).Width = 5;
                                                worksheet.Column(2).Width = 10;
                                                worksheet.Column(3).Width = 15;
                                                worksheet.Column(4).Width = 25;
                                                worksheet.Column(5).Width = 40;
                                                worksheet.Column(6).Width = 35;
                                                worksheet.Column(7).Width = 10;
                                                worksheet.Column(8).Width = 20;
                                                worksheet.Column(9).Width = 10;
                                                worksheet.Column(10).Width = 15;
                                                worksheet.Column(11).Width = 20;
                                                worksheet.Column(12).Width = 15;
                                                worksheet.Column(13).Width = 20;
                                                worksheet.Column(14).Width = 20;

                                                worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                worksheet.HeaderFooter.OddHeader.CenteredText = "&22 BATCH ALL SUBS REDEMP";



                                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();
                                            }

                                            // REDEMPTION
                                            using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon2.Open();
                                                using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                {
                                                    cmd2.CommandText =

                                                   @"

                                                    declare @AgentDefault nvarchar(100)

                                                    select @AgentDefault = Name from Agent where AgentPK = 1 and status in (1,2)

                                                    SELECT NAVDate,B.ID FundID,'RED' TransactionType,case when isnull(C.IFUACode,'') = '' then C.SACode else C.IFUACode end IFUA,
                                                    C.Name ClientName,ISNULL(A.CashAmount,0) GrossIDR,ISNULL(A.RedemptionFeePercent/100,0) RedFeePercent,ISNULL(A.RedemptionFeeAmount,0) RedFeeAmount,
                                                    ISNULL(A.TotalCashAmount,0) NetIDR,ISNULL(A.NAV,0) Nav,ISNULL(A.TotalUnitAmount,0) Unit,ISNULL(A.Description,'') Remarks
                                                    FROM dbo.ClientRedemption A (NOLOCK)
                                                    LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.status in (1,2)
                                                    LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
                                                    WHERE A.status = 2
                                                    AND A.NAVDate BETWEEN @DateFrom AND @DateTo  and A.Type <> 3  " + _paramFund;

                                                    cmd2.CommandTimeout = 0;
                                                    cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd2.ExecuteNonQuery();


                                                    using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                    {

                                                        if (dr2.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<BatchAllSubsRedemp> rList2 = new List<BatchAllSubsRedemp>();
                                                                while (dr2.Read())
                                                                {
                                                                    BatchAllSubsRedemp rSingle2 = new BatchAllSubsRedemp();
                                                                    rSingle2.NAVDate = Convert.ToDateTime(dr2["NAVDate"]);
                                                                    rSingle2.FundID = Convert.ToString(dr2["FundID"]);
                                                                    rSingle2.TransactionType = Convert.ToString(dr2["TransactionType"]);
                                                                    rSingle2.IFUA = Convert.ToString(dr2["IFUA"]);
                                                                    rSingle2.ClientName = Convert.ToString(dr2["ClientName"]);
                                                                    //rSingle2.AgentName = Convert.ToString(dr2["Agent"]);
                                                                    //rSingle2.AgentTrxPercent = Convert.ToDecimal(dr2["AgentTrxPercent"]);
                                                                    rSingle2.GrossAmount = Convert.ToDecimal(dr2["GrossIDR"]);
                                                                    rSingle2.RedFeePercent = Convert.ToDecimal(dr2["RedFeePercent"]);
                                                                    rSingle2.RedFeeAmount = Convert.ToDecimal(dr2["RedFeeAmount"]);
                                                                    rSingle2.NetAmount = Convert.ToDecimal(dr2["NetIDR"]);
                                                                    rSingle2.Nav = Convert.ToDecimal(dr2["Nav"]);
                                                                    rSingle2.Unit = Convert.ToDecimal(dr2["Unit"]);
                                                                    rSingle2.Remarks = Convert.ToString(dr2["Remarks"]);
                                                                    rList2.Add(rSingle2);

                                                                }


                                                                var QueryByClientID2 =
                                                                from r in rList2
                                                                group r by new { } into rGroup2
                                                                select rGroup2;


                                                                incRowExcel = 4;
                                                                foreach (var rsHeader2 in QueryByClientID2)
                                                                {

                                                                    worksheet1.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet1.Cells[incRowExcel, 2].Value = "NAV Date";
                                                                    worksheet1.Cells[incRowExcel, 3].Value = "Fund Name";
                                                                    worksheet1.Cells[incRowExcel, 4].Value = "IFUA";
                                                                    worksheet1.Cells[incRowExcel, 5].Value = "Name";
                                                                    worksheet1.Cells[incRowExcel, 6].Value = "Gross IDR";
                                                                    worksheet1.Cells[incRowExcel, 7].Value = "Fee %";
                                                                    worksheet1.Cells[incRowExcel, 8].Value = "Fee Amount";
                                                                    worksheet1.Cells[incRowExcel, 9].Value = "Net IDR";
                                                                    worksheet1.Cells[incRowExcel, 10].Value = "NAV";
                                                                    worksheet1.Cells[incRowExcel, 11].Value = "Unit";
                                                                    worksheet1.Cells[incRowExcel, 12].Value = "Remark";
                                                                    string _range = "A" + incRowExcel + ":L" + incRowExcel;

                                                                    using (ExcelRange r = worksheet1.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                    {
                                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                                        r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                                        r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                                        r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                        r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                                        r.Style.Font.Size = 11;
                                                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                                        r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                                        r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                                                    }

                                                                    _range = "A" + incRowExcel + ":L" + incRowExcel;
                                                                    using (ExcelRange r = worksheet1.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                    {
                                                                        r.Style.Font.Size = 11;
                                                                        r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }


                                                                    worksheet1.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet1.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet1.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet1.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                                    incRowExcel++;
                                                                    int _no = 1;

                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    //end area header



                                                                    foreach (var rsDetail2 in rsHeader2)
                                                                    {

                                                                        _range = "A" + incRowExcel + ":L" + incRowExcel;
                                                                        using (ExcelRange r = worksheet1.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                        {
                                                                            r.Style.Font.Size = 11;
                                                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                                        }
                                                                        //area detail

                                                                        worksheet1.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet1.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet1.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                                                        worksheet1.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail2.NAVDate).ToShortDateString();
                                                                        worksheet1.Cells[incRowExcel, 3].Value = rsDetail2.FundID;
                                                                        worksheet1.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet1.Cells[incRowExcel, 4].Value = rsDetail2.IFUA;
                                                                        worksheet1.Cells[incRowExcel, 5].Value = rsDetail2.ClientName;
                                                                        worksheet1.Cells[incRowExcel, 6].Value = rsDetail2.GrossAmount;
                                                                        worksheet1.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet1.Cells[incRowExcel, 7].Value = rsDetail2.RedFeePercent;
                                                                        worksheet1.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000%";
                                                                        worksheet1.Cells[incRowExcel, 8].Value = rsDetail2.RedFeeAmount;
                                                                        worksheet1.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet1.Cells[incRowExcel, 9].Value = rsDetail2.NetAmount;
                                                                        worksheet1.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet1.Cells[incRowExcel, 10].Value = rsDetail2.Nav;
                                                                        worksheet1.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet1.Cells[incRowExcel, 11].Value = rsDetail2.Unit;
                                                                        worksheet1.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                                        worksheet1.Cells[incRowExcel, 12].Value = rsDetail2.Remarks;
                                                                        _no++;
                                                                        _endRowDetail = incRowExcel;





                                                                        incRowExcel++;
                                                                        _range = "A" + incRowExcel + ":L" + incRowExcel;
                                                                        using (ExcelRange r = worksheet1.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                        {
                                                                            r.Style.Font.Size = 11;
                                                                        }

                                                                        //_endRowDetail = incRowExcel;

                                                                        //incRowExcel++;


                                                                    }

                                                                    worksheet1.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet1.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                                    worksheet1.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet1.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                                    worksheet1.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet1.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                    worksheet1.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                                    worksheet1.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";


                                                                    incRowExcel = incRowExcel + 2;
                                                                    worksheet1.Cells[incRowExcel, 1].Value = "Approved By,";
                                                                    worksheet1.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                    incRowExcel = incRowExcel + 4;
                                                                    worksheet1.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                                                    worksheet1.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                    worksheet1.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                                                    incRowExcel = incRowExcel + 6;
                                                                }


                                                            }

                                                        }
                                                    }
                                                }


                                                string _rangeDetail = "A:L";

                                                using (ExcelRange r = worksheet1.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                    r.Style.Font.Size = 11;
                                                    r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                }

                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                worksheet1.PrinterSettings.FitToPage = true;
                                                worksheet1.PrinterSettings.FitToWidth = 1;
                                                worksheet1.PrinterSettings.FitToHeight = 0;
                                                worksheet1.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];
                                                worksheet1.Column(1).Width = 5;
                                                worksheet1.Column(2).Width = 10;
                                                worksheet1.Column(3).Width = 15;
                                                worksheet1.Column(4).Width = 25;
                                                worksheet1.Column(5).Width = 40;
                                                worksheet1.Column(6).Width = 20;
                                                worksheet1.Column(7).Width = 10;
                                                worksheet1.Column(8).Width = 15;
                                                worksheet1.Column(9).Width = 20;
                                                worksheet1.Column(10).Width = 15;
                                                worksheet1.Column(11).Width = 20;
                                                worksheet1.Column(12).Width = 20;

                                                worksheet1.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet1.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet1.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                worksheet1.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                worksheet1.HeaderFooter.OddHeader.CenteredText = "&22 BATCH ALL SUBS REDEMP";



                                                worksheet1.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                worksheet1.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();
                                            }


                                            //SWITCHING
                                            using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon3.Open();
                                                using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                                {
                                                    cmd3.CommandText =

                                                   @"

                                                    
                                                    declare @AgentDefault nvarchar(100)

                                                    Declare @AgentSwitching table
                                                    (
                                                    ClientSwitchingPK int,
                                                    AgentPK int,
                                                    AgentTrxpercent numeric(18,4)
                                                    )

                                                    insert into @AgentSwitching
                                                    select A.ClientSwitchingPK,B.AgentPK,AgentTrxPercent from AgentSwitching B
                                                    left join ClientSwitching A on A.ClientSwitchingPK = B.ClientSwitchingPK
                                                    where A.Type <> 3 and A.Posted = 1 and B.Status = 2 and A.Revised = 0 and NAVDate between @dateFrom and @dateto  " + _paramFundTo + @"

                                                    select @AgentDefault = Name from Agent where AgentPK = 1 and status in (1,2)

                                                    SELECT A.ClientSwitchingPK,'SWITCH' TransactionType,NAVDate,case when isnull(C.IFUACode,'') = '' then C.SACode else C.IFUACode end IFUA,C.Name ClientName,
                                                    B.ID FundIDFrom,ISNULL(A.CashAmount,0) GrossIDRFrom,ISNULL(A.SwitchingFeePercent/100,0) SwitchFeePercentFrom,ISNULL(A.SwitchingFeeAmount,0) SwitchFeeAmountFrom,ISNULL(A.TotalCashAmountFundFrom,0) NetIDRFrom,ISNULL(A.NAVFundFrom,0) NavFrom,ISNULL(A.TotalUnitAmountFundFrom,0) UnitFrom,
                                                    F.ID FundIDTo,ISNULL(A.CashAmount,0) GrossIDRTo,ISNULL(A.SwitchingFeePercent/100,0) SwitchFeePercentTo,ISNULL(A.SwitchingFeeAmount,0) SwitchFeeAmountTo,ISNULL(A.TotalCashAmountFundTo,0) NetIDRTo,ISNULL(A.NAVFundTo,0) NavTo,ISNULL(A.TotalUnitAmountFundTo,0) UnitTo,
                                                    case when isnull(E.Name,'') = '' then @AgentDefault else E.Name end Agent,ISNULL(D.AgentTrxPercent/100,1) AgentTrxPercent,ISNULL(A.Description,'') Remarks
                                                    FROM dbo.ClientSwitching A (NOLOCK)
                                                    LEFT JOIN Fund B (NOLOCK) ON A.FundPKTo = B.FundPK and B.status in (1,2)
                                                    LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
                                                    LEFT JOIN @AgentSwitching D  ON A.ClientSwitchingPK = D.ClientSwitchingPK
                                                    LEFT JOIN Agent E (NOLOCK) ON D.AgentPK = E.AgentPK AND E.status IN (1,2)
                                                    LEFT JOIN Fund F (NOLOCK) ON A.FundPKFrom = F.FundPK and F.status in (1,2)
                                                    WHERE  A.status = 2
                                                    AND A.NAVDate BETWEEN @DateFrom AND @DateTo  and A.Type <> 3 " + _paramFundTo + @"
                                                     order by A.ValueDate,FundIDFrom,IFUA,ClientName,A.ClientSwitchingPK,E.AgentPK Asc ";

                                                    cmd3.CommandTimeout = 0;
                                                    cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd3.ExecuteNonQuery();


                                                    using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                    {

                                                        if (dr3.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package3 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<BatchAllSubsRedemp> rList3 = new List<BatchAllSubsRedemp>();
                                                                while (dr3.Read())
                                                                {
                                                                    BatchAllSubsRedemp rSingle3 = new BatchAllSubsRedemp();
                                                                    rSingle3.ClientSwitchingPK = Convert.ToInt32(dr3["ClientSwitchingPK"]);
                                                                    rSingle3.NAVDate = Convert.ToDateTime(dr3["NAVDate"]);
                                                                    rSingle3.TransactionType = Convert.ToString(dr3["TransactionType"]);
                                                                    rSingle3.IFUA = Convert.ToString(dr3["IFUA"]);
                                                                    rSingle3.ClientName = Convert.ToString(dr3["ClientName"]);
                                                                    rSingle3.FundIDFrom = Convert.ToString(dr3["FundIDFrom"]);
                                                                    rSingle3.GrossAmountFrom = Convert.ToDecimal(dr3["GrossIDRFrom"]);
                                                                    rSingle3.SwitchFeePercentFrom = Convert.ToDecimal(dr3["SwitchFeePercentFrom"]);
                                                                    rSingle3.SwitchFeeAmountFrom = Convert.ToDecimal(dr3["SwitchFeeAmountFrom"]);
                                                                    rSingle3.NetAmountFrom = Convert.ToDecimal(dr3["NetIDRFrom"]);
                                                                    rSingle3.NavFrom = Convert.ToDecimal(dr3["NavFrom"]);
                                                                    rSingle3.UnitFrom = Convert.ToDecimal(dr3["UnitFrom"]);
                                                                    rSingle3.FundIDTo = Convert.ToString(dr3["FundIDTo"]);
                                                                    rSingle3.GrossAmountTo = Convert.ToDecimal(dr3["GrossIDRTo"]);
                                                                    rSingle3.SwitchFeePercentTo = Convert.ToDecimal(dr3["SwitchFeePercentTo"]);
                                                                    rSingle3.SwitchFeeAmountTo = Convert.ToDecimal(dr3["SwitchFeeAmountTo"]);
                                                                    rSingle3.NetAmountTo = Convert.ToDecimal(dr3["NetIDRTo"]);
                                                                    rSingle3.NavTo = Convert.ToDecimal(dr3["NavTo"]);
                                                                    rSingle3.UnitTo = Convert.ToDecimal(dr3["UnitTo"]);
                                                                    rSingle3.AgentName = Convert.ToString(dr3["Agent"]);
                                                                    rSingle3.AgentTrxPercent = Convert.ToDecimal(dr3["AgentTrxPercent"]);

                                                                    rList3.Add(rSingle3);

                                                                }


                                                                var QueryByClientID3 =
                                                                from r in rList3
                                                                group r by new { } into rGroup3
                                                                select rGroup3;


                                                                incRowExcel = 4;
                                                                foreach (var rsHeader3 in QueryByClientID3)
                                                                {

                                                                    worksheet2.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet2.Cells[incRowExcel, 2].Value = "NAV Date";
                                                                    worksheet2.Cells[incRowExcel, 3].Value = "IFUA";
                                                                    worksheet2.Cells[incRowExcel, 4].Value = "Name";
                                                                    worksheet2.Cells[incRowExcel, 5].Value = "Fund From";
                                                                    worksheet2.Cells[incRowExcel, 6].Value = "Gross IDR";
                                                                    worksheet2.Cells[incRowExcel, 7].Value = "Fee %";
                                                                    worksheet2.Cells[incRowExcel, 8].Value = "Fee Amount";
                                                                    worksheet2.Cells[incRowExcel, 9].Value = "Net IDR";
                                                                    worksheet2.Cells[incRowExcel, 10].Value = "NAV";
                                                                    worksheet2.Cells[incRowExcel, 11].Value = "Unit";
                                                                    worksheet2.Cells[incRowExcel, 12].Value = "Fund To";
                                                                    worksheet2.Cells[incRowExcel, 13].Value = "Gross IDR";
                                                                    worksheet2.Cells[incRowExcel, 14].Value = "Fee %";
                                                                    worksheet2.Cells[incRowExcel, 15].Value = "Fee Amount";
                                                                    worksheet2.Cells[incRowExcel, 16].Value = "Net IDR";
                                                                    worksheet2.Cells[incRowExcel, 17].Value = "NAV";
                                                                    worksheet2.Cells[incRowExcel, 18].Value = "Unit";
                                                                    worksheet2.Cells[incRowExcel, 19].Value = "Agent Name";
                                                                    worksheet2.Cells[incRowExcel, 20].Value = "Agent %";
                                                                    string _range = "A" + incRowExcel + ":T" + incRowExcel;

                                                                    using (ExcelRange r = worksheet2.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                    {
                                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                                        r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                                        r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                                        r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                        r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                                        r.Style.Font.Size = 11;
                                                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                                        r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                                        r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                                                    }

                                                                    _range = "A" + incRowExcel + ":T" + incRowExcel;
                                                                    using (ExcelRange r = worksheet2.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                    {
                                                                        r.Style.Font.Size = 11;
                                                                        r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }

                                                                    worksheet2.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet2.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet2.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet2.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                                    incRowExcel++;
                                                                    int _no = 1;

                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    //end area header


                                                                    int _clientSwitchPK = 0;
                                                                    foreach (var rsDetail3 in rsHeader3)
                                                                    {

                                                                        _range = "A" + incRowExcel + ":T" + incRowExcel;
                                                                        using (ExcelRange r = worksheet2.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                        {
                                                                            r.Style.Font.Size = 11;
                                                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                                        }
                                                                        //area detail
                                                                        if (_clientSwitchPK != rsDetail3.ClientSwitchingPK)
                                                                        {
                                                                            worksheet2.Cells[incRowExcel, 1].Value = _no;
                                                                            worksheet2.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet2.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                                                            worksheet2.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail3.NAVDate).ToShortDateString();
                                                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail3.IFUA;
                                                                            worksheet2.Cells[incRowExcel, 4].Value = rsDetail3.ClientName;
                                                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail3.FundIDFrom;
                                                                            worksheet2.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail3.GrossAmountFrom;
                                                                            worksheet2.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail3.SwitchFeePercentFrom;
                                                                            worksheet2.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000%";
                                                                            worksheet2.Cells[incRowExcel, 8].Value = rsDetail3.SwitchFeeAmountFrom;
                                                                            worksheet2.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet2.Cells[incRowExcel, 9].Value = rsDetail3.NetAmountFrom;
                                                                            worksheet2.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet2.Cells[incRowExcel, 10].Value = rsDetail3.NavFrom;
                                                                            worksheet2.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet2.Cells[incRowExcel, 11].Value = rsDetail3.UnitFrom;
                                                                            worksheet2.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";

                                                                            worksheet2.Cells[incRowExcel, 12].Value = rsDetail3.FundIDTo;
                                                                            worksheet2.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet2.Cells[incRowExcel, 13].Value = rsDetail3.GrossAmountTo;
                                                                            worksheet2.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet2.Cells[incRowExcel, 14].Value = rsDetail3.SwitchFeePercentTo;
                                                                            worksheet2.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000%";
                                                                            worksheet2.Cells[incRowExcel, 15].Value = rsDetail3.SwitchFeeAmountTo;
                                                                            worksheet2.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet2.Cells[incRowExcel, 16].Value = rsDetail3.NetAmountTo;
                                                                            worksheet2.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet2.Cells[incRowExcel, 17].Value = rsDetail3.NavTo;
                                                                            worksheet2.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet2.Cells[incRowExcel, 18].Value = rsDetail3.UnitTo;
                                                                            worksheet2.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00000000";


                                                                            _no++;
                                                                            _endRowDetail = incRowExcel;
                                                                        }

                                                                        worksheet2.Cells[incRowExcel, 19].Value = rsDetail3.AgentName;
                                                                        worksheet2.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet2.Cells[incRowExcel, 20].Value = rsDetail3.AgentTrxPercent;
                                                                        worksheet2.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.0000%";



                                                                        incRowExcel++;
                                                                        _range = "A" + incRowExcel + ":T" + incRowExcel;
                                                                        using (ExcelRange r = worksheet2.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                        {
                                                                            r.Style.Font.Size = 11;
                                                                        }

                                                                        //_endRowDetail = incRowExcel;

                                                                        //incRowExcel++;

                                                                        _clientSwitchPK = rsDetail3.ClientSwitchingPK;
                                                                    }

                                                                    worksheet2.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet2.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                                    worksheet2.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet2.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                                    worksheet2.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet2.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                    worksheet2.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                                    worksheet2.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";

                                                                    worksheet2.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet2.Cells[incRowExcel, 13].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                                    worksheet2.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet2.Cells[incRowExcel, 15].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                                    worksheet2.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet2.Cells[incRowExcel, 16].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                    worksheet2.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00000000";
                                                                    worksheet2.Cells[incRowExcel, 18].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";


                                                                    incRowExcel = incRowExcel + 2;
                                                                    worksheet2.Cells[incRowExcel, 1].Value = "Approved By,";
                                                                    worksheet2.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                    incRowExcel = incRowExcel + 4;
                                                                    worksheet2.Cells[incRowExcel, 1].Value = "PT Ciptadana Asset Management";
                                                                    worksheet2.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                    worksheet2.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                                                    incRowExcel = incRowExcel + 6;

                                                                }


                                                            }

                                                        }
                                                    }
                                                }


                                                string _rangeDetail = "A:T";

                                                using (ExcelRange r = worksheet2.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                    r.Style.Font.Size = 11;
                                                    r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                }

                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                worksheet2.PrinterSettings.FitToPage = true;
                                                worksheet2.PrinterSettings.FitToWidth = 1;
                                                worksheet2.PrinterSettings.FitToHeight = 0;
                                                worksheet2.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 20];
                                                worksheet2.Column(1).Width = 5;
                                                worksheet2.Column(2).Width = 10;
                                                worksheet2.Column(3).Width = 25;
                                                worksheet2.Column(4).Width = 40;
                                                worksheet2.Column(5).Width = 15;
                                                worksheet2.Column(6).Width = 20;
                                                worksheet2.Column(7).Width = 10;
                                                worksheet2.Column(8).Width = 15;
                                                worksheet2.Column(9).Width = 20;
                                                worksheet2.Column(10).Width = 15;
                                                worksheet2.Column(11).Width = 20;
                                                worksheet2.Column(12).Width = 15;
                                                worksheet2.Column(13).Width = 20;
                                                worksheet2.Column(14).Width = 10;
                                                worksheet2.Column(15).Width = 15;
                                                worksheet2.Column(16).Width = 20;
                                                worksheet2.Column(17).Width = 15;
                                                worksheet2.Column(18).Width = 20;
                                                worksheet2.Column(19).Width = 35;
                                                worksheet2.Column(20).Width = 10;


                                                worksheet2.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet2.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet2.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                worksheet2.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                worksheet2.HeaderFooter.OddHeader.CenteredText = "&22 BATCH ALL SUBS REDEMP";



                                                worksheet2.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                worksheet2.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();
                                            }


                                            incRowExcel++;
                                        }

                                        //worksheet.Row(incRowExcel).PageBreak = true;

                                        //incRowExcel++;





                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                    }

                                }

                                return true;
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

            #endregion

            #region List Unit per Client Code
            if (_unitRegistryRpt.ReportName.Equals("List Unit Per Client Code"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            //string _paramInstrument = "";

                            //if (!_host.findString(_unitRegistryRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.InstrumentFrom))
                            //{
                            //    _paramInstrument = "And B.InstrumentPK  in ( " + _unitRegistryRpt.InstrumentFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramInstrument = "";
                            //}



                            //                            cmd.CommandText = @"
                            //                            select C.ID FundID,B.ID InstrumentID,B.Name InstrumentName,isnull(A.Balance/100,0) Lot,isnull(A.AvgPrice,0) CostPrice,
                            //                            isnull(CostValue,0) CostValue,isnull(ClosePrice,0) ClosePrice,isnull(MarketValue,0) MarketValue, isnull(ClosePrice,0) MarketPrice,isnull(D.ID,'') IssuerID
                            //                            from FundPosition A
                            //                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                            //                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            //                            left join Issuer D on B.IssuerPK = D.IssuerPK and D.status in (1,2)
                            //                            where A.status = 2 and A.Date = @Date 
                            //                            Order By B.ID,C.ID asc    ";
                            cmd.CommandText = @"
                            declare @Yesterday date
                            --declare @Date date
                            --set @Date = '03/11/2020'
                            set @Yesterday = dbo.FWorkingDay(@Date,-1)

                             select C.ID FundCode, B.Name ClientName,case When B.InvestorType = 1 then B.Email else B.CompanyMail end Email,case When B.InvestorType = 1 then B.AlamatInd1 else B.AlamatPerusahaan end Address,A.UnitAmount NoOfUnit,case When B.InvestorType = 1 then 'N' else 'Y' end Institution ,(A.UnitAmount * isnull(D.NAV,0)) GrossAmount, isnull(D.NAV,0)NAV
                            from FundClientPosition A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
							left join CloseNAV D on A.FundPK = D.FundPK and D.Status in (2) and D.Date = @Date
							where A.Date = @Yesterday " + _paramFundFrom + @"
							Order By C.ID asc 
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ListUnitPerClientCode" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ListUnitPerClientCode" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegsitryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("List Unit Per Client Code");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ListUnitPerClientCode> rList = new List<ListUnitPerClientCode>();
                                        while (dr0.Read())
                                        {

                                            ListUnitPerClientCode rSingle = new ListUnitPerClientCode();
                                            rSingle.FundCode = Convert.ToString(dr0["FundCode"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.Email = Convert.ToString(dr0["Email"]);
                                            rSingle.Address = Convert.ToString(dr0["Address"]);
                                            rSingle.NoOfUnit = Convert.ToDecimal(dr0["NoOfUnit"]);
                                            rSingle.Institution = Convert.ToString(dr0["Institution"]);
                                            rSingle.GrossAmount = Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        //int _date;
                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "List Unit Per Client Code";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date             :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //_date = incRowExcel;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Instrument :";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "FUND CODE";
                                            worksheet.Cells[incRowExcel, 3].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Email";
                                            worksheet.Cells[incRowExcel, 5].Value = "Address";
                                            worksheet.Cells[incRowExcel, 6].Value = "No Of Unit";
                                            worksheet.Cells[incRowExcel, 7].Value = "Institution (Y/N)";
                                            worksheet.Cells[incRowExcel, 8].Value = "Gross Amount";
                                            worksheet.Cells[incRowExcel, 9].Value = "NAV";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundCode;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Email;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Address;
                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NoOfUnit;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#.####";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Institution;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.GrossAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#.####";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#.##";

                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 6;
                                        worksheet.Column(2).Width = 18;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 33;
                                        worksheet.Column(5).Width = 54;
                                        worksheet.Column(6).Width = 16;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 17;
                                        worksheet.Column(9).Width = 15;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Consolidation Report By SID
            if (_unitRegistryRpt.ReportName.Equals("Consolidation Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundClient = "";


                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = " and FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            cmd.CommandText = @"
              


                            declare @Yesterday date
                            set @Yesterday = dbo.FWorkingDay(@Date,-1)

                            declare @FundClientTemp table
                            (
                            Sid nvarchar (200)
                            )

                            declare @TopNameSID table
                            (
                            FundClientName nvarchar(200),
                            Email nvarchar(200),
                            Sid nvarchar (200)
                            )


                            insert into @FundClientTemp (sid)
                            select Distinct SID From FundClient Where Status in (1,2) and isnull(SID,'') <> '' " + _paramFundClient + @"

                            insert into @TopNameSID
                            select top 1 with ties
                               Name,Email,SID
                            from FundClient where status in (1,2) " + _paramFundClient + @"
                            order by row_number() over (partition by SID order by FundClientPK asc)



                            select      F.FundClientName  Name ,
                            C.SID SID ,
                            F.Email Email ,
                            B.Name Fund ,
                            D.Nav NAVperUnit,
                            sum(A.UnitAmount) Unit,
                            E.ID Currency ,
                            sum(case when E.ID = 'IDR' then isnull(D.NAV * A.UnitAmount,0) else 0 end)  BalanceIDR ,
                            sum(case when E.ID = 'USD' then isnull(D.NAV * A.UnitAmount,0) else 0 end) BalanceUSD 
                            From FundClientPosition A
                            left Join Fund B on A.FundPK = B.FundPK and B.Status in (1,2) 
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.Status in (1,2)
                            left join CloseNAV D on A.FundPK = D.FundPK and D.Status in  (1,2) and D.Date =
                            (
                            select max(Date) from CloseNav where FundPK = A.FundPK and Status = 2 and Date <= @Date
                            )
                            left join Currency E on B.CurrencyPK = E.CurrencyPK and E.Status in (1,2)
                            left join @TopNameSID F on C.SID = F.SID
                            where A.Date = @Yesterday and A.UnitAmount > 0 and C.SID in (select sid From @FundClientTemp)

                            group by F.FundClientName,C.SID,F.Email,B.Name,D.Nav,E.ID
                            order by C.SID

                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ConsolidationReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ConsolidationReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Consolidation Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ConsolidationReport> rList = new List<ConsolidationReport>();
                                        while (dr0.Read())
                                        {

                                            ConsolidationReport rSingle = new ConsolidationReport();
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.Email = Convert.ToString(dr0["Email"]);

                                            rSingle.Fund = Convert.ToString(dr0["Fund"]);
                                            rSingle.NAVperUnit = Convert.ToDecimal(dr0["NAVperUnit"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);

                                            rSingle.Currency = Convert.ToString(dr0["Currency"]);
                                            rSingle.BalanceIDR = Convert.ToDecimal(dr0["BalanceIDR"]);
                                            rSingle.BalanceUSD = Convert.ToDecimal(dr0["BalanceUSD"]);





                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.SID, r.Name, r.Email } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Client Consolidation Report";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Name : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Name;
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Date   : ";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "SID      : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.SID;
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Email : ";
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.Email;
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;



                                            incRowExcel = incRowExcel + 4;


                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 3].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 5].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 6].Value = "Balance IDR";
                                            worksheet.Cells[incRowExcel, 7].Value = "Balance USD";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.LightGray);



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Fund;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NAVperUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Currency;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BalanceIDR;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BalanceUSD;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 3].Calculate();

                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();

                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();


                                            incRowExcel = incRowExcel + 5;
                                            worksheet.Cells[incRowExcel, 1].Value = "Disclaimer :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "- Laporan yang dihasilkan oleh komputer ini diterbitkan oleh PT Ciptadana Asset Management sebagai Manajer Investasi dan tidak memerlukan tanda-tangan.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "  This report is generated from the system by PT Ciptadana Asset Management as the Investment Manager, and no signature required.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "- Apabila terdapat perbedaan antara laporan Manajer Investasi dengan laporan pada Bank Kustodian maka yang dipergunakan sebagai pedoman adalah catatan pada sistem Bank Kustodian.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "  If the report from the Investment Manager  differs from the Custodian Bank's report, the Custodian Bank's record from the system will be used as reference.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "- Laporan ini bukan merupakan bukti kepemilikan dan tidak dapat diperjual belikan. Seluruh  transaksi Unit Penyertaan diproses oleh Manajer Investasi dan Bank Kustodian sesuai peraturan yang berlaku.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "  This report is not the proof of ownership and not tradeable. All unit holder transaction are proceed by the Investment Manager and the Custodian Bank in accordance with it's regulations.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "- Investasi melalui reksa dana mengandung risiko. Calon pemodal wajib membaca dan memahami prospektus sebelum memutuskan untuk berinvestasi melalui reksa dana. Kinerja masa lalu tidak mencerminkan masa datang.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Investment in mutual fund contains risks. Investors must read and understand the mutual fund prospectus, prior to the subscription. Past performance does not reflect the future performance.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(1).Width = 12;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Consolidation Report";


                                        Image imgOJKReksadana = Image.FromFile(Tools.ImageOJKReksadana);
                                        worksheet.HeaderFooter.OddFooter.InsertPicture(imgOJKReksadana, PictureAlignment.Right);


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion



            else
            {
                return false;
            }
        }


        public void Generate_ExposureMonitoringByDateByFundPK(DateTime _date, string _fundPK, string _usersID)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<DataExposureMonitoring> L_ExposureMonitoring = new List<DataExposureMonitoring>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        string _paramFund = "";
                        string _paramSplitByFund = "";
                        _paramFund = " and FundPK =  " + _fundPK;
                        if (Tools.ParamFundScheme)
                        {
                            _paramSplitByFund = " and FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramSplitByFund = "";
                        }


                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"


--declare @date date
--declare @ClientCode nvarchar(20)
--declare @UsersID nvarchar(20)
--declare @Time datetime

--set @date = '2020-04-07'
--set @ClientCode = '21'
--set @UsersID = 'admin'
--set @Time = getdate()

declare @InstrumentPK int
declare @Amount numeric(22,4)

set @InstrumentPK = 0
set @Amount = 0

Declare @PeriodPK int

select @PeriodPK = PeriodPK from Period where @Date between DateFrom and DateTo and status = 2


--VARIABLE
BEGIN
	Declare @TrailsPK int
	Declare @MaxDateEndDayFP datetime
	Declare @TotalMarketValue numeric(26,6)
	Declare @TotalMarketValueAllFund numeric(26,6)
	DECLARE @QInstrumentPK int
	DECLARE @PInstrumentPK int

	DECLARE @EInstrumentPK INT
	DECLARE @EAmount NUMERIC(22,4)
	DECLARE @EFundPK INT

	DECLARE @WInstrumentPK INT
	DECLARE @WAmount NUMERIC(22,4)

	DECLARE @CFundPK INT
	DECLARE @CType INT
	DECLARE @CParameter INT
	DECLARE @CMinExp NUMERIC(8,4)
	DECLARE @CMaxExp NUMERIC(8,4)
	DECLARE @CWarningMinExp NUMERIC(8,4)
	DECLARE @CWarningMaxExp NUMERIC(8,4)
	DECLARE @CMinVal NUMERIC(22,4)
	DECLARE @CMaxVal NUMERIC(22,4)
	DECLARE @CWarningMinVal NUMERIC(8,4)
	DECLARE @CWarningMaxVal NUMERIC(8,4)

	DECLARE @TotalInvestmentAllFundForCounterpartExposure numeric(26,6)
	Declare @FundPK int

	DECLARE @Exposure TABLE
	(
	FundPK INT,
	Exposure INT,
	ExposureID nvarchar(100) COLLATE DATABASE_DEFAULT,
	Parameter INT,
	ParameterDesc nvarchar(100) COLLATE DATABASE_DEFAULT,

	MarketValue numeric(22,4),
	ExposurePercent numeric(18,8),

	MinExposurePercent numeric(18,8),
	WarningMinExposure numeric(18,8),
	AlertWarningMinExposure BIT,
	AlertMinExposure bit,

	MaxExposurePercent numeric(18,8),
	WarningMaxExposure numeric(18,8),
	AlertWarningMaxExposure BIT,
	AlertMaxExposure BIT,

	MinValue NUMERIC(22,4),
	WarningMinValue NUMERIC(22,4),
	AlertWarningMinValue BIT,
	AlertMinValue BIT,

	MaxValue NUMERIC(22,4),
	WarningMaxValue NUMERIC(22,4),
	AlertWarningMaxValue BIT,
	AlertMaxValue bit

	)


	DECLARE @InvestmentPosition TABLE
	(
		FundPK INT,
		InstrumentPK INT,
		Amount NUMERIC(22,4)
	)

	DECLARE @InvestmentPrice TABLE
	(
		InstrumentPK INT,
		Price NUMERIC(22,4)
	)

	DECLARE @InvestmentPositionALLFund TABLE
	(
		FundPK int,
		InstrumentPK INT,
		Amount NUMERIC(22,4)
	)

	Declare @PositionForExp1 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp2 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp3 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp4 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp5 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp9 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp10 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp13 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	DECLARE @InstrumentIndex TABLE
	(
		InstrumentPK INT,
		[IndexPK] int
	)

	Declare @PositionForExp14 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp16 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp18 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp19 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent numeric(18,4)
	)

	Declare @PositionForExp20 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

	Declare @PositionForExp32 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4)
	)

END

 --type di fundexposure 
-- 1 -> | INSTRUMENT TYPE GROUP | DONE
-- 2 | BOND | DONE
-- 3 | SECTOR | DONE
-- 4 | INSTRUMENT TYPE | DONE
-- 5 | EQUITY | DONE
-- 9 | ALL FUND PER BANK | DONE
-- 10 | PER FUND PER BANK | DONE
-- 13 | ISSUER | DONE
-- 14 | INDEX | DONE
-- 15 | SYARIAH ONLY - BELUM
-- 16 | TOTAL PORTFOLIO | DONE
-- 19 | ALL FUND EQUITY < Market CAP - BELUM
-- 18 | ISSUER ALL FUND | DONE
-- 20 | COUNTERPART EXPOSURE
-- 32 | CAPITAL CLASSIFICATION


select @TotalMarketValueAllFund = SUM(ISNULL(aum,0)) From closeNav
where Date = (
	 select max(date) from CloseNAV where date < @Date AND status = 2
)
and status = 2 

SET @TotalMarketValueAllFund = ISNULL(@TotalMarketValueAllFund,1)

set @TotalMarketValue = isnull(@TotalMarketValue,1) 


select @TotalInvestmentAllFundForCounterpartExposure = SUM(case when TrxType = 1 then ISNULL(DoneAmount,0) else ISNULL(DoneAmount,0) * -1 end) 
FROM dbo.Investment A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
WHERE  ValueDate <= @Date  and A.PeriodPK = @PeriodPK and StatusSettlement = 2
AND C.GroupType in (1,2)


SET @TotalInvestmentAllFundForCounterpartExposure = ISNULL(@TotalInvestmentAllFundForCounterpartExposure,1)

DECLARE Z CURSOR FOR 
Select distinct FundPK from FundExposure  where status = 2 " + _paramFund + @"
--and FundPK = 73

Open Z
Fetch Next From Z
Into @FundPK

While @@FETCH_STATUS = 0
Begin


--SETUP--
BEGIN

Select @TrailsPK = EndDayTrailsFundPortfolioPK , @MaxDateEndDayFP = ValueDate From 
endDayTrailsFundPortfolio where 
valuedate = 
(
	Select max(ValueDate) from endDayTrailsFundPortfolio where
	valuedate < @Date  and status = 2 
	
" + _paramSplitByFund + @"
--and FundPK = @FundPK 
	
)
and status = 2 
" + _paramSplitByFund + @"
--and FundPK = @FundPK 



select @TotalMarketValue = aum From closeNav
where Date = (
	 select max(date) from CloseNAV where date < @Date
	 and FundPK = @FundPK and status = 2
)
and FundPK = @FundPK
and status = 2 




Declare Q Cursor For
	SELECT DISTINCT InstrumentPK FROM dbo.Investment A
	WHERE 
	 A.ValueDate > @MaxDateEndDayFP AND A.ValueDate <= @Date
	and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3  --and A.InstrumentTypePK not in (2,13,15)
	-- PARAM DISINI
	AND A.FundPK = @FundPK 

Open Q
Fetch Next From Q
INTO @QInstrumentPK
While @@FETCH_STATUS = 0  
BEGIN

	INSERT INTO @InvestmentPrice
	        ( InstrumentPK, Price )
	SELECT A.InstrumentPK,ISNULL(ClosePriceValue,0) FROM ClosePrice A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
	WHERE A.status = 2 AND A.instrumentPK = @QInstrumentPK  and --B.InstrumentTypePK not in (2,13,15) and
    date =
	(
		SELECT MAX(Date) FROM dbo.ClosePrice WHERE status = 2 AND instrumentPK = @QInstrumentPK AND date <= @Date
	)
    union all
	select InstrumentPK,1 from Instrument where InstrumentPK = @QInstrumentPK and InstrumentTypePK in (5,10)

	Fetch Next From Q
	INTO @QInstrumentPK
End	
Close Q
Deallocate Q

INSERT INTO @InvestmentPosition
        ( FundPK, InstrumentPK, Amount )
SELECT FundPK,A.InstrumentPK, SUM(ISNULL(CASE WHEN A.DoneVolume > 0 THEN A.DoneVolume * ISNULL(B.Price,0) * CASE WHEN A.TrxType = 2 THEN  -1 ELSE 1 END
ELSE A.DoneAmount * CASE WHEN A.TrxType = 2 THEN  -1 ELSE 1 END END,0)
/ case when A.InstrumentTypePK not in (1,4,5,6,16) then 100 else 1 end
) 
FROM Investment A
LEFT JOIN @InvestmentPrice B ON A.InstrumentPK = B.InstrumentPK 
WHERE  
 A.ValueDate > @MaxDateEndDayFP AND A.ValueDate <= @Date
and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3  --and A.InstrumentTypePK not in (2,13,15)

-- PARAM DISINI
AND A.FundPK = @FundPK 

GROUP BY FundPK,A.InstrumentPK







INSERT INTO @InvestmentPositionALLFund
        ( FundPK,InstrumentPK, Amount )
SELECT A.FundPK,A.InstrumentPK, SUM(ISNULL(CASE WHEN A.DoneVolume > 0 THEN A.DoneVolume * ISNULL(B.Price,0) * CASE WHEN A.TrxType = 2 THEN  -1 ELSE 1 END
ELSE A.DoneAmount * CASE WHEN A.TrxType = 2 THEN  -1 ELSE 1 END END,0)
/ case when A.InstrumentTypePK not in (1,4,5,6,16) then 100 else 1 end
) 
FROM Investment A
LEFT JOIN @InvestmentPrice B ON A.InstrumentPK = B.InstrumentPK 
WHERE   A.ValueDate > @MaxDateEndDayFP AND A.ValueDate <= @Date
and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3  and A.InstrumentTypePK not in (2,13,15)
GROUP BY A.InstrumentPK,A.FundPK

END

--1--
BEGIN


IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 1
	)
BEGIN
	INSERT INTO @PositionForExp1
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,1,ISNULL(E.DescOne,''),ISNULL(C.GroupType,0),ISNULL(D.DescOne,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.InstrumentType C ON case when B.InstrumentTypePK in (2,3,8,9,13,15) and B.MaturityDate between DATEADD(year, -1, A.Date) and A.Date then 5 else B.InstrumentTypePK end = C.InstrumentTypePK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON C.GroupType = D.Code AND D.id = 'InstrumentGroupType' AND D.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 1 AND E.ID = 'ExposureType' AND E.status IN (1,2)

		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK  --and B.InstrumentTypePK not in (2,13,15)
		AND D.DescOne IS NOT NULL

		-- PARAM DISINI
AND A.FundPK = @FundPK 

		GROUP BY D.DescOne,C.GroupType,A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	
	

	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp1 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp1 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp1
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,1,ISNULL(D.DescOne,''),ISNULL(B.GroupType,0),ISNULL(C.DescOne,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.InstrumentType B ON case when A.InstrumentTypePK in (2,3,8,9,13,15) and A.MaturityDate >= DATEADD(year, -1, @Date) then 5 else A.InstrumentTypePK end = B.InstrumentTypePK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue C ON B.GroupType = C.Code AND C.id = 'InstrumentGroupType' AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 1 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2) --and B.InstrumentTypePK not in (2,13,15)
		AND isnull(@InstrumentPK,0) <> 0
		AND C.DescOne IS NOT NULL
	END
	--
END

END

--2--
BEGIN



IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 2
	)
BEGIN
	INSERT INTO @PositionForExp2
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,2,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(B.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.InstrumentType C ON case when B.InstrumentTypePK in (2,3,8,9,13,15) and B.MaturityDate between DATEADD(year, -1, A.Date) and A.Date then 5 else B.InstrumentTypePK end = C.InstrumentTypePK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 2 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK 
		AND C.GroupType = 2 and B.InstrumentTypePK not in (2,12,13,14,15)
		-- PARAM DISINI
AND A.FundPK = @FundPK 

		GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp2 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp2 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp2
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,2,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.InstrumentType B ON case when A.InstrumentTypePK in (2,3,8,9,13,15) and A.MaturityDate >= DATEADD(year, -1, @Date) then 5 else A.InstrumentTypePK end = B.InstrumentTypePK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 2 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2)
		AND isnull(@InstrumentPK,0) <> 0
		AND B.GroupType = 2 and B.InstrumentTypePK not in (2,12,13,14,15)
	END
	--

END



END

--3--
BEGIN


IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 3
	)
BEGIN
	INSERT INTO @PositionForExp3
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,3,ISNULL(E.DescOne,''),ISNULL(C.SectorPK,0),ISNULL(D.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.SubSector C ON B.SectorPK =  C.SubSectorPK AND C.status IN (1,2)
		LEFT JOIN Sector D ON C.SectorPK = D.SectorPK AND D.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 3 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK
		AND D.ID IS NOT NULL
		-- PARAM DISINI
AND A.FundPK = @FundPK 
		GROUP BY D.ID,C.SectorPK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	

	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp3 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp3 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp3
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,3,ISNULL(D.DescOne,''),ISNULL(B.SectorPK,0),ISNULL(C.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.SubSector B ON A.SectorPK =  B.SubSectorPK AND B.status IN (1,2)
		LEFT JOIN Sector C ON B.SectorPK = C.SectorPK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 3 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2)
		AND isnull(@InstrumentPK,0) <> 0
		AND C.ID IS NOT NULL
	END
	--
END


END

--4--
BEGIN

IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 4
	)
BEGIN
	INSERT INTO @PositionForExp4
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,4,ISNULL(E.DescOne,''),ISNULL(case when B.InstrumentTypePK in (2,3,8,9,13,15) and B.MaturityDate between DATEADD(year, -1, A.Date) and A.Date then 5 else B.InstrumentTypePK end,0),ISNULL(C.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.InstrumentType C ON case when B.InstrumentTypePK in (2,3,8,9,13,15) and B.MaturityDate between DATEADD(year, -1, A.Date) and A.Date then 5 else B.InstrumentTypePK end = C.InstrumentTypePK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 4 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK --and B.InstrumentTypePK not in (2,13,15)
		AND C.ID IS NOT NULL
		-- PARAM DISINI
AND A.FundPK = @FundPK 
		GROUP BY C.ID,B.InstrumentTypePK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK,B.MaturityDate,A.Date

	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp4 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp4 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp4
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,4,ISNULL(D.DescOne,''),ISNULL(case when A.InstrumentTypePK in (2,3,8,9,13,15) and A.MaturityDate >= DATEADD(year, -1, @Date) then 5 else A.InstrumentTypePK end,0),ISNULL(B.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.InstrumentType B ON case when A.InstrumentTypePK in (2,3,8,9,13,15) and A.MaturityDate >= DATEADD(year, -1, @Date) then 5 else A.InstrumentTypePK end = B.InstrumentTypePK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 4 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2) --and B.InstrumentTypePK not in (2,13,15)
		AND isnull(@InstrumentPK,0) <> 0
		AND B.ID IS NOT NULL
	END
	--
END

END

--5--
BEGIN

IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 5
	)
BEGIN
	INSERT INTO @PositionForExp5
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,5,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(B.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 5 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK
		AND C.GroupType = 1
		-- PARAM DISINI
AND A.FundPK = @FundPK 
		GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp5 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp5 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp5
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,1,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 1 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2)
		AND isnull(@InstrumentPK,0) <> 0
		AND B.GroupType = 1
	END
	--

END


END

--10--
BEGIN


IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 10
	)
BEGIN
	INSERT INTO @PositionForExp10
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,10,ISNULL(E.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 10 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		LEFT JOIN Bank G ON B.BankPK = G.BankPK AND G.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK
		AND C.GroupType = 3 
		AND ISNULL(G.ID,'') <> ''
		-- PARAM DISINI
AND A.FundPK = @FundPK 
		GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,G.BankPK,G.ID

	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp10 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp10 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp10
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,10,ISNULL(D.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 10 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		LEFT JOIN Bank G ON A.BankPK = G.BankPK AND G.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2)
		AND B.GroupType = 3
		AND ISNULL(G.ID,'')  <> ''
		AND isnull(@InstrumentPK,0) <> 0
	END
	--

END


END

--13--
BEGIN


IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 13
	)
BEGIN
	INSERT INTO @PositionForExp13
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,13,ISNULL(E.DescOne,''),ISNULL(C.IssuerPK,0),ISNULL(C.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.Issuer C ON B.IssuerPK =  C.IssuerPK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 13 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK
		AND C.ID IS NOT NULL

		--PARAM DISINI
AND FundPk = @FundPK 
		GROUP BY C.ID,C.IssuerPK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	

	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp13 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp13 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp13
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,13,ISNULL(D.DescOne,''),ISNULL(B.IssuerPK,0),ISNULL(B.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.Issuer B ON A.IssuerPK =  B.IssuerPK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 13 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2)
		AND isnull(@InstrumentPK,0) <> 0
		AND B.ID IS NOT NULL
	END
	--
END


END

--14--
BEGIN



Declare P Cursor For
		SELECT DISTINCT InstrumentPK FROM dbo.FundPosition A WHERE A.FundPK = @FundPK AND Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK
Open P
Fetch Next From P
INTO @PInstrumentPK

While @@FETCH_STATUS = 0  
Begin
	
	INSERT INTO @InstrumentIndex
	        ( InstrumentPK, IndexPK )
	SELECT @InstrumentPK,IndexPK FROM dbo.InstrumentIndex WHERE Date = (
		SELECT MAX(Date) FROM dbo.InstrumentIndex WHERE status = 2 AND InstrumentPK = @PInstrumentPK
	)AND InstrumentPK = @InstrumentPK AND Status = 2 
	
	Fetch Next From P
	into @PInstrumentPK
End	
Close P
Deallocate P


IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 14
	)
BEGIN
	INSERT INTO @PositionForExp14
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,14,ISNULL(E.DescOne,''),ISNULL(C.IndexPK,0),ISNULL(D.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN @InstrumentIndex C ON B.InstrumentPK =  C.InstrumentPK
		LEFT JOIN dbo.[Index] D ON C.IndexPK = D.IndexPK AND D.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 14 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK
		AND D.ID IS NOT NULL

		--PARAM DISINI
AND FundPk = @FundPK 

		GROUP BY D.ID,C.IndexPK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK


	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp14 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp14 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp14
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,14,ISNULL(D.DescOne,''),ISNULL(C.IndexPK,0),ISNULL(C.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN @InstrumentIndex B ON A.InstrumentPK =  B.InstrumentPK
		LEFT JOIN dbo.[Index] C ON B.IndexPK = C.IndexPK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 14 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2)
		AND isnull(@InstrumentPK,0) <> 0
		AND C.ID IS NOT NULL
	END
	--
END


END

--16--
BEGIN


IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 16
	)
BEGIN
	INSERT INTO @PositionForExp16
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,16,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(B.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValue
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 16 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP AND TrailsPK = @TrailsPK --and B.InstrumentTypePK not in (2,13,15)
		AND B.ID IS NOT NULL

		--PARAM DISINI
AND FundPk = @FundPK 

		GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK
	

	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp16 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp16 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValue * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp16
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,16,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValue,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValue,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 16 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2) --and B.InstrumentTypePK not in (2,13,15)
		AND isnull(@InstrumentPK,0) <> 0
	END
	--
END

END

--20--
BEGIN

IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
	AND Type = 20
	)
BEGIN
	INSERT INTO @PositionForExp20
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,20,ISNULL(E.DescOne,''),ISNULL(G.CounterpartPK,0),ISNULL(G.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.DoneAmount,0)) MarketValue
		,@TotalInvestmentAllFundForCounterpartExposure
		, SUM(ISNULL(A.DoneAmount,0)) /  @TotalInvestmentAllFundForCounterpartExposure * 100 ExposurePercent
		FROM dbo.Investment A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 20 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		LEFT JOIN Counterpart G ON A.CounterpartPK = G.CounterpartPK AND G.status IN (1,2)
		WHERE  ValueDate <= @Date and PeriodPK = @PeriodPK and StatusSettlement = 2
		AND C.GroupType in (1,2) 
		--PARAM DISINI
AND FundPk = @FundPK 

		GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,G.CounterpartPK,G.ID
		


	

END


IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 32
		)
	BEGIN
	INSERT INTO @PositionForExp32
			( FundPK ,
				Exposure ,
				ExposureDesc,
				Parameter ,
				ParameterDesc ,
				InstrumentPK,
				InstrumentID ,
				MarketValue ,
				AUM ,
				ExposurePercent
			)
	SELECT A.FundPK,32,ISNULL(E.DescOne,''),ISNULL(G.CapitalClassification,0)
	,case when G.CapitalClassification = 1 then 'Capital Classification 1'
			when G.CapitalClassification = 2 then 'Capital Classification 2'
				when G.CapitalClassification = 3 then 'Capital Classification 3'
					else 'Capital Classification 4' end
	,isnull(G.BankPK,0)
	,isnull(G.ID,'')
	,SUM(ISNULL(A.MarketValue,0)) MarketValue
	,@TotalMarketValue
	, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent
	FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
	LEFT JOIN dbo.MasterValue E ON E.Code = 32 AND E.ID = 'ExposureType' AND E.status IN (1,2)
	LEFT JOIN Bank G ON B.BankPK = G.BankPK AND G.status IN (1,2)
	WHERE  Date = @MaxDateEndDayFP 
	AND C.GroupType = 3 and A.Status = 2
	AND ISNULL(G.CapitalClassification,0) <> 0
	-- PARAM DISINI
	AND A.FundPK = @FundPK 
	GROUP BY A.FundPK,B.ID,E.DescOne,G.CapitalClassification,G.BankPK,G.ID

	END


END


-- HANDLE DATA INVESTMENT PER FUND
BEGIN



	DECLARE W Cursor For
			SELECT InstrumentPK,case when @ClientCode = 21 then 0 else Amount end Amount FROM @InvestmentPosition WHERE fundPK = @FundPK
	Open W
	Fetch Next From W
	INTO @WInstrumentPK,@WAmount
	
	While @@FETCH_STATUS = 0  
	BEGIN
    
		--1--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp1 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp1 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN

		
			INSERT INTO @PositionForExp1
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,1,ISNULL(D.DescOne,''),ISNULL(B.GroupType,0),ISNULL(C.DescOne,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue C ON B.GroupType = C.Code AND C.id = 'InstrumentGroupType' AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 1 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
			AND C.DescOne IS NOT NULL
		END

		--2--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp2 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp2 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp2
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,2,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 2 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND B.GroupType = 2 and B.InstrumentTypePK not in (2,12,13,14,15)
			AND isnull(@WInstrumentPK,0) <> 0
		END
		
		--3--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp3 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp3 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp3
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,3,ISNULL(D.DescOne,''),ISNULL(B.SectorPK,0),ISNULL(C.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.SubSector B ON A.SectorPK =  B.SubSectorPK AND B.status IN (1,2)
			LEFT JOIN Sector C ON B.SectorPK = C.SectorPK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 3 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
		END

		--4--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp4 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp4 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp4
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,4,ISNULL(D.DescOne,''),ISNULL(A.InstrumentTypePK,0),ISNULL(B.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 4 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0 AND isnull(B.ID,'') <> ''
		END

		--5--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp5 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp5 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp5
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,5,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 5 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
			AND B.GroupType = 1
		END

		--10--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp10 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp10 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp10
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,10,ISNULL(D.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 10 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			LEFT JOIN Bank G ON A.BankPK = G.BankPK AND G.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND ISNULL(G.ID,'')  <> ''
			AND isnull(@WInstrumentPK,0) <> 0
		END

		--13--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp13 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp13 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp13
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,13,ISNULL(D.DescOne,''),ISNULL(B.IssuerPK,0),ISNULL(B.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.Issuer B ON A.IssuerPK = B.IssuerPK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 13 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
			AND ISNULL(B.ID,'')  <> ''
		END

		--14--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp14 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp14 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp14
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,14,ISNULL(D.DescOne,''),ISNULL(B.IndexPK,0),ISNULL(C.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN @InstrumentIndex B ON A.InstrumentPK =  B.InstrumentPK
			LEFT JOIN dbo.[Index] C ON B.IndexPK = C.IndexPK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 14 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND C.ID IS NOT null
			AND isnull(@WInstrumentPK,0) <> 0
			AND ISNULL(C.ID,'')  <> ''
		END

		--16--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp16 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp16 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN

		
			INSERT INTO @PositionForExp16
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @FundPK,16,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 16 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
		END
		
		FETCH Next From W
		into @WInstrumentPK,@WAmount
	END	
	Close W
	Deallocate W



END

-- PROSES EXPOSURE AKHIR
BEGIN


Declare A Cursor For
	SELECT FundPK,CAST(Type AS INT) Type,Parameter,MinExposurePercent,MaxExposurePercent 
	,WarningMinExposurePercent,WarningMaxExposurePercent,MinValue
	,MaxValue,WarningMinValue,WarningMaxValue
	FROM dbo.FundExposure WHERE status = 2 
	AND FundPK = @FundPK
	ORDER BY Type asc
Open A
Fetch Next From A
INTO @CFundPK,@CType,@CParameter,@CMinExp,@CMaxExp,@CWarningMinExp,@CWarningMaxExp,@CMinVal,@CMaxVal
,@CWarningMinVal,@CWarningMaxVal
While @@FETCH_STATUS = 0  
Begin

	IF @CType = 1
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )

		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp1
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 2
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp2
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 2 AND @CParameter = 0
	BEGIN
	INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
	SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp2
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 3
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp3
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 3 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc  + ' | ALL PARAM ',
		Parameter,ParameterDesc 
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp3
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 4
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp4
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 5
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp5
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 5 AND @CParameter = 0
	BEGIN
	INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
	SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp5
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 10
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp10
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 10 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp10
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 13
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp13
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 13 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp13
		where FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 14
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp14
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 14 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp14
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END
	
	IF @CType = 16
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )

		SELECT FundPK,Exposure,ExposureDesc,
		0,''
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp16
		where  FundPK = @CFundPK
		GROUP BY FundPK,Exposure,ExposureDesc
	END

	IF @CType = 20
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalInvestmentAllFundForCounterpartExposure * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp20
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 20 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalInvestmentAllFundForCounterpartExposure * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp20
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

    IF @CType = 32
	BEGIN
		INSERT INTO @Exposure
				( 
					FundPK,
					Exposure,
					ExposureID ,
					Parameter ,
					ParameterDesc ,
					MarketValue ,
					ExposurePercent ,
					MinExposurePercent ,
					WarningMinExposure ,
					AlertWarningMinExposure,
					AlertMinExposure ,
					MaxExposurePercent ,
					WarningMaxExposure ,
					AlertWarningMaxExposure ,
					AlertMaxExposure ,
					MinValue ,
					WarningMinValue ,
					AlertWarningMinValue ,
					AlertMinValue ,
					MaxValue ,
					WarningMaxValue ,
					AlertWarningMaxValue ,
					AlertMaxValue
				)

		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
		FROM @PositionForExp32
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END



	Fetch Next From A 
	INTO @CFundPK,@CType,@CParameter,@CMinExp,@CMaxExp,@CWarningMinExp,@CWarningMaxExp,@CMinVal,@CMaxVal
	,@CWarningMinVal,@CWarningMaxVal 
End	
Close A
Deallocate A

END



Fetch next From Z 
Into @FundPK
END
Close Z
Deallocate Z


--ALL FUND
Select @TrailsPK = EndDayTrailsFundPortfolioPK , @MaxDateEndDayFP = ValueDate From 
endDayTrailsFundPortfolio where 
valuedate = 
(
	Select max(ValueDate) from endDayTrailsFundPortfolio where
	valuedate < @Date  and status = 2 
	
)
and status = 2 

declare @tableMarketCap table 
(
	InstrumentPK int,
	valuedate date,
	MarketCap numeric(32,8)
)

insert into @tableMarketCap(InstrumentPK,valuedate)
select InstrumentPK,max(date) from InstrumentIndex where Status = 2
group by InstrumentPK

update A set A.MarketCap = isnull(B.MarketCap,0)
from @tableMarketCap A
left join InstrumentIndex B on A.InstrumentPK = B.InstrumentPK and A.valuedate = B.Date and B.Status = 2

--9--
BEGIN

IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = 0 AND status = 2
	AND Type = 9
	)
BEGIN
	INSERT INTO @PositionForExp9
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,9,ISNULL(E.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValueAllFund
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValueAllFund * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 9 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		LEFT JOIN Bank G ON B.BankPK = G.BankPK AND G.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP 
		AND C.GroupType = 3
		GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,G.BankPK,G.ID
		


	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp9 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp9 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValueAllFund * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp9
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,9,ISNULL(D.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValueAllFund,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValueAllFund,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 9 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		LEFT JOIN Bank G ON A.BankPK = G.BankPK AND G.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2)
		AND B.GroupType = 3
		AND isnull(@InstrumentPK,0) <> 0
	END
	--

END


END

--18--
BEGIN



IF EXISTS(
	SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = 0 AND status = 2
	AND Type = 18
	)
BEGIN
	INSERT INTO @PositionForExp18
	        ( FundPK ,
	          Exposure ,
			  ExposureDesc,
	          Parameter ,
			  ParameterDesc ,
			  InstrumentPK,
	          InstrumentID ,
	          MarketValue ,
	          AUM ,
	          ExposurePercent
	        )
	SELECT A.FundPK,18,ISNULL(E.DescOne,''),ISNULL(C.IssuerPK,0),ISNULL(C.ID,'')
		,ISNULL(A.InstrumentPK,0)
		,ISNULL(B.ID ,'')
	    ,SUM(ISNULL(A.MarketValue,0)) MarketValue
		,@TotalMarketValueAllFund
		, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValueAllFund * 100 ExposurePercent
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		LEFT JOIN dbo.Issuer C ON B.IssuerPK =  C.IssuerPK AND C.status IN (1,2)
		LEFT JOIN dbo.MasterValue E ON E.Code = 18 AND E.ID = 'ExposureType' AND E.status IN (1,2)
		WHERE  Date = @MaxDateEndDayFP 
		AND C.ID IS NOT NULL
		GROUP BY C.ID,C.IssuerPK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK


	-- HANDLE ORDER PRETRADE DISINI
	IF EXISTS(
		SELECT TOP 1 * FROM @PositionForExp18 WHERE InstrumentPK = @InstrumentPK
	)
	BEGIN
		UPDATE @PositionForExp18 SET MarketValue = MarketValue + ISNULL(@Amount,0)
		,ExposurePercent = (MarketValue + ISNULL(@Amount,0)) / @TotalMarketValueAllFund * 100
		WHERE InstrumentPK = @InstrumentPK
	END
	ELSE
	BEGIN
		INSERT INTO @PositionForExp18
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
		SELECT @FundPK,18,ISNULL(D.DescOne,''),ISNULL(B.IssuerPK,0),ISNULL(B.ID,'') 
		,ISNULL(@InstrumentPK,0),ISNULL(A.ID,'')
		,ISNULL(@Amount,0)
		,ISNULL(@TotalMarketValueAllFund,0)
		,ISNULL(@Amount,0)/ISNULL(@TotalMarketValueAllFund,0) * 100 
		FROM dbo.Instrument A
		LEFT JOIN dbo.Issuer B ON A.IssuerPK =  B.IssuerPK AND B.status IN (1,2)
		LEFT JOIN dbo.MasterValue D ON D.Code = 18 AND D.ID = 'ExposureType' AND D.status IN (1,2)
		WHERE A.InstrumentPK = @InstrumentPK AND A.status IN (1,2)
		AND isnull(@InstrumentPK,0) <> 0
		AND B.ID IS NOT NULL
	END
	--
END


END

--19--
BEGIN
	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE status = 2
		AND Type = 19
		)
	BEGIN
		INSERT INTO @PositionForExp19
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent
				)
		SELECT A.FundPK,19,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(B.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,isnull(F.MarketCap,0)
			,case when isnull(F.MarketCap,0) = 0 then 0 else SUM(ISNULL(A.MarketValue,0)) /  isnull(F.MarketCap,0) * 100 end ExposurePercent
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 19 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			left join @tableMarketCap F on A.InstrumentPK = F.InstrumentPK
			WHERE Date = @MaxDateEndDayFP and B.InstrumentTypePK in (1,4,16)
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,F.MarketCap,A.MarketValue

END
END


-- HANDLE DATA INVESTMENT ALL FUND
BEGIN


	DECLARE E Cursor For
			SELECT InstrumentPK,Amount,FundPK FROM @InvestmentPositionALLFund 
	Open E
	Fetch Next From E
	INTO @EInstrumentPK,@EAmount,@EFundPK
	While @@FETCH_STATUS = 0  
	BEGIN

		--9--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp9 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp9 SET MarketValue = MarketValue + ISNULL(@EAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@EAmount,0)) / @TotalMarketValueAllFund * 100
			WHERE InstrumentPK = @EInstrumentPK AND FundPK = @FundPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp9
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @EFundPK,9,ISNULL(D.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'') 
			,ISNULL(@EInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@EAmount,0)
			,ISNULL(@TotalMarketValueAllFund,0)
			,ISNULL(@EAmount,0)/ISNULL(@TotalMarketValueAllFund,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 9 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			LEFT JOIN Bank G ON A.BankPK = G.BankPK AND G.status IN (1,2)
			WHERE A.InstrumentPK = @EInstrumentPK AND A.status IN (1,2)
			AND isnull(@EInstrumentPK,0) <> 0
			AND B.GroupType = 3
		END

		--18--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp18 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp18 SET MarketValue = MarketValue + ISNULL(@EAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@EAmount,0)) / @TotalMarketValueAllFund * 100
			WHERE InstrumentPK = @EInstrumentPK AND FundPK = @FundPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp18
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @EFundPK,18,ISNULL(D.DescOne,''),ISNULL(A.IssuerPK,0),ISNULL(B.ID,'') 
			,ISNULL(@EInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@EAmount,0)
			,ISNULL(@TotalMarketValueAllFund,0)
			,ISNULL(@EAmount,0)/ISNULL(@TotalMarketValueAllFund,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.Issuer B ON A.IssuerPK =  B.IssuerPK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 18 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @EInstrumentPK AND A.status IN (1,2)
			AND isnull(@EInstrumentPK,0) <> 0
			AND ISNULL(B.ID,'')  <> ''
		
		END

		--19--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp19 WHERE InstrumentPK = @InstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp19 SET MarketValue = MarketValue + ISNULL(@EAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@EAmount,0)) / @TotalInvestmentAllFundForCounterpartExposure * 100
			WHERE InstrumentPK = @EInstrumentPK AND FundPK = @FundPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp19
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent
		        )
			SELECT @EFundPK,9,ISNULL(D.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'') 
			,ISNULL(@EInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@EAmount,0)
			,ISNULL(@TotalMarketValueAllFund,0)
			,ISNULL(@EAmount,0)/ISNULL(@TotalMarketValueAllFund,0) * 100 
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 9 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			LEFT JOIN Bank G ON A.BankPK = G.BankPK AND G.status IN (1,2)
			WHERE A.InstrumentPK = @EInstrumentPK AND A.status IN (1,2)
			AND isnull(@EInstrumentPK,0) <> 0
			AND B.GroupType = 3
		END

		

	FETCH Next From E
		into @EInstrumentPK,@EAmount,@EFundPK
	End	
	Close E
	Deallocate E

END

--PROSES EXPOSURE AKHIR ALL FUND ALL PARAMETER
BEGIN
	Declare A Cursor For
		SELECT FundPK,CAST(Type AS INT) Type,Parameter,MinExposurePercent,MaxExposurePercent 
		,WarningMinExposurePercent,WarningMaxExposurePercent,MinValue
		,MaxValue,WarningMinValue,WarningMaxValue
		FROM dbo.FundExposure WHERE status = 2 
		AND FundPK = 0
		ORDER BY Type asc
	Open A
	Fetch Next From A
	INTO @CFundPK,@CType,@CParameter,@CMinExp,@CMaxExp,@CWarningMinExp,@CWarningMaxExp,@CMinVal,@CMaxVal
	,@CWarningMinVal,@CWarningMaxVal
	While @@FETCH_STATUS = 0  
	Begin

		IF @CType = 9 AND @CParameter <> 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc,
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValueAllFund * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp9
			WHERE Parameter = @CParameter
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 9 AND @CParameter = 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValueAllFund * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp9
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 18 AND @CParameter <> 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc,
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValueAllFund * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp18
			WHERE Parameter = @CParameter 
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 18 and @CParameter = 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					) 
			SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValueAllFund * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp18
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 19 AND @CParameter <> 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc,
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			,case when isnull(F.MarketCap,0) = 0 then 0 else SUM(ISNULL(MarketValue,0)) / isnull(F.MarketCap,0) * 100 end ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp19 A
			left join @tableMarketCap F on A.InstrumentPK = F.InstrumentPK
			WHERE Parameter = @CParameter 
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc,F.MarketCap
		END

		IF @CType = 19 AND @CParameter = 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			,case when isnull(F.MarketCap,0) = 0 then 0 else SUM(ISNULL(MarketValue,0)) / isnull(F.MarketCap,0) * 100 end ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp19 A
			left join @tableMarketCap F on A.InstrumentPK = F.InstrumentPK
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc,F.MarketCap

		END

	Fetch Next From A 
		INTO @CFundPK,@CType,@CParameter,@CMinExp,@CMaxExp,@CWarningMinExp,@CWarningMaxExp,@CMinVal,@CMaxVal
		,@CWarningMinVal,@CWarningMaxVal 
	End	
	Close A
	Deallocate A
END


update @Exposure 
SET AlertMinExposure = 1 WHERE ExposurePercent < MinExposurePercent AND MinExposurePercent > 0
update @Exposure 
SET AlertWarningMinExposure = 1 WHERE ExposurePercent < WarningMinExposure AND WarningMinExposure > 0
UPDATE @Exposure
SET AlertMaxExposure = 1 WHERE ExposurePercent > MaxExposurePercent AND MaxExposurePercent > 0
UPDATE @Exposure
SET AlertWarningMaxExposure = 1 WHERE ExposurePercent > WarningMaxExposure AND WarningMaxExposure > 0
UPDATE @Exposure
SET AlertMinValue = 1 WHERE MarketValue < MinValue AND MinValue > 0
UPDATE @Exposure
SET AlertWarningMinValue = 1 WHERE MarketValue < WarningMinValue AND WarningMinValue > 0
UPDATE @Exposure
SET AlertMaxValue = 1 WHERE MarketValue > MaxValue AND MaxValue > 0
UPDATE @Exposure
SET AlertWarningMaxValue = 1 WHERE MarketValue > WarningMaxValue AND WarningMaxValue > 0

--select * from @PositionForExp9
--select * from @Exposure --where Parameter = 9

DELETE ZTEMP_EXPOSURE_MONITORING where Date = @Date " + _paramSplitByFund + @"
--and FundPK = 73
 
--delete all fund
DELETE ZTEMP_EXPOSURE_MONITORING where Date = @Date and Exposure in (9,18,19)

INSERT INTO ZTEMP_EXPOSURE_MONITORING(Date,FundPK,Exposure,ExposureID,Parameter,ParameterDesc,ExposurePercent,WarningMaxExposure,MaxExposurePercent,
WarningMinExposure,MinExposurePercent,MarketValue,WarningMaxValue,MaxValue,WarningMinValue,MinValue,
AlertWarningMaxExposure,AlertMaxExposure,AlertWarningMinExposure,AlertMinExposure,
AlertWarningMaxValue,AlertMaxValue,AlertWarningMinValue,AlertMinValue,UsersID,EntryTime,LastUpdate)

select @Date Date,FundPK,Exposure,ExposureID,Parameter,ParameterDesc,ExposurePercent,WarningMaxExposure,MaxExposurePercent,
WarningMinExposure,MinExposurePercent,MarketValue,WarningMaxValue,MaxValue,WarningMinValue,MinValue,
AlertWarningMaxExposure,AlertMaxExposure,AlertWarningMinExposure,AlertMinExposure,
AlertWarningMaxValue,AlertMaxValue,AlertWarningMinValue,AlertMinValue,@UsersID,@Time,@Time from @Exposure
where (ExposurePercent > 0 or MarketValue > 0) and Exposure not in (9,18,19)

--all fund
INSERT INTO ZTEMP_EXPOSURE_MONITORING(Date,FundPK,Exposure,ExposureID,Parameter,ParameterDesc,ExposurePercent,WarningMaxExposure,MaxExposurePercent,
WarningMinExposure,MinExposurePercent,MarketValue,WarningMaxValue,MaxValue,WarningMinValue,MinValue,
AlertWarningMaxExposure,AlertMaxExposure,AlertWarningMinExposure,AlertMinExposure,
AlertWarningMaxValue,AlertMaxValue,AlertWarningMinValue,AlertMinValue,UsersID,EntryTime,LastUpdate)

select @Date Date,FundPK,Exposure,ExposureID,Parameter,ParameterDesc,ExposurePercent,WarningMaxExposure,MaxExposurePercent,
WarningMinExposure,MinExposurePercent,MarketValue,WarningMaxValue,MaxValue,WarningMinValue,MinValue,
AlertWarningMaxExposure,AlertMaxExposure,AlertWarningMinExposure,AlertMinExposure,
AlertWarningMaxValue,AlertMaxValue,AlertWarningMinValue,AlertMinValue,@UsersID,@Time,@Time from @Exposure
where (ExposurePercent > 0 or MarketValue > 0 ) and Exposure in (9,18,19) and (AlertMaxExposure = 1 or AlertMinExposure = 1 or AlertWarningMaxExposure = 1 or AlertWarningMinExposure = 1 or AlertMaxValue = 1 or AlertMaxExposure = 1)

DELETE ZTEMP_EXPOSURE_MONITORING_DETAIL where Date = @Date " + _paramSplitByFund + @"
--and FundPK = 73

--delete all fund
DELETE ZTEMP_EXPOSURE_MONITORING_DETAIL where Date = @Date and Exposure in (9,18,19)


INSERT INTO ZTEMP_EXPOSURE_MONITORING_DETAIL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp1
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp2
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp3
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp4
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp5
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp9
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp10
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp13
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp14
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp16
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp18
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp19
UNION ALL
select @Date Date,FundPK,Exposure,ExposureDesc,Parameter,ParameterDesc,
InstrumentPK,InstrumentID,MarketValue,AUM,ExposurePercent from @PositionForExp20



--select * from ZTEMP_EXPOSURE_MONITORING where date = @date --and Exposure = 19



";

                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@ClientCode", Tools.ClientCode);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public string ImportOldIBPA_Text(string _fileSource, string _userID)
        {
            string _msg;
            DateTime _dateTime = DateTime.Now;
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //delete data yang lama
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table ClosePriceOldIBPATemp";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.ClosePriceOldIBPATemp";
                            bulkCopy.WriteToServer(CreateDataTableFromIBPATextFile(_fileSource));
                        }

                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                              @"
                          


                                If Exists(Select * from ClosePriceOldIBPATemp where (MIPrice < LowerPrice) or (MIPrice > UpperPrice))

                                BEGIN
                                    select 'Fair Price' Result
                                END
                                ELSE
                                BEGIN
                                    select 'Done' Result 
                                END
                            
                                ";
                                using (SqlDataReader dr = cmd1.ExecuteReader())
                                {
                                    dr.Read();
                                    if (Convert.ToString(dr["Result"]) == "Fair Price")
                                    {
                                        _msg = Convert.ToString(dr["Result"]);

                                    }
                                    else
                                    {

                                        conn.Close();
                                        conn.Open();
                                        using (SqlCommand cmd2 = conn.CreateCommand())
                                        {
                                            cmd2.CommandText =
                                            @"
                                            declare @Date Datetime
                                            select @Date = Date From ClosePriceOldIBPATemp

                                            If Exists(select distinct A.InstrumentPK from closeprice A 
                                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                                            where B.ID in (select CodeBase from ClosePriceOLdIBPATemp)
                                            and A.Status in (1,2) and Date = @Date)

                                            BEGIN
                                                select 'Already Data' Result
                                            END
                                            ELSE
                                            BEGIN
                                                select 'Done' Result 
                                            END

                            
                                            ";
                                            using (SqlDataReader dr1 = cmd2.ExecuteReader())
                                            {
                                                dr1.Read();
                                                if (Convert.ToString(dr1["Result"]) == "Already Data")
                                                {
                                                    _msg = Convert.ToString(dr1["Result"]);

                                                }
                                                else
                                                {


                                                    conn.Close();
                                                    conn.Open();


                                                    using (SqlCommand cmd3 = conn.CreateCommand())
                                                    {
                                                        cmd3.CommandText =
                                                        @"
                                                                    
                                            declare @Date Datetime
                                            select @Date = Date From ClosePriceOldIBPATemp

                                            Update A set status = 3 from closeprice A 
                                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                                            where B.ID in (select CodeBase from ClosePriceOldIBPATemp)
                                            and A.Status in (1,2) and Date = @Date

                                            Declare @ClosePricePK int
                                                Select @ClosePricePK = max(ClosePricePK) + 1 from ClosePrice
                                                set @ClosePricePK = isnull(@ClosePricePK,0)
                                                INSERT INTO [dbo].[ClosePrice]
                                                            ([ClosePricePK]
                                                            ,[HistoryPK]
                                                            ,[Status]
                                                            ,[Notes]
                                                            ,[Date]
                                                            ,[InstrumentPK]
                                                            ,[ClosePriceValue]
                                                            ,[LowPriceValue]
                                                            ,[HighPriceValue]      
                                                            ,[EntryUsersID]
                                                            ,[EntryTime]
                                                            ,[LastUpdate]
                                                )
                                                Select @ClosePricePK +  ROW_NUMBER() OVER(Order By A.CodeBase ASC) ,1,1,'',A.Date,isnull(B.InstrumentPK,0)
                                                ,A.MIPrice,A.LowerPrice,A.UpperPrice
                                                ,@userID,@Datetime,@Datetime
                                                from ClosePriceOldIBPATemp  A
                                                Left join Instrument B on A.CodeBase = B.ID and B.status = 2

                                                delete ClosePrice where InstrumentPK = 0

	                                            select 'Import IBPA Success' Result

                                            ";
                                                        cmd3.Parameters.AddWithValue("@UserID", _userID);
                                                        cmd3.Parameters.AddWithValue("@Datetime", _dateTime);
                                                        cmd3.ExecuteNonQuery();

                                                        _msg = "Import IBPA Done";

                                                    }

                                                }
                                            }
                                        }
                                    }

                                    return _msg;

                                }

                            }
                        }


                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }
        }


        private DataTable CreateDataTableFromIBPATextFile(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Date";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CodeBase";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.Decimal");
            dc.ColumnName = "MIPrice";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.Decimal");
            dc.ColumnName = "LowerPrice";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.Decimal");
            dc.ColumnName = "UpperPrice";
            dc.Unique = false;
            dt.Columns.Add(dc);


            StreamReader sr = new StreamReader(Tools.TxtFilePath + _fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });


                dr = dt.NewRow();
                dr["Date"] = s[0];
                string _valueDate = Convert.ToString(s[0]);
                if (!string.IsNullOrEmpty(_valueDate))
                {
                    string _tgl = _valueDate.Substring(6, 2);
                    string _bln = _valueDate.Substring(4, 2);
                    string _thn = _valueDate.Substring(0, 4);

                    _valueDate = _bln + "/" + _tgl + "/" + _thn; //Convert.ToDateTime(_strTransactionDate).ToString("MM/dd/yyyy");
                }

                if (s[0] == "")
                    dr["Date"] = "";
                else
                    dr["Date"] = _valueDate;

                if (s[1] == "")
                    dr["CodeBase"] = "";
                else
                    dr["CodeBase"] = Convert.ToString(s[1]);

                if (s[3] == "")
                    dr["MIPRice"] = 0;
                else
                    dr["MIPRice"] = Convert.ToDecimal(s[3]);

                if (s[4] == "")
                    dr["LowerPrice"] = 0;
                else
                    dr["LowerPrice"] = Convert.ToDecimal(s[4]);

                if (s[6] == "")
                    dr["UpperPrice"] = 0;
                else
                    dr["UpperPrice"] = Convert.ToDecimal(s[6]);


                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }

        public decimal Get_TotalAccountBalanceByFundPK(string _fundPK, int _fundJournalAccountPK, DateTime _date)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"

                        --Declare @date datetime
                        --Declare @fundpk int
                        --Declare @fundjournalaccountPK int

                        --set @fundpk = 5
                        --set @date = '12/10/2020'
                        --set @fundjournalaccountPK = 3



                        declare @DateMinOne datetime
                        select @DateMinOne = dbo.fworkingday(@Date,-1)

                        DECLARE @ReturnValue NUMERIC(18, 6)   
                        Declare @BeginDate datetime    
    
                        select @BeginDate = [dbo].[FgetMaxDatePeriodClosingByFundPK](@Date,@FundPK)     
    

                        select @ReturnValue =       
                        CASE WHEN C.Type in (1,4) then sum(B.BaseDebit-B.BaseCredit) else  sum(B.BaseCredit-B.BaseDebit) END      
                        from FundJournal A left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK    
                        left join FundJournalAccount C on B.FundJournalAccountPK = C.FundJournalAccountPK and C.Status = 2      
                        where A.ValueDate <= @DateMinOne and A.Posted = 1 and A.Reversed = 0 and A.Status = 2      
                        and B.FundPK = @FundPK and A.ValueDate <= @date and A.ValueDate >= @BeginDate    
                        AND @FundJournalAccountPK IN ( c.FundJournalAccountPK, c.parentpk1, c.parentpk2,   
                        c.parentpk3, c.parentpk4, c.parentpk5,   
                        c.parentpk6, c.parentpk7, c.parentpk8,  
                        c.parentpk9 ) 
                        group By C.Type      
       

                        select @ReturnValue Result

                    ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundJournalAccountPK", _fundJournalAccountPK);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return dr["Result"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public decimal Get_OutstandingPaymentByFundPKByDate(string _fundPK, DateTime _date)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
DECLARE @DateTo DATETIME

SET @DateTo = dateadd(day,7,@Date)


CREATE TABle #ResultData
(

	Position INT,
	ValueDate DATETIME,
	TotalAmount NUMERIC(22,4),
)


insert into #ResultData

-- EQUITY BUY
SELECT 6 Position,ValueDate ValueDate,isnull(TotalAmount * -1,0) TotalAmount FROM dbo.Investment
WHERE StatusInvestment <> 3
AND InstrumentTypePK IN(1,4,16)
AND TrxType = 1
AND ValueDate BETWEEN @Date AND @DateTo
AND FundPK = @FundPK

insert into #ResultData

-- BOND BUY
SELECT 8 Position,ValueDate ValueDate,isnull(TotalAmount * -1,0) TotalAmount FROM dbo.Investment
WHERE StatusInvestment <> 3
AND InstrumentTypePK IN(2,3,8,9,11,12,13,14,15)
AND TrxType = 1
AND ValueDate BETWEEN @Date AND @DateTo
AND FundPK = @FundPK


insert into #ResultData
-- DEPOSITO BUY
SELECT 2 Position,ValueDate,isnull(TotalAmount * -1,0) TotalAmount FROM dbo.Investment
WHERE StatusSettlement = 2
AND InstrumentTypePK = 5
AND TrxType in (1,3)
AND SettlementDate BETWEEN @Date AND @DateTo
AND FundPK = @FundPK

insert into #ResultData

-- Redemption
SELECT 12 Position,A.PaymentDate,isnull(CASE when CashAmount > 0 THEN A.CashAmount * -1
ELSE A.UnitAmount * dbo.FgetLastCloseNav(ValueDate,FundPK) * -1 END,0) TotalAmount
FROM dbo.ClientRedemption A
WHERE status <> 3 
AND A.PaymentDate BETWEEN @Date AND @DateTo
AND FundPK = @FundPK and TotalCashAmount>0

select sum(TotalAmount) Result from #ResultData

                    ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();

                                return dr["Result"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public decimal Get_OutstandingReceivableByFundPKByDate(string _fundPK, DateTime _date)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
DECLARE @DateTo DATETIME

SET @DateTo = dateadd(day,7,@Date)


CREATE TABle #ResultData
(

	Position INT,
	ValueDate DATETIME,
	TotalAmount NUMERIC(22,4),
)


insert into #ResultData

-- EQUITY SELL
SELECT 7 Position,SettlementDate ValueDate,isnull(TotalAmount,0)  FROM dbo.Investment
WHERE StatusSettlement = 2
AND InstrumentTypePK IN(1,4,16)
AND TrxType = 2
AND SettlementDate = @date
AND FundPK = @FundPK

insert into #ResultData

-- BOND SELL
SELECT 9 Position,SettlementDate ValueDate,isnull(TotalAmount,0)  FROM dbo.Investment
WHERE StatusSettlement = 2
AND InstrumentTypePK IN(2,3,8,9,11,12,13,14,15)
AND TrxType = 2
AND SettlementDate = @date
AND FundPK = @FundPK


insert into #ResultData
	
-- DEPOSITO BREAK
SELECT 3 Position,ValueDate,isnull(TotalAmount,0) FROM dbo.Investment
WHERE StatusSettlement = 2
AND InstrumentTypePK = 5
AND TrxType = 2
AND ValueDate = @date
AND FundPK = @FundPK

insert into #ResultData
	
-- DEPOSITO MATURED
SELECT 4 Position,MaturityDate ValueDate,TotalAmount FROM dbo.Investment
WHERE StatusSettlement = 2
AND InstrumentTypePK = 5
AND TrxType in (1,3)
AND MaturityDate = @date
AND FundPK = @FundPK
AND InstrumentPK not in 
(
	select InstrumentPK from Investment where StatusSettlement = 2 and TrxType = 2 and MaturityDate between @Date and @DateTo and FundPK = @FundPK
)


insert into #ResultData

-- Subscription
SELECT 11 Position,A.NavDate,isnull(CashAmount,0) TotalAmount FROM dbo.ClientSubscription A
WHERE status = 2 and Posted= 1
AND NavDate = @Date
AND FundPK = @FundPK

select sum(TotalAmount) Result from #ResultData

                    ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();

                                return dr["Result"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }




    }
}


