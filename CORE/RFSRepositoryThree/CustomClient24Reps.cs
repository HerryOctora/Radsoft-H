using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Text;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;
using RFSRepository;
using OfficeOpenXml.Drawing.Chart;
using System.Xml;



namespace RFSRepositoryThree
{
    public class CustomClient24Reps
    {
        Host _host = new Host();

        private class TrackingRedemptionPayment
        {
            public string SAName { get; set; }
            public string FundName { get; set; }


        }
        private class LaporanManagerInvestasi
        {
            public string KodeReksaDana { get; set; }
            public string NamaReksaDana { get; set; }
            public string TipeReksaDana { get; set; }
            public decimal JumlahIFUA { get; set; }
            public decimal JumlahSID { get; set; }
            public decimal Unit { get; set; }
            public decimal NAVperUnit { get; set; }
            public decimal AUMInvestorRetail { get; set; }
            public string NamaPerusahaan { get; set; }
            public string KodeReksaDanaDetail { get; set; }
            public string NamaReksaDanaDetail { get; set; }
            public string TipePerusahaanDetail { get; set; }
            public decimal AUMDetail { get; set; }
            public string Affiliasi { get; set; }
            public decimal Percentage { get; set; }
            public string Marketing { get; set; }
            public decimal AUMData { get; set; }
            public string TipePerusahaanData { get; set; }

        }

        public class TransaksiHarianAll
        {
            public decimal YTDSubs { get; set; }
            public decimal MTDSubs { get; set; }
            public decimal TodaySubs { get; set; }
            public decimal YTDRedemp { get; set; }
            public decimal MTDRedemp { get; set; }
            public decimal TodayRedemp { get; set; }
            public decimal YTD { get; set; }
            public decimal MTD { get; set; }
            public decimal Today { get; set; }

            //1
            public string AgentCode { get; set; }
            public string AgentName { get; set; }
            public decimal YTDSubsAgent { get; set; }
            public decimal MTDSubsAgent { get; set; }
            public decimal TodaySubsAgent { get; set; }
            public decimal YTDRedempAgent { get; set; }
            public decimal MTDRedempAgent { get; set; }
            public decimal TodayRedempAgent { get; set; }
            public decimal YTDAgent { get; set; }
            public decimal MTDAgent { get; set; }
            public decimal TodayAgent { get; set; }

            //2
            public string SID { get; set; }
            public string BNIGroup { get; set; }
            public decimal YTDSubsGroup { get; set; }
            public decimal MTDSubsGroup { get; set; }
            public decimal TodaySubsGroup { get; set; }
            public decimal YTDRedempGroup { get; set; }
            public decimal MTDRedempGroup { get; set; }
            public decimal TodayRedempGroup { get; set; }
            public decimal YTDGroup { get; set; }
            public decimal MTDGroup { get; set; }
            public decimal TodayGroup { get; set; }

            //3
            public decimal YTDSubsOthers { get; set; }
            public decimal MTDSubsOthers { get; set; }
            public decimal TodaySubsOthers { get; set; }
            public decimal YTDRedempOthers { get; set; }
            public decimal MTDRedempOthers { get; set; }
            public decimal TodayRedempOthers { get; set; }
            public decimal YTDOthers { get; set; }
            public decimal MTDOthers { get; set; }
            public decimal TodayOthers { get; set; }

            //4
            public string DetailCode { get; set; }
            public string DetailType { get; set; }
            public decimal YTDSubsDetail { get; set; }
            public decimal MTDSubsDetail { get; set; }
            public decimal TodaySubsDetail { get; set; }
            public decimal YTDRedempDetail { get; set; }
            public decimal MTDRedempDetail { get; set; }
            public decimal TodayRedempDetail { get; set; }
            public decimal YTDDetail { get; set; }
            public decimal MTDDetail { get; set; }
            public decimal TodayDetail { get; set; }
        }

        public class RekapTrxAUM
        {
            public string JenisSales { get; set; }
            public string Sales { get; set; }
            public string IFUANo { get; set; }
            public string SIDName { get; set; }
            public string FundCode { get; set; }
            public string SID { get; set; }
            public string FundName { get; set; }
            public string TipeReksaDana { get; set; }
            public decimal Subscription { get; set; }
            public decimal Redemption { get; set; }
            public decimal AUM { get; set; }
            public decimal ManagementFee { get; set; }
        }

        public class Rekap
        {
            public string FundClientName { get; set; }
            public string JenisReksaDana { get; set; }
            public decimal AUM { get; set; }
            public decimal Subscription { get; set; }
            public decimal Redemption { get; set; }

            public decimal Net { get; set; }
            public decimal ManagementFee { get; set; }

        }
        public class Net_Transaksi
        {
            public string NamaReksaDana { get; set; }
            public decimal Subscription { get; set; }
            public decimal Redemption { get; set; }
            public decimal NetTransaksi { get; set; }

        }
        public class Net_Transaksi_INSTITUSI
        {
            public string NamaInvestor { get; set; }
            public string NamaReksaDana { get; set; }
            public decimal Subscription { get; set; }
            public decimal Redemption { get; set; }
            public decimal NetTransaksi { get; set; }

        }
        public class TOP5
        {
            //Subscription
            public string SubsInvestorName { get; set; }
            public string SubsFundName { get; set; }
            public decimal SubsSubscription { get; set; }
            public decimal SubsRedemption { get; set; }
            public decimal SubsNetTransaksi { get; set; }

            //Redemption
            public string RedempInvestorName { get; set; }
            public string RedempFundName { get; set; }
            public decimal RedempSubscription { get; set; }
            public decimal RedempRedemption { get; set; }
            public decimal RedempNetTransaksi { get; set; }

        }
        public class TOP20
        {
            //Subscription
            public DateTime SubsTransactionDate { get; set; }
            public string SubsIFUAName { get; set; }
            public string SubsFundName { get; set; }
            public string SubsSales { get; set; }
            public string SubsFundType { get; set; }
            public decimal SubsNominal { get; set; }

            //Redemption
            public DateTime RedempTransactionDate { get; set; }
            public string RedempIFUAName { get; set; }
            public string RedempFundName { get; set; }
            public string RedempSales { get; set; }
            public string RedempFundType { get; set; }
            public decimal RedempNominal { get; set; }

        }


        public class LaporanNAV
        {
            public DateTime Date { get; set; }
            public string FundCode { get; set; }
            public string NamaReksaDana { get; set; }
            public decimal NAVPrice { get; set; }
            public decimal Return30Days { get; set; }
            public decimal Return365Days { get; set; }
            public decimal AUM { get; set; }
            public string KPDFundCode { get; set; }
            public string KPDNamaReksaDana { get; set; }
            public decimal KPDNAVPrice { get; set; }
            public decimal KPDReturn30Days { get; set; }
            public decimal KPDReturn365Days { get; set; }
            public decimal KPDAUM { get; set; }
            public string USDFundCode { get; set; }
            public string USDNamaReksaDana { get; set; }
            public decimal USDNAVPrice { get; set; }
            public decimal USDReturn30Days { get; set; }
            public decimal USDReturn365Days { get; set; }
            public decimal USDAUM { get; set; }
            public int CurrencyPK { get; set; }

        }


        public class Umum
        {
            public string NamaSellingAgent { get; set; }
            public decimal SASubscription { get; set; }
            public decimal SARedemption { get; set; }
            public decimal SANET { get; set; }
            public string ReksaDana { get; set; }
            public decimal RDSubscription { get; set; }
            public decimal RDRedemption { get; set; }
            public decimal RDNET { get; set; }

        }

        public class KhususTimOps
        {
            public DateTime TransactionDate { get; set; }
            public string TransactionType { get; set; }
            public string IFUAName { get; set; }
            public string FundName { get; set; }
            public string FundCCY { get; set; }
            public decimal AmountNominal { get; set; }
            public decimal AmountUnit { get; set; }
            public decimal AmountAllUnit { get; set; }
            public decimal FeeNominal { get; set; }
            public decimal FeePercent { get; set; }
            public string REDMPaymentBankName { get; set; }
            public string REDMPaymentACNo { get; set; }
            public string REDMPaymentACName { get; set; }
            public string PaymentDate { get; set; }
        }

        public class SummaryAUM
        {
            public string MutualFund { get; set; }
            public string FundType { get; set; }
            public decimal BIMiddleRate { get; set; }
            public decimal AUMUSD { get; set; }
            public decimal AUMIDR { get; set; }
            public decimal Unit { get; set; }
            public decimal NAVperUnit { get; set; }
            public string CustodianBank { get; set; }
            public string SummaryFundType { get; set; }
            public decimal SummaryFundTypeAUM { get; set; }
            public decimal SummaryFundTypePercent { get; set; }
            public string SummaryAUMCustodianBank { get; set; }
            public decimal SummaryAUMBank { get; set; }
            public decimal SummaryAUMPercent { get; set; }

        }

        public class DataTransaksiTahunan
        {
            public int Period { get; set; }
            public string ProductType { get; set; }
            public decimal DirectRetailClient { get; set; }
            public decimal Corporate { get; set; }
            public decimal Foundation { get; set; }
            public decimal FinancialInstitution { get; set; }
            public decimal MutualFund { get; set; }
            public decimal PensionFund { get; set; }
            public decimal SecuritiesCompany { get; set; }
            public decimal Others { get; set; }
            public decimal AUMInsurance { get; set; }
            public decimal AUMInstitusi { get; set; }

        }

        public class DetailInformasiBagiHasil
        {
            public string SACode { get; set; }
            public string DirectSA { get; set; }
            public decimal UnitAsOfCumDate { get; set; }
            public string FundName { get; set; }
            public DateTime CumDate { get; set; }
            public DateTime ExDate { get; set; }
            public DateTime PaymentDate { get; set; }
            public decimal DistributedIncomePerUnit { get; set; }
            public string DistributedIncomeOption { get; set; }
            public string FundCCY { get; set; }
            public decimal CashAmount { get; set; }


        }

        public class RekapRevenueInvestorInstitusi
        {
            public string Period { get; set; }
            public string JenisSales { get; set; }
            public string Sales { get; set; }
            public string IFUAName { get; set; }
            public string FundName { get; set; }
            public decimal Jan { get; set; }
            public decimal Feb { get; set; }
            public decimal Mar { get; set; }
            public decimal Apr { get; set; }
            public decimal Mei { get; set; }
            public decimal Jun { get; set; }
            public decimal Jul { get; set; }
            public decimal Aug { get; set; }
            public decimal Sep { get; set; }
            public decimal Okt { get; set; }
            public decimal Nov { get; set; }
            public decimal Des { get; set; }
            public decimal TotalManagementFee { get; set; }
        }

        public class RekapTransaksiBulananDanTahunan
        {
            public string FundType { get; set; }

            public decimal AUM { get; set; }
            public decimal Subscription { get; set; }
            public decimal Redemption { get; set; }
            public decimal Net { get; set; }

            public decimal AUM1Mo { get; set; }
            public decimal Subscription1Mo { get; set; }
            public decimal Redemption1Mo { get; set; }
            public decimal Net1Mo { get; set; }

            public decimal AUM3Mo { get; set; }
            public decimal Subscription3Mo { get; set; }
            public decimal Redemption3Mo { get; set; }
            public decimal Net3Mo { get; set; }

            public decimal AUMYoy { get; set; }
            public decimal SubscriptionYoy { get; set; }
            public decimal RedemptionYoy { get; set; }
            public decimal NetYoy { get; set; }

        }

        public class RekapManagementFee
        {
            public string NamaReksadana { get; set; }
            public decimal Gross { get; set; }
        }

        public class RateMiFee
        {
            //AUM
            public string Keterangan { get; set; }
            public decimal DesPast { get; set; }
            public decimal Jan { get; set; }
            public decimal Feb { get; set; }
            public decimal Mar { get; set; }
            public decimal Apr { get; set; }
            public decimal Mei { get; set; }
            public decimal Jun { get; set; }
            public decimal Jul { get; set; }
            public decimal Aug { get; set; }
            public decimal Sep { get; set; }
            public decimal Okt { get; set; }
            public decimal Nov { get; set; }
            public decimal Des { get; set; }
            public decimal Selisih { get; set; }
            public decimal MiFeeSetahun { get; set; }

        }


        public string MoveToSubsRedemp(DateTime _trxDate, UpdatePaymentSInvestTemp _updatePaymentSInvestTemp)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText =
                           @"
DECLARE @TransactionDate datetime
declare @PaymentDate datetime
declare @TransactionType nvarchar(500)
declare @FundCode nvarchar(500)
declare @FundPK int
declare @FundPKTo int
declare @SellingAgentCode nvarchar(500)
declare @FundClientPK int
declare @TotalCashAmount numeric(22,2)
declare @TotalCashAmountTo numeric(22,2)
declare @TotalUnitAmount numeric(22,4)
declare @FeePercent numeric(18,2)
declare @ClientRedemptionPK int
declare @AgentPK int
declare @AgentFeePercent numeric(18,2)
DECLARE @FeeAmount NUMERIC(18,2)
DECLARE @CurrencyPK INT
DECLARE @RefNumber NVARCHAR(200)
DECLARE @SwitchFeeCharge NVARCHAR(50)
Declare @CurrencyPKTo int


DECLARE A CURSOR FOR 

select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,TransactionType,
FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,0 TotalUnitAmount,isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,
SwitchFeeCharge,E.CurrencyPK CurrencyPKTo FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate  and TransactionType = 'switching' and isnull(AmountCash,0) > 0
and (isnull(FeePercent,0) >= 0 or ISNULL(FeeNominal,0)>= 0)


UNION ALL

select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,TransactionType,
FundCode,SellingAgentCode,0 TotalCashAmount,0 TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,
SwitchFeeCharge,E.CurrencyPK CurrencyPKTo FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate  and TransactionType = 'switching' and isnull(AmountUnit,0) > 0
and (isnull(FeePercent,0) >= 0 or ISNULL(FeeNominal,0) >= 0)




UNION ALL

select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,TransactionType,
FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,
SwitchFeeCharge,E.CurrencyPK CurrencyPKTo FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) > 0 or ISNULL(FeeNominal,0) > 0) and TransactionType in ('redemption')


UNION ALL

select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,isnull(A.SwitchFeeCharge,0) SwitchFeeCharge,isnull(E.CurrencyPK,0) CurrencyPKTo
FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) >= 0 or ISNULL(FeeNominal,0) >= 0) and A.TransactionType = 'subscription'



UNION ALL

Select A.fundPK,A.fundPKto,A.FundClientPK,A.AgentPK,A.AgentFee,A.TransactionDate,A.PaymentDate,A.TransactionType,A.FundCode,A.SellingAgentCode,A.TotalCashAmount TotalCashAmount,
A.TotalCashAmountTo  TotalCashAmountTo, 
0 TotalUnitAmount,A.FeePercent,A.FeeNominal FeeNominal,A.CurrencyPK,ReferenceNumber ReferenceNumber,A.SwitchFeeCharge,A.CurrencyPKTo from 
(
select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,isnull(A.SwitchFeeCharge,0) SwitchFeeCharge,isnull(E.CurrencyPK,0) CurrencyPKTo
FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) = 0 and ISNULL(FeeNominal,0) = 0) and A.TransactionType = 'redemption'
) A where A.TotalCashAmount > 0



UNION ALL

Select A.fundPK,A.fundPKto,A.FundClientPK,A.AgentPK,A.AgentFee,A.TransactionDate,A.PaymentDate,A.TransactionType,A.FundCode,A.SellingAgentCode,0 TotalCashAmount,
A.TotalCashAmountTo  TotalCashAmountTo, 
A.TotalUnitAmount TotalUnitAmount,A.FeePercent,A.FeeNominal FeeNominal,A.CurrencyPK,ReferenceNumber ReferenceNumber,A.SwitchFeeCharge,A.CurrencyPKTo from 
(
select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,isnull(A.SwitchFeeCharge,0) SwitchFeeCharge,isnull(E.CurrencyPK,0) CurrencyPKTo
FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) = 0 and ISNULL(FeeNominal,0) = 0) and A.TransactionType = 'redemption'
) A where A.TotalUnitAmount > 0







Open A
Fetch Next From A
Into @FundPK,@FundPKTo,@FundClientPK,@AgentPK,@AgentFeePercent,@TransactionDate,@PaymentDate,@TransactionType,
@FundCode,@SellingAgentCode,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,@FeePercent,@FeeAmount,@CurrencyPK,@RefNumber
,@SwitchFeeCharge,@CurrencyPKTo



While @@FETCH_STATUS = 0
BEGIN

declare @FundCashRefPK int
declare @FundCashRefPKTo INT


SET @FundCashRefPKTo = NULL
SET @FundCashRefPK = null

select @FundCashRefPK = FundCashRefPK from FundClientCashRef  
where status = 2 and FundClientPK = @FundClientPK and FundPK = @FundPK 


select @FundCashRefPKTo = FundCashRefPK from FundClientCashRef  
where status = 2 and FundClientPK = @FundClientPK and FundPK = @FundPKTo 


if isnull(@TransactionType,0) = 'Redemption' 
	BEGIN

	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 2 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 2 AND status IN (1,2)
END
		Update ClientRedemption set status  =  3 where ValueDate = @TransactionDate and FundPK  = @FundPK and FundClientPK = @FundClientPK and status in (1,2) and posted = 0
	END
else if isnull(@TransactionType,0) = 'Switching' 
	BEGIN 


	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 1 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 2 AND status IN (1,2)
END

		Update ClientSwitching set status  =  3 where ValueDate = @TransactionDate and FundPKFrom  = @FundPK and FundPKTo  = @FundPKTo and FundClientPK = @FundClientPK and status in (1,2) and posted = 0
	END
ELSE
if isnull(@TransactionType,0) = 'Subscription' 
	BEGIN
	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 1 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 1 AND status IN (1,2)
END
		Update ClientSubscription set status  =  3 where ValueDate = @TransactionDate and FundPK  = @FundPK and FundClientPK = @FundClientPK and status in (1,2) and posted = 0
	END


Fetch next From A Into @FundPK,@FundPKTo,@FundClientPK,@AgentPK,@AgentFeePercent,@TransactionDate,@PaymentDate,@TransactionType,
@FundCode,@SellingAgentCode,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,@FeePercent,@FeeAmount,@CurrencyPK,@RefNumber
,@SwitchFeeCharge,@CurrencyPKTo
END
Close A
Deallocate A    



DECLARE A CURSOR FOR 


select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,TransactionType,
FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,0 TotalUnitAmount,isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,
SwitchFeeCharge,E.CurrencyPK CurrencyPKTo FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate  and TransactionType = 'switching' and isnull(AmountCash,0) > 0
and (isnull(FeePercent,0) >= 0 or ISNULL(FeeNominal,0)>= 0)


UNION ALL

select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,TransactionType,
FundCode,SellingAgentCode,0 TotalCashAmount,0 TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,
SwitchFeeCharge,E.CurrencyPK CurrencyPKTo FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate  and TransactionType = 'switching' and isnull(AmountUnit,0) > 0
and (isnull(FeePercent,0) >= 0 or ISNULL(FeeNominal,0) >= 0)




UNION ALL

select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,TransactionType,
FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,
SwitchFeeCharge,E.CurrencyPK CurrencyPKTo FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) > 0 or ISNULL(FeeNominal,0) > 0) and TransactionType in ('redemption')


UNION ALL

select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,isnull(A.SwitchFeeCharge,0) SwitchFeeCharge,isnull(E.CurrencyPK,0) CurrencyPKTo
FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) >= 0 or ISNULL(FeeNominal,0) >= 0) and A.TransactionType = 'subscription'



UNION ALL

Select A.fundPK,A.fundPKto,A.FundClientPK,A.AgentPK,A.AgentFee,A.TransactionDate,A.PaymentDate,A.TransactionType,A.FundCode,A.SellingAgentCode,A.TotalCashAmount TotalCashAmount,
A.TotalCashAmountTo  TotalCashAmountTo, 
0 TotalUnitAmount,A.FeePercent,A.FeeNominal FeeNominal,A.CurrencyPK,ReferenceNumber ReferenceNumber,A.SwitchFeeCharge,A.CurrencyPKTo from 
(
select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,isnull(A.SwitchFeeCharge,0) SwitchFeeCharge,isnull(E.CurrencyPK,0) CurrencyPKTo
FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) = 0 and ISNULL(FeeNominal,0) = 0) and A.TransactionType = 'redemption'
) A where A.TotalCashAmount > 0



UNION ALL

Select A.fundPK,A.fundPKto,A.FundClientPK,A.AgentPK,A.AgentFee,A.TransactionDate,A.PaymentDate,A.TransactionType,A.FundCode,A.SellingAgentCode,0 TotalCashAmount,
A.TotalCashAmountTo  TotalCashAmountTo, 
A.TotalUnitAmount TotalUnitAmount,A.FeePercent,A.FeeNominal FeeNominal,A.CurrencyPK,ReferenceNumber ReferenceNumber,A.SwitchFeeCharge,A.CurrencyPKTo from 
(
select C.FundPK,E.FundPK FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,SellingAgentCode,AmountCash TotalCashAmount,ISNULL(InAmountCash,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,ReferenceNumber,isnull(A.SwitchFeeCharge,0) SwitchFeeCharge,isnull(E.CurrencyPK,0) CurrencyPKTo
FROM UpdatePaymentSInvestTemp A
left join FundClient B on A.IFUA  = B.IFUACode and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
left join Fund E on A.InFundCode = E.SInvestCode and E.status  in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) = 0 and ISNULL(FeeNominal,0) = 0) and A.TransactionType = 'redemption'
) A where A.TotalUnitAmount > 0






Open A
Fetch Next From A
Into @FundPK,@FundPKTo,@FundClientPK,@AgentPK,@AgentFeePercent,@TransactionDate,@PaymentDate,@TransactionType,
@FundCode,@SellingAgentCode,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,@FeePercent,@FeeAmount,@CurrencyPK,@RefNumber
,@SwitchFeeCharge,@CurrencyPKTo



While @@FETCH_STATUS = 0
BEGIN



SET @FundCashRefPKTo = NULL
SET @FundCashRefPK = null

select @FundCashRefPK = FundCashRefPK from FundClientCashRef  
where status = 2 and FundClientPK = @FundClientPK and FundPK = @FundPK 


select @FundCashRefPKTo = FundCashRefPK from FundClientCashRef  
where status = 2 and FundClientPK = @FundClientPK and FundPK = @FundPKTo 


if isnull(@TransactionType,0) = 'Redemption' 
	BEGIN

	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 2 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 2 AND status IN (1,2)
END

		
		
		INSERT INTO ClientRedemption(ClientRedemptionPK,HistoryPK,Status,Type,FeeType,NAVDate,ValueDate,PaymentDate,NAV,
		FundPK,FundClientPK,CashRefPK,BitRedemptionAll, Description,CashAmount,UnitAmount,TotalCashAmount,
		TotalUnitAmount,RedemptionFeePercent,RedemptionFeeAmount,AgentPK,AgentFeePercent,AgentFeeAmount,DepartmentPK,
		CurrencyPK,UnitPosition,BankRecipientPK,TransferType,IsBOTransaction,BitSInvest,TransactionPK,IsFrontSync,
		ReferenceSinvest,EntryUsersID,EntryTime,LastUpdate)
		
		SELECT isnull(max(ClientRedemptionPk),0) + 1,1,1,1,case when ISNULL(@FeeAmount,0) > 0 then 2 else 1 end,@TransactionDate,@TransactionDate,@PaymentDate,0,
		@FundPK,@FundClientPK,case when isnull(@FundCashRefPK,0) <> 0 then @FundCashRefPK else 1 end ,0,'Update From SInvest',
		ISNULL(@TotalCashAmount,0),ISNULL(@TotalUnitAmount,0),ISNULL(@TotalCashAmount,0) - ISNULL(@FeeAmount,0),
		ISNULL(@TotalUnitAmount,0),ISNULL(@FeePercent,0),ISNULL(@FeeAmount,0),ISNULL(@AgentPK,0),
		ISNULL(@AgentFeePercent,0),ISNULL(@TotalCashAmount * @AgentFeePercent/100,0),1,ISNULL(@CurrencyPk,0),0,0,case when @TotalCashAmount > 100000000 then 2 else 1 end,1,1,0,0,'',
		@UsersID,@Time,@Time from ClientRedemption


	

                            

	END
else if isnull(@TransactionType,0) = 'Switching' 
	BEGIN 


	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 1 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 2 AND status IN (1,2)
END

		
	    
		INSERT INTO ClientSwitching(ClientSwitchingPK,HistoryPK,Status,FeeTypeMode,NAVDate,ValueDate,PaymentDate,
		NAVFundFrom,NAVFundTo,FundPKFrom,FundPKTo,FundClientPK,FeeType,CashRefPKFrom,CashRefPKTo, Description,
		CashAmount,UnitAmount,TotalCashAmountFundFrom,TotalCashAmountFundTo,TotalUnitAmountFundFrom,TotalUnitAmountFundTo,
		SwitchingFeePercent,SwitchingFeeAmount,CurrencyPK,TransferType,
        BitSwitchingAll,UserSwitchingPK,TransactionPK,IsBoTransaction,BitSInvest,FeeTypeMethod,IsProcessed,IsFrontSync,
		ReferenceSinvest,AgentPK,EntryUsersID,EntryTime,LastUpdate)	
	    
		SELECT isnull(max(ClientSwitchingPk),0) + 1,1,1,case when ISNULL(@FeeAmount,0) > 0 then 2 else 1 end,@TransactionDate,@TransactionDate,@PaymentDate,0,0,
		@FundPK,@FundPKTo,@FundClientPK,ISNULL(@SwitchFeeCharge,'OUT'),case when isnull(@FundCashRefPK,0) <> 0 then @FundCashRefPK else 1 end ,
		CASE when isnull(@FundCashRefPKTo,0) <> 0 then @FundCashRefPKTo else 1 end ,'Update From SInvest',@TotalCashAmount,
		@TotalUnitAmount,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,0,
		ISNULL(@FeePercent,0) ,ISNULL(@FeeAmount,0),@CurrencyPKTo,
        case when @TotalCashAmount > 100000000 then 2 else 1 end,0,0,0,1,1,1,0,0,'',@AgentPK,@UsersID,@Time,@Time from ClientSwitching

	

	END
ELSE
if isnull(@TransactionType,0) = 'Subscription' 
	BEGIN
	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 1 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 1 AND status IN (1,2)
END
		
	
		INSERT INTO ClientSubscription(ClientSubscriptionPK,HistoryPK,Status,Type,FeeType,NAVDate,ValueDate,
		NAV,FundPK,FundClientPK,CashRefPK,Description,CashAmount,UnitAmount,TotalCashAmount,TotalUnitAmount,SubscriptionFeePercent,
		SubscriptionFeeAmount,AgentPK,AgentFeePercent,AgentFeeAmount,DepartmentPK,CurrencyPK,AutoDebitDate,IsBoTransaction,
		BitSinvest,BitImmediateTransaction,TransactionPK,IsFrontSync,ReferenceSinvest,EntryUsersID,EntryTime,LastUpdate)
	
		Select isnull(max(ClientSubscriptionPK),0) + 1,1,1,1,case when ISNULL(@FeeAmount,0) > 0 then 2 else 1 end,@TransactionDate,@TransactionDate,
		0,@FundPK,@FundClientPK,case when isnull(@FundCashRefPK,0) <> 0 then @FundCashRefPK else 1 end,'Update From SInvest',ISNULL(@TotalCashAmount,0),
		ISNULL(@TotalUnitAmount,0),ISNULL(@TotalCashAmount,0) - ISNULL(@FeeAmount,0),
		ISNULL(@TotalUnitAmount,0),ISNULL(@FeePercent,0),ISNULL(@FeeAmount,0),@AgentPK,@AgentFeePercent,@TotalCashAmount * @AgentFeePercent,
		1,ISNULL(@CurrencyPK,0),null,1,1,0,0,0,'',@UsersID,@Time,@Time from ClientSubscription

	

	END


Fetch next From A Into @FundPK,@FundPKTo,@FundClientPK,@AgentPK,@AgentFeePercent,@TransactionDate,@PaymentDate,@TransactionType,
@FundCode,@SellingAgentCode,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,@FeePercent,@FeeAmount,@CurrencyPK,@RefNumber
,@SwitchFeeCharge,@CurrencyPKTo
END
Close A
Deallocate A     
                         ";

                        cmd.Parameters.AddWithValue("@UsersID", _updatePaymentSInvestTemp.EntryUsersID);
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.Parameters.AddWithValue("@TrxDate", _trxDate);
                        cmd.ExecuteNonQuery();


                    }
                }
                return "Move To Subs Redemp Success";

            }
            catch (Exception err)
            {
                throw err;
            }
        }



        #region APERD Client TXT
          
        public string ImportAPERDFundClientInd(string _fileSource, string _userID)
        {
            string _msg;
            DateTime _dateTime = DateTime.Now;
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //delete data yang lama
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table ZAPERD_CLIENT_IND";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.ZAPERD_CLIENT_IND";
                            bulkCopy.WriteToServer(CreateDataTableFromAPERDFundClientInd(_fileSource));
                            _msg = "Import APERD INDIVIDUAL Success";
                        }

                        // logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"  
                                Declare @SACode nvarchar(100)
                                select @SACode = ID From Company where status in (1,2)

                                declare @max int
                                select @max = max(fundClientPK) from fundclient
                                select @max = isnull(@max,0) 


                                insert into [dbo].[FundClient](
                                FundClientPK,HistoryPK,Status,ID,Name
                                ,SACode,SellingAgentPK,SID,InvestorType,ClientCategory,IFUACode
                                ,NamaDepanInd,NamaTengahInd,NamaBelakangInd,Nationality,IdentitasInd1
                                ,NoIdentitasInd1,ExpiredDateIdentitasInd1,NPWP,RegistrationNPWP,CountryOfBirth
                                ,TempatLahir,TanggalLahir,JenisKelamin,Pendidikan,MotherMaidenName
                                ,Agama,Pekerjaan,PenghasilanInd,StatusPerkawinan,SpouseName
                                ,InvestorsRiskProfile,MaksudTujuanInd,SumberDanaInd,AssetOwner,OtherAlamatInd1
                                ,OtherKodeKotaInd1,OtherKodePosInd1,AlamatInd1,KodeKotaInd1,KodePosInd1
                                ,CountryofCorrespondence,AlamatInd2,KodeKotaInd2,KodePosInd2,CountryofDomicile
                                ,TeleponRumah,TeleponSelular,fax,Email,StatementType
                                ,FATCA,TIN,TINIssuanceCountry
                                ,EntryTime,EntryUsersID,LastUpdate
                                )
                                select  
                                ROW_NUMBER() OVER(ORDER BY Col6 ASC) + @max,1,2,'' ID,ISNULL(Col6,'') Name
                                ,Case when Col2 = @SACode then '' else Col2 end SACode,0 SellingAgentPK,Col4 SID,Col5 InvestorType,Col5 InvestorType,''IFUA
                                ,Col6 NamaDepanInd,'' NamaTengahInd,'' NamaBelakangInd,ISNULL(Col9,'') Nationality,Col10 IdentitasInd1
                                ,Col11 NoIdentitasInd1,convert(datetime,convert(varchar(10),Col12,120)) ExpiredDateIdentitasInd1 ,Col13 NPWP,Col14 RegistrationNPWP,ISNULL(Col15,'') CountryOfBirth
                                ,ISNULL(Col16,'') TempatLahir,convert(datetime,convert(varchar(10),Col17,120)) TanggalLahir,ISNULL(Col18,0) JenisKelamin,ISNULL(Col19,0) Pendidikan,ISNULL(Col20,'') MotherMaidenName
                                ,isnull(Col21,0) Agama,ISNULL(Col22,0) Occupation,ISNULL(Col23,0) IncomeLevel,ISNULL(Col24,0) StatusPerkawinan,ISNULL(Col25,'') SpouseName
                                ,ISNULL(Col26,0) InvestorsRiskProfile,ISNULL(Col27,0) MaksudTujuanInd,ISNULL(Col28,0) SumberDanaInd,ISNULL(Col29,0) AssetOwner,ISNULL(Col30,'') OtherAlamatInd1
                                ,ISNULL(Col31,0) OtherKodeKotaInd1,ISNULL(Col32,'') OtherKodePosInd1,ISNULL(Col33,'') AlamatInd1,ISNULL(Col34,0) KodeKotaInd1,ISNULL(Col36,'') KodePosInd1
                                ,ISNULL(Col37,'') CountryofCorrespondence,ISNULL(Col38,'') AlamatInd2,ISNULL(Col39,0) KodeKotaInd2,ISNULL(Col41,'') KodePosInd2,ISNULL(Col42,'') CountryofDomicile
                                ,ISNULL(Col43,'') TeleponRumah,ISNULL(Col44,'') TeleponSelular,ISNULL(Col45,'') fax,ISNULL(Col46,'') Email,ISNULL(Col47,0) StatementType
                                ,ISNULL(Col48,0) FATCA,ISNULL(Col49,'') TIN,ISNULL(Col50,'') TINIssuanceCountry
                                ,convert(datetime,convert(varchar(10),Col1,120)) OpeningDate,@UserID,@TimeNow
                                from ZAPERD_CLIENT_IND
                                where Col4 not in
                                (
                                Select distinct SID from fundclient
                                )

                                                        ";
                                cmd1.CommandTimeout = 0;
                                cmd1.Parameters.AddWithValue("@UserID", _userID);
                                cmd1.Parameters.AddWithValue("@TimeNow", _dateTime);
                                cmd1.ExecuteNonQuery();
                            }
                            _msg = "Import FundClient Individual Success";

                        }



                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromAPERDFundClientInd(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col2";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col3";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col4";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col5";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col6";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col7";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col8";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col9";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col10";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col11";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col12";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col13";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col14";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col15";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col16";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col17";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col18";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col19";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col20";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col21";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col22";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col23";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col24";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col25";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col26";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col27";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col28";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col29";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col30";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col31";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col32";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col33";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col34";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col35";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col36";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col37";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col38";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col39";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col40";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col41";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col42";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col43";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col44";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col45";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col46";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col47";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col48";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col49";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col50";
            dc.Unique = false;
            dt.Columns.Add(dc);



            StreamReader sr = new StreamReader(_fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });

                dr = dt.NewRow();
                dr["Col1"] = s[0];
                dr["Col2"] = s[1];
                dr["Col3"] = s[2];
                dr["Col4"] = s[3];
                dr["Col5"] = s[4];
                dr["Col6"] = s[5];
                dr["Col7"] = s[6];
                dr["Col8"] = s[7];
                dr["Col9"] = s[8];
                dr["Col10"] = s[9];
                dr["Col11"] = s[10];
                dr["Col12"] = s[11];
                dr["Col13"] = s[12];
                dr["Col14"] = s[13];
                dr["Col15"] = s[14];
                dr["Col16"] = s[15];
                dr["Col17"] = s[16];
                dr["Col18"] = s[17];
                dr["Col19"] = s[18];
                dr["Col20"] = s[19];
                dr["Col21"] = s[20];
                dr["Col22"] = s[21];
                dr["Col23"] = s[22];
                dr["Col24"] = s[23];
                dr["Col25"] = s[24];
                dr["Col26"] = s[25];
                dr["Col27"] = s[26];
                dr["Col28"] = s[27];
                dr["Col29"] = s[28];
                dr["Col30"] = s[29];
                dr["Col31"] = s[30];
                dr["Col32"] = s[31];
                dr["Col33"] = s[32];
                dr["Col34"] = s[33];
                dr["Col35"] = s[34];
                dr["Col36"] = s[35];
                dr["Col37"] = s[36];
                dr["Col38"] = s[37];
                dr["Col39"] = s[38];
                dr["Col40"] = s[39];
                dr["Col41"] = s[40];
                dr["Col42"] = s[41];
                dr["Col43"] = s[42];
                dr["Col44"] = s[43];
                dr["Col45"] = s[44];
                dr["Col46"] = s[45];
                dr["Col47"] = s[46];
                dr["Col48"] = s[47];
                dr["Col49"] = s[48];
                dr["Col50"] = s[49];
                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }


        public string ImportAPERDFundClientIns(string _fileSource, string _userID)
        {
            string _msg;
            DateTime _dateTime = DateTime.Now;
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //delete data yang lama
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table ZAPERD_CLIENT_INS";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.ZAPERD_CLIENT_INS";
                            bulkCopy.WriteToServer(CreateDataTableFromAPERDFundClientIns(_fileSource));
                            _msg = "Import APERD INSTITUSI Success";
                        }

                         //logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"  

                                Declare @SACode nvarchar(100)
                                select @SACode = ID From Company where status in (1,2)

                                declare @max int
                                select @max = max(fundClientPK) from fundclient

                                set @max = isnull(@max,0)

                                insert into [dbo].[FundClient](
                                FundClientPK,HistoryPK,Status,ID,Name
                                ,SACode,SellingAgentPK,SID,ClientCategory,InvestorType
                                ,IFUACode,NamaPerusahaan,CountryOfDomicile,NomorSIUP,SIUPExpirationDate
                                ,NoSKD,ExpiredDateSKD,NPWP,RegistrationNPWP,CountryofEstablishment
                                ,LokasiBerdiri,TanggalBerdiri,NomorAnggaran,Tipe,Karakteristik
                                ,PenghasilanInstitusi,InvestorsRiskProfile,MaksudTujuanInstitusi,SumberDanaInstitusi,AssetOwner
                                ,AlamatPerusahaan,KodeKotaIns,KodePosIns,CountryofCompany,TeleponBisnis
                                ,Companyfax,CompanyMail,StatementType,NamaDepanIns1,NamaTengahIns1
                                ,NamaBelakangIns1,Jabatan1,PhoneIns1,EmailIns1,Identitasins11
                                ,NoIdentitasins11,ExpiredDateIdentitasIns11,IdentitasIns12,NoIdentitasIns12,Expireddateidentitasins12
                                ,NamaDepanIns2,NamaTengahIns2,NamaBelakangIns2,Jabatan2,PhoneIns2
                                ,EmailIns2,IdentitasIns21,NoIDentitasIns21,ExpiredDateIdentitasIns21,IdentitasIns22
                                ,NoIdentitasins22,ExpiredDateIdentitasins22,AssetFor1Year,AssetFor2Year,AssetFor3Year
                                ,OperatingProfitFor1Year,OperatingProfitFor2Year,OperatingProfitFor3Year,FATCA,TIN
                                ,TINIssuanceCountry,GIIN,SubstantialOwnerName,SubstantialOwnerAddress,SubstantialOwnerTIN
                                ,EntryTime,EntryUsersID,LastUpdate)

                                select ROW_NUMBER() OVER(ORDER BY Col6 ASC) + @max,1,2,'' ClientID,Col6 Name
                                ,Case when Col2 = @SACode then '' else Col2 end SACode,0,Col4 SID,Col5 InvestorType,Col5 InvestorType
                                ,'' IFUA,ISNULL(Col6,'') NamaPerusahaan,ISNULL(Col7,'') Domisili,ISNULL(Col8,'') NomorSIUP,convert(datetime,convert(varchar(10),Col9,120)) SIUPExpirationDate
                                ,ISNULL(Col10,'') NoSKD,convert(datetime,convert(varchar(10),Col11,120)) ExpiredDateSKD,ISNULL(Col12,'') NPWP,ISNULL(Col13,'') RegistrationNPWP,ISNULL(Col14,'') CountryofEstablishment
                                ,ISNULL(Col15,'') LokasiBerdiri,convert(datetime,convert(varchar(10),Col16,120)) TanggalBerdiri,ISNULL(Col17,'') NomorAnggaran,ISNULL(Col18,0) Tipe,ISNULL(Col19,0) Karakteristik
                                ,ISNULL(Col20,0) PenghasilanInstitusi,ISNULL(Col21,0) InvestorsRiskProfile,ISNULL(Col22,0) MaksudTujuanInstitusi,ISNULL(Col23,0) SumberDanaInstitusi,ISNULL(Col24,0) AssetOwner
                                ,ISNULL(Col25,'') AlamatPerusahaan,ISNULL(Col26,0) KodeKotaIns,ISNULL(Col28,'') KodePosIns,isnull(Col29,'') CountryofCompany,ISNULL(Col30,'') TeleponBisnis
                                ,ISNULL(Col31,'') Fax,ISNULL(Col32,'') Email,ISNULL(Col33,0) StatementType
                                ,ISNULL(Col34,'') NamaDepanIns1,ISNULL(Col35,'') NamaTengahIns1,ISNULL(Col36,'') NamaBelakangIns1
                                ,ISNULL(Col37,'') Jabatan1,ISNULL(Col38,'') PhoneIns1,ISNULL(Col39,'') EmailIns1,case when left(Col42,4) = '9998' then 7 else 1 end Identitasins11
                                ,ISNULL(Col41,'') NoIdentitasins11,convert(datetime,convert(varchar(10),Col42,120)) ExpiredDateIdentitasIns11,case when left(col44,4) = '9998' then 7 else 1 end Identitasins12
                                ,ISNULL(Col43,'') NoIdentitasIns12,convert(datetime,convert(varchar(10),Col44,120)) Expireddateidentitasins12
                                ,ISNULL(Col45,'') NamaDepanIns2,ISNULL(Col46,'') NamaTengahIns2,ISNULL(Col47,'') NamaBelakangIns2
                                ,ISNULL(Col48,'') Jabatan2,ISNULL(Col49,'') PhoneIns2,ISNULL(Col50,'') EmailIns2,case when left(Col53,4) = '9998' then 7 else 1 end Identitasins21
                                ,ISNULL(Col52,'') NoIDentitasIns21,convert(datetime,convert(varchar(10),Col53,120)) ExpiredDateIdentitasIns21,case when left(Col55,4) = '9998' then 7 else 1 end Identitasins22
                                ,ISNULL(Col54,'') NoIdentitasins22,convert(datetime,convert(varchar(10),Col55,120)) ExpiredDateIdentitasins22
                                ,ISNULL(Col56,0) AssetFor1Year,ISNULL(Col57,0) AssetFor2Year,ISNULL(Col58,0) AssetFor3Year
                                ,ISNULL(Col59,0) OperatingProfitFor1Year,ISNULL(Col60,0) OperatingProfitFor2Year,ISNULL(Col61,0) OperatingProfitFor3Year
                                ,ISNULL(Col62,0) FATCA,ISNULL(Col63,'') TIN
                                ,ISNULL(Col64,'') TINIssuanceCountry,ISNULL(Col65,'') GIIN
                                ,ISNULL(Col66,'') SubstantialOwnerName,ISNULL(Col67,'') SubstantialOwnerAddress,ISNULL(Col68,'') SubstantialOwnerTIN
                                ,convert(datetime,convert(varchar(10),Col1,120)) OpeningDate,@UserID,@TimeNow
                                from ZAPERD_CLIENT_INS
                                where Col4 not in
                                (
	                                Select distinct SID from fundclient
                                )



                                                        ";
                                cmd1.CommandTimeout = 0;
                                cmd1.Parameters.AddWithValue("@UserID", _userID);
                                cmd1.Parameters.AddWithValue("@TimeNow", _dateTime);
                                cmd1.ExecuteNonQuery();
                            }
                            _msg = "Import FundClient INSTITUSI Success";

                        }



                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromAPERDFundClientIns(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col2";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col3";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col4";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col5";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col6";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col7";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col8";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col9";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col10";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col11";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col12";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col13";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col14";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col15";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col16";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col17";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col18";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col19";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col20";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col21";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col22";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col23";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col24";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col25";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col26";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col27";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col28";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col29";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col30";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col31";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col32";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col33";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col34";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col35";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col36";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col37";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col38";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col39";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col40";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col41";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col42";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col43";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col44";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col45";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col46";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col47";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col48";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col49";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col50";
            dc.Unique = false;
            dt.Columns.Add(dc);


            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col51";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col52";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col53";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col54";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col55";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col56";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col57";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col58";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col59";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col60";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col61";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col62";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col63";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col64";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col65";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col66";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col67";
            dc.Unique = false;
            dt.Columns.Add(dc);


            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col68";
            dc.Unique = false;
            dt.Columns.Add(dc);




            StreamReader sr = new StreamReader(_fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });

                dr = dt.NewRow();
                dr["Col1"] = s[0];
                dr["Col2"] = s[1];
                dr["Col3"] = s[2];
                dr["Col4"] = s[3];
                dr["Col5"] = s[4];
                dr["Col6"] = s[5];
                dr["Col7"] = s[6];
                dr["Col8"] = s[7];
                dr["Col9"] = s[8];
                dr["Col10"] = s[9];
                dr["Col11"] = s[10];
                dr["Col12"] = s[11];
                dr["Col13"] = s[12];
                dr["Col14"] = s[13];
                dr["Col15"] = s[14];
                dr["Col16"] = s[15];
                dr["Col17"] = s[16];
                dr["Col18"] = s[17];
                dr["Col19"] = s[18];
                dr["Col20"] = s[19];
                dr["Col21"] = s[20];
                dr["Col22"] = s[21];
                dr["Col23"] = s[22];
                dr["Col24"] = s[23];
                dr["Col25"] = s[24];
                dr["Col26"] = s[25];
                dr["Col27"] = s[26];
                dr["Col28"] = s[27];
                dr["Col29"] = s[28];
                dr["Col30"] = s[29];
                dr["Col31"] = s[30];
                dr["Col32"] = s[31];
                dr["Col33"] = s[32];
                dr["Col34"] = s[33];
                dr["Col35"] = s[34];
                dr["Col36"] = s[35];
                dr["Col37"] = s[36];
                dr["Col38"] = s[37];
                dr["Col39"] = s[38];
                dr["Col40"] = s[39];
                dr["Col41"] = s[40];
                dr["Col42"] = s[41];
                dr["Col43"] = s[42];
                dr["Col44"] = s[43];
                dr["Col45"] = s[44];
                dr["Col46"] = s[45];
                dr["Col47"] = s[46];
                dr["Col48"] = s[47];
                dr["Col49"] = s[48];
                dr["Col50"] = s[49];
                dr["Col51"] = s[50];
                dr["Col52"] = s[51];
                dr["Col53"] = s[52];
                dr["Col54"] = s[53];
                dr["Col55"] = s[54];
                dr["Col56"] = s[55];
                dr["Col57"] = s[56];
                dr["Col58"] = s[57];
                dr["Col59"] = s[58];
                dr["Col60"] = s[59];
                dr["Col61"] = s[60];
                dr["Col62"] = s[61];
                dr["Col63"] = s[62];
                dr["Col64"] = s[63];
                dr["Col65"] = s[64];
                dr["Col66"] = s[65];
                dr["Col67"] = s[66];
                dr["Col68"] = s[67];
                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }

        #endregion  




        #region APERD TRANSACTION TXT
        public string ImportAPERDSubRed(string _fileSource, string _userID)
        {
            string _msg;
            DateTime _dateTime = DateTime.Now;
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //delete data yang lama
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table ZAPERD_SUBRED";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.ZAPERD_SUBRED";
                            bulkCopy.WriteToServer(CreateDataTableFromAPERDTrxSubRed(_fileSource));
                            _msg = "Import APERD TRX SUB RED Success";
                        }

                        // logic kalo Reconcile success
                        //                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        //                        {
                        //                            conn.Open();
                        //                            using (SqlCommand cmd1 = conn.CreateCommand())
                        //                            {
                        //                                cmd1.CommandText =
                        //                                @"  
                        //                                ";
                        //                                cmd1.CommandTimeout = 0;
                        //                                cmd1.Parameters.AddWithValue("@UserID", _userID);
                        //                                cmd1.Parameters.AddWithValue("@TimeNow", _dateTime);
                        //                                cmd1.ExecuteNonQuery();
                        //                            }
                        //                            _msg = "Import FundClient Individual Success";

                        //                        }



                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromAPERDTrxSubRed(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col2";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col3";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col4";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col5";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col6";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col7";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col8";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col9";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col10";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col11";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col12";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col13";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col14";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col15";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col16";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col17";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col18";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col19";
            dc.Unique = false;
            dt.Columns.Add(dc);


            StreamReader sr = new StreamReader(_fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });

                dr = dt.NewRow();
                dr["Col1"] = s[0];
                dr["Col2"] = s[1];
                dr["Col3"] = s[2];
                dr["Col4"] = s[3];
                dr["Col5"] = s[4];
                dr["Col6"] = s[5];
                dr["Col7"] = s[6];
                dr["Col8"] = s[7];
                dr["Col9"] = s[8];
                dr["Col10"] = s[9];
                dr["Col11"] = s[10];
                dr["Col12"] = s[11];
                dr["Col13"] = s[12];
                dr["Col14"] = s[13];
                dr["Col15"] = s[14];
                dr["Col16"] = s[15];
                dr["Col17"] = s[16];
                dr["Col18"] = s[17];
                dr["Col19"] = s[18];

                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }

        public string ImportAPERDSwitching(string _fileSource, string _userID)
        {
            string _msg;
            DateTime _dateTime = DateTime.Now;
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //delete data yang lama
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table ZAPERD_SWITCHING";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.ZAPERD_SWITCHING";
                            bulkCopy.WriteToServer(CreateDataTableFromAPERDTrxSwitching(_fileSource));
                            _msg = "Import APERD TRX SWITCHING Success";
                        }

                        // logic kalo Reconcile success
                        //                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        //                        {
                        //                            conn.Open();
                        //                            using (SqlCommand cmd1 = conn.CreateCommand())
                        //                            {
                        //                                cmd1.CommandText =
                        //                                @"  
                        //                                ";
                        //                                cmd1.CommandTimeout = 0;
                        //                                cmd1.Parameters.AddWithValue("@UserID", _userID);
                        //                                cmd1.Parameters.AddWithValue("@TimeNow", _dateTime);
                        //                                cmd1.ExecuteNonQuery();
                        //                            }
                        //                            _msg = "Import FundClient Individual Success";

                        //                        }



                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromAPERDTrxSwitching(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col1";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col2";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col3";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col4";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col5";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col6";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col7";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col8";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col9";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col10";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col11";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col12";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col13";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col14";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col15";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col16";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Col17";
            dc.Unique = false;
            dt.Columns.Add(dc);




            StreamReader sr = new StreamReader(_fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });

                dr = dt.NewRow();
                dr["Col1"] = s[0];
                dr["Col2"] = s[1];
                dr["Col3"] = s[2];
                dr["Col4"] = s[3];
                dr["Col5"] = s[4];
                dr["Col6"] = s[5];
                dr["Col7"] = s[6];
                dr["Col8"] = s[7];
                dr["Col9"] = s[8];
                dr["Col10"] = s[9];
                dr["Col11"] = s[10];
                dr["Col12"] = s[11];
                dr["Col13"] = s[12];
                dr["Col14"] = s[13];
                dr["Col15"] = s[14];
                dr["Col16"] = s[15];
                dr["Col17"] = s[16];


                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }

        #endregion  

        #region APERD SUBS REDEMP EXCEL
        public string ImportAPERDSubsRedempExcel(string _fileSource, string _userID)
        {
            string _msg = "";
            try
            {
                DateTime _now = DateTime.Now;

                //delete data yang lama
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = "truncate table trxaperd";
                        cmd2.ExecuteNonQuery();
                    }
                }

                // import data ke temp dulu
                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.trxaperd";
                    bulkCopy.WriteToServer(CreateDataTableFromUpdatePaymentSInvestSubsRedTempExcelFile(_fileSource));

                    
                }

                // logic kalo Reconcile success
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandText =
                        @"  

DECLARE @TransactionDate datetime
declare @PaymentDate datetime
declare @TransactionType nvarchar(500)
declare @FundCode nvarchar(500)
declare @FundPK int
declare @FundPKTo int
declare @SellingAgentCode nvarchar(500)
declare @FundClientPK int
declare @TotalCashAmount numeric(22,2)
declare @TotalCashAmountTo numeric(22,2)
declare @TotalUnitAmount numeric(22,4)
declare @FeePercent numeric(18,2)
declare @ClientRedemptionPK int
declare @AgentPK int
declare @AgentFeePercent numeric(18,2)
DECLARE @FeeAmount NUMERIC(18,2)
DECLARE @CurrencyPK INT
DECLARE @RefNumber NVARCHAR(200)
DECLARE @SwitchFeeCharge NVARCHAR(50)
Declare @CurrencyPKTo int


DECLARE A CURSOR FOR 


select C.FundPK,0 FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,TransactionType,
FundCode,A.SACode,AmountNominal TotalCashAmount,ISNULL(AmountNominal,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,UploadReference,
0 SwitchFeeCharge,0 CurrencyPKTo FROM TrxAperd A
left join FundClient B on A.SID  = B.SID and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) > 0 or ISNULL(FeeNominal,0) > 0) and TransactionType in ('redemption')


UNION ALL

select C.FundPK,0 FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,A.SACode,AmountNominal TotalCashAmount,ISNULL(AmountNominal,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,UploadReference,0 SwitchFeeCharge,0 CurrencyPKTo
FROM TrxAperd A
left join FundClient B on A.SID  = B.SID and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) >= 0 or ISNULL(FeeNominal,0) >= 0) and A.TransactionType = 'subscription'



UNION ALL

Select A.fundPK,A.fundPKto,A.FundClientPK,A.AgentPK,A.AgentFee,A.TransactionDate,A.PaymentDate,A.TransactionType,A.FundCode,A.SACode,A.TotalCashAmount TotalCashAmount,
A.TotalCashAmountTo  TotalCashAmountTo, 
0 TotalUnitAmount,A.FeePercent,A.FeeNominal FeeNominal,A.CurrencyPK,UploadReference ReferenceNumber,A.SwitchFeeCharge,A.CurrencyPKTo from 
(
select C.FundPK,0 FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,A.SACode,AmountNominal TotalCashAmount,ISNULL(AmountNominal,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,UploadReference,0 SwitchFeeCharge,0 CurrencyPKTo
FROM TrxAperd A
left join FundClient B on A.SID  = B.SID and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) = 0 and ISNULL(FeeNominal,0) = 0) and A.TransactionType = 'redemption'
) A where A.TotalCashAmount > 0



UNION ALL

Select A.fundPK,A.fundPKto,A.FundClientPK,A.AgentPK,A.AgentFee,A.TransactionDate,A.PaymentDate,A.TransactionType,A.FundCode,A.SACode,0 TotalCashAmount,
A.TotalCashAmountTo  TotalCashAmountTo, 
A.TotalUnitAmount TotalUnitAmount,A.FeePercent,A.FeeNominal FeeNominal,A.CurrencyPK,UploadReference ReferenceNumber,A.SwitchFeeCharge,A.CurrencyPKTo from 
(
select C.FundPK,0 FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,A.SACode,AmountNominal TotalCashAmount,ISNULL(AmountNominal,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,UploadReference,0 SwitchFeeCharge,0 CurrencyPKTo
FROM TrxAperd A
left join FundClient B on A.SID  = B.SID and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) = 0 and ISNULL(FeeNominal,0) = 0) and A.TransactionType = 'redemption'
) A where A.TotalUnitAmount > 0






Open A
Fetch Next From A
Into @FundPK,@FundPKTo,@FundClientPK,@AgentPK,@AgentFeePercent,@TransactionDate,@PaymentDate,@TransactionType,
@FundCode,@SellingAgentCode,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,@FeePercent,@FeeAmount,@CurrencyPK,@RefNumber
,@SwitchFeeCharge,@CurrencyPKTo



While @@FETCH_STATUS = 0
BEGIN

declare @FundCashRefPK int
declare @FundCashRefPKTo INT


SET @FundCashRefPKTo = NULL
SET @FundCashRefPK = null

select @FundCashRefPK = FundCashRefPK from FundClientCashRef  
where status = 2 and FundClientPK = @FundClientPK and FundPK = @FundPK 


select @FundCashRefPKTo = FundCashRefPK from FundClientCashRef  
where status = 2 and FundClientPK = @FundClientPK and FundPK = @FundPKTo 


if isnull(@TransactionType,0) = 'Redemption' 
	BEGIN

	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 2 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 2 AND status IN (1,2)
END
		Update ClientRedemption set status  =  3 where ValueDate = @TransactionDate and FundPK  = @FundPK and FundClientPK = @FundClientPK and status in (1,2) and posted = 0
	END
else if isnull(@TransactionType,0) = 'Switching' 
	BEGIN 


	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 1 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 2 AND status IN (1,2)
END

		Update ClientSwitching set status  =  3 where ValueDate = @TransactionDate and FundPKFrom  = @FundPK and FundPKTo  = @FundPKTo and FundClientPK = @FundClientPK and status in (1,2) and posted = 0
	END
ELSE
if isnull(@TransactionType,0) = 'Subscription' 
	BEGIN
	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 1 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 1 AND status IN (1,2)
END
		Update ClientSubscription set status  =  3 where ValueDate = @TransactionDate and FundPK  = @FundPK and FundClientPK = @FundClientPK and status in (1,2) and posted = 0
	END


Fetch next From A Into @FundPK,@FundPKTo,@FundClientPK,@AgentPK,@AgentFeePercent,@TransactionDate,@PaymentDate,@TransactionType,
@FundCode,@SellingAgentCode,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,@FeePercent,@FeeAmount,@CurrencyPK,@RefNumber
,@SwitchFeeCharge,@CurrencyPKTo
END
Close A
Deallocate A    



DECLARE A CURSOR FOR 


select C.FundPK,0 FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,TransactionType,
FundCode,A.SACode,AmountNominal TotalCashAmount,ISNULL(AmountNominal,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,UploadReference,
0 SwitchFeeCharge,0 CurrencyPKTo FROM TrxAperd A
left join FundClient B on A.SID  = B.SID and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) > 0 or ISNULL(FeeNominal,0) > 0) and TransactionType in ('redemption')


UNION ALL

select C.FundPK,0 FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,A.SACode,AmountNominal TotalCashAmount,ISNULL(AmountNominal,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,UploadReference,0 SwitchFeeCharge,0 CurrencyPKTo
FROM TrxAperd A
left join FundClient B on A.SID  = B.SID and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) >= 0 or ISNULL(FeeNominal,0) >= 0) and A.TransactionType = 'subscription'



UNION ALL

Select A.fundPK,A.fundPKto,A.FundClientPK,A.AgentPK,A.AgentFee,A.TransactionDate,A.PaymentDate,A.TransactionType,A.FundCode,A.SACode,A.TotalCashAmount TotalCashAmount,
A.TotalCashAmountTo  TotalCashAmountTo, 
0 TotalUnitAmount,A.FeePercent,A.FeeNominal FeeNominal,A.CurrencyPK,UploadReference ReferenceNumber,A.SwitchFeeCharge,A.CurrencyPKTo from 
(
select C.FundPK,0 FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,A.SACode,AmountNominal TotalCashAmount,ISNULL(AmountNominal,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,UploadReference,0 SwitchFeeCharge,0 CurrencyPKTo
FROM TrxAperd A
left join FundClient B on A.SID  = B.SID and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) = 0 and ISNULL(FeeNominal,0) = 0) and A.TransactionType = 'redemption'
) A where A.TotalCashAmount > 0



UNION ALL

Select A.fundPK,A.fundPKto,A.FundClientPK,A.AgentPK,A.AgentFee,A.TransactionDate,A.PaymentDate,A.TransactionType,A.FundCode,A.SACode,0 TotalCashAmount,
A.TotalCashAmountTo  TotalCashAmountTo, 
A.TotalUnitAmount TotalUnitAmount,A.FeePercent,A.FeeNominal FeeNominal,A.CurrencyPK,UploadReference ReferenceNumber,A.SwitchFeeCharge,A.CurrencyPKTo from 
(
select C.FundPK,0 FundPKTo,FundClientPK,AgentPK,AgentFee,TransactionDate,Case when TransactionType = 'Subscription' then TransactionDate  else  PaymentDate End  PaymentDate,
TransactionType,FundCode,A.SACode,AmountNominal TotalCashAmount,ISNULL(AmountNominal,0) TotalCashAmountTo,ISNULL(AmountUnit,0) TotalUnitAmount,
isnull(FeePercent,0) FeePercent,ISNULL(FeeNominal,0) FeeNominal,C.CurrencyPK,UploadReference,0 SwitchFeeCharge,0 CurrencyPKTo
FROM TrxAperd A
left join FundClient B on A.SID  = B.SID and B.status  in (1,2)
left join Fund C on A.FundCode = C.SInvestCode and C.status  in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status  in (1,2) 
where  TransactionDate = @TrxDate and (isnull(FeePercent,0) = 0 and ISNULL(FeeNominal,0) = 0) and A.TransactionType = 'redemption'
) A where A.TotalUnitAmount > 0





Open A
Fetch Next From A
Into @FundPK,@FundPKTo,@FundClientPK,@AgentPK,@AgentFeePercent,@TransactionDate,@PaymentDate,@TransactionType,
@FundCode,@SellingAgentCode,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,@FeePercent,@FeeAmount,@CurrencyPK,@RefNumber
,@SwitchFeeCharge,@CurrencyPKTo



While @@FETCH_STATUS = 0
BEGIN



SET @FundCashRefPKTo = NULL
SET @FundCashRefPK = null

select @FundCashRefPK = FundCashRefPK from FundClientCashRef  
where status = 2 and FundClientPK = @FundClientPK and FundPK = @FundPK 


select @FundCashRefPKTo = FundCashRefPK from FundClientCashRef  
where status = 2 and FundClientPK = @FundClientPK and FundPK = @FundPKTo 


if isnull(@TransactionType,0) = 'Redemption' 
	BEGIN

	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 2 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 2 AND status IN (1,2)
END

		
		
		INSERT INTO ClientRedemption(ClientRedemptionPK,HistoryPK,Status,Type,FeeType,NAVDate,ValueDate,PaymentDate,NAV,
		FundPK,FundClientPK,CashRefPK,BitRedemptionAll, Description,CashAmount,UnitAmount,TotalCashAmount,
		TotalUnitAmount,RedemptionFeePercent,RedemptionFeeAmount,AgentPK,AgentFeePercent,AgentFeeAmount,DepartmentPK,
		CurrencyPK,UnitPosition,BankRecipientPK,TransferType,IsBOTransaction,BitSInvest,TransactionPK,IsFrontSync,
		ReferenceSinvest,EntryUsersID,EntryTime,LastUpdate)
		
		SELECT isnull(max(ClientRedemptionPk),0) + 1,1,1,1,case when ISNULL(@FeeAmount,0) > 0 then 2 else 1 end,@TransactionDate,@TransactionDate,@PaymentDate,0,
		@FundPK,@FundClientPK,case when isnull(@FundCashRefPK,0) <> 0 then @FundCashRefPK else 1 end ,0,'Data Migration',
		ISNULL(@TotalCashAmount,0),ISNULL(@TotalUnitAmount,0),ISNULL(@TotalCashAmount,0) - ISNULL(@FeeAmount,0),
		ISNULL(@TotalUnitAmount,0),ISNULL(@FeePercent,0),ISNULL(@FeeAmount,0),ISNULL(@AgentPK,0),
		ISNULL(@AgentFeePercent,0),ISNULL(@TotalCashAmount * @AgentFeePercent/100,0),1,ISNULL(@CurrencyPk,0),0,0,case when @TotalCashAmount > 100000000 then 2 else 1 end,1,1,0,0,'',
		@UsersID,@Time,@Time from ClientRedemption


	

                            

	END
else if isnull(@TransactionType,0) = 'Switching' 
	BEGIN 


	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 1 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 2 AND status IN (1,2)
END

		
	    
		INSERT INTO ClientSwitching(ClientSwitchingPK,HistoryPK,Status,FeeTypeMode,NAVDate,ValueDate,PaymentDate,
		NAVFundFrom,NAVFundTo,FundPKFrom,FundPKTo,FundClientPK,FeeType,CashRefPKFrom,CashRefPKTo, Description,
		CashAmount,UnitAmount,TotalCashAmountFundFrom,TotalCashAmountFundTo,TotalUnitAmountFundFrom,TotalUnitAmountFundTo,
		SwitchingFeePercent,SwitchingFeeAmount,CurrencyPK,TransferType,
        BitSwitchingAll,UserSwitchingPK,TransactionPK,IsBoTransaction,BitSInvest,FeeTypeMethod,IsProcessed,IsFrontSync,
		ReferenceSinvest,AgentPK,EntryUsersID,EntryTime,LastUpdate)	
	    
		SELECT isnull(max(ClientSwitchingPk),0) + 1,1,1,case when ISNULL(@FeeAmount,0) > 0 then 2 else 1 end,@TransactionDate,@TransactionDate,@PaymentDate,0,0,
		@FundPK,@FundPKTo,@FundClientPK,ISNULL(@SwitchFeeCharge,'OUT'),case when isnull(@FundCashRefPK,0) <> 0 then @FundCashRefPK else 1 end ,
		CASE when isnull(@FundCashRefPKTo,0) <> 0 then @FundCashRefPKTo else 1 end ,'Update From SInvest',@TotalCashAmount,
		@TotalUnitAmount,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,0,
		ISNULL(@FeePercent,0) ,ISNULL(@FeeAmount,0),@CurrencyPKTo,
        case when @TotalCashAmount > 100000000 then 2 else 1 end,0,0,0,1,1,1,0,0,'',@AgentPK,@UsersID,@Time,@Time from ClientSwitching

	

	END
ELSE
if isnull(@TransactionType,0) = 'Subscription' 
	BEGIN
	
IF(ISNULL(@FundCashRefPK,0) = 0)
BEGIN
	SELECT @FundCashRefPK = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPK AND type = 1 AND status IN (1,2)
END

IF(ISNULL(@FundCashRefPKTo,0) = 0)
BEGIN
	SELECT @FundCashRefPKTo = FundCashRefPK FROM FundCashRef WHERE fundPK = @FundPKTo AND type = 1 AND status IN (1,2)
END
		
	
		INSERT INTO ClientSubscription(ClientSubscriptionPK,HistoryPK,Status,Type,FeeType,NAVDate,ValueDate,
		NAV,FundPK,FundClientPK,CashRefPK,Description,CashAmount,UnitAmount,TotalCashAmount,TotalUnitAmount,SubscriptionFeePercent,
		SubscriptionFeeAmount,AgentPK,AgentFeePercent,AgentFeeAmount,DepartmentPK,CurrencyPK,AutoDebitDate,IsBoTransaction,
		BitSinvest,BitImmediateTransaction,TransactionPK,IsFrontSync,ReferenceSinvest,EntryUsersID,EntryTime,LastUpdate)
	
		Select isnull(max(ClientSubscriptionPK),0) + 1,1,1,1,case when ISNULL(@FeeAmount,0) > 0 then 2 else 1 end,@TransactionDate,@TransactionDate,
		0,isnull(@FundPK,0),isnull(@FundClientPK,0),case when isnull(@FundCashRefPK,0) <> 0 then @FundCashRefPK else 1 end,'Data Migration',ISNULL(@TotalCashAmount,0),
		ISNULL(@TotalUnitAmount,0),ISNULL(@TotalCashAmount,0) - ISNULL(@FeeAmount,0),
		ISNULL(@TotalUnitAmount,0),ISNULL(@FeePercent,0),ISNULL(@FeeAmount,0),isnull(@AgentPK,0),isnull(@AgentFeePercent,0),isnull(@TotalCashAmount * @AgentFeePercent,0),
		1,ISNULL(@CurrencyPK,0),null,1,1,0,0,0,'',@UsersID,@Time,@Time from ClientSubscription

	

	END


Fetch next From A Into @FundPK,@FundPKTo,@FundClientPK,@AgentPK,@AgentFeePercent,@TransactionDate,@PaymentDate,@TransactionType,
@FundCode,@SellingAgentCode,@TotalCashAmount,@TotalCashAmountTo,@TotalUnitAmount,@FeePercent,@FeeAmount,@CurrencyPK,@RefNumber
,@SwitchFeeCharge,@CurrencyPKTo
END
Close A
Deallocate A     ";

                        cmd1.Parameters.AddWithValue("@UsersID", _userID);
                        cmd1.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd1.Parameters.AddWithValue("@Time", _now);
                        cmd1.Parameters.AddWithValue("@TrxDate", "07/03/19");
                        cmd1.ExecuteNonQuery();

                    }
                  _msg = "Import Transaction APERD Success";

                }

                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromUpdatePaymentSInvestSubsRedTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.DateTime");
                    dc.ColumnName = "TransactionDate";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "TransactionType";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "ReferenceNo";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Status";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "IMFeeAmendment";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "IMPaymentDateAmendment";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "SACode";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "SAName";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "IFUA";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Name";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "SID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "FundCode";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "FundName";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "IMCode";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "IMName";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CBCode";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CBName";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "FundCCY";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "AmountNominal";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "AmountUnit";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "AllUnit";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "FeeNominal";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "FeeUnit";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "FeePercent";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "TransferPath";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "PaymentCode";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BICCode";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BIMemberCode";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BankName";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "PaymentNo";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "PaymentName";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "PaymentDate";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "TransferType";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.DateTime");
                    dc.ColumnName = "InputDate";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "UploadReference";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "SAReference";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "IMStatus";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CBStatus";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CBCompletionStatus";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    using (OleDbConnection odConnection = new OleDbConnection(Tools.ConStringExcel2007(_path)))
                    {
                        odConnection.Open();
                        using (OleDbCommand odCmd = odConnection.CreateCommand())
                        {
                            // _oldfilename = nama sheet yang ada di file excel yang diimport
                            odCmd.CommandText = "SELECT * FROM [Sheet1$]";
                            using (OleDbDataReader odRdr = odCmd.ExecuteReader())
                            {
                                // start counting from index = 1 --> skipping the header (index=0)
                                for (int i = 1; i <= 1; i++)
                                {
                                    odRdr.Read();
                                }
                                do
                                {
                                    dr = dt.NewRow();
                                    //dr["TransactionType"] = odRdr[2];
                                    string _strTransactionDate = Convert.ToString(odRdr[1]);
                                    if (!string.IsNullOrEmpty(_strTransactionDate))
                                    {
                                        string _tgl = _strTransactionDate.Substring(6, 2);
                                        string _bln = _strTransactionDate.Substring(4, 2);
                                        string _thn = _strTransactionDate.Substring(0, 4);

                                        _strTransactionDate = _bln + "/" + _tgl + "/" + _thn; //Convert.ToDateTime(_strTransactionDate).ToString("MM/dd/yyyy");
                                    }

                                    string _strInputDate = Convert.ToString(odRdr[34]);
                                    if (!string.IsNullOrEmpty(_strInputDate))
                                    {
                                        string _tglInputDate = _strInputDate.Substring(6, 2);
                                        string _blnInputDate = _strInputDate.Substring(4, 2);
                                        string _thnInputDate = _strInputDate.Substring(0, 4);

                                        _strInputDate = _blnInputDate + "/" + _tglInputDate + "/" + _thnInputDate; //Convert.ToDateTime(_strTransactionDate).ToString("MM/dd/yyyy");
                                    }

                                    dr["TransactionDate"] = _strTransactionDate; //odRdr[1];
                                    dr["TransactionType"] = odRdr[2];
                                    dr["ReferenceNo"] = odRdr[3];
                                    dr["Status"] = odRdr[4];
                                    dr["IMFeeAmendment"] = odRdr[5];
                                    dr["IMPaymentDateAmendment"] = odRdr[6];
                                    dr["SACode"] = odRdr[7];
                                    dr["SAName"] = odRdr[8];
                                    dr["IFUA"] = odRdr[9];
                                    dr["Name"] = odRdr[10];
                                    dr["SID"] = odRdr[11];
                                    dr["FundCode"] = odRdr[12];
                                    dr["FundName"] = odRdr[13];
                                    dr["IMCode"] = odRdr[14];
                                    dr["IMName"] = odRdr[15];
                                    dr["CBCode"] = odRdr[16];
                                    dr["CBName"] = odRdr[17];
                                    dr["FundCCY"] = odRdr[18];
                                    dr["AmountNominal"] = Convert.ToDecimal(odRdr[19].ToString() == "" ? 0 : odRdr[19].Equals(DBNull.Value) == true ? 0 : odRdr[19]);
                                    dr["AmountUnit"] = Convert.ToDecimal(odRdr[20].ToString() == "" ? 0 : odRdr[20].Equals(DBNull.Value) == true ? 0 : odRdr[20]);
                                    dr["AllUnit"] = odRdr[21];
                                    dr["FeeNominal"] = Convert.ToDecimal(odRdr[22].ToString() == "" ? 0 : odRdr[22].Equals(DBNull.Value) == true ? 0 : odRdr[22]);
                                    dr["FeeUnit"] = Convert.ToDecimal(odRdr[23].ToString() == "" ? 0 : odRdr[23].Equals(DBNull.Value) == true ? 0 : odRdr[23]);
                                    dr["FeePercent"] = Convert.ToDecimal(odRdr[24].ToString() == "" ? 0 : odRdr[24].Equals(DBNull.Value) == true ? 0 : odRdr[24]);
                                    dr["TransferPath"] = odRdr[25];
                                    dr["PaymentCode"] = odRdr[26];
                                    dr["BICCode"] = odRdr[27];
                                    dr["BIMemberCode"] = odRdr[28];
                                    dr["BankName"] = odRdr[29];
                                    dr["PaymentNo"] = odRdr[30];
                                    dr["PaymentName"] = odRdr[31];
                                    dr["PaymentDate"] = odRdr[32];
                                    dr["TransferType"] = odRdr[33];
                                    dr["InputDate"] = _strInputDate;
                                    dr["UploadReference"] = odRdr[35];
                                    dr["SAReference"] = odRdr[36];
                                    dr["IMStatus"] = odRdr[37];
                                    dr["CBStatus"] = odRdr[38];
                                    dr["CBCompletionStatus"] = odRdr[39];


                                    if (dr["TransactionDate"].Equals(DBNull.Value) != true) { dt.Rows.Add(dr); }
                                } while (odRdr.Read());
                            }
                        }
                        odConnection.Close();
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }
        #endregion

        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            #region Laporan Manager Investasi
            if (_unitRegistryRpt.ReportName.Equals("Laporan Manager Investasi"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
----INDIVIDU
declare @yesterday date
--declare @TotalSID int
set @yesterday = dbo.FWorkingDay(@DateTo,-1)

if object_id('tempdb..#FundUnitPosition', 'u') is not null drop table #FundUnitPosition 
create table #FundUnitPosition
(
	TotalUnit NUMERIC(22,4),
	FundPK int
)
CREATE CLUSTERED INDEX indx_FundUnitPosition ON #FundUnitPosition (FundPK);

if object_id('tempdb..#CloseNAVPosition', 'u') is not null drop table #CloseNAVPosition
create table #CloseNAVPosition
(
	NAV NUMERIC(22,4),
	FundPK int
)
CREATE CLUSTERED INDEX indx_CloseNAVPosition ON #CloseNAVPosition (FundPK);

if object_id('tempdb..#JumlahIFUAPosition', 'u') is not null drop table #JumlahIFUAPosition
create table #JumlahIFUAPosition
(
	TotalIFUA int,
	FundPK int
)
CREATE CLUSTERED INDEX indx_JumlahIFUAPosition ON #JumlahIFUAPosition (FundPK);

if object_id('tempdb..#JumlahSIDPosition', 'u') is not null drop table #JumlahSIDPosition
create table #JumlahSIDPosition
(
	SID int,
	FundPK int
)
CREATE CLUSTERED INDEX indx_JumlahSIDPosition ON #JumlahSIDPosition (FundPK);

INSERT INTO #JumlahIFUAPosition
        ( TotalIFUA,FundPK)
		select COUNT (*) TotalIFUA , FundPK from FundClientPosition A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		where A.date = @yesterday and isnull(A.UnitAmount,0) != 0  and ClientCategory = 1 
		group by FundPK

INSERT INTO #JumlahSIDPosition
        ( SID,FundPK)
		select  COUNT (SID) SID,FundPK  from FundClientPosition A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		where A.date = @yesterday and isnull(A.UnitAmount,0) != 0 and ClientCategory = 1 
		group by SID,fundPK 

INSERT INTO #FundUnitPosition
        (  TotalUnit,FundPK )
		SELECT sum(isnull(UnitAmount,0)),FundPK FROM dbo.FundClientPosition A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 and ClientCategory = 1
		group by FundPK

		

INSERT INTO #CloseNAVPosition
        ( NAV,FundPK )
		SELECT case when B.CurrencyPK = 1 then A.NAV else A.Nav * isnull(H.Rate,1) end,A.FundPK FROM dbo.CloseNAV A
		left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
		left join CurrencyRate H on B.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) 
		from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.status in (1,2) and B.status in (1,2))
		WHERE A.Date = @DateTo and A.status = 2

	

select C.Name NamaReksaDana,H.DescOne TipeReksaDana,C.SInvestCode KodeReksaDana,isnull(A.TotalUnit,0) * isnull(B.NAV,0) AUMInvestorRetail,F.TotalIFUA JumlahIFUA,COUNT ( G.SID) JumlahSID,isnull(B.NAV,0) NAVperUnit, A.TotalUnit Unit  from #FundUnitPosition A
left join #CloseNAVPosition B on A.FundPK = B.FundPK
left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
left join MasterValue H on C.Type = H.Code and H.ID = 'FundType' and H.status in (1,2)
left join #JumlahIFUAPosition F on A.FundPK = F.FundPK
left join #JumlahSIDPosition G on A.FundPK = G.FundPK
group by C.Name,F.TotalIFUA,H.DescOne,B.NAV,A.TotalUnit,C.SInvestCode,A.TotalUnit,B.NAV ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanManagerInvestasi" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanManagerInvestasi" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Laporan Manager Investasi");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanManagerInvestasi> rList = new List<LaporanManagerInvestasi>();
                                        while (dr0.Read())
                                        {

                                            LaporanManagerInvestasi rSingle = new LaporanManagerInvestasi();
                                            rSingle.KodeReksaDana = Convert.ToString(dr0["KodeReksaDana"]);
                                            rSingle.NamaReksaDana = Convert.ToString(dr0["NamaReksaDana"]);
                                            rSingle.TipeReksaDana = Convert.ToString(dr0["TipeReksaDana"]);
                                            rSingle.JumlahIFUA = Convert.ToDecimal(dr0["JumlahIFUA"]);
                                            rSingle.JumlahSID = Convert.ToDecimal(dr0["JumlahSID"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.NAVperUnit = Convert.ToDecimal(dr0["NAVperUnit"]);
                                            rSingle.AUMInvestorRetail = Convert.ToDecimal(dr0["AUMInvestorRetail"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "DATA LAPORAN KEGIATAN MANAJER INVESTASI (INDIVIDU)";
                                        worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "As Of: " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 4;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Value = "Kode Reksa Dana";
                                        worksheet.Cells[incRowExcel, 3].Value = "Nama Reksa Dana";
                                        worksheet.Cells[incRowExcel, 4].Value = "Tipe Reksa Dana";
                                        worksheet.Cells[incRowExcel, 5].Value = "Jumlah IFUA";
                                        worksheet.Cells[incRowExcel, 6].Value = "Jumlah SID";
                                        worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                        worksheet.Cells[incRowExcel, 8].Value = "NAV/Unit";
                                        worksheet.Cells[incRowExcel, 9].Value = "AUM Investor Retail";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.KodeReksaDana;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NamaReksaDana;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TipeReksaDana;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.JumlahIFUA;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.JumlahSID;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVperUnit;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.AUMInvestorRetail;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }


                                            worksheet.Cells[incRowExcel, 3].Value = "Total AUM Investor Retail";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;



                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd4 = DbCon.CreateCommand())
                                        {


                                            cmd4.CommandText = @"
                                        --INSTITUSI (Query 1)
declare @yesterday date
declare @TotalAUM numeric(22,8)
set @yesterday = dbo.FWorkingDay(@DateTo,-1)

if object_id('tempdb..#FundUnitPosition', 'u') is not null drop table #FundUnitPosition 

create table #FundUnitPosition
(
	TotalUnit NUMERIC(22,4),
	FundClientPK int,
	FundPK int
)
CREATE CLUSTERED INDEX indx_FundUnitPosition ON #FundUnitPosition (FundPK);

if object_id('tempdb..#CloseNAVPosition', 'u') is not null drop table #CloseNAVPosition
create table #CloseNAVPosition
(
	NAV NUMERIC(22,4),
	FundPK int
)
CREATE CLUSTERED INDEX indx_CloseNAVPosition ON #CloseNAVPosition (FundPK);
--drop table #FundUnitPosition
INSERT INTO #FundUnitPosition
        (  TotalUnit,FundClientPK,FundPK )
		SELECT sum(isnull(UnitAmount,0)),A.FundClientPK,FundPK FROM dbo.FundClientPosition A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 and ClientCategory = 2 and B.SACode != ''
		group by A.FundClientPK,FundPK


INSERT INTO #CloseNAVPosition
        ( NAV,FundPK )
		SELECT case when B.CurrencyPK = 1 then A.NAV else A.Nav * isnull(H.Rate,1) end,A.FundPK FROM dbo.CloseNAV A
		left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
		left join CurrencyRate H on B.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) 
		from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.status in (1,2) and B.status in (1,2))
		WHERE A.Date = @DateTo and A.status = 2

select @TotalAUM = sum(isnull(A.TotalUnit,0) * isnull(B.NAV,0)) from #FundUnitPosition A
left join #CloseNAVPosition B on A.FundPK = B.FundPK

select isnull(D.Name,'') NamaPerusahaan,isnull(C.SInvestCode,'') KodeReksaDanaDetail,isnull(C.name,'') NamaReksaDanaDetail,isnull(H.DescOne,'') TipePerusahaanDetail,sum(isnull(A.TotalUnit,0) * isnull(B.NAV,0)) AUMDetail,case when D.InternalCategoryPK = 1 then 'YES' else 'NO' end Affiliasi,sum(isnull(A.TotalUnit,0) * isnull(B.NAV,0))/@TotalAUM Persentasi,isnull(J.Name,'') Marketing from #FundUnitPosition A
left join #CloseNAVPosition B on A.FundPK = B.FundPK
left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
left join MasterValue H on D.Tipe = H.Code and H.ID = 'CompanyType' and H.status in (1,2)
left join InternalCategory I on D.InternalCategoryPK = I.InternalCategoryPK and I.status in (1,2)
left join Agent J on D.SellingAgentPK = J.AgentPK and J.status in (1,2)
group by D.NamaPerusahaan,C.SInvestCode,C.name,H.DescOne,D.Name,D.InternalCategoryPK,J.Name

                                        ";

                                            cmd4.CommandTimeout = 0;
                                            cmd4.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateFrom);

                                            using (SqlDataReader dr1 = cmd4.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<LaporanManagerInvestasi> rList1 = new List<LaporanManagerInvestasi>();
                                                    while (dr1.Read())
                                                    {

                                                        LaporanManagerInvestasi rSingle1 = new LaporanManagerInvestasi();
                                                        rSingle1.NamaPerusahaan = Convert.ToString(dr1["NamaPerusahaan"]);
                                                        rSingle1.KodeReksaDanaDetail = Convert.ToString(dr1["KodeReksaDanaDetail"]);
                                                        rSingle1.NamaReksaDanaDetail = Convert.ToString(dr1["NamaReksaDanaDetail"]);
                                                        rSingle1.TipePerusahaanDetail = Convert.ToString(dr1["TipePerusahaanDetail"]);
                                                        rSingle1.AUMDetail = Convert.ToDecimal(dr1["AUMDetail"]);
                                                        rSingle1.Affiliasi = Convert.ToString(dr1["Affiliasi"]);
                                                        rSingle1.Percentage = Convert.ToDecimal(dr1["Persentasi"]);
                                                        rSingle1.Marketing = Convert.ToString(dr1["Marketing"]);



                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = incRowExcel + 3;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = "APERD";
                                                    incRowExcel = incRowExcel + 2;
                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Nama Perusahaan";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Kode Reksa Dana";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "Nama Reksa Dana";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Tipe Perusahaan";
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "AUM";
                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Affiliasi";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 8].Value = "Percentage";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 9].Value = "Marketing";
                                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;






                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.NamaPerusahaan;
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.KodeReksaDanaDetail;
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.NamaReksaDanaDetail;
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.TipePerusahaanDetail;
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail1.AUMDetail;
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Affiliasi;
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail1.Percentage;
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail1.Marketing;
                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }


                                                        worksheet.Cells[incRowExcel, 2].Value = "Total AUM Institusi";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                        incRowExcel = incRowExcel + 2;



                                                    }



                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    string _rangeDetail = "A:T";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 20];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).AutoFit();
                                                    //worksheet.Column(2).Width = 21;
                                                    worksheet.Column(3).AutoFit();
                                                    //worksheet.Column(3).Width = 25;
                                                    worksheet.Column(4).AutoFit();
                                                    //worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).Width = 21;
                                                    worksheet.Column(7).Width = 21;
                                                    worksheet.Column(8).Width = 21;
                                                    worksheet.Column(9).Width = 21;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Laporan Manager Investasi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }






                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel++;

                                        //incRowExcel++;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).AutoFit();
                                        //worksheet.Column(2).Width = 21;
                                        //worksheet.Column(3).Width = 25;
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        //worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 40;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Laporan Manager Investasi";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        //Institusi
                                        worksheet = package.Workbook.Worksheets.Add("Institusi");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd1 = DbCon.CreateCommand())
                                        {


                                            cmd1.CommandText = @"
                                        --INSTITUSI (Query 1)
declare @yesterday date
declare @TotalAUM numeric(22,8)
set @yesterday = dbo.FWorkingDay(@DateTo,-1)

if object_id('tempdb..#FundUnitPosition', 'u') is not null drop table #FundUnitPosition 

create table #FundUnitPosition
(
	TotalUnit NUMERIC(22,4),
	FundClientPK int,
	FundPK int
)
CREATE CLUSTERED INDEX indx_FundUnitPosition ON #FundUnitPosition (FundPK);

if object_id('tempdb..#CloseNAVPosition', 'u') is not null drop table #CloseNAVPosition
create table #CloseNAVPosition
(
	NAV NUMERIC(22,4),
	FundPK int
)
CREATE CLUSTERED INDEX indx_CloseNAVPosition ON #CloseNAVPosition (FundPK);
--drop table #FundUnitPosition
INSERT INTO #FundUnitPosition
        (  TotalUnit,FundClientPK,FundPK )
		SELECT sum(isnull(UnitAmount,0)),A.FundClientPK,FundPK FROM dbo.FundClientPosition A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 and ClientCategory = 2 and B.SACode = ''
		group by A.FundClientPK,FundPK


INSERT INTO #CloseNAVPosition
        ( NAV,FundPK )
		SELECT case when B.CurrencyPK = 1 then A.NAV else A.Nav * isnull(H.Rate,1) end,A.FundPK FROM dbo.CloseNAV A
		left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
		left join CurrencyRate H on B.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) 
		from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.status in (1,2) and B.status in (1,2))
		WHERE A.Date = @DateTo and A.status = 2

select @TotalAUM = sum(isnull(A.TotalUnit,0) * isnull(B.NAV,0)) from #FundUnitPosition A
left join #CloseNAVPosition B on A.FundPK = B.FundPK

select isnull(D.Name,'') NamaPerusahaan,isnull(C.SInvestCode,'') KodeReksaDanaDetail,isnull(C.name,'') NamaReksaDanaDetail,isnull(H.DescOne,'') TipePerusahaanDetail,sum(isnull(A.TotalUnit,0) * isnull(B.NAV,0)) AUMDetail,case when D.InternalCategoryPK = 1 then 'YES' else 'NO' end Affiliasi,sum(isnull(A.TotalUnit,0) * isnull(B.NAV,0))/@TotalAUM Persentasi,isnull(J.Name,'') Marketing from #FundUnitPosition A
left join #CloseNAVPosition B on A.FundPK = B.FundPK
left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
left join MasterValue H on D.Tipe = H.Code and H.ID = 'CompanyType' and H.status in (1,2)
left join InternalCategory I on D.InternalCategoryPK = I.InternalCategoryPK and I.status in (1,2)
left join Agent J on D.SellingAgentPK = J.AgentPK and J.status in (1,2)
group by D.NamaPerusahaan,C.SInvestCode,C.name,H.DescOne,D.Name,D.InternalCategoryPK,J.Name

                                        ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateFrom);

                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<LaporanManagerInvestasi> rList1 = new List<LaporanManagerInvestasi>();
                                                    while (dr1.Read())
                                                    {

                                                        LaporanManagerInvestasi rSingle1 = new LaporanManagerInvestasi();
                                                        rSingle1.NamaPerusahaan = Convert.ToString(dr1["NamaPerusahaan"]);
                                                        rSingle1.KodeReksaDanaDetail = Convert.ToString(dr1["KodeReksaDanaDetail"]);
                                                        rSingle1.NamaReksaDanaDetail = Convert.ToString(dr1["NamaReksaDanaDetail"]);
                                                        rSingle1.TipePerusahaanDetail = Convert.ToString(dr1["TipePerusahaanDetail"]);
                                                        rSingle1.AUMDetail = Convert.ToDecimal(dr1["AUMDetail"]);
                                                        rSingle1.Affiliasi = Convert.ToString(dr1["Affiliasi"]);
                                                        rSingle1.Percentage = Convert.ToDecimal(dr1["Persentasi"]);
                                                        rSingle1.Marketing = Convert.ToString(dr1["Marketing"]);



                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = "DATA LAPORAN KEGIATAN MANAGER INVESTASI (INSTITUSI)";
                                                    worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = "As Of:" + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    incRowExcel = incRowExcel + 2;
                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Nama Perusahaan";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Kode Reksa Dana";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "Nama Reksa Dana";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Tipe Perusahaan";
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "AUM";
                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Affiliasi";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 8].Value = "Percentage";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 9].Value = "Marketing";
                                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;






                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.NamaPerusahaan;
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.KodeReksaDanaDetail;
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.NamaReksaDanaDetail;
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.TipePerusahaanDetail;
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail1.AUMDetail;
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Affiliasi;
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail1.Percentage;
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail1.Marketing;
                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }


                                                        worksheet.Cells[incRowExcel, 2].Value = "Total AUM Institusi";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                        incRowExcel = incRowExcel + 2;



                                                    }





                                                    string _rangeDetail = "A:I";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 12;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                                    worksheet.Column(1).Width = 21;
                                                    worksheet.Column(2).AutoFit();
                                                    //worksheet.Column(2).Width = 21;
                                                    worksheet.Column(3).Width = 26;
                                                    //worksheet.Column(3).Width = 25;
                                                    worksheet.Column(4).AutoFit();
                                                    //worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).Width = 25;
                                                    worksheet.Column(7).Width = 21;
                                                    worksheet.Column(8).Width = 21;
                                                    worksheet.Column(9).AutoFit();


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Laporan Manager Investasi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd2 = DbCon.CreateCommand())
                                        {


                                            cmd2.CommandText = @"
                                           ----------INSTITUSI (Query 2)
declare @yesterday date
--declare @TotalSID int
set @yesterday = dbo.FWorkingDay(@DateTo,-1)

if object_id('tempdb..#FundUnitPosition', 'u') is not null drop table #FundUnitPosition 

create table #FundUnitPosition
(
	TotalUnit NUMERIC(22,4),
	FundClientPK int,
	FundPK int
)
CREATE CLUSTERED INDEX indx_FundUnitPosition ON #FundUnitPosition (FundPK);

if object_id('tempdb..#CloseNAVPosition', 'u') is not null drop table #CloseNAVPosition
create table #CloseNAVPosition
(
	NAV NUMERIC(22,4),
	FundPK int
)
CREATE CLUSTERED INDEX indx_CloseNAVPosition ON #CloseNAVPosition (FundPK);

INSERT INTO #FundUnitPosition
        (  TotalUnit,FundClientPK,FundPK )
		SELECT sum(isnull(UnitAmount,0)),A.FundClientPK,FundPK FROM dbo.FundClientPosition A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 and ClientCategory = 2 and B.SACode = ''
		group by A.FundClientPK,FundPK


INSERT INTO #CloseNAVPosition
        ( NAV,FundPK )
		SELECT case when B.CurrencyPK = 1 then A.NAV else A.Nav * isnull(H.Rate,1) end,A.FundPK FROM dbo.CloseNAV A
		left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
		left join CurrencyRate H on B.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) 
		from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.status in (1,2) and B.status in (1,2))
		WHERE A.Date = @DateTo and A.status = 2

select isnull(H.DescOne,'') TipePerusahaanData,sum(isnull(A.TotalUnit,0) * isnull(B.NAV,0)) AUMData from #FundUnitPosition A
left join #CloseNAVPosition B on A.FundPK = B.FundPK
left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
left join MasterValue H on D.Tipe = H.Code and H.ID = 'CompanyType' and H.status in (1,2)
group by H.DescOne                         
";

                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateFrom);

                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                            {
                                                if (!dr2.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<LaporanManagerInvestasi> rList2 = new List<LaporanManagerInvestasi>();
                                                    while (dr2.Read())
                                                    {

                                                        LaporanManagerInvestasi rSingle2 = new LaporanManagerInvestasi();
                                                        rSingle2.TipePerusahaanData = Convert.ToString(dr2["TipePerusahaanData"]);
                                                        rSingle2.AUMData = Convert.ToDecimal(dr2["AUMData"]);


                                                        rList2.Add(rSingle2);

                                                    }



                                                    var GroupByReference2 =
                                                    from r in rList2
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel++;

                                                    foreach (var rsHeader2 in GroupByReference2)
                                                    {
                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Data AUM Investor Institusi Berdasarkan Tipe Perusahaan";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Tipe Perusahaan";
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "AUM";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;





                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {

                                                            //incRowExcel++;

                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.TipePerusahaanData;
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.AUMData;
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }


                                                        worksheet.Cells[incRowExcel, 1].Value = "Total AUM Institusi";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                                        //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        //worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                        incRowExcel = incRowExcel + 2;



                                                    }



                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    string _rangeDetail = "A:I";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 12;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                                    //worksheet.Column(1).Width = 21;
                                                    //worksheet.Column(2).Width = 21;
                                                    worksheet.Column(1).Width = 21;
                                                    worksheet.Column(2).AutoFit();
                                                    //worksheet.Column(2).Width = 21;
                                                    worksheet.Column(3).Width = 26;
                                                    //worksheet.Column(3).Width = 25;
                                                    worksheet.Column(4).AutoFit();
                                                    //worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).Width = 25;
                                                    worksheet.Column(7).Width = 21;
                                                    worksheet.Column(8).Width = 21;
                                                    worksheet.Column(9).AutoFit();


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Laporan Manager Investasi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Data Radisi
            if (_unitRegistryRpt.ReportName.Equals("Data Radisi"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {



                            cmd.CommandText = @"
                            SELECT D.DescOne JenisReksadana,B.Name AperdName,SUM(ISNULL(A.SubsAmount,0) +  ISNULL(A.SwitchInAmount,0)) Subscription
                            ,SUM(ISNULL(A.RedempAmount,0) +  ISNULL(A.SwitchOutAmount,0)) Redemption
                            ,SUM(ISNULL(A.SubsAmount,0) +  ISNULL(A.SwitchInAmount,0) - ISNULL(A.RedempAmount,0) -  ISNULL(A.SwitchOutAmount,0)) NET
                            ,SUM(ISNULL(A.MFee,0)) ManagementFee
                            ,isnull(E.AUM,0) AUM
                            FROM dbo.DailyDataForCommissionRptNew A (NOLOCK)
                            LEFT JOIN FundClient B (NOLOCK) ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
                            LEFT JOIN Fund C (NOLOCK) ON A.FundPK = C.FundPK AND C.status IN (1,2) 
                            LEFT JOIN dbo.MasterValue D (NOLOCK) ON C.Type = D.Code AND D.id = 'FundType' AND D.status IN (1,2)
                            LEFT JOIN
                            (
	                            SELECT C.Type,B.FundClientPK,SUM(ISNULL(A.AUM,0)) AUM
	                            FROM dbo.DailyDataForCommissionRptNew A (NOLOCK)
	                            LEFT JOIN FundClient B (NOLOCK) ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	                            LEFT JOIN Fund C (NOLOCK) ON A.FundPK = C.FundPK AND C.status IN (1,2) 
	                            WHERE B.SACode <> ''
	                            AND MFeeDate = @DateTo
	                            GROUP BY C.Type,B.FundClientPK
                            )E ON C.Type = E.Type AND A.FundClientPK = E.FundClientPK
                            WHERE B.SACode <> ''
                            AND MFeeDate BETWEEN @DateFrom AND @DateTo

                            GROUP BY D.DescOne,B.Name,E.AUM
                            ORDER BY B.name ASC
                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);




                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DataRadisi" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DataRadisi" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Rekap");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<Rekap> rList = new List<Rekap>();
                                        while (dr0.Read())
                                        {

                                            Rekap rSingle = new Rekap();
                                            rSingle.FundClientName = Convert.ToString(dr0["AperdName"]);
                                            rSingle.JenisReksaDana = Convert.ToString(dr0["JenisReksaDana"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Subscription = Convert.ToDecimal(dr0["Subscription"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["Redemption"]);
                                            rSingle.Net = Convert.ToDecimal(dr0["NET"]);
                                            rSingle.ManagementFee = Convert.ToDecimal(dr0["ManagementFee"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                        from r in rList
                                        orderby r.FundClientName ascending
                                        group r by new { r.FundClientName } into rGroup
                                        select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Resume Distribusi AUM,Transaksi dan Revenue APERD ";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :" + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To      :" + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        foreach (var rsHeader in GroupByReference)
                                        {



                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundClientName;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Jenis Reksa Dana";
                                            worksheet.Cells[incRowExcel, 2].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 4].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Value = "Net";
                                            worksheet.Cells[incRowExcel, 6].Value = "Management Fee (Net)";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            //Row B = 3 fungsinya untuk bikin garis
                                            int RowB = incRowExcel;
                                            //int RowG = incRowExcel + 1;
                                            //string _range = "";
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER



                                                //incRowExcel++;
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.JenisReksaDana;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Subscription;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Redemption;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Net;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.ManagementFee;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;





                                            }
                                            worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 2].Calculate();

                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Calculate();

                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NOA";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                            incRowExcel = incRowExcel + 2;



                                        }

                                        worksheet.Row(incRowExcel).PageBreak = true;

                                        string _rangeDetail = "A:F";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();

                                        //worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Data Radisi";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        //nett_transaksi
                                        worksheet = package.Workbook.Worksheets.Add("nett_transaksi");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd1 = DbCon.CreateCommand())
                                        {


                                            cmd1.CommandText = @"
SELECT UPPER(A.FundName) FundName,SUM(ISNULL(A.SUBSCRIPTION,0)) SUBSCRIPTION ,SUM(ISNULL(A.REDEMPTION,0)) REDEMPTION 
,SUM(ISNULL(A.SUBSCRIPTION,0)) - SUM(ISNULL(A.REDEMPTION,0)) NET
FROM (
	SELECT B.Name FundName, ISNULL(A.TotalCashAmount,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSubscription A (NOLOCK)
	LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.Status in (1,2)
	WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	AND A.NAVDate BETWEEN @DateFrom AND @DateTo

	UNION ALL

	SELECT B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.TotalCashAmount,0) REDEMPTION FROM dbo.ClientRedemption A (NOLOCK)
	LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.Status in (1,2)
	WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	AND A.NAVDate BETWEEN @DateFrom AND @DateTo

	UNION ALL

	SELECT B.Name FundName, ISNULL(A.TotalCashAmountFundTo,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	LEFT JOIN Fund B (NOLOCK) ON A.FundPKTo = B.FundPK and B.Status in (1,2)
	WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	AND A.NAVDate BETWEEN @DateFrom AND @DateTo


	UNION ALL

	SELECT B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	LEFT JOIN Fund B (NOLOCK) ON A.FundPKFrom = B.FundPK and B.Status in (1,2)
	WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	AND A.NAVDate BETWEEN @DateFrom AND @DateTo
)A
GROUP BY A.FundName
ORDER BY A.FundName ASC
                                ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<Net_Transaksi> rList1 = new List<Net_Transaksi>();
                                                    while (dr1.Read())
                                                    {

                                                        Net_Transaksi rSingle1 = new Net_Transaksi();
                                                        rSingle1.NamaReksaDana = Convert.ToString(dr1["FundName"]);
                                                        rSingle1.Subscription = Convert.ToDecimal(dr1["SUBSCRIPTION"]);
                                                        rSingle1.Redemption = Convert.ToDecimal(dr1["REDEMPTION"]);
                                                        rSingle1.NetTransaksi = Convert.ToDecimal(dr1["NET"]);


                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;

                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Date To      :";
                                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Rekap Net Transaksi Berdasarkan Produk";


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 2].Value = "Nama Reksa Dana";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "Redemption";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Net Transaksi";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;




                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.NamaReksaDana;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Subscription;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.Redemption;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.NetTransaksi;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }
                                                        worksheet.Cells[incRowExcel, 2].Value = "NETT SUBSCRIPTION";
                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        incRowExcel = incRowExcel + 2;



                                                    }

                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    _rangeDetail = "A:E";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).Width = 21;
                                                    worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Data Radisi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }
                                        //nett_transaksi_INSTITUSI
                                        worksheet = package.Workbook.Worksheets.Add("nett_transaksi_INSTITUSI");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd2 = DbCon.CreateCommand())
                                        {


                                            cmd2.CommandText = @"
SELECT UPPER(A.ClientName) ClientName,UPPER(A.FundName) FundName,SUM(ISNULL(A.SUBSCRIPTION,0)) SUBSCRIPTION ,SUM(ISNULL(A.REDEMPTION,0)) REDEMPTION 
,SUM(ISNULL(A.SUBSCRIPTION,0)) - SUM(ISNULL(A.REDEMPTION,0)) NET
FROM (
	SELECT C.Name ClientName,B.Name FundName, ISNULL(A.TotalCashAmount,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSubscription A (NOLOCK)
	LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.Status in (1,2)
	LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	AND C.ClientCategory = 2

	UNION ALL

	SELECT C.Name ClientName,B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientRedemption A (NOLOCK)
	LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.Status in (1,2)
	LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	AND C.ClientCategory = 2

	UNION ALL

	SELECT C.Name ClientName,B.Name FundName, ISNULL(A.TotalCashAmountFundTo,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	LEFT JOIN Fund B (NOLOCK) ON A.FundPKTo = B.FundPK and B.Status in (1,2)
	LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	AND C.ClientCategory = 2


	UNION ALL

	SELECT C.Name ClientName,B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	LEFT JOIN Fund B (NOLOCK) ON A.FundPKFrom = B.FundPK and B.Status in (1,2)
	LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	AND C.ClientCategory = 2
)A
GROUP BY A.FundName,A.ClientName
ORDER BY A.ClientName ASC
                                ";

                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                            {
                                                if (!dr2.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<Net_Transaksi_INSTITUSI> rList2 = new List<Net_Transaksi_INSTITUSI>();
                                                    while (dr2.Read())
                                                    {

                                                        Net_Transaksi_INSTITUSI rSingle2 = new Net_Transaksi_INSTITUSI();
                                                        rSingle2.NamaInvestor = Convert.ToString(dr2["ClientName"]);
                                                        rSingle2.NamaReksaDana = Convert.ToString(dr2["FundName"]);
                                                        rSingle2.Subscription = Convert.ToDecimal(dr2["SUBSCRIPTION"]);
                                                        rSingle2.Redemption = Convert.ToDecimal(dr2["REDEMPTION"]);
                                                        rSingle2.NetTransaksi = Convert.ToDecimal(dr2["NET"]);


                                                        rList2.Add(rSingle2);

                                                    }



                                                    var GroupByReference2 =
                                                    from r in rList2
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;

                                                    foreach (var rsHeader2 in GroupByReference2)
                                                    {
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Date To      :";
                                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Rekap Net Transaksi Berdasarkan Investor";


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Nama Investor";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Nama Reksa Dana";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "Subscription";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "Net Transaksi";
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail2.NamaInvestor;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.NamaReksaDana;
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail2.Subscription;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail2.Redemption;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail2.NetTransaksi;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }
                                                        worksheet.Cells[incRowExcel, 2].Value = "NETT SUBSCRIPTION";
                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        incRowExcel = incRowExcel + 2;



                                                    }

                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    _rangeDetail = "A:F";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).Width = 21;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Data Radisi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }
                                        //TOP 5
                                        worksheet = package.Workbook.Worksheets.Add("TOP 5");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd3 = DbCon.CreateCommand())
                                        {


                                            cmd3.CommandText = @"
                                        SELECT TOP 5 UPPER(A.ClientName) ClientName,UPPER(A.FundName) FundName,SUM(ISNULL(A.SUBSCRIPTION,0)) SUBSCRIPTION ,SUM(ISNULL(A.REDEMPTION,0)) REDEMPTION 
                                        ,SUM(ISNULL(A.SUBSCRIPTION,0)) - SUM(ISNULL(A.REDEMPTION,0)) NET
                                        FROM (
	                                        SELECT C.Name ClientName,B.Name FundName, ISNULL(A.TotalCashAmount,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSubscription A (NOLOCK)
	                                        LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK
	                                        LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                        WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                        AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                        AND C.ClientCategory = 2

	                                        UNION ALL

	                                        SELECT C.Name ClientName,B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientRedemption A (NOLOCK)
	                                        LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK
	                                        LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                        WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                        AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                        AND C.ClientCategory = 2

	                                        UNION ALL

	                                        SELECT C.Name ClientName,B.Name FundName, ISNULL(A.TotalCashAmountFundTo,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	                                        LEFT JOIN Fund B (NOLOCK) ON A.FundPKTo = B.FundPK
	                                        LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                        WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                        AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                        AND C.ClientCategory = 2


	                                        UNION ALL

	                                        SELECT C.Name ClientName,B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	                                        LEFT JOIN Fund B (NOLOCK) ON A.FundPKFrom = B.FundPK
	                                        LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                        WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                        AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                        AND C.ClientCategory = 2
                                        )A
                                        GROUP BY A.FundName,A.ClientName
                                        ORDER BY NET DESC


                                        ";

                                            cmd3.CommandTimeout = 0;
                                            cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                            {
                                                if (!dr3.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<TOP5> rList3 = new List<TOP5>();
                                                    while (dr3.Read())
                                                    {

                                                        TOP5 rSingle3 = new TOP5();
                                                        rSingle3.SubsInvestorName = Convert.ToString(dr3["ClientName"]);
                                                        rSingle3.SubsFundName = Convert.ToString(dr3["FundName"]);
                                                        rSingle3.SubsSubscription = Convert.ToDecimal(dr3["SUBSCRIPTION"]);
                                                        rSingle3.SubsRedemption = Convert.ToDecimal(dr3["REDEMPTION"]);
                                                        rSingle3.SubsNetTransaksi = Convert.ToDecimal(dr3["NET"]);



                                                        rList3.Add(rSingle3);

                                                    }



                                                    var GroupByReference3 =
                                                    from r in rList3
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Date To      :";
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                                    incRowExcel++;
                                                    foreach (var rsHeader3 in GroupByReference3)
                                                    {
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = "TOP 5 Nett Subscription Investor Institusi preiode Juli 2019";


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Investor Name";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Fund Name";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "Subscription";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "Net Transaksi";
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;




                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail3.SubsInvestorName;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail3.SubsFundName;
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail3.SubsSubscription;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail3.SubsRedemption;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail3.SubsNetTransaksi;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }



                                                        incRowExcel = incRowExcel + 2;



                                                    }




                                                    _rangeDetail = "A:F";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).Width = 21;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Data Radisi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd4 = DbCon.CreateCommand())
                                        {


                                            cmd4.CommandText = @"
                                            SELECT TOP 5 UPPER(A.ClientName) ClientName,UPPER(A.FundName) FundName,SUM(ISNULL(A.SUBSCRIPTION,0)) SUBSCRIPTION ,SUM(ISNULL(A.REDEMPTION,0)) REDEMPTION 
                                            ,SUM(ISNULL(A.SUBSCRIPTION,0)) - SUM(ISNULL(A.REDEMPTION,0)) NET
                                            FROM (
	                                            SELECT C.Name ClientName,B.Name FundName, ISNULL(A.TotalCashAmount,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSubscription A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK
	                                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                            AND C.ClientCategory = 2

	                                            UNION ALL

	                                            SELECT C.Name ClientName,B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientRedemption A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK
	                                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                            AND C.ClientCategory = 2

	                                            UNION ALL

	                                            SELECT C.Name ClientName,B.Name FundName, ISNULL(A.TotalCashAmountFundTo,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPKTo = B.FundPK
	                                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                            AND C.ClientCategory = 2


	                                            UNION ALL

	                                            SELECT C.Name ClientName,B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPKFrom = B.FundPK
	                                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                            AND C.ClientCategory = 2
                                            )A
                                            GROUP BY A.FundName,A.ClientName
                                            ORDER BY NET asc
                                            ";

                                            cmd4.CommandTimeout = 0;
                                            cmd4.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd4.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                            {
                                                if (!dr4.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<TOP5> rList4 = new List<TOP5>();
                                                    while (dr4.Read())
                                                    {

                                                        TOP5 rSingle4 = new TOP5();
                                                        rSingle4.RedempInvestorName = Convert.ToString(dr4["ClientName"]);
                                                        rSingle4.RedempFundName = Convert.ToString(dr4["FundName"]);
                                                        rSingle4.RedempSubscription = Convert.ToDecimal(dr4["SUBSCRIPTION"]);
                                                        rSingle4.RedempRedemption = Convert.ToDecimal(dr4["REDEMPTION"]);
                                                        rSingle4.RedempNetTransaksi = Convert.ToDecimal(dr4["NET"]);


                                                        rList4.Add(rSingle4);

                                                    }



                                                    var GroupByReference4 =
                                                    from r in rList4
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 14;

                                                    foreach (var rsHeader4 in GroupByReference4)
                                                    {

                                                        worksheet.Cells[incRowExcel, 1].Value = "TOP 5 Nett Redemption Investor Institusi preiode Juli 2019";


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Investor Name";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Fund Name";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "Subscription";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "Net Transaksi";
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;




                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.RedempInvestorName;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail4.RedempFundName;
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail4.RedempSubscription;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail4.RedempRedemption;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail4.RedempNetTransaksi;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }



                                                        incRowExcel = incRowExcel + 2;



                                                    }



                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    _rangeDetail = "A:F";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit(); ;
                                                    worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).Width = 21;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Data Radisi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }
                                        //TOP 20
                                        worksheet = package.Workbook.Worksheets.Add("TOP 20");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd5 = DbCon.CreateCommand())
                                        {


                                            cmd5.CommandText = @"
                                            SELECT TOP 20 NAVDate, C.Name ClientName,B.Name FundName
                                            ,ISNULL(D.Name,'') AgentName
                                            ,ISNULL(E.DescOne,'') FundType
                                            ,ISNULL(A.TotalCashAmount,0) SUBSCRIPTION FROM dbo.ClientSubscription A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK
	                                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                            LEFT JOIN Agent D (NOLOCK) ON C.SellingAgentPK = D.AgentPK AND D.status IN (1,2)
	                                            LEFT JOIN dbo.MasterValue E (NOLOCK) ON B.Type = E.Code AND E.ID = 'FundType' AND E.status IN (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                            ORDER BY SUBSCRIPTION desc

                                            ";

                                            cmd5.CommandTimeout = 0;
                                            cmd5.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd5.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                            {
                                                if (!dr5.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<TOP20> rList5 = new List<TOP20>();
                                                    while (dr5.Read())
                                                    {

                                                        TOP20 rSingle5 = new TOP20();
                                                        rSingle5.SubsTransactionDate = Convert.ToDateTime(dr5["NAVDate"]);
                                                        rSingle5.SubsIFUAName = Convert.ToString(dr5["ClientName"]);
                                                        rSingle5.SubsFundName = Convert.ToString(dr5["FundName"]);
                                                        rSingle5.SubsSales = Convert.ToString(dr5["AgentName"]);
                                                        rSingle5.SubsFundType = Convert.ToString(dr5["FundType"]);
                                                        rSingle5.SubsNominal = Convert.ToDecimal(dr5["SUBSCRIPTION"]);



                                                        rList5.Add(rSingle5);

                                                    }



                                                    var GroupByReference5 =
                                                    from r in rList5
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Date To      :";
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                                    incRowExcel++;
                                                    foreach (var rsHeader5 in GroupByReference5)
                                                    {
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = "REKAP TRANSAKSI SUBSCRIPTION 20 BESAR";


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Transaction Date";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Investor Fund Unit A/C Name";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "FundName";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Sales";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Nominal";
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;



                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail5.SubsTransactionDate;
                                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail5.SubsIFUAName;
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail5.SubsFundName;
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail5.SubsSales;
                                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail5.SubsFundType;
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail5.SubsNominal;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }


                                                        worksheet.Cells[incRowExcel, 2].Value = "Total Subscription";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                        incRowExcel = incRowExcel + 2;



                                                    }




                                                    _rangeDetail = "A:G";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).Width = 21;
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).Width = 21;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Data Radisi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd6 = DbCon.CreateCommand())
                                        {


                                            cmd6.CommandText = @"
                                            SELECT TOP 20 NAVDate, C.Name ClientName,B.Name FundName
                                            ,ISNULL(D.Name,'') AgentName
                                            ,ISNULL(E.DescOne,'') FundType
                                            ,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientRedemption A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK
	                                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                                            LEFT JOIN Agent D (NOLOCK) ON C.SellingAgentPK = D.AgentPK AND D.status IN (1,2)
	                                            LEFT JOIN dbo.MasterValue E (NOLOCK) ON B.Type = E.Code AND E.ID = 'FundType' AND E.status IN (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo
	                                            ORDER BY REDEMPTION desc
                                            ";

                                            cmd6.CommandTimeout = 0;
                                            cmd6.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd6.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr6 = cmd6.ExecuteReader())
                                            {
                                                if (!dr6.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<TOP20> rList6 = new List<TOP20>();
                                                    while (dr6.Read())
                                                    {

                                                        TOP20 rSingle6 = new TOP20();
                                                        rSingle6.RedempTransactionDate = Convert.ToDateTime(dr6["NAVDate"]);
                                                        rSingle6.RedempIFUAName = Convert.ToString(dr6["ClientName"]);
                                                        rSingle6.RedempFundName = Convert.ToString(dr6["FundName"]);
                                                        rSingle6.RedempSales = Convert.ToString(dr6["AgentName"]);
                                                        rSingle6.RedempFundType = Convert.ToString(dr6["FundType"]);
                                                        rSingle6.RedempNominal = Convert.ToDecimal(dr6["REDEMPTION"]);



                                                        rList6.Add(rSingle6);

                                                    }



                                                    var GroupByReference6 =
                                                    from r in rList6
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 29;
                                                    incRowExcel++;
                                                    foreach (var rsHeader6 in GroupByReference6)
                                                    {
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = "REKAP TRANSAKSI REDEMPTION 20 BESAR";


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Transaction Date";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Investor Fund Unit A/C Name";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "FundName";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Sales";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Nominal";
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;




                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail6 in rsHeader6)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail6.RedempTransactionDate;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail6.RedempIFUAName;
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail6.RedempFundName;
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail6.RedempSales;
                                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail6.RedempFundType;
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail6.RedempNominal;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }


                                                        worksheet.Cells[incRowExcel, 2].Value = "Total Redemption";
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                        incRowExcel = incRowExcel + 2;



                                                    }



                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    _rangeDetail = "A:G";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).Width = 21;
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).Width = 21;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Data Radisi";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }



                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Laporan NAV
            if (_unitRegistryRpt.ReportName.Equals("Laporan NAV"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            string _paramFundFrom = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText = @"
                            if object_id('tempdb..#tableNAV30Days', 'u') is not null drop table #tableNAV30Days 
		                    create table #tableNAV30Days
		                    (
			                    FundPK int,
			                    NAV numeric(22,8)
		                    )
		                    CREATE CLUSTERED INDEX indx_tableNAV30Days ON #tableNAV30Days (FundPK);

		                    if object_id('tempdb..#tableNAV30DaysList', 'u') is not null drop table #tableNAV30DaysList 
		                    create table #tableNAV30DaysList
		                    (
			                    FundPK int,
			                    Date DATETIME
		                    )
		                    CREATE CLUSTERED INDEX indx_tableNAV30DaysList ON #tableNAV30DaysList (FundPK);

		
		                    if object_id('tempdb..#tableNAV365Days', 'u') is not null drop table #tableNAV365Days 
		                    create table #tableNAV365Days
		                    (
			                    FundPK int,
	                            NAV numeric(22,8)
		                    )
		                    CREATE CLUSTERED INDEX indx_tableNAV365Days ON #tableNAV365Days (FundPK);

		                    if object_id('tempdb..#tableNAV365DaysList', 'u') is not null drop table #tableNAV365DaysList 
		                    create table #tableNAV365DaysList
		                    (
			                    FundPK int,
			                    Date DATETIME
		                    )
		                    CREATE CLUSTERED INDEX indx_tableNAV365DaysList ON #tableNAV365DaysList (FundPK);

                            INSERT INTO #tableNAV30DaysList
                                    ( Date, FundPK )
                            SELECT MAX(Date) Date,FundPK FROM dbo.CloseNAV 
                            WHERE status = 2 AND date <= dateadd(DAY,-30,@Date)
                            GROUP BY FundPK

                            INSERT INTO #tableNAV30Days
                                    ( FundPK, NAV )
                            SELECT A.FundPK,B.Nav FROM #tableNAV30DaysList A
                            LEFT JOIN 
                            (
	                            SELECT * FROM dbo.CloseNAV WHERE status = 2 AND date IN
	                            (
		                            SELECT DISTINCT Date FROM #tableNAV30DaysList
	                            )
                            )B ON A.Date = B.Date AND A.FundPK = B.FundPK


                            INSERT INTO #tableNAV365DaysList
                                    ( Date, FundPK )
                            SELECT MAX(Date) Date,FundPK FROM dbo.CloseNAV 
                            WHERE status = 2 AND date <= dateadd(DAY,-365,@Date)
                            GROUP BY FundPK

                            INSERT INTO #tableNAV365Days
                                    ( FundPK, NAV )
                            SELECT A.FundPK,B.Nav FROM #tableNAV365DaysList A
                            LEFT JOIN 
                            (
	                            SELECT * FROM dbo.CloseNAV WHERE status = 2 AND date IN
	                            (
		                            SELECT DISTINCT Date FROM #tableNAV365DaysList
	                            )
                            )B ON A.Date = B.Date AND A.FundPK = B.FundPK



                            SELECT B.ID FundCode,B.Name NamaReksadana,A.Nav,A.AUM 
                            ,ISNULL(CASE WHEN A.Nav > 0  then (A.NAV - C.NAV) / A.NAV * 100 ELSE 0 END,0) Return30Days
                            ,ISNULL(CASE WHEN A.Nav > 0  then (A.NAV - D.NAV) / A.NAV * 100 ELSE 0 END,0) Return365Days,E.CurrencyPK
                            FROM dbo.CloseNAV A (NOLOCK)
                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN #tableNAV30Days C ON A.FundPK = C.FundPK 
                            LEFT JOIN #tableNAV365Days D ON A.FundPK = D.FundPK
                            left join Currency E on B.CurrencyPK = E.CurrencyPK and E.status in (1,2)
                            WHERE A.Date = @Date and A.status in (1,2)" + _paramFundFrom;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);




                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanNAV" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanNAV" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet1");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanNAV> rList = new List<LaporanNAV>();
                                        while (dr0.Read())
                                        {

                                            LaporanNAV rSingle = new LaporanNAV();
                                            rSingle.FundCode = Convert.ToString(dr0["FundCode"]);
                                            rSingle.NamaReksaDana = Convert.ToString(dr0["NamaReksaDana"]);
                                            rSingle.NAVPrice = Convert.ToDecimal(dr0["Nav"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Return30Days = Convert.ToDecimal(dr0["Return30Days"]);
                                            rSingle.Return365Days = Convert.ToDecimal(dr0["Return365Days"]);
                                            rSingle.CurrencyPK = Convert.ToInt32(dr0["CurrencyPK"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                        from r in rList
                                        orderby r.FundCode ascending
                                        group r by new { r.CurrencyPK } into rGroup
                                        select rGroup;

                                        int incRowExcel = 6;

                                        worksheet.Cells[incRowExcel, 1].Value = "Laporan NAV per Unit";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 5].Value = "Telp : " + _host.Get_CompanyPhone() + " Fax : " + _host.Get_CompanyFax();
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "As Of Date:";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 3].Value = (_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;


                                        foreach (var rsHeader in GroupByReference)
                                        {



                                            incRowExcel++;


                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;






                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Code";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Nama Reksadana";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "NAV Price";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Return 30 Days (%)";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "Return 365 Days (%)";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;

                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            //Row B = 3 fungsinya untuk bikin garis
                                            int RowB = incRowExcel;
                                            //int RowG = incRowExcel + 1;
                                            //string _range = "";
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER



                                                //incRowExcel++;
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundCode;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NamaReksaDana;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NAVPrice;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Return30Days;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Return365Days;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;





                                            }

                                            worksheet.Cells[incRowExcel, 4].Value = "TOTAL AUM";


                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Calculate();

                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Calculate();



                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            incRowExcel = incRowExcel + 2;



                                        }

                                        worksheet.Row(incRowExcel).PageBreak = true;

                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 12;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).Width = 26;
                                        worksheet.Column(6).Width = 26;
                                        worksheet.Column(7).Width = 26;

                                        //worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Laporan NAV";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        //                                        //Reksa Dana
                                        //                                        DbCon.Close();
                                        //                                        DbCon.Open();
                                        //                                        using (SqlCommand cmd1 = DbCon.CreateCommand())
                                        //                                        {


                                        //                                            cmd1.CommandText = @"
                                        //select 'asd' KPDFundCode, 'Nama Reksa' KPDNamaReksaDana, 100 KPDNAVPrice, 50 KPDReturn30Days, 50 KPDReturn365Days, 200 KPDAUM
                                        //union all
                                        //select 'asd' KPDFundCode, 'Nama Reksa' KPDNamaReksaDana, 100 KPDNAVPrice, 50 KPDReturn30Days, 50 KPDReturn365Days, 200 KPDAUM
                                        //
                                        //
                                        //                                ";

                                        //                                            cmd1.CommandTimeout = 0;
                                        //                                            cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);

                                        //                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                        //                                            {
                                        //                                                if (!dr1.HasRows)
                                        //                                                {
                                        //                                                    return false;
                                        //                                                }
                                        //                                                else
                                        //                                                {

                                        //                                                    //ATUR DATA GROUPINGNYA DULU
                                        //                                                    List<LaporanNAV> rList1 = new List<LaporanNAV>();
                                        //                                                    while (dr1.Read())
                                        //                                                    {

                                        //                                                        LaporanNAV rSingle1 = new LaporanNAV();
                                        //                                                        rSingle1.KPDFundCode = Convert.ToString(dr1["KPDFundCode"]);
                                        //                                                        rSingle1.KPDNamaReksaDana = Convert.ToString(dr1["KPDNamaReksaDana"]);
                                        //                                                        rSingle1.KPDNAVPrice = Convert.ToDecimal(dr1["KPDNAVPrice"]);
                                        //                                                        rSingle1.KPDReturn30Days = Convert.ToDecimal(dr1["KPDReturn30Days"]);
                                        //                                                        rSingle1.KPDReturn365Days = Convert.ToDecimal(dr1["KPDReturn365Days"]);
                                        //                                                        rSingle1.KPDAUM = Convert.ToDecimal(dr1["KPDAUM"]);
                                        //                                                        rList1.Add(rSingle1);

                                        //                                                    }



                                        //                                                    var GroupByReference1 =
                                        //                                                    from r in rList1
                                        //                                                        //orderby r.FundName ascending
                                        //                                                    group r by new { } into rGroup
                                        //                                                    select rGroup;

                                        //                                                    incRowExcel++;
                                        //                                                    incRowExcel++;
                                        //                                                    worksheet.Cells[incRowExcel, 2].Value = "TOTAL AUM KPD";

                                        //                                                    foreach (var rsHeader1 in GroupByReference1)
                                        //                                                    {

                                        //                                                        incRowExcel++;



                                        //                                                        int RowB = incRowExcel;
                                        //                                                        int RowG = incRowExcel + 1;


                                        //                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        //                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        //                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        //                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        //                                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Code";
                                        //                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        //                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        //                                                        worksheet.Cells[incRowExcel, 3].Value = "Nama Reksadana";
                                        //                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        //                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        //                                                        worksheet.Cells[incRowExcel, 4].Value = "NAV Price";
                                        //                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        //                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        //                                                        worksheet.Cells[incRowExcel, 5].Value = "Return 30(%)";
                                        //                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        //                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        //                                                        worksheet.Cells[incRowExcel, 6].Value = "Return 365(%)";
                                        //                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        //                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        //                                                        worksheet.Cells[incRowExcel, 7].Value = "AUM";
                                        //                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        //                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;






                                        //                                                        incRowExcel = incRowExcel + 1;
                                        //                                                        int _startRowDetail = incRowExcel;
                                        //                                                        int _endRowDetail = 0;
                                        //                                                        int _no = 1;


                                        //                                                        //end area header
                                        //                                                        foreach (var rsDetail1 in rsHeader1)
                                        //                                                        {

                                        //                                                            //incRowExcel++;
                                        //                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                        //                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.KPDFundCode;
                                        //                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.KPDNamaReksaDana;
                                        //                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.KPDNAVPrice;
                                        //                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                        //                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.KPDReturn30Days;
                                        //                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                        //                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail1.KPDReturn365Days;
                                        //                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        //                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail1.KPDAUM;
                                        //                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                        //                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        //                                                            _no++;
                                        //                                                            _endRowDetail = incRowExcel;
                                        //                                                            incRowExcel++;



                                        //                                                        }
                                        //                                                        worksheet.Cells[incRowExcel, 4].Value = "TOTAL AUM";


                                        //                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                        //                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                        //                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                        //                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        //                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        //                                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                        //                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                        //                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                        //                                                        worksheet.Cells[incRowExcel, 7].Calculate();


                                        //                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                        //                                                        incRowExcel = incRowExcel + 2;



                                        //                                                    }

                                        //                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                        //                                                    _rangeDetail = "A:E";

                                        //                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        //                                                    {
                                        //                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        //                                                        r.Style.Font.Size = 11;
                                        //                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //                                                    }

                                        //                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //                                                    worksheet.PrinterSettings.FitToPage = true;
                                        //                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                        //                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                        //                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 20];
                                        //                                                    worksheet.Column(1).Width = 10;
                                        //                                                    worksheet.Column(2).Width = 30;
                                        //                                                    worksheet.Column(3).Width = 21;
                                        //                                                    worksheet.Column(4).Width = 21;
                                        //                                                    worksheet.Column(5).Width = 21;
                                        //                                                    worksheet.Column(6).Width = 21;
                                        //                                                    worksheet.Column(7).Width = 21;


                                        //                                                    //worksheet.Column(10).AutoFit();
                                        //                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        //                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Laporan NAV";



                                        //                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        //                                                }

                                        //                                            }
                                        //                                        }

                                        //                                        //Khusus Tim Ops


                                        //                                        DbCon.Close();
                                        //                                        DbCon.Open();
                                        //                                        using (SqlCommand cmd2 = DbCon.CreateCommand())
                                        //                                        {


                                        //                                            cmd2.CommandText = @"
                                        //select 'asd' USDFundCode, 'Nama Reksa' USDNamaReksaDana, 100 USDNAVPrice, 50 USDReturn30Days, 50 USDReturn365Days, 200 USDAUM
                                        //union all
                                        //select 'asd' USDFundCode, 'Nama Reksa' USDNamaReksaDana, 100 USDNAVPrice, 50 USDReturn30Days, 50 USDReturn365Days, 200 USDAUM
                                        //
                                        //
                                        //                                ";

                                        //                                            cmd2.CommandTimeout = 0;
                                        //                                            cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);


                                        //                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                        //                                            {
                                        //                                                if (!dr2.HasRows)
                                        //                                                {
                                        //                                                    return false;
                                        //                                                }
                                        //                                                else
                                        //                                                {

                                        //                                                    //ATUR DATA GROUPINGNYA DULU
                                        //                                                    List<LaporanNAV> rList2 = new List<LaporanNAV>();
                                        //                                                    while (dr2.Read())
                                        //                                                    {

                                        //                                                        LaporanNAV rSingle2 = new LaporanNAV();
                                        //                                                        rSingle2.USDFundCode = Convert.ToString(dr2["USDFundCode"]);
                                        //                                                        rSingle2.USDNamaReksaDana = Convert.ToString(dr2["USDNamaReksaDana"]);
                                        //                                                        rSingle2.USDNAVPrice = Convert.ToDecimal(dr2["USDNAVPrice"]);
                                        //                                                        rSingle2.USDReturn30Days = Convert.ToDecimal(dr2["USDReturn30Days"]);
                                        //                                                        rSingle2.USDReturn365Days = Convert.ToDecimal(dr2["USDReturn365Days"]);
                                        //                                                        rSingle2.USDAUM = Convert.ToDecimal(dr2["USDAUM"]);



                                        //                                                        rList2.Add(rSingle2);

                                        //                                                    }



                                        //                                                    var GroupByReference2 =
                                        //                                                    from r in rList2
                                        //                                                        //orderby r.FundName ascending
                                        //                                                    group r by new { } into rGroup
                                        //                                                    select rGroup;

                                        //                                                    worksheet.Cells[incRowExcel, 2].Value = "TOTAL AUM USD";

                                        //                                                    foreach (var rsHeader2 in GroupByReference2)
                                        //                                                    {



                                        //                                                        incRowExcel++;


                                        //                                                        int RowB = incRowExcel;
                                        //                                                        int RowG = incRowExcel + 1;


                                        //                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        //                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        //                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                        //                                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Code";
                                        //                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;


                                        //                                                        worksheet.Cells[incRowExcel, 3].Value = "Nama Reksadana";
                                        //                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                        //                                                        worksheet.Cells[incRowExcel, 4].Value = "NAV Price";
                                        //                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                        //                                                        worksheet.Cells[incRowExcel, 5].Value = "Return 30(%)";
                                        //                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                        //                                                        worksheet.Cells[incRowExcel, 6].Value = "Return 365(%)";
                                        //                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                        //                                                        worksheet.Cells[incRowExcel, 7].Value = "AUM";
                                        //                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;






                                        //                                                        incRowExcel = incRowExcel + 1;
                                        //                                                        int _startRowDetail = incRowExcel;
                                        //                                                        int _endRowDetail = 0;
                                        //                                                        int _no = 1;


                                        //                                                        //end area header
                                        //                                                        foreach (var rsDetail2 in rsHeader2)
                                        //                                                        {

                                        //                                                            //incRowExcel++;
                                        //                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                        //                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail2.USDFundCode;
                                        //                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.USDNamaReksaDana;
                                        //                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail2.USDNAVPrice;
                                        //                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                        //                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail2.USDReturn30Days;
                                        //                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                        //                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail2.USDReturn365Days;
                                        //                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        //                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail2.USDAUM;
                                        //                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";



                                        //                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        //                                                            _no++;
                                        //                                                            _endRowDetail = incRowExcel;
                                        //                                                            incRowExcel++;



                                        //                                                        }






                                        //                                                        incRowExcel = incRowExcel + 2;



                                        //                                                    }

                                        //                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                        //                                                    _rangeDetail = "A:O";

                                        //                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        //                                                    {
                                        //                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        //                                                        r.Style.Font.Size = 11;
                                        //                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //                                                    }

                                        //                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //                                                    worksheet.PrinterSettings.FitToPage = true;
                                        //                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                        //                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                        //                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 20];
                                        //                                                    worksheet.Column(1).Width = 10;
                                        //                                                    worksheet.Column(2).Width = 30;
                                        //                                                    worksheet.Column(3).Width = 21;
                                        //                                                    worksheet.Column(4).Width = 21;
                                        //                                                    worksheet.Column(5).Width = 21;
                                        //                                                    worksheet.Column(6).Width = 21;
                                        //                                                    worksheet.Column(7).Width = 21;


                                        //                                                    //worksheet.Column(10).AutoFit();
                                        //                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        //                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Laporan NAV";



                                        //                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        //                                                }

                                        //                                            }
                                        //                                        }




                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Rekap Transaksi Harian
            if (_unitRegistryRpt.ReportName.Equals("Rekap Transaksi Harian"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _statusSubs = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundFrom = "";
                            string _paramFundTo = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundFrom = "And A.FundPK From  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundTo = "And A.FundPKTo  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                                _paramFundFrom = "";
                                _paramFundTo = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "and  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "and  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchOut = "and  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchIn = "and  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "and  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "and  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchOut = "and  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchIn = "and  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "and  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "and  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchOut = "and  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchIn = "and  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "and  A.Status = 1  ";
                                _statusRedemp = "and  A.Status = 1  ";
                                _statusSwitchOut = "and  A.Status = 1  ";
                                _statusSwitchIn = "and  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "and  A.Status = 3  ";
                                _statusRedemp = "and  A.Status = 3  ";
                                _statusSwitchOut = "and  A.Status = 3  ";
                                _statusSwitchIn = "and  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                                _statusRedemp = "and  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  and A.status not in (3,4)";
                                _statusSwitchOut = "and  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                                _statusSwitchIn = "and  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "and  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 and A.status not in (3,4) ";
                                _statusRedemp = "and  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4) ";
                                _statusSwitchOut = "and  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 and A.status not in (3,4)";
                                _statusSwitchIn = "and  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                            }


                            cmd.CommandText = @"
                            SELECT UPPER(A.NamaSellingAgent) NamaSellingAgent,SUM(ISNULL(A.SUBSCRIPTION,0)) SUBSCRIPTION ,SUM(ISNULL(A.REDEMPTION,0)) REDEMPTION 
                            ,SUM(ISNULL(A.SUBSCRIPTION,0)) - SUM(ISNULL(A.REDEMPTION,0)) NET
                            FROM (
	                            SELECT case when isnull(C.SACode,'') = '' then 'BNI AM' else C.Name end NamaSellingAgent, ISNULL(A.TotalCashAmount,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSubscription A (NOLOCK)
	                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.status in (1,2)
	                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo " + _paramFund + _statusSubs + @"

	                            UNION ALL

	                            SELECT case when isnull(C.SACode,'') = '' then 'BNI AM' else C.Name end NamaSellingAgent, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientRedemption A (NOLOCK)
	                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.status in (1,2)
	                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo " + _paramFund + _statusRedemp + @"

	                            UNION ALL

	                            SELECT case when isnull(C.SACode,'') = '' then 'BNI AM' else C.Name end NamaSellingAgent, ISNULL(A.TotalCashAmountFundTo,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	                            LEFT JOIN Fund B (NOLOCK) ON A.FundPKTo = B.FundPK and B.status in (1,2)
	                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo " + _paramFundTo + _statusSwitchIn + @" 


	                            UNION ALL

	                            SELECT case when isnull(C.SACode,'') = '' then 'BNI AM' else C.Name end NamaSellingAgent, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	                            LEFT JOIN Fund B (NOLOCK) ON A.FundPKFrom = B.FundPK and B.status in (1,2)
	                            LEFT JOIN FundClient C (NOLOCK) ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                            AND A.NAVDate BETWEEN @DateFrom AND @DateTo " + _paramFundFrom + _statusSwitchOut + @" 
                            )A
                            GROUP BY A.NamaSellingAgent
                            
                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);




                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RekapTransaksiHarian" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RekapTransaksiHarian" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Umum");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<Umum> rList = new List<Umum>();
                                        while (dr0.Read())
                                        {

                                            Umum rSingle = new Umum();
                                            rSingle.NamaSellingAgent = Convert.ToString(dr0["NamaSellingAgent"]);
                                            rSingle.SASubscription = Convert.ToDecimal(dr0["SUBSCRIPTION"]);
                                            rSingle.SARedemption = Convert.ToDecimal(dr0["REDEMPTION"]);
                                            rSingle.SANET = Convert.ToDecimal(dr0["NET"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                        from r in rList
                                        orderby r.NamaSellingAgent ascending
                                        group r by new { } into rGroup
                                        select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE FROM ";
                                            worksheet.Cells[incRowExcel, 2].Value = _unitRegistryRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE TO ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;


                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;





                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Selling Agent";
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 4].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Value = "NET";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            //Row B = 3 fungsinya untuk bikin garis
                                            int RowB = incRowExcel;
                                            //int RowG = incRowExcel + 1;
                                            //string _range = "";
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER



                                                //incRowExcel++;
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaSellingAgent;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SASubscription;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SARedemption;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SANET;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;





                                            }

                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL";

                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;



                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;









                                            incRowExcel = incRowExcel + 2;



                                        }

                                        worksheet.Row(incRowExcel).PageBreak = true;

                                        string _rangeDetail = "A:E";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 12;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();

                                        //worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                       // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Rekap Transaksi Harian";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        //Reksa Dana
                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd1 = DbCon.CreateCommand())
                                        {


                                            cmd1.CommandText = @"
                                SELECT UPPER(A.FundName) ReksaDana,SUM(ISNULL(A.SUBSCRIPTION,0)) RDSubscription ,SUM(ISNULL(A.REDEMPTION,0)) RDRedemption 
                                ,SUM(ISNULL(A.SUBSCRIPTION,0)) - SUM(ISNULL(A.REDEMPTION,0)) RDNET
                                FROM (
	                                SELECT B.Name FundName, ISNULL(A.TotalCashAmount,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSubscription A (NOLOCK)
	                                LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.status in (1,2)
	                                WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                AND A.NAVDate BETWEEN @DateFrom AND @DateTo --" + _paramFund + @"

	                                UNION ALL

	                                SELECT B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientRedemption A (NOLOCK)
	                                LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.status in (1,2)
	                                WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                AND A.NAVDate BETWEEN @DateFrom AND @DateTo --" + _paramFund + @"

	                                UNION ALL

	                                SELECT B.Name FundName, ISNULL(A.TotalCashAmountFundTo,0) SUBSCRIPTION,0 REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	                                LEFT JOIN Fund B (NOLOCK) ON A.FundPKTo = B.FundPK and B.status in (1,2)
	                                WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                AND A.NAVDate BETWEEN @DateFrom AND @DateTo --" + _paramFundTo + @"


	                                UNION ALL

	                                SELECT B.Name FundName, 0 SUBSCRIPTION,ISNULL(A.CashAmount,0) REDEMPTION FROM dbo.ClientSwitching A (NOLOCK)
	                                LEFT JOIN Fund B (NOLOCK) ON A.FundPKFrom = B.FundPK and B.status in (1,2)
	                                WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0
	                                AND A.NAVDate BETWEEN @DateFrom AND @DateTo --" + _paramFundFrom + @"
                                )A
                                GROUP BY A.FundName
                                ORDER BY A.FundName ASC
                                ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<Umum> rList1 = new List<Umum>();
                                                    while (dr1.Read())
                                                    {

                                                        Umum rSingle1 = new Umum();
                                                        rSingle1.ReksaDana = Convert.ToString(dr1["ReksaDana"]);
                                                        rSingle1.RDSubscription = Convert.ToDecimal(dr1["RDSubscription"]);
                                                        rSingle1.RDRedemption = Convert.ToDecimal(dr1["RDRedemption"]);
                                                        rSingle1.RDNET = Convert.ToDecimal(dr1["RDNET"]);


                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                    //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel++;

                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {
                                                        incRowExcel++;
                                                        incRowExcel++;



                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 2].Value = "Reksa Dana";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "Redemption";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Net Transaksi";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;





                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.ReksaDana;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.RDSubscription;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.RDRedemption;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.RDNET;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }
                                                        worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Bold = true;
                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        incRowExcel = incRowExcel + 2;



                                                    }

                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    _rangeDetail = "A:E";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                                    worksheet.Column(1).Width = 12;
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                                   // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Rekap Transaksi Harian";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        //Khusus Tim Ops
                                        worksheet = package.Workbook.Worksheets.Add("Khusus Tim Ops");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd2 = DbCon.CreateCommand())
                                        {


                                            cmd2.CommandText = @"
                                            Select A.Valuedate TransactionDate,A.TransactionType,A.FundClientName IFUAName,A.FundName,
	                                            A.FundCCY,A.AmountNominal,A.AmountUnit,A.AmountAllUnits,A.FeeNominal,
	                                            A.FeePercent,A.REDMPaymentBankName,A.REDMPaymentAccountNo,A.REDMPaymentAccountName, A.PaymentDate 
                                            FROM (
	                                            SELECT A.ValueDate,'Subscription' TransactionType,C.Name FundClientName,B.Name FundName,
	                                            D.ID FundCCY,A.CashAmount AmountNominal,A.UnitAmount AmountUnit,A.TotalUnitAmount AmountAllUnits,A.SubscriptionFeeAmount FeeNominal,
	                                            A.SubscriptionFeePercent FeePercent, ''REDMPaymentBankName, ''REDMPaymentAccountNo, ''REDMPaymentAccountName, ''PaymentDate FROM dbo.ClientSubscription A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.status in (1,2)
	                                            left join FundClient C (NOLOCK) on A.FundClientPK = C.FundClientPK and C.Status in (1,2)
	                                            left join Currency D (NOLOCK) on A.CurrencyPK = D.CurrencyPK and D.status in (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0 and isnull(C.SACode,'') = ''
	                                            AND ValueDate BETWEEN @DateFrom AND @DateTo " + _paramFund + @"

	                                            UNION ALL

	                                            SELECT A.ValueDate,'Redemption' TransactionType,C.Name FundClientName,B.Name FundName,
	                                            D.ID FundCCY,A.CashAmount AmountNominal,A.UnitAmount AmountUnit,A.TotalUnitAmount AmountAllUnits,A.RedemptionFeeAmount FeeNominal,
	                                            A.RedemptionFeePercent FeePercent,
	                                            '' REDMPaymentBankName,
	                                            case when BankRecipientPK = 0 then  '' when BankRecipientPK=1 then C.NomorRekening1 
	                                            else case when BankRecipientPK = 2 then C.NomorRekening2  else 
	                                            case when BankRecipientPK = 3 then C.NomorRekening3 else E.AccountNo end end end REDMPaymentAccountNo, 
	                                            case when BankRecipientPK = 0 then  '' when BankRecipientPK=1 then C.NamaNasabah1 
	                                            else case when BankRecipientPK = 2 then C.NamaNasabah2  else 
	                                            case when BankRecipientPK = 3 then C.NamaNasabah3 else E.AccountName end end end REDMPaymentAccountName, 
	                                            A.PaymentDate PaymentDate
	                                            FROM dbo.ClientRedemption A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPK = B.FundPK and B.status in (1,2)
	                                            left join FundClient C (NOLOCK) on A.FundClientPK = C.FundClientPK and C.Status in (1,2)
	                                            left join Currency D (NOLOCK) on A.CurrencyPK = D.CurrencyPK and D.status in (1,2) 
	                                            Left Join FundClientBankList E on A.BankRecipientPK = E.NoBank and E.status in (1,2)
	                                            left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0 and isnull(C.SACode,'') = ''
	                                            AND ValueDate BETWEEN @DateFrom AND @DateTo " + _paramFund + @"

	                                            UNION ALL

	                                            SELECT A.ValueDate,'Subscription' TransactionType,C.Name FundClientName,B.Name FundName,
	                                            D.ID FundCCY,A.CashAmount AmountNominal,A.UnitAmount AmountUnit,A.TotalUnitAmountFundTo AmountAllUnits,A.SwitchingFeeAmount FeeNominal,
	                                            A.SwitchingFeePercent FeePercent, ''REDMPaymentBankName, ''REDMPaymentAccountNo, ''REDMPaymentAccountName, ''PaymentDate FROM dbo.ClientSwitching A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPKTo = B.FundPK and B.status in (1,2)
	                                            left join FundClient C (NOLOCK) on A.FundClientPK = C.FundClientPK and C.Status in (1,2)
	                                            left join Currency D (NOLOCK) on A.CurrencyPK = D.CurrencyPK and D.status in (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0 and isnull(C.SACode,'') = ''
	                                            AND ValueDate BETWEEN @DateFrom AND @DateTo " + _paramFundTo + @"


	                                            UNION ALL

	                                            SELECT A.ValueDate,'Redemption' TransactionType,C.Name FundClientName,B.Name FundName,
	                                            D.ID FundCCY,A.CashAmount AmountNominal,A.UnitAmount AmountUnit,A.TotalUnitAmountFundTo AmountAllUnits,A.SwitchingFeeAmount FeeNominal,
	                                            A.SwitchingFeePercent FeePercent, ''REDMPaymentBankName, ''REDMPaymentAccountNo, ''REDMPaymentAccountName, ''PaymentDate FROM dbo.ClientSwitching A (NOLOCK)
	                                            LEFT JOIN Fund B (NOLOCK) ON A.FundPKFrom = B.FundPK and B.status in (1,2)
	                                            left join FundClient C (NOLOCK) on A.FundClientPK = C.FundClientPK and C.Status in (1,2)
	                                            left join Currency D (NOLOCK) on A.CurrencyPK = D.CurrencyPK and D.status in (1,2)
	                                            WHERE A.posted = 1 AND A.status = 2 AND A.Revised = 0 and isnull(C.SACode,'') = ''
	                                            AND ValueDate BETWEEN @DateFrom AND @DateTo " + _paramFundFrom + @"
                                            )A
                                            --GROUP BY A.FundName
                                            ORDER BY A.ValueDate ASC
                                            ";

                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                            {
                                                if (!dr2.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<KhususTimOps> rList2 = new List<KhususTimOps>();
                                                    while (dr2.Read())
                                                    {

                                                        KhususTimOps rSingle2 = new KhususTimOps();
                                                        rSingle2.TransactionDate = Convert.ToDateTime(dr2["TransactionDate"]);
                                                        rSingle2.TransactionType = Convert.ToString(dr2["TransactionType"]);
                                                        rSingle2.IFUAName = Convert.ToString(dr2["IFUAName"]);
                                                        rSingle2.FundName = Convert.ToString(dr2["FundName"]);
                                                        rSingle2.FundCCY = Convert.ToString(dr2["FundCCY"]);
                                                        rSingle2.AmountNominal = Convert.ToDecimal(dr2["AmountNominal"]);
                                                        rSingle2.AmountUnit = Convert.ToDecimal(dr2["AmountUnit"]);
                                                        rSingle2.AmountAllUnit = Convert.ToDecimal(dr2["AmountAllUnits"]);
                                                        rSingle2.FeeNominal = Convert.ToDecimal(dr2["FeeNominal"]);
                                                        rSingle2.FeePercent = Convert.ToDecimal(dr2["FeePercent"]);
                                                        rSingle2.REDMPaymentBankName = Convert.ToString(dr2["REDMPaymentBankName"]);
                                                        rSingle2.REDMPaymentACNo = Convert.ToString(dr2["REDMPaymentAccountNo"]);
                                                        rSingle2.REDMPaymentACName = Convert.ToString(dr2["REDMPaymentAccountName"]);
                                                        rSingle2.PaymentDate = Convert.ToString(dr2["PaymentDate"]);



                                                        rList2.Add(rSingle2);

                                                    }



                                                    var GroupByReference2 =
                                                    from r in rList2
                                                    //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;

                                                    foreach (var rsHeader2 in GroupByReference2)
                                                    {
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Date To :";
                                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                                        incRowExcel++;


                                                        incRowExcel++;


                                                        int RowB = incRowExcel;
                                                        int RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Transaction Date";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Transaction Type";
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "Investor Fund Unit A/C Name ";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = "Fund Name";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "Fund CCY";
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 7].Value = "Amount (Nominal)";
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 8].Value = "Amount (Unit)";
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 9].Value = "Amount (All Units)";
                                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 10].Value = "Fee (Nominal)";
                                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 11].Value = "Fee (%)";
                                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 12].Value = "REDM Payment Bank Name";
                                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 13].Value = "REDM Payment A/C No.";
                                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 14].Value = "REDM Payment A/C Name";
                                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 15].Value = "Payment Date";
                                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;




                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail2.TransactionDate;
                                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.TransactionType;
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail2.IFUAName;

                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail2.FundName;

                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail2.FundCCY;
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail2.AmountNominal;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail2.AmountUnit;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail2.AmountAllUnit;
                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail2.FeeNominal;
                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail2.FeePercent;
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail2.REDMPaymentBankName;

                                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail2.REDMPaymentACNo;
                                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail2.REDMPaymentACName;

                                                            worksheet.Cells[incRowExcel, 15].Value = rsDetail2.PaymentDate;
                                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "dd-MMM-yyyy";



                                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }






                                                        incRowExcel = incRowExcel + 2;



                                                    }

                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    _rangeDetail = "A:O";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 12;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 15];
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).Width = 21;
                                                    worksheet.Column(3).Width = 21;
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).Width = 21;
                                                    worksheet.Column(7).Width = 21;
                                                    worksheet.Column(8).Width = 21;
                                                    worksheet.Column(9).Width = 21;
                                                    worksheet.Column(10).Width = 21;
                                                    worksheet.Column(11).Width = 21;
                                                    worksheet.Column(12).Width = 26;
                                                    worksheet.Column(13).Width = 26;
                                                    worksheet.Column(14).AutoFit();
                                                    worksheet.Column(15).Width = 26;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Rekap Transaksi Harian";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }




                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Summary AUM
            if (_unitRegistryRpt.ReportName.Equals("Summary AUM"))
            {
                try
                {
                    int _lastRow = 0;
                    decimal _total = 0;
                    string _paramFundFrom = "";

                    if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                    {
                        _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                    }
                    else
                    {
                        _paramFundFrom = "";
                    }

                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"
                            declare @yesterday date

                            declare @tableFund table (
	                            FundPK int,
	                            NAVPerUnit numeric(22,8),
	                            AUMIDR numeric(32,8),
	                            AUMUSD numeric(32,8),
	                            Unit numeric(32,8),
	                            CurrencyPK int
                            )

                            insert into @tableFund(FundPK,NAVPerUnit,AUMIDR,AUMUSD,CurrencyPK)
                            select distinct A.FundPK,A.Nav, case when B.CurrencyPK = 1 then isnull(A.AUM,0) else isnull(A.AUM*H.Rate,0) end AUMIDR,case when B.CurrencyPK != 1 then isnull(A.AUM,0) else 0 end AUMUSD,B.CurrencyPK from CloseNAV A 
                            left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
                            left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
                            where A.status in (1,2) and A.date = @dateto 
                            " + _paramFundFrom + @"


                            set @yesterday = dbo.FWorkingDay(@DateTo,-1)

                            update A set A.Unit = isnull(B.Unit,0) from @tableFund A
                            left join (
                                select A.FundPK, B.Name MutualFund,C.DescOne FundType,isnull(D.Nav,0) NAVperUnit, F.ID CustodianBank,case when B.CurrencyPK = 2 then isnull(H.Rate,0) else 0 end BIMiddleRate,
                                case when B.CurrencyPK = 1 then isnull(D.AUM,0) else isnull(D.AUM*H.Rate,0) end AUMIDR,case when B.CurrencyPK != 1 then isnull(D.AUM,0) else 0 end AUMUSD , sum(A.UnitAmount) Unit,B.CurrencyPK from FundClientPosition A
                                left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                left join MasterValue C on B.Type = C.Code and C.ID = 'FundType' and C.status in (1,2)
                                left join CloseNAV D on A.FundPK = D.FundPK and D.status in (1,2) 
                                left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.status in (1,2)
                                left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)
                                left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
                                left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
                                where A.date = @yesterday and D.date = @DateTo --" + _paramFundFrom + @"
                                group by B.Name,C.DescOne,D.Nav,F.ID,H.Rate,B.CurrencyPK,D.AUM,A.FundPK
                            ) B on A.FundPK = B.FundPK

                            select B.Name MutualFund,C.DescOne FundType,NAVperUnit,F.ID CustodianBank,case when B.CurrencyPK = 2 then isnull(H.Rate,0) else 0 end BIMiddleRate,AUMIDR,AUMUSD,Unit,A.CurrencyPK from @tableFund A
                            left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join MasterValue C on B.Type = C.Code and C.ID = 'FundType' and C.status in (1,2)
                            left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.status in (1,2)
                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
                            left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
               
                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SummaryAUM" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SummaryAUM" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Summary AUM");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SummaryAUM> rList = new List<SummaryAUM>();
                                        while (dr0.Read())
                                        {

                                            SummaryAUM rSingle = new SummaryAUM();
                                            rSingle.MutualFund = Convert.ToString(dr0["MutualFund"]);
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.BIMiddleRate = Convert.ToDecimal(dr0["BIMiddleRate"]);
                                            rSingle.AUMUSD = Convert.ToDecimal(dr0["AUMUSD"]);
                                            rSingle.AUMIDR = Convert.ToDecimal(dr0["AUMIDR"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.NAVperUnit = Convert.ToDecimal(dr0["NAVperUnit"]);
                                            rSingle.CustodianBank = Convert.ToString(dr0["CustodianBank"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                orderby r.FundType ascending
                                                group r by new { r.FundType } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "SUMMARY AUM";
                                        worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "As Of";
                                        worksheet.Cells[incRowExcel, 9].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        incRowExcel = 25;


                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;





                                        worksheet.Cells[RowB, 1, RowB, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[RowB, 1, RowB, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[RowB, 1, RowB, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[RowB, 1, RowB, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[RowG, 1, RowG, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[RowG, 1, RowG, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Mutual Fund";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "Fund Type";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + incRowExcel + ":C" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "BI Middle Rate USD";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells["D" + incRowExcel + ":D" + RowG].Merge = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "AUM USD";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + incRowExcel + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "AUM IDR";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells["F" + incRowExcel + ":F" + RowG].Merge = true;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "UNIT";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + incRowExcel + ":G" + RowG].Merge = true;
                                        worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 8].Value = "NAV/UNIT";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells["H" + incRowExcel + ":H" + RowG].Merge = true;
                                        worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 9].Value = "Custodian Bank";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells["I" + incRowExcel + ":I" + RowG].Merge = true;
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;
                                        incRowExcel++;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundType;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.Orange);
                                            incRowExcel++;
                                            //incRowExcel = incRowExcel + 2;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;



                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.MutualFund;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundType;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.BIMiddleRate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AUMUSD;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUMIDR;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVperUnit;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.CustodianBank;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                                _total = _total + rsDetail.AUMIDR;

                                            }

                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;



                                        }

                                        worksheet.Cells[incRowExcel, 2].Value = "Grand Total";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = _total;


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 1;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 19, 10];
                                        worksheet.Column(1).Width = 21;
                                        worksheet.Column(2).Width = 21;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).Width = 2;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Summary AUM";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        //Summary Fund Type
                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd1 = DbCon.CreateCommand())
                                        {


                                            cmd1.CommandText = @"
                                           declare @yesterday date

                                            declare @tableFund table (
	                                            FundPK int,
	                                            NAVPerUnit numeric(22,8),
	                                            AUMIDR numeric(32,8),
	                                            AUMUSD numeric(32,8),
	                                            Unit numeric(32,8),
	                                            CurrencyPK int
                                            )

                                            insert into @tableFund(FundPK,NAVPerUnit,AUMIDR,AUMUSD,CurrencyPK)
                                            select distinct A.FundPK,A.Nav, case when B.CurrencyPK = 1 then isnull(A.AUM,0) else isnull(A.AUM*H.Rate,0) end AUMIDR,case when B.CurrencyPK != 1 then isnull(A.AUM,0) else 0 end AUMUSD,B.CurrencyPK from CloseNAV A 
                                            left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
                                            left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
                                            where A.status in (1,2) and A.date = @dateto 
                                            " + _paramFundFrom + @"

                                            declare @TotalAUM numeric(32,6)
                                            set @yesterday = dbo.FWorkingDay(@DateTo,-1)


                                            select @TotalAUM = sum(A.AUMIDR) from (
	                                            select B.Name MutualFund,C.DescOne FundType,NAVperUnit,F.ID CustodianBank,case when B.CurrencyPK = 2 then isnull(H.Rate,0) else 0 end BIMiddleRate,AUMIDR,AUMUSD,Unit,A.CurrencyPK from @tableFund A
	                                            left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                                            left join MasterValue C on B.Type = C.Code and C.ID = 'FundType' and C.status in (1,2)
	                                            left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.status in (1,2)
	                                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
	                                            left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
                                            )A

                                            select A.FundType, sum(A.AUMIDR) AUM,sum(A.AUMIDR) / @TotalAUM * 100 PersenAUM from (
	                                            select B.Name MutualFund,C.DescOne FundType,NAVperUnit,F.ID CustodianBank,case when B.CurrencyPK = 2 then isnull(H.Rate,0) else 0 end BIMiddleRate,AUMIDR,AUMUSD,Unit,A.CurrencyPK from @tableFund A
	                                            left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                                            left join MasterValue C on B.Type = C.Code and C.ID = 'FundType' and C.status in (1,2)
	                                            left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.status in (1,2)
	                                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
	                                            left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
                                            )A
                                            group by A.FundType
                                                                        ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<SummaryAUM> rList1 = new List<SummaryAUM>();
                                                    while (dr1.Read())
                                                    {

                                                        SummaryAUM rSingle1 = new SummaryAUM();
                                                        rSingle1.SummaryFundType = Convert.ToString(dr1["FundType"]);
                                                        rSingle1.SummaryFundTypeAUM = Convert.ToDecimal(dr1["AUM"]);
                                                        rSingle1.SummaryFundTypePercent = Convert.ToDecimal(dr1["PersenAUM"]);
                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    //incRowExcel = incRowExcel + 3;
                                                    incRowExcel = 5;

                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {

                                                        //incRowExcel++;
                                                        //_lastRow = incRowExcel++;



                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Summary Fund Type";
                                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 3].Value = "AUM";
                                                        worksheet.Cells[incRowExcel, 4].Value = "%";
                                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.SummaryFundType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.SummaryFundTypeAUM;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.SummaryFundTypePercent;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";


                                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }
                                                        worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();


                                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        incRowExcel = incRowExcel + 2;



                                                    }



                                                    string _rangeDetail = "B:D";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 12;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).Width = 30;
                                                    worksheet.Column(3).Width = 21;
                                                    worksheet.Column(4).Width = 21;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Summary Fund Type";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        //Summary AUM Bank
                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd2 = DbCon.CreateCommand())
                                        {


                                            cmd2.CommandText = @"
                                            declare @yesterday date

                                            declare @tableFund table (
	                                            FundPK int,
	                                            NAVPerUnit numeric(22,8),
	                                            AUMIDR numeric(32,8),
	                                            AUMUSD numeric(32,8),
	                                            Unit numeric(32,8),
	                                            CurrencyPK int
                                            )

                                            insert into @tableFund(FundPK,NAVPerUnit,AUMIDR,AUMUSD,CurrencyPK)
                                            select distinct A.FundPK,A.Nav, case when B.CurrencyPK = 1 then isnull(A.AUM,0) else isnull(A.AUM*H.Rate,0) end AUMIDR,case when B.CurrencyPK != 1 then isnull(A.AUM,0) else 0 end AUMUSD,B.CurrencyPK from CloseNAV A 
                                            left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
                                            left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
                                            where A.status in (1,2) and A.date = @dateto 
                                            " + _paramFundFrom + @"

                                            declare @TotalAUM numeric(32,6)
                                            set @yesterday = dbo.FWorkingDay(@DateTo,-1)


                                            select @TotalAUM = sum(A.AUMIDR) from (
	                                            select B.Name MutualFund,C.DescOne FundType,NAVperUnit,F.ID CustodianBank,case when B.CurrencyPK = 2 then isnull(H.Rate,0) else 0 end BIMiddleRate,AUMIDR,AUMUSD,Unit,A.CurrencyPK from @tableFund A
	                                            left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                                            left join MasterValue C on B.Type = C.Code and C.ID = 'FundType' and C.status in (1,2)
	                                            left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.status in (1,2)
	                                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
	                                            left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
                                            )A

                                            select A.CustodianBank, sum(A.AUMIDR) AUM,sum(A.AUMIDR) / @TotalAUM * 100 PersenAUM from (
	                                            select B.Name MutualFund,C.DescOne FundType,NAVperUnit,F.ID CustodianBank,case when B.CurrencyPK = 2 then isnull(H.Rate,0) else 0 end BIMiddleRate,AUMIDR,AUMUSD,Unit,A.CurrencyPK from @tableFund A
	                                            left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                                            left join MasterValue C on B.Type = C.Code and C.ID = 'FundType' and C.status in (1,2)
	                                            left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.status in (1,2)
	                                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.status in (1,2) 
	                                            left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)left join CurrencyRate H on G.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.Status in (1,2) and B.status in (1,2)) 
                                            )A
                                            group by A.CustodianBank
                                                                        ";

                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                            {
                                                if (!dr2.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<SummaryAUM> rList2 = new List<SummaryAUM>();
                                                    while (dr2.Read())
                                                    {

                                                        SummaryAUM rSingle2 = new SummaryAUM();

                                                        rSingle2.SummaryAUMCustodianBank = Convert.ToString(dr2["CustodianBank"]);
                                                        rSingle2.SummaryAUMBank = Convert.ToDecimal(dr2["AUM"]);
                                                        rSingle2.SummaryAUMPercent = Convert.ToDecimal(dr2["PersenAUM"]);
                                                        rList2.Add(rSingle2);

                                                    }



                                                    var GroupByReference2 =
                                                    from r in rList2
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;
                                                    //incRowExcel = incRowExcel + 3;

                                                    incRowExcel = 5;

                                                    foreach (var rsHeader2 in GroupByReference2)
                                                    {
                                                        //incRowExcel = _lastRow + 1;



                                                        worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 7].Value = "Summary AUM Sesuai Bank";
                                                        worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        incRowExcel++;




                                                        worksheet.Cells[incRowExcel, 7].Value = "Custodian Bank";
                                                        worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                                        worksheet.Cells[incRowExcel, 9].Value = "%";
                                                        worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail2.SummaryAUMCustodianBank;
                                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail2.SummaryAUMBank;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail2.SummaryAUMPercent;
                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;




                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }
                                                        worksheet.Cells[incRowExcel, 7].Value = "TOTAL";
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;



                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                        incRowExcel = incRowExcel + 2;



                                                    }


                                                    string _rangeDetail = "G:I";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 12;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN

                                                    worksheet.Column(1).Width = 10;
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).AutoFit();
                                                    worksheet.Column(8).AutoFit();
                                                    worksheet.Column(9).Width = 25;


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Summary AUM Bank";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Tracking Redemption Payment
            if (_unitRegistryRpt.ReportName.Equals("Tracking Redemption Payment"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                            if object_id('tempdb..#tempSelectReport', 'u') is not null drop table #tempSelectReport 
                            CREATE table #tempSelectReport  (
                            SAName nvarchar(100),
                            FundName NVARCHAR(200),
                            valuedate date,
                            Amount NUMERIC(22,4)
                            )

                            INSERT INTO #tempSelectReport( SAName, FundName,valuedate,Amount )
                            select case when B.SACode = '' then 'BNI AM' else B.SACode end SAName,C.Name FundName,A.PaymentDate,case when A.Posted = 1 then sum(isnull(dbo.FgetLastCloseNav(A.NAVDate,A.FundPK),0) * isnull(A.UnitAmount,0)) when A.Posted = 0 then sum(isnull(dbo.FgetLastCloseNav(A.NAVDate,A.FundPK),0) * isnull(A.UnitAmount,0)) else 0 end Amount from ClientRedemption A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
                            left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
                            where A.PaymentDate between @datefrom and @dateto and A.Status = 2 and A.Type <> 3 --and A.Posted = 1
                            group by B.SACode,C.Name,A.PaymentDate,A.Posted


                            DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
                                @query  AS NVARCHAR(MAX)

                            select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(valuedate) +',0) ' + QUOTENAME(valuedate) 
                                                from (SELECT DISTINCT valuedate FROM #tempSelectReport) A
					                            order by A.valuedate
                                        FOR XML PATH(''), TYPE
                                        ).value('.', 'NVARCHAR(MAX)') 
                                    ,1,1,'')


                            select @cols = STUFF((SELECT distinct ',' + QUOTENAME(valuedate) 
                                                from #tempSelectReport
				
                                        FOR XML PATH(''), TYPE
                                        ).value('.', 'NVARCHAR(MAX)') 
                                    ,1,1,'')


                            set @query = 'SELECT SAName,FundName,' + @colsForQuery + ' from 
                                            (
                                            SELECT SAName,FundName,valuedate,Amount FROM #tempSelectReport 
                                        ) x
                                        pivot 
                                        (
                                            SUM(Amount)
                                            for valuedate in (' + @cols + ')
                                        ) p 
			                            order by SAName
			                            '
                            exec(@query)
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TrackingRedemptionPayment" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TrackingRedemptionPayment" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Tracking Redemption Payment");


                                        int incRowExcel = 2;
                                        int _startRowDetail = incRowExcel;
                                        int _rowCtrp = 0;
                                        int _endRowDetail = 0;
                                        int _endColDetail = 0;
                                        int _no = 0;
                                        while (dr0.Read())
                                        {
                                            int incColExcel = 2;

                                            if (_no == 0)
                                            {
                                                worksheet.Cells[1, 1].Value = "NO";
                                                worksheet.Cells[1, 1].Style.Font.Bold = true;
                                                worksheet.Cells[1, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[1, 1].Style.Font.Size = Tools.DefaultReportFontSize();
                                            }

                                            _no++;
                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                if (_no != 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Size = Tools.DefaultReportFontSize();
                                                }

                                                worksheet.Cells[1, incColExcel].Value = dr0.GetName(inc1);
                                                worksheet.Cells[1, incColExcel].Style.Font.Bold = true;
                                                worksheet.Cells[1, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Font.Size = Tools.DefaultReportFontSize();

                                                if (incColExcel == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = (dr0.GetValue(inc1));
                                                    worksheet.Column(incColExcel).Width = 15;
                                                }
                                                else if (incColExcel == 3)
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = (dr0.GetValue(inc1));
                                                    worksheet.Column(incColExcel).Width = 15;
                                                }
                                                else if (incColExcel >= 4)
                                                {
                                                    _rowCtrp = incColExcel;
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                    worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Column(incColExcel).Width = 20;



                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                }


                                                incColExcel++;

                                            }

                                            if (incRowExcel == 2)
                                            {

                                                worksheet.Cells[1, 1, 1, _rowCtrp].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[1, 1, 1, _rowCtrp].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[1, 1, 1, _rowCtrp].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[1, 1, 1, _rowCtrp].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            }

                                            //worksheet.Cells[incRowExcel, 1,incRowExcel ,_rowCtrp].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, _rowCtrp].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, _rowCtrp].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, _rowCtrp].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            _endColDetail = incColExcel - 1;
                                            _endRowDetail = incRowExcel - 1;


                                            incRowExcel++;


                                        }

                                        worksheet.Cells[incRowExcel - 1, 1, incRowExcel - 1, _rowCtrp].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[1, _rowCtrp, incRowExcel - 1, _rowCtrp].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[1, 1, incRowExcel - 1, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, _rowCtrp];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Tracking Redemption Payment";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Transaksi Harian All
            if (_unitRegistryRpt.ReportName.Equals("Transaksi Harian All"))
            {
                try
                {
                    int _rowAperd = 0;
                    int _rowRetail = 0;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"
declare @datefromMonth datetime
declare @datefromYear datetime

set @datefromMonth = DATEADD(DAY,1,EOMONTH(@dateto,-1))
set @datefromYear = DATEADD(yy, DATEDIFF(yy, 0, @dateto), 0)

if object_id('tempdb..#TempSelectReport', 'u') is not null drop table #TempSelectReport 
create table #TempSelectReport
(
	Type nvarchar(20)  COLLATE Database_Default,
	YTDSubs numeric(32,2),
	MTDSubs numeric(32,2),
	TodaySubs numeric(32,2),
	YTDRedemp numeric(32,2),
	MTDREdemp numeric(32,2),
	TodayRedemp numeric(32,2),
	YTD numeric(32,2),
	MTD numeric(32,2),
	Today numeric(32,2)
)

insert into #TempSelectReport(Type)
select 'Direct'
union all
select 'Selling Agent'

--Subscription
begin
update A set A.TodaySubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Direct' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode =''

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode =''
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--redemption
begin
update A set A.TodayRedemp = isnull(B.TotalRedemption,0),A.Today = A.TodaySubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Direct' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode =''

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode =''
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--Subscription MTD
begin
update A set A.MTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Direct' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode =''

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode =''
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--redemption MTD
begin
update A set A.MTDREdemp = isnull(B.TotalRedemption,0),A.MTD = A.MTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Direct' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode =''

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode =''
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--Subscription YTD
begin
update A set A.YTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Direct' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode =''

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode =''
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--redemption YTD
begin
update A set A.YTDRedemp = isnull(B.TotalRedemption,0),A.YTD = A.YTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Direct' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode =''

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode =''
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end
--------------------------------------------------------------
--Subscription
begin
update A set A.TodaySubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Selling Agent' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode !=''
	)A 
)B on A.Type = B.Type
where A.Type = 'Selling Agent'
end

--redemption
begin
update A set A.TodayRedemp = isnull(B.TotalRedemption,0),A.Today = A.TodaySubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Selling Agent' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode !=''
	)A 
)B on A.Type = B.Type
where A.Type = 'Selling Agent'
end

--Subscription MTD
begin
update A set A.MTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Selling Agent' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode !=''
	)A 
)B on A.Type = B.Type
where A.Type = 'Selling Agent'
end

--redemption MTD
begin
update A set A.MTDREdemp = isnull(B.TotalRedemption,0),A.MTD = A.MTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Selling Agent' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode !=''
	)A 
)B on A.Type = B.Type
where A.Type = 'Selling Agent'
end

--Subscription YTD
begin
update A set A.YTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Selling Agent' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode !=''
	)A 
)B on A.Type = B.Type
where A.Type = 'Selling Agent'
end

--redemption YTD
begin
update A set A.YTDRedemp = isnull(B.TotalRedemption,0),A.YTD = A.YTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Selling Agent' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode !=''
	)A 
)B on A.Type = B.Type
where A.Type = 'Selling Agent'
end

select YTDSubs, MTDSubs, TodaySubs, YTDRedemp, MTDREdemp, TodayRedemp, YTD , MTD, Today from #TempSelectReport order by Type
                         ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);




                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TransaksiHarianAll" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TransaksiHarianAll" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("REKAP_ALL");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TransaksiHarianAll> rList = new List<TransaksiHarianAll>();
                                        while (dr0.Read())
                                        {

                                            TransaksiHarianAll rSingle = new TransaksiHarianAll();
                                            rSingle.YTDSubs = Convert.ToDecimal(dr0["YTDSubs"]);
                                            rSingle.MTDSubs = Convert.ToDecimal(dr0["MTDSubs"]);
                                            rSingle.TodaySubs = Convert.ToDecimal(dr0["TodaySubs"]);
                                            rSingle.YTDRedemp = Convert.ToDecimal(dr0["YTDRedemp"]);
                                            rSingle.MTDRedemp = Convert.ToDecimal(dr0["MTDRedemp"]);
                                            rSingle.TodayRedemp = Convert.ToDecimal(dr0["TodayRedemp"]);
                                            rSingle.YTD = Convert.ToDecimal(dr0["YTD"]);
                                            rSingle.MTD = Convert.ToDecimal(dr0["MTD"]);
                                            rSingle.Today = Convert.ToDecimal(dr0["Today"]);



                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                        from r in rList
                                            //orderby r ascending
                                        group r by new { } into rGroup
                                        select rGroup;

                                        int incRowExcel = 3;

                                        worksheet.Cells[incRowExcel, 1].Value = "YTD";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = new DateTime(Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).Year, 1, 1).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                        worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        incRowExcel++;
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "Tanggal";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");

                                        worksheet.Cells[incRowExcel, 3].Value = "YTD";
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "MTD";
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;

                                        worksheet.Cells[incRowExcel, 6].Value = "YTD";
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                        worksheet.Cells[incRowExcel, 7].Value = "MTD";
                                        worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;

                                        worksheet.Cells[incRowExcel, 9].Value = "YTD";
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "MTD";
                                        worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Today";
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "MTD";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = new DateTime(Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).Year, Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).Month, 1).ToString("dd-MMM-yyyy");

                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "Total Subscription (Direct)";
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total Subscription (Selling Agent)";


                                        foreach (var rsHeader in GroupByReference)
                                        {



                                            incRowExcel = 6;

                                            int first = incRowExcel;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {


                                                //area detail
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.YTDSubs;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.MTDSubs;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TodaySubs;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.YTDRedemp;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.MTDRedemp;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.TodayRedemp;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.YTD;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.MTD;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Today;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";




                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;





                                            }

                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Calculate();

                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Calculate();

                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Calculate();

                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Calculate();



                                            worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            incRowExcel = incRowExcel + 2;



                                        }



                                        string _rangeDetail = "A:K";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();
                                        worksheet.Column(11).AutoFit();

                                        //worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Transaksi Harian All";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        //1
                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd1 = DbCon.CreateCommand())
                                        {


                                            cmd1.CommandText = @"
                                    
                                        declare @datefromMonth datetime
declare @datefromYear datetime

set @datefromMonth = DATEADD(DAY,1,EOMONTH(@dateto,-1))
set @datefromYear = DATEADD(yy, DATEDIFF(yy, 0, @dateto), 0)

if object_id('tempdb..#TempSelectReport', 'u') is not null drop table #TempSelectReport 
create table #TempSelectReport
(
	AgentCode nvarchar(100) COLLATE Database_Default,
	AgentName nvarchar(100) COLLATE Database_Default,
	YTDSubs numeric(32,2),
	MTDSubs numeric(32,2),
	TodaySubs numeric(32,2),
	YTDRedemp numeric(32,2),
	MTDREdemp numeric(32,2),
	TodayRedemp numeric(32,2),
	YTD numeric(32,2),
	MTD numeric(32,2),
	Today numeric(32,2)
)
CREATE CLUSTERED INDEX indx_TempSelectReport ON #TempSelectReport (AgentCode,AgentName);

insert into #TempSelectReport(AgentCode,AgentName)
select A.SACode,A.Name from (
select B.SACode,B.Name from ClientRedemption A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''

union all 

select B.SACode,B.Name from ClientSwitching A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
where ValueDate between @datefromYear and @dateto  and B.SACode =''

union all

select B.SACode,B.Name from ClientSubscription A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''
) A
group by A.SACode,A.name

--Subscription
begin
update A set A.TodaySubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.SACode,sum(TotalSubscription) TotalSubscription from (
		select B.SACode,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''
		group by B.SACode

		union all 

		select B.SACode,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode !=''
		group by B.SACode
	)A 
	group by A.SACode
)B on A.AgentCode = B.SACode
end

--redemption
begin
update A set A.TodayRedemp = isnull(B.TotalRedemption,0),A.Today = A.TodaySubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.SACode,sum(TotalRedemption) TotalRedemption from (
		select B.SACode,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''
		group by B.SACode

		union all 

		select B.SACode,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode !=''
		group by B.SACode
	)A 
	group by A.SACode
)B on A.AgentCode = B.SACode
end

--Subscription MTD
begin
update A set A.MTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.SACode,sum(TotalSubscription) TotalSubscription from (
		select B.SACode,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''
		group by B.SACode

		union all 

		select B.SACode,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode !=''
		group by B.SACode
	)A 
	group by A.SACode
)B on A.AgentCode = B.SACode
end

--redemption MTD
begin
update A set A.MTDREdemp = isnull(B.TotalRedemption,0),A.MTD = A.MTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.SACode,sum(TotalRedemption) TotalRedemption from (
		select B.SACode,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''
		group by B.SACode

		union all 

		select B.SACode,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode !=''
		group by B.SACode
	)A 
	group by A.SACode
)B on A.AgentCode = B.SACode
end

--Subscription YTD
begin
update A set A.YTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.SACode,sum(TotalSubscription) TotalSubscription from (
		select B.SACode,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''
		group by B.SACode

		union all 

		select B.SACode,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode !=''
		group by B.SACode
	)A 
	group by A.SACode
)B on A.AgentCode = B.SACode
end

--redemption YTD
begin
update A set A.YTDREdemp = isnull(B.TotalRedemption,0),A.YTD = A.YTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.SACode,sum(TotalRedemption) TotalRedemption from (
		select B.SACode,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.SACode !=''
		group by B.SACode

		union all 

		select B.SACode,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode !=''
		group by B.SACode
	)A 
	group by A.SACode
)B on A.AgentCode = B.SACode
end

select AgentCode,AgentName,YTDSubs, MTDSubs, TodaySubs, YTDRedemp, MTDREdemp, TodayRedemp, YTD,  MTD, Today from #TempSelectReport
                                        
                                                                        ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<TransaksiHarianAll> rList1 = new List<TransaksiHarianAll>();
                                                    while (dr1.Read())
                                                    {

                                                        TransaksiHarianAll rSingle1 = new TransaksiHarianAll();
                                                        rSingle1.AgentCode = Convert.ToString(dr1["AgentCode"]);
                                                        rSingle1.AgentName = Convert.ToString(dr1["AgentName"]);
                                                        rSingle1.YTDSubsAgent = Convert.ToDecimal(dr1["YTDSubs"]);
                                                        rSingle1.MTDSubsAgent = Convert.ToDecimal(dr1["MTDSubs"]);
                                                        rSingle1.TodaySubsAgent = Convert.ToDecimal(dr1["TodaySubs"]);
                                                        rSingle1.YTDRedempAgent = Convert.ToDecimal(dr1["YTDRedemp"]);
                                                        rSingle1.MTDRedempAgent = Convert.ToDecimal(dr1["MTDRedemp"]);
                                                        rSingle1.TodayRedempAgent = Convert.ToDecimal(dr1["TodayRedemp"]);
                                                        rSingle1.YTDAgent = Convert.ToDecimal(dr1["YTD"]);
                                                        rSingle1.MTDAgent = Convert.ToDecimal(dr1["MTD"]);
                                                        rSingle1.TodayAgent = Convert.ToDecimal(dr1["Today"]);
                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 2].Value = "Agent Penjual Reksa Dana (APERD)";
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {

                                                        incRowExcel++;


                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail1.AgentCode;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.AgentName;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.YTDSubsAgent;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.MTDSubsAgent;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.TodaySubsAgent;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail1.YTDRedempAgent;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail1.MTDRedempAgent;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail1.TodayRedempAgent;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail1.YTDAgent;
                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail1.MTDAgent;
                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail1.TodayAgent;
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                            //worksheet.Cells[incRowExcel, 1].Value = _no;


                                                            worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }
                                                        worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();

                                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();

                                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();

                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Calculate();


                                                        _rowAperd = incRowExcel;

                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        incRowExcel = incRowExcel + 2;



                                                    }



                                                    _rangeDetail = "A:K";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                                    worksheet.Column(1).AutoFit();
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).AutoFit();
                                                    worksheet.Column(8).AutoFit();
                                                    worksheet.Column(9).AutoFit();
                                                    worksheet.Column(10).AutoFit();
                                                    worksheet.Column(11).AutoFit();


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Transaksi Harian All";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        //2


                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd2 = DbCon.CreateCommand())
                                        {


                                            cmd2.CommandText = @"
                                       declare @datefromMonth datetime
declare @datefromYear datetime

set @datefromMonth = DATEADD(DAY,1,EOMONTH(@dateto,-1))
set @datefromYear = DATEADD(yy, DATEDIFF(yy, 0, @dateto), 0)

if object_id('tempdb..#TempSelectReport', 'u') is not null drop table #TempSelectReport 
create table #TempSelectReport
(
	SID nvarchar(100) COLLATE Database_Default,
	BNIGroup nvarchar(100) COLLATE Database_Default,
	YTDSubs numeric(32,2),
	MTDSubs numeric(32,2),
	TodaySubs numeric(32,2),
	YTDRedemp numeric(32,2),
	MTDREdemp numeric(32,2),
	TodayRedemp numeric(32,2),
	YTD numeric(32,2),
	MTD numeric(32,2),
	Today numeric(32,2)
)
CREATE CLUSTERED INDEX indx_TempSelectReport ON #TempSelectReport (SID,BNIGroup);

insert into #TempSelectReport(SID,BNIGroup)
select A.SID,A.Name from (
select B.SID,B.Name from ClientRedemption A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.InternalCategoryPK = 1

union all 

select B.SID,B.Name from ClientSwitching A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
where ValueDate between @datefromYear and @dateto  and B.SID ='' and B.InternalCategoryPK = 1

union all

select B.SID,B.Name from ClientSubscription A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.InternalCategoryPK = 1
) A
group by A.SID,A.name

--Subscription
begin
update A set A.TodaySubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.Name,sum(TotalSubscription) TotalSubscription from (
		select B.Name,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name
	)A 
	group by A.Name
)B on A.BNIGroup = B.Name
end

--redemption
begin
update A set A.TodayRedemp = isnull(B.TotalRedemption,0),A.Today = A.TodaySubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.Name,sum(TotalRedemption) TotalRedemption from (
		select B.Name,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto and isnull(A.TotalCashAmount,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name
	)A 
	group by A.Name
)B on A.BNIGroup = B.Name
end

--Subscription MTD
begin
update A set A.MTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.Name,sum(TotalSubscription) TotalSubscription from (
		select B.Name,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmountFundTo,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name
	)A 
	group by A.Name
)B on A.BNIGroup = B.Name
end

--redemption MTD
begin
update A set A.MTDREdemp = isnull(B.TotalRedemption,0),A.MTD = A.MTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.Name,sum(TotalRedemption) TotalRedemption from (
		select B.Name,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name
	)A 
	group by A.Name
)B on A.BNIGroup = B.Name
end

--Subscription YTD
begin
update A set A.YTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.Name,sum(TotalSubscription) TotalSubscription from (
		select B.Name,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name
	)A 
	group by A.Name
)B on A.BNIGroup = B.Name
end

--redemption YTD
begin
update A set A.YTDREdemp = isnull(B.TotalRedemption,0),A.YTD = A.YTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.Name,sum(TotalRedemption) TotalRedemption from (
		select B.Name,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmount,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.InternalCategoryPK = 1
		group by B.Name
	)A 
	group by A.Name
)B on A.BNIGroup = B.Name
end

select SID,BNIGroup,YTDSubs, MTDSubs, TodaySubs, YTDRedemp, MTDREdemp, TodayRedemp, YTD,  MTD, Today from #TempSelectReport

                                                                        ";

                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@Dateto", _unitRegistryRpt.ValueDateTo);


                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                            {
                                                if (!dr2.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<TransaksiHarianAll> rList2 = new List<TransaksiHarianAll>();
                                                    while (dr2.Read())
                                                    {

                                                        TransaksiHarianAll rSingle2 = new TransaksiHarianAll();
                                                        rSingle2.SID = Convert.ToString(dr2["SID"]);
                                                        rSingle2.BNIGroup = Convert.ToString(dr2["BNIGroup"]);
                                                        rSingle2.YTDSubsAgent = Convert.ToDecimal(dr2["YTDSubs"]);
                                                        rSingle2.MTDSubsAgent = Convert.ToDecimal(dr2["MTDSubs"]);
                                                        rSingle2.TodaySubsAgent = Convert.ToDecimal(dr2["TodaySubs"]);
                                                        rSingle2.YTDRedempAgent = Convert.ToDecimal(dr2["YTDRedemp"]);
                                                        rSingle2.MTDRedempAgent = Convert.ToDecimal(dr2["MTDRedemp"]);
                                                        rSingle2.TodayRedempAgent = Convert.ToDecimal(dr2["TodayRedemp"]);
                                                        rSingle2.YTDAgent = Convert.ToDecimal(dr2["YTD"]);
                                                        rSingle2.MTDAgent = Convert.ToDecimal(dr2["MTD"]);
                                                        rSingle2.TodayAgent = Convert.ToDecimal(dr2["Today"]);
                                                        rList2.Add(rSingle2);






                                                    }



                                                    var GroupByReference2 =
                                                    from r in rList2
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "SID";
                                                    worksheet.Cells[incRowExcel, 2].Value = "BNI Group";
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 22].Style.Font.Bold = true;

                                                    foreach (var rsHeader2 in GroupByReference2)
                                                    {



                                                        incRowExcel++;


                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail2 in rsHeader2)
                                                        {

                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.SID;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail2.BNIGroup;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.YTDSubsAgent;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail2.MTDSubsAgent;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail2.TodaySubsAgent;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail2.YTDRedempAgent;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail2.MTDRedempAgent;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail2.TodayRedempAgent;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail2.YTDAgent;
                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail2.MTDAgent;
                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail2.TodayAgent;
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";



                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }

                                                        worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();

                                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();

                                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();

                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Calculate();

                                                        _rowRetail = incRowExcel;

                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;




                                                    }


                                                    _rangeDetail = "A:K";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                                    worksheet.Column(1).AutoFit();
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).AutoFit();
                                                    worksheet.Column(8).AutoFit();
                                                    worksheet.Column(9).AutoFit();
                                                    worksheet.Column(10).AutoFit();
                                                    worksheet.Column(11).AutoFit();


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Transaksi Harian All";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        //3
                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd3 = DbCon.CreateCommand())
                                        {


                                            cmd3.CommandText = @"
                                       declare @datefromMonth datetime
declare @datefromYear datetime

set @datefromMonth = DATEADD(DAY,1,EOMONTH(@dateto,-1))
set @datefromYear = DATEADD(yy, DATEDIFF(yy, 0, @dateto), 0)

if object_id('tempdb..#TempSelectReport', 'u') is not null drop table #TempSelectReport 
create table #TempSelectReport
(
	Type nvarchar(20),
	YTDSubs numeric(32,2),
	MTDSubs numeric(32,2),
	TodaySubs numeric(32,2),
	YTDRedemp numeric(32,2),
	MTDREdemp numeric(32,2),
	TodayRedemp numeric(32,2),
	YTD numeric(32,2),
	MTD numeric(32,2),
	Today numeric(32,2)
)

insert into #TempSelectReport(Type)
select 'Direct'

--Subscription
begin
update A set A.TodaySubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Direct' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--redemption
begin
update A set A.TodayRedemp = isnull(B.TotalRedemption,0),A.Today = A.TodaySubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Direct' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--Subscription MTD
begin
update A set A.MTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Direct' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--redemption MTD
begin
update A set A.MTDREdemp = isnull(B.TotalRedemption,0),A.MTD = A.MTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Direct' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto  and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--Subscription YTD
begin
update A set A.YTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select 'Direct' Type,sum(TotalSubscription) TotalSubscription from (
		select sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1

		union all 

		select sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

--redemption YTD
begin
update A set A.YTDRedemp = isnull(B.TotalRedemption,0),A.YTD = A.YTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select 'Direct' Type,sum(TotalRedemption) TotalRedemption from (
		select sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1

		union all 

		select sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmountFundFrom,0) != 0 and B.SACode ='' and B.InternalCategoryPK != 1
	)A 
)B on A.Type = B.Type
where A.Type = 'Direct'
end

select YTDSubs, MTDSubs, TodaySubs, YTDRedemp, MTDREdemp, TodayRedemp, YTD , MTD, Today from #TempSelectReport order by Type
                                        
                                        
                                                                        ";

                                            cmd3.CommandTimeout = 0;
                                            cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                                            using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                            {
                                                if (!dr3.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<TransaksiHarianAll> rList3 = new List<TransaksiHarianAll>();
                                                    while (dr3.Read())
                                                    {

                                                        TransaksiHarianAll rSingle3 = new TransaksiHarianAll();
                                                        rSingle3.YTDSubs = Convert.ToDecimal(dr3["YTDSubs"]);
                                                        rSingle3.MTDSubs = Convert.ToDecimal(dr3["MTDSubs"]);
                                                        rSingle3.TodaySubs = Convert.ToDecimal(dr3["TodaySubs"]);
                                                        rSingle3.YTDRedemp = Convert.ToDecimal(dr3["YTDRedemp"]);
                                                        rSingle3.MTDRedemp = Convert.ToDecimal(dr3["MTDRedemp"]);
                                                        rSingle3.TodayRedemp = Convert.ToDecimal(dr3["TodayRedemp"]);
                                                        rSingle3.YTD = Convert.ToDecimal(dr3["YTD"]);
                                                        rSingle3.MTD = Convert.ToDecimal(dr3["MTD"]);
                                                        rSingle3.Today = Convert.ToDecimal(dr3["Today"]);
                                                        rList3.Add(rSingle3);

                                                    }



                                                    var GroupByReference3 =
                                                    from r in rList3
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Others";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    foreach (var rsHeader3 in GroupByReference3)
                                                    {



                                                        incRowExcel++;

                                                        int _startRowDetail = incRowExcel;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Agen Penjual Penjual Reksa Dana (APERD)";

                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 3].Value = worksheet.Cells[_rowAperd, 3].Value;
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Value = worksheet.Cells[_rowAperd, 4].Value;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = worksheet.Cells[_rowAperd, 5].Value;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Value = worksheet.Cells[_rowAperd, 6].Value;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Value = worksheet.Cells[_rowAperd, 7].Value;
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Value = worksheet.Cells[_rowAperd, 8].Value;
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Value = worksheet.Cells[_rowAperd, 9].Value;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Value = worksheet.Cells[_rowAperd, 10].Value;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Value = worksheet.Cells[_rowAperd, 11].Value;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = "NI002";

                                                        worksheet.Cells[incRowExcel, 2].Value = "PT BNI Asset Management (Direct)";

                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Retail";

                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 3].Value = worksheet.Cells[_rowRetail, 3].Value;
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Value = worksheet.Cells[_rowRetail, 4].Value;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = worksheet.Cells[_rowRetail, 5].Value;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Value = worksheet.Cells[_rowRetail, 6].Value;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Value = worksheet.Cells[_rowRetail, 7].Value;
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Value = worksheet.Cells[_rowRetail, 8].Value;
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Value = worksheet.Cells[_rowRetail, 9].Value;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Value = worksheet.Cells[_rowRetail, 10].Value;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Value = worksheet.Cells[_rowRetail, 11].Value;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Institutional";

                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;






                                                        int _endRowDetail = 0;


                                                        //end area header
                                                        foreach (var rsDetail3 in rsHeader3)
                                                        {

                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail3.YTDSubs;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail3.MTDSubs;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail3.TodaySubs;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail3.YTDRedemp;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail3.MTDRedemp;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail3.TodayRedemp;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail3.YTD;
                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail3.MTD;
                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail3.Today;
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";


                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }




                                                        worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();

                                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();

                                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();

                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Calculate();


                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                    }



                                                    _rangeDetail = "A:K";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                                    worksheet.Column(1).AutoFit();
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).AutoFit();
                                                    worksheet.Column(8).AutoFit();
                                                    worksheet.Column(9).AutoFit();
                                                    worksheet.Column(10).AutoFit();
                                                    worksheet.Column(11).AutoFit();


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Transaksi Harian All";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        //4


                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd4 = DbCon.CreateCommand())
                                        {


                                            cmd4.CommandText = @"
                                       
                                        declare @datefromMonth datetime
declare @datefromYear datetime

set @datefromMonth = DATEADD(DAY,1,EOMONTH(@dateto,-1))
set @datefromYear = DATEADD(yy, DATEDIFF(yy, 0, @dateto), 0)

if object_id('tempdb..#TempSelectReport', 'u') is not null drop table #TempSelectReport 
create table #TempSelectReport
(
	FundCode nvarchar(100) COLLATE Database_Default,
	FundName nvarchar(100) COLLATE Database_Default,
	YTDSubs numeric(32,2),
	MTDSubs numeric(32,2),
	TodaySubs numeric(32,2),
	YTDRedemp numeric(32,2),
	MTDREdemp numeric(32,2),
	TodayRedemp numeric(32,2),
	YTD numeric(32,2),
	MTD numeric(32,2),
	Today numeric(32,2)
)
CREATE CLUSTERED INDEX indx_TempSelectReport ON #TempSelectReport (FundCode,FundName);

insert into #TempSelectReport(FundCode,FundName)
select A.SInvestCode,A.Name from (
select B.SInvestCode,B.Name from ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
where ValueDate between @datefromYear and @dateto 

union all 

select B.SInvestCode,B.Name from ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.Status in (1,2)
where ValueDate between @datefromYear and @dateto

union all

select B.SInvestCode,B.Name from ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.Status in (1,2)
where ValueDate between @datefromYear and @dateto  

union all

select B.SInvestCode,B.Name from ClientSubscription A
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
where ValueDate between @datefromYear and @dateto
) A
group by A.SInvestCode,A.name

--Subscription
begin
update A set A.TodaySubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.Name,sum(TotalSubscription) TotalSubscription from (
		select B.Name,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmount,0) != 0 
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join Fund B on A.FundPKTo = B.FundPK and B.Status in (1,2)
		where ValueDate = @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0
		group by B.Name
	)A 
	group by A.Name
)B on A.FundName = B.Name
end

--redemption
begin
update A set A.TodayRedemp = isnull(B.TotalRedemption,0),A.Today = A.TodaySubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.Name,sum(TotalRedemption) TotalRedemption from (
		select B.Name,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
		where ValueDate = @dateto and isnull(A.TotalCashAmount,0) != 0 
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join Fund B on A.FundPKFrom = B.FundPK and B.Status in (1,2)
		where ValueDate = @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0
		group by B.Name
	)A 
	group by A.Name
)B on A.FundName = B.Name
end

--Subscription MTD
begin
update A set A.MTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.Name,sum(TotalSubscription) TotalSubscription from (
		select B.Name,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmount,0) != 0
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join Fund B on A.FundPKTo = B.FundPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmountFundTo,0) != 0
		group by B.Name
	)A 
	group by A.Name
)B on A.FundName = B.Name
end

--redemption MTD
begin
update A set A.MTDREdemp = isnull(B.TotalRedemption,0),A.MTD = A.MTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.Name,sum(TotalRedemption) TotalRedemption from (
		select B.Name,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmount,0) != 0 
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join Fund B on A.FundPKFrom = B.FundPK and B.Status in (1,2)
		where ValueDate between @datefromMonth and @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 
		group by B.Name
	)A 
	group by A.Name
)B on A.FundName = B.Name
end

--Subscription YTD
begin
update A set A.YTDSubs = isnull(B.TotalSubscription,0) from #TempSelectReport A
left join (
	select A.Name,sum(TotalSubscription) TotalSubscription from (
		select B.Name,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmount,0) != 0 
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		left join Fund B on A.FundPKTo = B.FundPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto  and isnull(A.TotalCashAmountFundTo,0) != 0 
		group by B.Name
	)A 
	group by A.Name
)B on A.FundName = B.Name
end

--redemption YTD
begin
update A set A.YTDREdemp = isnull(B.TotalRedemption,0),A.YTD = A.YTDSubs - isnull(B.TotalRedemption,0) from #TempSelectReport A
left join (

	select A.Name,sum(TotalRedemption) TotalRedemption from (
		select B.Name,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmount,0) != 0 
		group by B.Name

		union all 

		select B.Name,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		left join Fund B on A.FundPKFrom = B.FundPK and B.Status in (1,2)
		where ValueDate between @datefromYear and @dateto and isnull(A.TotalCashAmountFundFrom,0) != 0 
		group by B.Name
	)A 
	group by A.Name
)B on A.FundName = B.Name
end

select FundCode DetailCode,FundName DetailType,YTDSubs, MTDSubs, TodaySubs, YTDRedemp, MTDREdemp, TodayRedemp, YTD,  MTD, Today from #TempSelectReport
                                        
                                                                        ";

                                            cmd4.CommandTimeout = 0;
                                            cmd4.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                                            using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                            {
                                                if (!dr4.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<TransaksiHarianAll> rList4 = new List<TransaksiHarianAll>();
                                                    while (dr4.Read())
                                                    {

                                                        TransaksiHarianAll rSingle4 = new TransaksiHarianAll();
                                                        rSingle4.DetailCode = Convert.ToString(dr4["DetailCode"]);
                                                        rSingle4.DetailType = Convert.ToString(dr4["DetailType"]);
                                                        rSingle4.YTDSubs = Convert.ToDecimal(dr4["YTDSubs"]);
                                                        rSingle4.MTDSubs = Convert.ToDecimal(dr4["MTDSubs"]);
                                                        rSingle4.TodaySubs = Convert.ToDecimal(dr4["TodaySubs"]);
                                                        rSingle4.YTDRedemp = Convert.ToDecimal(dr4["YTDRedemp"]);
                                                        rSingle4.MTDRedemp = Convert.ToDecimal(dr4["MTDRedemp"]);
                                                        rSingle4.TodayRedemp = Convert.ToDecimal(dr4["TodayRedemp"]);
                                                        rSingle4.YTD = Convert.ToDecimal(dr4["YTD"]);
                                                        rSingle4.MTD = Convert.ToDecimal(dr4["MTD"]);
                                                        rSingle4.Today = Convert.ToDecimal(dr4["Today"]);




                                                        rList4.Add(rSingle4);

                                                    }



                                                    var GroupByReference4 =
                                                    from r in rList4
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = incRowExcel + 3;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Detail Per Reksa Dana";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    foreach (var rsHeader4 in GroupByReference4)
                                                    {



                                                        incRowExcel++;

                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail4 in rsHeader4)
                                                        {


                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail4.DetailCode;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail4.DetailType;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail4.YTDSubs;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail4.MTDSubs;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail4.TodaySubs;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail4.YTDRedemp;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail4.MTDRedemp;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail4.TodayRedemp;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail4.YTD;
                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail4.MTD;
                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail4.Today;
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";



                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }




                                                        worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();

                                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();

                                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();

                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 11].Calculate();


                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;




                                                    }



                                                    _rangeDetail = "A:K";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                                    worksheet.Column(1).AutoFit();
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).AutoFit();
                                                    worksheet.Column(8).AutoFit();
                                                    worksheet.Column(9).AutoFit();
                                                    worksheet.Column(10).AutoFit();
                                                    worksheet.Column(11).AutoFit();


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Transaksi Harian All";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        //RekapTrxAUM
                                        worksheet = package.Workbook.Worksheets.Add("RekapTrxAUM");

                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd5 = DbCon.CreateCommand())
                                        {


                                            cmd5.CommandText = @"
                                            declare @datefrom datetime
                                            declare @datetoFCP datetime
                                            declare @yesterdayFCP datetime

                                            set @datefrom = DATEADD(DAY,1,EOMONTH(@dateto,-1))
                                            set @datetoFCP = case when dbo.CheckTodayIsHoliday(@dateto) = 1 then dbo.FWorkingDay(@dateto,-1) else @dateto end
                                            set @yesterdayFCP = dbo.FWorkingDay(@datetoFCP,-1)

                                            if object_id('tempdb..#TempSelectReport', 'u') is not null drop table #TempSelectReport 
                                            create table #TempSelectReport
                                            (
	                                            FundPK INT,
	                                            FundClientPK int,
	                                            AgentPK int,
	                                            TotalSubscription numeric(22,2),
	                                            TotalRedemption numeric(22,2),
	                                            AUM numeric(32,8),
	                                            MFee numeric(22,8)
                                            )
                                            CREATE CLUSTERED INDEX indx_tableNAV ON #TempSelectReport (FundPK);

                                            --AUM
                                            insert into #TempSelectReport(FundClientPK,FundPK,AgentPK,AUM)
                                            select A.FundClientPK,A.FundPK,B.SellingAgentPK,sum(A.UnitAmount * D.Nav) AUM from FundClientPosition A
                                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
                                            left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
                                            left join CloseNAV D on A.FundPK = D.FundPK and D.Status in (1,2)
                                            where A.Date = @yesterdayFCP and C.ParentPK in (3,12,11) and D.Date = @datetoFCP and A.UnitAmount != 0
                                            group by A.FundClientPK,A.FundPK,B.SellingAgentPK

                                            --Redemption
                                            begin
                                            update A set A.TotalRedemption = isnull(B.TotalRedemption,0) from #TempSelectReport A
                                            left join (

	                                            select A.FundClientPK,A.FundPK,A.AgentPK,sum(TotalRedemption) TotalRedemption from (
		                                            select A.FundClientPK,FundPK,B.SellingAgentPK AgentPK,sum(A.TotalCashAmount) TotalRedemption from ClientRedemption A
		                                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		                                            left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
		                                            where ValueDate between @datefrom and @dateto and C.ParentPK in (3,12,11) and isnull(A.TotalCashAmount,0) != 0
		                                            group by A.FundClientPK,A.FundPK,B.SellingAgentPK

		                                            union all 

		                                            select A.FundClientPK,A.FundPKFrom,B.SellingAgentPK AgentPK,sum(A.TotalCashAmountFundFrom) TotalRedemption from ClientSwitching A
		                                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		                                            left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
		                                            where ValueDate between @datefrom and @dateto and C.ParentPK in (3,12,11) and isnull(A.TotalCashAmountFundFrom,0) != 0
		                                            group by A.FundClientPK,A.FundPKFrom,B.SellingAgentPK
	                                            )A 
	                                            group by A.FundClientPK,A.FundPK,A.AgentPK
                                            )B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPK and A.AgentPK = B.AgentPK
                                            end

                                            --Subscription
                                            begin
                                            update A set A.TotalSubscription = isnull(B.TotalSubscription,0) from #TempSelectReport A
                                            left join (
	                                            select A.FundClientPK,A.FundPK,A.AgentPK,sum(TotalSubscription) TotalSubscription from (
		                                            select A.FundClientPK,FundPK,B.SellingAgentPK AgentPK,sum(A.TotalCashAmount) TotalSubscription from ClientSubscription A
		                                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		                                            left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
		                                            where ValueDate between @datefrom and @dateto and C.ParentPK in (3,12,11) and isnull(A.TotalCashAmount,0) != 0
		                                            group by A.FundClientPK,A.FundPK,B.SellingAgentPK

		                                            union all 

		                                            select A.FundClientPK,A.FundPKTo,B.SellingAgentPK AgentPK,sum(A.TotalCashAmountFundTo) TotalSubscription from ClientSwitching A
		                                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		                                            left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2) 
		                                            where ValueDate between @datefrom and @dateto and C.ParentPK in (3,12,11) and isnull(A.TotalCashAmountFundTo,0) != 0
		                                            group by A.FundClientPK,A.FundPKTo,B.SellingAgentPK
	                                            )A 
	                                            group by A.FundClientPK,A.FundPK,A.AgentPK
                                            )B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPK and A.AgentPK = B.AgentPK
                                            end

                                            --MFEE
                                            update A set A.Mfee = isnull(B.Mfee,0) from #TempSelectReport A
                                            left join (
	                                            select FundClientPK,FundPK,SellingAgentPK AgentPK,sum(Mfee) Mfee from DailyDataForCommissionRptNew
	                                            where MFeeDate between @datefrom and @dateto
	                                            group by FundClientPK,FundPK,SellingAgentPK
                                            )B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPK and A.AgentPK = B.AgentPK


                                            select E.ID JenisSales, D.Name Sales,C.IFUACode IFUANo,C.SID,C.Name SIDName,B.SInvestCode FundCode,B.Name FundName,MV1.DescOne TipeReksaDana,TotalSubscription Subscription,TotalRedemption Redemption,AUM,MFee ManagementFee from #TempSelectReport A
                                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                            left join Agent D on A.AgentPK = D.AgentPK and D.Status in (1,2)
                                            left join Agent E on D.ParentPK = E.AgentPK and E.Status in (1,2)
                                            left join MasterValue MV1 on B.Type = MV1.Code and MV1.ID = 'FundType' and MV1.Status in (1,2)
                                            order by JenisSales,Sales

                                        ";

                                            cmd5.CommandTimeout = 0;
                                            cmd5.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                            using (SqlDataReader dr5 = cmd5.ExecuteReader())
                                            {
                                                if (!dr5.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<RekapTrxAUM> rList5 = new List<RekapTrxAUM>();
                                                    while (dr5.Read())
                                                    {

                                                        RekapTrxAUM rSingle5 = new RekapTrxAUM();
                                                        rSingle5.JenisSales = Convert.ToString(dr5["JenisSales"]);
                                                        rSingle5.Sales = Convert.ToString(dr5["Sales"]);
                                                        rSingle5.IFUANo = Convert.ToString(dr5["IFUANo"]);
                                                        rSingle5.SIDName = Convert.ToString(dr5["SIDName"]);
                                                        rSingle5.SID = Convert.ToString(dr5["SID"]);
                                                        rSingle5.FundCode = Convert.ToString(dr5["FundCode"]);
                                                        rSingle5.FundName = Convert.ToString(dr5["FundName"]);
                                                        rSingle5.TipeReksaDana = Convert.ToString(dr5["TipeReksaDana"]);
                                                        rSingle5.Subscription = Convert.ToDecimal(dr5["Subscription"]);
                                                        rSingle5.Redemption = Convert.ToDecimal(dr5["Redemption"]);
                                                        rSingle5.AUM = Convert.ToDecimal(dr5["AUM"]);
                                                        rSingle5.ManagementFee = Convert.ToDecimal(dr5["ManagementFee"]);





                                                        rList5.Add(rSingle5);

                                                    }



                                                    var GroupByReference5 =
                                                    from r in rList5
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = 0;
                                                    incRowExcel = incRowExcel + 2;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Rekap Transaksi dan Revenue Investor Institusi";
                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                                    worksheet.Cells[incRowExcel, 10].Value = "As Of";
                                                    worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 10, incRowExcel, 11].Style.Font.Bold = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");

                                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = "Transaksi";
                                                    worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    foreach (var rsHeader5 in GroupByReference5)
                                                    {
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Detail Investor Institusi";


                                                        incRowExcel++;


                                                        RowB = incRowExcel;
                                                        RowG = incRowExcel + 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Jenis Sales";
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 2].Value = "Sales";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Value = "Investor Fund Unit A/C No.";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 4].Value = "SID";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 5].Value = "SID Name";
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 6].Value = "Fund Code";
                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 7].Value = "Fund Name";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 8].Value = "Tipe Reksa Dana";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 9].Value = "Subscription";
                                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 10].Value = "Redemption";
                                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 11].Value = "AUM";
                                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 12].Value = "Management Fee";
                                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;



                                                        incRowExcel = incRowExcel + 1;
                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail5 in rsHeader5)
                                                        {

                                                            //incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail5.JenisSales;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail5.Sales;
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail5.IFUANo;
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail5.SID;
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail5.SIDName;
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail5.FundCode;
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail5.FundName;
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail5.TipeReksaDana;
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail5.Subscription;
                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail5.Redemption;
                                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail5.AUM;
                                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail5.ManagementFee;
                                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                            incRowExcel++;



                                                        }

                                                    }





                                                    _rangeDetail = "A:L";

                                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                    {
                                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                        r.Style.Font.Size = 11;
                                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    }

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                                    worksheet.Column(1).AutoFit();
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).AutoFit();
                                                    worksheet.Column(4).AutoFit();
                                                    worksheet.Column(5).AutoFit();
                                                    worksheet.Column(6).AutoFit();
                                                    worksheet.Column(7).AutoFit();
                                                    worksheet.Column(8).AutoFit();
                                                    worksheet.Column(9).AutoFit();
                                                    worksheet.Column(10).AutoFit();
                                                    worksheet.Column(11).AutoFit();
                                                    worksheet.Column(12).AutoFit();


                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Transaksi Harian All";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }




                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Data Transaksi Tahunan
            if (_unitRegistryRpt.ReportName.Equals("Data Transaksi Tahunan"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"
begin
	if object_id('tempdb..#FundUnitPosition', 'u') is not null drop table #FundUnitPosition 

	create table #FundUnitPosition
	(
		period int,
		FundTypePK int,
		FundTypeName nvarchar(200),
		AUMIndividu numeric(22,4),
		AUMInstitusi numeric(22,4),
		AUMCorporate numeric(22,4),
		AUMFoundation numeric(22,4),
		AUMFinancialInstitution numeric(22,4),
		AUMInsurance numeric(22,4),	
		AUMMutualFund numeric(22,4),
		AUMPensionFund numeric(22,4),
		AUMSecuritiesCompany numeric(22,4),
		AUMOthers numeric(22,4)
	)
	CREATE CLUSTERED INDEX indx_FundUnitPosition ON #FundUnitPosition (FundTypePK);
		
	--BUAT INDIVIDU
	if object_id('tempdb..#FundUnitPositionIndividu', 'u') is not null drop table #FundUnitPositionIndividu 

	create table #FundUnitPositionIndividu
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionIndividu ON #FundUnitPositionIndividu (FundPK);

	--BUAT INSTITUSI
	if object_id('tempdb..#FundUnitPositionInstitusi', 'u') is not null drop table #FundUnitPositionInstitusi 

	create table #FundUnitPositionInstitusi
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionInstitusi ON #FundUnitPositionInstitusi (FundPK);

	--BUAT FINANCIAL INSTITUTION
	if object_id('tempdb..#FundUnitPositionFinancialInstitution', 'u') is not null drop table #FundUnitPositionFinancialInstitution 
	create table #FundUnitPositionFinancialInstitution
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionBank ON #FundUnitPositionFinancialInstitution (FundPK);

	--BUAT INSURANCE
	if object_id('tempdb..#FundUnitPositionInsurance', 'u') is not null drop table #FundUnitPositionInsurance 

	create table #FundUnitPositionInsurance
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionInsurance ON #FundUnitPositionInsurance (FundPK);

	--BUAT OTHERS
	if object_id('tempdb..#FundUnitPositionOthers', 'u') is not null drop table #FundUnitPositionOthers 

	create table #FundUnitPositionOthers
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)

	--BUAT MUTUAL FUND
	if object_id('tempdb..#FundUnitPositionMutualFund', 'u') is not null drop table #FundUnitPositionMutualFund
	create table #FundUnitPositionMutualFund
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionMutualFund ON #FundUnitPositionMutualFund (FundPK);

	--BUAT PENSION FUND
	if object_id('tempdb..#FundUnitPositionPensionFund', 'u') is not null drop table #FundUnitPositionPensionFund
	create table #FundUnitPositionPensionFund
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionPensionFund ON #FundUnitPositionPensionFund (FundPK);

	--BUAT SECURITIES COMPANY
	if object_id('tempdb..#FundUnitPositionSecuritiesCompany', 'u') is not null drop table #FundUnitPositionSecuritiesCompany
	create table #FundUnitPositionSecuritiesCompany
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionSecuritiesCompany ON #FundUnitPositionSecuritiesCompany (FundPK);

	--BUAT CORPORATE
	if object_id('tempdb..#FundUnitPositionCorporate', 'u') is not null drop table #FundUnitPositionCorporate
	create table #FundUnitPositionCorporate
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionCorporate ON #FundUnitPositionCorporate (FundPK);

	--BUAT FOUNDATION
	if object_id('tempdb..#FundUnitPositionFoundation', 'u') is not null drop table #FundUnitPositionFoundation
	create table #FundUnitPositionFoundation
	(
		TotalUnit NUMERIC(22,4),
		CompanyType int,
		FundType int,
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_FundUnitPositionFoundation ON #FundUnitPositionFoundation (FundPK);

	if object_id('tempdb..#CloseNAVPosition', 'u') is not null drop table #CloseNAVPosition
	create table #CloseNAVPosition
	(
		NAV NUMERIC(22,4),
		FundPK int,
		Period int
	)
	CREATE CLUSTERED INDEX indx_CloseNAVPosition ON #CloseNAVPosition (FundPK);

end

declare @period int
declare @yesterday date
declare @dateto datetime
set @period = @PeriodFrom
while (@period <= @PeriodTo)
begin
	set @dateto = dbo.FWorkingDay(EOMONTH(cast(cast(@period as nvarchar) + '-12-31' as datetime)),-0)


	if (dbo.CheckTodayIsHoliday(@dateto) = 1)
		set @dateto = dbo.FWorkingDay(@DateTo,-1)
	set @yesterday = dbo.FWorkingDay(@DateTo,-1)
	delete #CloseNAVPosition	
	delete #FundUnitPositionIndividu
	delete #FundUnitPositionInstitusi
	delete #FundUnitPositionCorporate
	delete #FundUnitPositionFoundation	
	delete #FundUnitPositionFinancialInstitution
	delete #FundUnitPositionInsurance
	delete #FundUnitPositionMutualFund
	delete #FundUnitPositionPensionFund
	delete #FundUnitPositionSecuritiesCompany
	delete #FundUnitPositionOthers

	--select @dateto,@yesterday

	INSERT INTO #FundUnitPosition
        (  FundTypePK,FundTypeName, period )
		SELECT distinct C.Type,I.DescOne, YEAR(A.Date) FROM dbo.FundClientPosition A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
        left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
		WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 
		group by C.Type,I.DescOne,YEAR(A.Date)



		
	INSERT INTO #FundUnitPositionIndividu
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 and ClientCategory = 1 
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

	INSERT INTO #FundUnitPositionInstitusi
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 and ClientCategory = 2 
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

	INSERT INTO #FundUnitPositionCorporate
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 AND B.Tipe = 1 and ClientCategory = 2
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

	INSERT INTO #FundUnitPositionFoundation
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 AND B.Tipe = 2 and ClientCategory = 2
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

    INSERT INTO #FundUnitPositionFinancialInstitution 
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 AND B.Tipe = 3 and ClientCategory = 2
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

	INSERT INTO #FundUnitPositionInsurance
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 AND B.Tipe = 4 and ClientCategory = 2
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

	INSERT INTO #FundUnitPositionMutualFund
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 AND B.Tipe = 5 and ClientCategory = 2
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

	INSERT INTO #FundUnitPositionPensionFund
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 AND B.Tipe = 6 and ClientCategory = 2
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

	INSERT INTO #FundUnitPositionSecuritiesCompany
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 AND B.Tipe = 7 and ClientCategory = 2
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)

	INSERT INTO #FundUnitPositionOthers
			(  TotalUnit,CompanyType,FundType,FundPK,Period )
			SELECT sum(isnull(UnitAmount,0)),B.Tipe CompanyType,D.Type FundType,A.FundPK, YEAR(A.Date) FROM dbo.FundClientPosition A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join MasterValue C on B.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
			left join Fund D on A.FundPK = D.FundPK and D.Status in (1,2)
			WHERE Date = @yesterday and isnull(UnitAmount,0) != 0 AND B.Tipe = 8 and ClientCategory = 2
			group by B.Tipe,D.Type,A.FundPK,YEAR(A.Date)


	INSERT INTO #CloseNAVPosition
			( NAV,FundPK,Period )
			SELECT case when B.CurrencyPK = 1 then A.NAV else A.Nav * isnull(H.Rate,1) end,A.FundPK, YEAR(A.Date) FROM dbo.CloseNAV A
			left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
			left join CurrencyRate H on B.CurrencyPK = H.CurrencyPK and H.status in (1,2) and H.date = (select max(B.date) 
			from Currency A left join CurrencyRate B on A.CurrencyPK = B.CurrencyPK where date <= @DateTo and B.CurrencyPK = A.CurrencyPK and A.status in (1,2) and B.status in (1,2))
			WHERE A.Date = @DateTo and A.status = 2



	--select isnull(B.UnitBank,0) from #FundUnitPosition A
	--left join (
	--select C.Type,I.DescOne FundTypeName,
	--sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.Period
	--from #FundUnitPositionIndividu A
	--left join #CloseNAVPosition B on A.FundPK = B.FundPK  and A.period = B.Period
	--left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	--left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	--group by I.DescOne,C.Type,A.Period
	--) B on A.FundTypeName = B.FundTypeName where A.period = B.Period



	update A set A.AUMIndividu = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.Period
	from #FundUnitPositionIndividu A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK 
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.Period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMInstitusi = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.Period
	from #FundUnitPositionInstitusi A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.Period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMCorporate = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.period
	from #FundUnitPositionCorporate A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMFoundation = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.period
	from #FundUnitPositionFoundation A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMFinancialInstitution = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.period
	from #FundUnitPositionFinancialInstitution A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMInsurance = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.period
	from #FundUnitPositionInsurance A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMMutualFund = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.period
	from #FundUnitPositionMutualFund A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMPensionFund = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.period
	from #FundUnitPositionPensionFund A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMSecuritiesCompany = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.period
	from #FundUnitPositionSecuritiesCompany A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period

	update A set A.AUMOthers = isnull(B.UnitBank,0) from #FundUnitPosition A
	left join (
	select C.Type,I.DescOne FundTypeName,
	sum(isnull(A.TotalUnit,0)* isnull(B.NAV,0)) UnitBank,A.period
	from #FundUnitPositionOthers A
	left join #CloseNAVPosition B on A.FundPK = B.FundPK and A.Period = B.Period
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue I on C.Type = I.Code and I.ID = 'FundType' and I.status in (1,2)
	group by I.DescOne,C.Type,A.period
	) B on A.FundTypeName = B.FundTypeName where A.period = B.Period


	set @period = @period + 1
end

select period ,FundTypeName, isnull(AUMIndividu,0) AUMIndividu, isnull(AUMInstitusi,0) AUMInstitusi,isnull(AUMCorporate,0) AUMCorporate,
isnull(AUMFoundation,0) AUMFoundation,isnull(AUMFinancialInstitution,0) AUMFinancialInstitution,isnull(AUMInsurance,0) AUMInsurance, 
isnull(AUMMutualFund,0) AUMMutualFund, isnull(AUMPensionFund,0) AUMPensionFund, isnull(AUMSecuritiesCompany,0) AUMSecuritiesCompany, isnull(AUMOthers,0) AUMOthers from #FundUnitPosition
order by period                    
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@PeriodFrom", _unitRegistryRpt.PeriodFrom);
                            cmd.Parameters.AddWithValue("@PeriodTo", _unitRegistryRpt.PeriodTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DataTransaksiTahunan" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DataTransaksiTahunan" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet1");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DataTransaksiTahunan> rList = new List<DataTransaksiTahunan>();
                                        while (dr0.Read())
                                        {

                                            DataTransaksiTahunan rSingle = new DataTransaksiTahunan();
                                            rSingle.Period = Convert.ToInt32(dr0["Period"]);
                                            rSingle.ProductType = Convert.ToString(dr0["FundTypeName"]);
                                            rSingle.DirectRetailClient = Convert.ToDecimal(dr0["AUMIndividu"]);
                                            rSingle.AUMInstitusi = Convert.ToDecimal(dr0["AUMInstitusi"]);
                                            rSingle.Corporate = Convert.ToDecimal(dr0["AUMCorporate"]);
                                            rSingle.Foundation = Convert.ToDecimal(dr0["AUMFoundation"]);
                                            rSingle.FinancialInstitution = Convert.ToDecimal(dr0["AUMFinancialInstitution"]);
                                            rSingle.AUMInsurance = Convert.ToDecimal(dr0["AUMInsurance"]);
                                            rSingle.MutualFund = Convert.ToDecimal(dr0["AUMMutualFund"]);
                                            rSingle.PensionFund = Convert.ToDecimal(dr0["AUMPensionFund"]);
                                            rSingle.SecuritiesCompany = Convert.ToDecimal(dr0["AUMSecuritiesCompany"]);
                                            rSingle.Others = Convert.ToDecimal(dr0["AUMOthers"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                orderby r.Period ascending
                                                group r by new { r.Period } into rGroup
                                                select rGroup;

                                        int incRowExcel = 3;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Period;

                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Total Dana kelolaan per Saluran Distribusi/ Asset Under Management per Distribution Channels";
                                            worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Jenis Product/Product Type";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Direct Retail Client";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Institusi";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Corporate";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "Foundation";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "FinancialInstitution";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "Insurance";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Value = "MutualFund";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "PensionFund";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "SecuritiesCompany";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Value = "Others";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ProductType;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DirectRetailClient;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUMInstitusi;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Corporate;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Foundation;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.FinancialInstitution;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUMInsurance;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.MutualFund;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.PensionFund;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.SecuritiesCompany;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Others;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                _endRowDetail = incRowExcel;
                                                no++;
                                                incRowExcel++;

                                            }



                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            incRowExcel = incRowExcel + 2;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }







                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel++;

                                        //incRowExcel++;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 12, 12];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 26;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 0;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 21;
                                        worksheet.Column(11).Width = 21;
                                        worksheet.Column(12).Width = 21;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Data Transaksi Tahunan";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Detail Informasi Bagi Hasil
            if (_unitRegistryRpt.ReportName.Equals("Detail Informasi Bagi Hasil"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {



                            cmd.CommandText = @"
                            select C.SACode SACode,C.Name DirectSA,B.UnitAmount UnitAsOfCumDate,D.Name FundName, A.ValueDate CumDate, 
                            A.ExDate ExDate,A.PaymentDate PaymentDate,A.DistributedIncomeperUnit DistributedIncomePerUnit, 
                            F.DescOne DistributedIncomeOption, E.ID FundCCY, A.CashAmount CashAmount
                            from DistributedIncome A
                            left join FundClientPosition B on A.FundPK = B.FundPK and B.date = @Date
                            left join FundClient C on B.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join fund D on A.fundPK = D.FundPK and D.status in (1,2)
                            left join Currency E on D.CurrencyPK = E.CurrencyPK and E.status in (1,2)
                            left join MasterValue F on A.Policy = F.Code and F.ID = 'DistributedIncomePolicy' and F.status = 2    
                            where A.status = 2 and A.ValueDate = @Date
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DetailInformasiBagiHasil" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DetailInformasiBagiHasil" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Detail Informasi Bagi Hasil");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DetailInformasiBagiHasil> rList = new List<DetailInformasiBagiHasil>();
                                        while (dr0.Read())
                                        {

                                            DetailInformasiBagiHasil rSingle = new DetailInformasiBagiHasil();
                                            rSingle.SACode = Convert.ToString(dr0["SACode"]);
                                            rSingle.DirectSA = Convert.ToString(dr0["DirectSA"]);
                                            rSingle.UnitAsOfCumDate = Convert.ToDecimal(dr0["UnitAsOfCumDate"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.CumDate = Convert.ToDateTime(dr0["CumDate"]);
                                            rSingle.ExDate = Convert.ToDateTime(dr0["ExDate"]);
                                            rSingle.PaymentDate = Convert.ToDateTime(dr0["PaymentDate"]);
                                            rSingle.DistributedIncomePerUnit = Convert.ToDecimal(dr0["DistributedIncomePerUnit"]);
                                            rSingle.DistributedIncomeOption = Convert.ToString(dr0["DistributedIncomeOption"]);
                                            rSingle.FundCCY = Convert.ToString(dr0["FundCCY"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rList.Add(rSingle);

                                        }
                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "SA Code";
                                            worksheet.Cells[incRowExcel, 3].Value = "DIRECT/SA";
                                            worksheet.Cells[incRowExcel, 4].Value = "OS/UNIT AS OF CUM DATE";
                                            worksheet.Cells[incRowExcel, 5].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 6].Value = "Cum-Date";
                                            worksheet.Cells[incRowExcel, 7].Value = "Ex-Date";
                                            worksheet.Cells[incRowExcel, 8].Value = "Payment Date";
                                            worksheet.Cells[incRowExcel, 9].Value = "Distributed Income Per Unit";
                                            worksheet.Cells[incRowExcel, 10].Value = "Distributed Income Option";
                                            worksheet.Cells[incRowExcel, 11].Value = "Fund CCY";
                                            worksheet.Cells[incRowExcel, 12].Value = "Cash Amount";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                            incRowExcel++;

                                            int first = incRowExcel;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SACode;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DirectSA;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.UnitAsOfCumDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CumDate;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.ExDate;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.PaymentDate;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.DistributedIncomePerUnit;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000000000";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.DistributedIncomeOption;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.FundCCY;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.CashAmount;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;



                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }

                                            incRowExcel = incRowExcel + 2;



                                        }




                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel++;

                                        //incRowExcel++;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 12, 12];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 10;
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).Width = 28;
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 32;
                                        worksheet.Column(10).Width = 28;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Detail Informasi Bagi Hasil";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Rekap Revenue Investor Institusi
            if (_unitRegistryRpt.ReportName.Equals("Rekap Revenue Investor Institusi"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"

if object_id('tempdb..#tableSelectReport', 'u') is not null drop table #tableSelectReport
create table #tableSelectReport
(
	AgentPK int,
	FundPK int,
	FundClientPK INT,
	jan numeric(22,9),
	feb numeric(22,9),
	mar numeric(22,9),
	apr numeric(22,9),
	may numeric(22,9),
	jun numeric(22,9),
	jul numeric(22,9),
	aug numeric(22,9),
	sep numeric(22,9),
	okt numeric(22,9),
	nov numeric(22,9),
	dec numeric(22,9)

)
CREATE CLUSTERED INDEX indx_tableSelectReport ON #tableSelectReport (AgentPK,FundPK,FundClientPK);


insert into #tableSelectReport(AgentPK,FundPK,FundClientPK)
select distinct isnull(SellingAgentPK,0),FundPK,FundClientPK from DailyDataForCommissionRptNew
where year(mfeedate) = @period

--januari
update A set A.Jan = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 1
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--Feb
update A set A.feb = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 2
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--mar
update A set A.mar = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 3
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--apr
update A set A.apr = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 4
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--may
update A set A.may = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 5
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--jun
update A set A.jun = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 6
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--jul
update A set A.jul = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 7
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--aug
update A set A.aug = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 8
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
 
--sep
update A set A.sep = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 9
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--okt
update A set A.okt = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 10
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--nov
update A set A.nov = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 11
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

--dec
update A set A.dec = isnull(B.Mfee,0) from #tableSelectReport A
left join (
	select isnull(SellingAgentPK,0) SellingAgentPK,FundPK,sum(isnull(Mfee,0)) Mfee,FundClientPK from DailyDataForCommissionRptNew
	where year(mfeedate) = @period and month(mfeedate) = 12
	group by SellingAgentPK,FundPK,FundClientPK
)B on A.AgentPK = B.SellingAgentPK and A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK

select @period period,isnull(D.Name,'') JenisSales,isnull(B.Name,'') Sales,E.Name IFUAName
,C.Name FundName
,Jan,feb,mar,apr,may,jun,jul,aug,sep,okt,nov,dec from #tableSelectReport A
left join Agent B on A.AgentPK = B.AgentPK and B.Status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
left join Agent D on B.ParentPK = D.AgentPK and D.Status in (1,2)
LEFT JOIN FundClient E ON A.FundClientPK = E.FundClientPK AND E.status IN (1,2)
where (jan != 0 or feb != 0 or mar != 0 or apr != 0 or may != 0 or jun != 0 or jul != 0 or aug != 0 or Sep != 0 or Okt != 0 or Nov != 0 or Dec != 0)
                           
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Period", _unitRegistryRpt.PeriodTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RekapRevenueInvestorInstitusi" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RekapRevenueInvestorInstitusi" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CustodianReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Rekap");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RekapRevenueInvestorInstitusi> rList = new List<RekapRevenueInvestorInstitusi>();
                                        while (dr0.Read())
                                        {

                                            RekapRevenueInvestorInstitusi rSingle = new RekapRevenueInvestorInstitusi();
                                            rSingle.JenisSales = Convert.ToString(dr0["JenisSales"]);
                                            rSingle.Sales = Convert.ToString(dr0["Sales"]);
                                            rSingle.IFUAName = Convert.ToString(dr0["IFUAName"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Jan = Convert.ToDecimal(dr0["Jan"]);
                                            rSingle.Feb = Convert.ToDecimal(dr0["Feb"]);
                                            rSingle.Mar = Convert.ToDecimal(dr0["Mar"]);
                                            rSingle.Apr = Convert.ToDecimal(dr0["Apr"]);
                                            rSingle.Mei = Convert.ToDecimal(dr0["May"]);
                                            rSingle.Jun = Convert.ToDecimal(dr0["Jun"]);
                                            rSingle.Jul = Convert.ToDecimal(dr0["Jul"]);
                                            rSingle.Aug = Convert.ToDecimal(dr0["Aug"]);
                                            rSingle.Sep = Convert.ToDecimal(dr0["Sep"]);
                                            rSingle.Okt = Convert.ToDecimal(dr0["Okt"]);
                                            rSingle.Nov = Convert.ToDecimal(dr0["Nov"]);
                                            rSingle.Des = Convert.ToDecimal(dr0["Dec"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "REKAP REVENUE DARI INVESTOR INSTITUSI";
                                        incRowExcel = incRowExcel + 2;





                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            worksheet.Cells[incRowExcel, 1].Value = "Jenis Sales";
                                            worksheet.Cells[incRowExcel, 2].Value = "Sales";
                                            worksheet.Cells[incRowExcel, 3].Value = "Investor Fund Unit A/C Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 5].Value = "Jan_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 6].Value = "Feb_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 7].Value = "Mar_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 8].Value = "Apr_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 9].Value = "May_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 10].Value = "Jun_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 11].Value = "Jul_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 12].Value = "Aug_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 13].Value = "Sep_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 14].Value = "Okt_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 15].Value = "Nov_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 16].Value = "Dec_" + _unitRegistryRpt.PeriodTo.Substring(2);
                                            worksheet.Cells[incRowExcel, 17].Value = "Total Management Fee";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.JenisSales;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Sales;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.IFUAName;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Jan;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Feb;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Mar;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Apr;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Mei;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Jun;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Jul;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Aug;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Sep;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Okt;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.Nov;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.Des;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 17].Formula = "SUM(E" + incRowExcel + ":P" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17].Calculate();
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }



                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }




                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel++;

                                        //incRowExcel++;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 21;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 21;
                                        worksheet.Column(11).Width = 21;
                                        worksheet.Column(12).Width = 21;
                                        worksheet.Column(13).Width = 21;
                                        worksheet.Column(14).Width = 21;
                                        worksheet.Column(15).Width = 21;
                                        worksheet.Column(16).Width = 21;
                                        worksheet.Column(17).AutoFit();




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Rekap Revenue Investor Institusi";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Daily Transaction Report For All
            if (_unitRegistryRpt.ReportName.Equals("Daily Transaction Report For All"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _statusSwitch = "";
                            string _paramFund = "";
                            string _paramAgent = "";
                            string _paramFundClient = "";
                            string _paramDepartment = "";
                            string _paramAgentSwitching = "";
                            string _paramDepartmentSwitching = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                                _paramAgentSwitching = "And AG.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                                _paramAgentSwitching = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            //if (!_host.findString(_unitRegistryRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.DepartmentFrom))
                            //{
                            //    _paramDepartment = "And A.DepartmentPK in ( " + _unitRegistryRpt.DepartmentFrom + " ) ";
                            //    _paramDepartmentSwitching = "And AG.DepartmentPK in ( " + _unitRegistryRpt.DepartmentFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramDepartment = "";
                            //    _paramDepartmentSwitching = "";
                            //}


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitch = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitch = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            //                          
                            cmd.CommandText =
                                @"
                                Select A.NoRow,A.SettlementDate,A.Remark,A.FeeAmount, A.FeePercent,A.DepartmentName,A.AgentName,A.FundID,A.FundName , A.FundIDFrom, A.FundNameFrom,A.FundToID,A.FundToName,A.NAVDate,A.Type,A.ClientID,A.ClientName,
                                A.TotalCashAmount,A.TotalUnitAmount, A.TotalCashAmountFundFrom,A.TotalCashAmountFundTo, A.TotalUnitAmountFundFrom,A.TotalUnitAmountFundTo 
                                ,A.InvestorType,A.NAV, A.NAVFrom ,  A.NAVTo, A.CashAmount,A.FeeType
                                from (  
                                Select '1' NoRow, A.NAVDate SettlementDate,A.Description Remark,A.SubscriptionFeeAmount FeeAmount,A.SubscriptionFeePercent FeePercent,D.Name DepartmentName,
                                AG.Name AgentName,F.ID FundID,F.Name FundName,'' FundIDFrom,''FundToID ,'' FundNameFrom, '' FundToName,NAVDate,'Subscription' Type, Fc.ID ClientID,FC.Name ClientName, TotalCashAmount, TotalUnitAmount ,
                                0 TotalCashAmountFundFrom,0 TotalCashAmountFundTo, 0 TotalUnitAmountFundFrom,0 TotalUnitAmountFundTo  ,
                                Case when FC.InvestorType = 1 then 'Individual' else 'Institusi' end InvestorType, A.NAV NAV, 0 NAVFrom , 0 NAVTo, CashAmount, '' FeeType
                                from ClientSubscription A 
                                left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)   
                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
                                left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2)  
                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                                where " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + @" and 
                                NAVDate Between @ValueDateFrom and @ValueDateTo  --and F.FundPK = 1
                                UNION ALL   
                                Select '2' NoRow,A.PaymentDate SettlementDate,A.Description Remark,A.RedemptionFeeAmount FeeAmount,A.RedemptionFeePercent FeePercent,D.Name DepartmentName,
                                AG.Name AgentName,F.ID FundID,F.Name FundName,'' FundIDFrom,''FundToID ,'' FundNameFrom, '' FundToName,NAVDate,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName, TotalCashAmount, TotalUnitAmount  ,
                                0 TotalCashAmountFundFrom,0 TotalCashAmountFundTo, 0 TotalUnitAmountFundFrom,0 TotalUnitAmountFundTo  ,
                                Case when FC.InvestorType = 1 then 'Individual' else 'Institusi' end InvestorType, A.NAV NAV, 0 NAVFrom , 0 NAVTo, CashAmount, '' FeeType
                                from ClientRedemption A 
                                left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)   
                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)  
                                where " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + @" and 
                                NAVDate Between @ValueDateFrom and @ValueDateTo --and F.FundPK = 1

                                UNION ALL   
                                Select '3' NoRow,A.PaymentDate SettlementDate,A.Description Remark,A.SwitchingFeeAmount FeeAmount,A.SwitchingFeePercent FeePercent,D.Name DepartmentName,
                                AG.Name AgentName,'' FundID,'' FundName,F.ID FundIDfrom,G.ID FundToID ,F.Name FundNameFrom, G.Name FundToName,NAVDate,'Switching' Type, Fc.ID ClientID,FC.Name ClientName,
                                0 TotalCashAmount, 0 TotalUnitAmount, A.TotalCashAmountFundFrom,A.TotalCashAmountFundTo, A.TotalUnitAmountFundFrom,A.TotalUnitAmountFundTo  ,
                                Case when FC.InvestorType = 1 then 'Individual' else 'Institusi' end InvestorType, 0 NAV , A.NAVFundFrom NAVFrom , A.NAVFundTo NAVTo, CashAmount , FeeType
                                from ClientSwitching A 
                                left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2)  
                                left join Fund G on A.FundPKTo = G.fundPK and G.Status in (1,2)   
                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)  
                                where " + _statusSwitch + _paramFund + _paramAgentSwitching + _paramDepartmentSwitching + _paramFundClient + @" and 
                                NAVDate Between @ValueDateFrom and @ValueDateTo --and F.FundPK = 1

 
                                )A   
                                --Group by A.NoRow,A.SettlementDate,A.Remark,A.FeeAmount,A.DepartmentName,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.TotalCashAmount,A.TotalUnitAmount,A.InvestorType,A.NAV
                                order by A.NoRow,A.FundID, A.NAVDate Asc
                                 ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailyTransactionReportforAll" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailyTransactionReportforAll" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Transaction Report for All");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.AgentName = dr0["AgentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentName"]);
                                            rSingle.DepartmentName = dr0["DepartmentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentName"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["TotalCashAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["TotalUnitAmount"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.InvestorType = Convert.ToString(dr0["InvestorType"]);

                                            rSingle.FundIDFrom = Convert.ToString(dr0["FundIDFrom"]);
                                            rSingle.FundNameFrom = Convert.ToString(dr0["FundNameFrom"]);
                                            rSingle.FundToID = Convert.ToString(dr0["FundToID"]);
                                            rSingle.FundToName = Convert.ToString(dr0["FundToName"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.NAVFrom = Convert.ToDecimal(dr0["NAVFrom"]);
                                            rSingle.NAVTo = Convert.ToDecimal(dr0["NAVTo"]);
                                            rSingle.TotalCashAmountFundFrom = Convert.ToDecimal(dr0["TotalCashAmountFundFrom"]);
                                            rSingle.TotalCashAmountFundTo = Convert.ToDecimal(dr0["TotalCashAmountFundTo"]);
                                            rSingle.TotalUnitAmountFundFrom = Convert.ToDecimal(dr0["TotalUnitAmountFundFrom"]);
                                            rSingle.TotalUnitAmountFundTo = Convert.ToDecimal(dr0["TotalUnitAmountFundTo"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.FeeType = dr0["FeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FeeType"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Type } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Daily Total Transaction Report For All";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Subscription , Redemption , Switching";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Type;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Period :";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = _unitRegistryRpt.ValueDateFrom + " - " + _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";

                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "CIF No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Transaction Type";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "Fund";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = "Client Name";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Merge = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = "Investor Type";
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = "Sales Name";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = "NAV Date";
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = "Fee %";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = "Fee Amount";
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = "Net IDR";
                                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = "NAV";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = "Remark";
                                                worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            }
                                            else if (rsHeader.Key.Type == "Redemption")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Transaction Type";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "Fund";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = "Client Name";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Merge = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = "Investor Type";
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = "Sales Name";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = "NAV Date";
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = "Payment Date";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = "Fee %";
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = "Fee Amount";
                                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = "Net IDR";
                                                worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = "NAV";
                                                worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = "Remark";
                                                worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "FundFrom";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "FundTo";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = "Client Name";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Merge = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = "Investor Type";
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = "Sales Name";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = "NAV Date";
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = "Payment Date";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = "Fee Type";
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = "Fee %";
                                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = "Fee Amount";
                                                worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = "Net IDR From";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = "Unit From";
                                                worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = "NAV From";
                                                worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 16].Value = "Net IDR From";
                                                worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                                worksheet.Cells["P" + RowB + ":P" + RowG].Merge = true;
                                                worksheet.Cells["P" + RowB + ":P" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["P" + RowB + ":P" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 17].Value = "Unit To";
                                                worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                                worksheet.Cells["Q" + RowB + ":Q" + RowG].Merge = true;
                                                worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 18].Value = "NAV To";
                                                worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                                worksheet.Cells["R" + RowB + ":R" + RowG].Merge = true;
                                                worksheet.Cells["R" + RowB + ":R" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["R" + RowB + ":R" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 19].Value = "Remark";
                                                worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                                worksheet.Cells["S" + RowB + ":S" + RowG].Merge = true;
                                                worksheet.Cells["S" + RowB + ":S" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["S" + RowB + ":S" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }




                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _fundID = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;



                                                //if (_fundID != rsDetail.FundID)
                                                //{
                                                //    worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //}

                                                //ThickBox Border
                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }
                                                else if (rsDetail.Type == "Redemption")
                                                {
                                                    worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells["A" + RowB + ":S" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowB + ":S" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }


                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Type;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InvestorType;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AgentName;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVDate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.FeePercent;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.FeeAmount;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.Nav;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.Remark;
                                                    worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                }
                                                else if (rsDetail.Type == "Redemption")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Type;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InvestorType;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AgentName;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVDate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.SettlementDate;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.FeePercent;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.FeeAmount;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.Nav;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.Remark;
                                                    worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundNameFrom;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundToName;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InvestorType;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AgentName;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVDate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.SettlementDate;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.FeeType;
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.FeePercent;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.FeeAmount;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalCashAmountFundFrom;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalUnitAmountFundFrom;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.NAVFrom;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.TotalCashAmountFundTo;
                                                    worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.TotalUnitAmountFundTo;
                                                    worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.NAVTo;
                                                    worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.Remark;
                                                    worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                }


                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _fundID = rsDetail.FundID;
                                            }
                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else if (rsHeader.Key.Type == "Redemption")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":O" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":S" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }

                                        }




                                        incRowExcel++;

                                        //-----------------------------------
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                //                                              
                                                cmd1.CommandText =
                                                @"
                                                Select A.NoRow,A.CurrencyID,A.Type,A.FundID,A.FundIDTo,sum(A.TotalCashAmountFundTo)TotalCashAmountFundTo,sum(A.TotalUnitAmountFundTo)TotalUnitAmountFundTo,sum(A.TotalCashAmount)TotalCashAmount,sum(A.TotalUnitAmount)TotalUnitAmount from ( 
                                                Select  '1' NoRow,CU.ID CurrencyID,'Subscription' Type ,F.Name FundID,G.Name FundIDTo,sum (0)TotalCashAmountFundTo,sum (0)TotalUnitAmountFundTo,
                                                sum (TotalCashAmount)TotalCashAmount,sum (TotalUnitAmount)TotalUnitAmount 
                                                from ClientSubscription A 
                                                left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2) 
                                                left join Fund G on A.FundPK = G.fundPK and G.Status in (1,2)   
                                                left join Currency CU on A.CurrencyPK = CU.CurrencyPK and CU.Status in (1,2)   
                                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                                left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2)  
                                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                                                where " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + _paramDepartment + @" and 
                                                NAVDate Between @ValueDateFrom and @ValueDateTo  
                                                Group By F.Name,CU.ID,G.Name
                                                UNION ALL   
                                                Select '2' NoRow,CU.ID CurrencyID,'Redemption' Type,F.Name FundID,G.Name FundIDTo,sum (0)TotalCashAmountFundTo,sum (0)TotalUnitAmountFundTo,
                                                sum (TotalCashAmount)TotalCashAmount,sum (TotalUnitAmount)TotalUnitAmount
                                                from ClientRedemption A 
                                                left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)    
                                                left join Fund G on A.FundPK = G.fundPK and G.Status in (1,2) 
                                                left join Currency CU on A.CurrencyPK = CU.CurrencyPK and CU.Status in (1,2)    
                                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                                left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2)  
                                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                                                where  " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + _paramDepartment + @" and 
                                                NAVDate Between @ValueDateFrom and @ValueDateTo  
                                                Group By F.Name,CU.ID,G.Name
                                                UNION ALL   
                                                Select '3' NoRow,CU.ID CurrencyID,'Switching' Type,F.Name FundID,G.Name FundIDTo,sum (TotalCashAmountFundTo)TotalCashAmountFundTo,sum (TotalUnitAmountFundTo)TotalUnitAmountFundTo,
                                                sum (TotalCashAmountFundFrom)TotalCashAmount,sum (TotalUnitAmountFundFrom)TotalUnitAmount
                                                from ClientSwitching A 
                                                left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2) 
                                                left join Fund G on A.FundPKTo = G.fundPK and G.Status in (1,2)    
                                                left join Currency CU on A.CurrencyPK = CU.CurrencyPK and CU.Status in (1,2)    
                                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                                left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
                                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                                                where  " + _statusSwitch + _paramFund + _paramAgentSwitching + _paramFundClient + _paramDepartmentSwitching + @" and 
                                                NAVDate Between @ValueDateFrom and @ValueDateTo  
                                                Group By F.Name,CU.ID,G.Name
                                                )A   
                                                Group by A.NoRow,A.Type,A.FundID,A.FundIDTo,A.CurrencyID
                                                order by A.NoRow,A.Type,A.FundID Asc
                                                ";
                                                cmd1.CommandTimeout = 0;

                                                cmd1.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                                                cmd1.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                                                cmd1.Parameters.AddWithValue("@AgentFrom", _unitRegistryRpt.AgentFrom);
                                                cmd1.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);
                                                cmd1.Parameters.AddWithValue("@DepartmentFrom", _unitRegistryRpt.DepartmentFrom);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList1 = new List<UnitRegistryRpt>();
                                                            while (dr1.Read())
                                                            {
                                                                UnitRegistryRpt rSingle1 = new UnitRegistryRpt();
                                                                rSingle1.FundID = Convert.ToString(dr1["FundID"]);
                                                                rSingle1.FundIDTo = Convert.ToString(dr1["FundIDTo"]);
                                                                rSingle1.CashBalance = Convert.ToDecimal(dr1["TotalCashAmount"]);
                                                                rSingle1.UnitBalance = Convert.ToDecimal(dr1["TotalUnitAmount"]);
                                                                rSingle1.TotalCashAmountFundTo = Convert.ToDecimal(dr1["TotalCashAmountFundTo"]);
                                                                rSingle1.TotalUnitAmountFundTo = Convert.ToDecimal(dr1["TotalUnitAmountFundTo"]);
                                                                rSingle1.Type = Convert.ToString(dr1["Type"]);
                                                                rSingle1.CurrencyID = Convert.ToString(dr1["CurrencyID"]);
                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r1 in rList1
                                                                group r1 by new { r1.Type, r1.NAVDate } into rGroup1
                                                                select rGroup1;

                                                            incRowExcel = incRowExcel + 6;
                                                            int _endRowDetailZ = 0;


                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {


                                                                incRowExcel = incRowExcel + 2;
                                                                //Row B = 3
                                                                int RowBZ = incRowExcel;
                                                                int RowGZ = incRowExcel + 1;


                                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Merge = true;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 4].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                }
                                                                else if (rsHeader1.Key.Type == "Redemption")
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 4].Value = "Amount";
                                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 5].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Fund From";
                                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 3].Value = "Fund To";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 4].Value = "Unit From";
                                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 5].Value = "Amount From";
                                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 6].Value = "Unit To";
                                                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Merge = true;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 7].Value = "Amount To";
                                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                                    worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Merge = true;
                                                                    worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 8].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                                    worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Merge = true;
                                                                    worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                                }


                                                                incRowExcel++;

                                                                // Row C = 4
                                                                int RowCZ = incRowExcel;

                                                                incRowExcel++;
                                                                //area header

                                                                int _noZ = 1;
                                                                int _startRowDetailZ = incRowExcel;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    //Row D = 5
                                                                    int RowDZ = incRowExcel;
                                                                    int RowEZ = incRowExcel + 1;


                                                                    //ThickBox Border

                                                                    if (rsDetail1.Type == "Subscription")
                                                                    {
                                                                        worksheet.Cells["A" + RowBZ + ":D" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + RowBZ + ":D" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }
                                                                    else if (rsDetail1.Type == "Redemption")
                                                                    {
                                                                        worksheet.Cells["A" + RowBZ + ":E" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + RowBZ + ":E" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet.Cells["A" + RowBZ + ":H" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + RowBZ + ":H" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _noZ;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    if (rsDetail1.Type == "Subscription")
                                                                    {
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundID;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.CashBalance;
                                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail1.CurrencyID;
                                                                        worksheet.Cells[incRowExcel, 4].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    }
                                                                    else if (rsDetail1.Type == "Redemption")
                                                                    {
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundID;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.UnitBalance;
                                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.000000";
                                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail1.CashBalance;
                                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.CurrencyID;
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundID;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.FundIDTo;
                                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail1.UnitBalance;
                                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.CashBalance;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.TotalUnitAmountFundTo;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail1.TotalCashAmountFundTo;
                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail1.CurrencyID;
                                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    }


                                                                    _endRowDetailZ = incRowExcel;
                                                                    _noZ++;
                                                                    incRowExcel++;

                                                                }


                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells["A" + _endRowDetailZ + ":D" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }
                                                                else if (rsHeader1.Key.Type == "Redemption")
                                                                {
                                                                    worksheet.Cells["A" + _endRowDetailZ + ":E" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells["A" + _endRowDetailZ + ":H" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }






                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Value = "Total Subscription" + " : ";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[_endRowDetailZ + 1, 3].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 3].Formula = "SUM(C" + _startRowDetailZ + ":C" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 3].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 3].Style.Font.Bold = true;
                                                                }
                                                                else if (rsHeader1.Key.Type == "Redemption")
                                                                {
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Value = "Total Redemption" + " : ";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 3].Style.Numberformat.Format = "#,##0.000000";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 3].Formula = "SUM(C" + _startRowDetailZ + ":C" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 3].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 3].Style.Font.Bold = true;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Formula = "SUM(D" + _startRowDetailZ + ":D" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Font.Bold = true;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Value = "Total" + " : ";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[_endRowDetailZ + 1, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Numberformat.Format = "#,##0.000000";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Formula = "SUM(D" + _startRowDetailZ + ":D" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Font.Bold = true;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Formula = "SUM(E" + _startRowDetailZ + ":E" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Style.Font.Bold = true;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 6].Style.Numberformat.Format = "#,##0.000000";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 6].Formula = "SUM(F" + _startRowDetailZ + ":F" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 6].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 6].Style.Font.Bold = true;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 7].Formula = "SUM(G" + _startRowDetailZ + ":G" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 7].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 7].Style.Font.Bold = true;
                                                                }


                                                                incRowExcel++;
                                                            }


                                                            //string _rangeA1 = "A:M" + incRowExcel;
                                                            //using (ExcelRange r = worksheet.Cells[_rangeA1]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                            //{
                                                            //    r.Style.Font.Size = 22;
                                                            //}
                                                        }

                                                    }
                                                }
                                            }
                                        }


                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        string _rangeA = "A:O" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 15];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 60;
                                        worksheet.Column(3).Width = 65;
                                        worksheet.Column(4).Width = 27;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 47;
                                        worksheet.Column(8).Width = 35;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 35;
                                        worksheet.Column(15).Width = 35;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report For All \n &28&B Subscription , Redemption , Switching";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Rekap Transaksi Bulanan dan Tahunan
            if (_unitRegistryRpt.ReportName.Equals("Rekap Transaksi Bulanan Dan Tahunan"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                                declare @yesterday date
declare @MO1 date
declare @MO3 date
declare @YOY date


set @MO1 = case when dbo.CheckTodayIsHoliday(dateadd(month,-1,@Valuedate)) = 1 then dbo.FWorkingDay (dateadd(month,-1,@Valuedate),-1) else dateadd(month,-1,@Valuedate) end
set @MO3 = case when dbo.CheckTodayIsHoliday(dateadd(month,-3,@Valuedate)) = 1 then dbo.FWorkingDay (dateadd(month,-3,@Valuedate),-1) else dateadd(month,-3,@Valuedate) end
set @YOY = case when dbo.CheckTodayIsHoliday(dateadd(year,-1,@Valuedate)) = 1 then dbo.FWorkingDay (dateadd(year,-1,@Valuedate),-1) else dateadd(year,-1,@Valuedate) end
set @yesterday = dbo.FWorkingDay (@valuedate,-1)

--select @valuedate,@yesterday


create table #TableCloseNAV(
	FundPK int,
	NAV numeric(18,8)
)

create table #TableFCP(
	FundPK int,
	UnitAmount numeric(18,8)
)

declare @TableSelect table (
	FundType nvarchar(100),
	AUM numeric(32,8),
	Subscription numeric(32,8),
	Redemption numeric(32,8),
	Net numeric(32,8),

	AUM1MO numeric(32,8),
	Subscription1MO numeric(32,8),
	Redemption1MO numeric(32,8),
	Net1MO numeric(32,8),
	
	AUM3MO numeric(32,8),
	Subscription3MO numeric(32,8),
	Redemption3MO numeric(32,8),
	Net3MO numeric(32,8),

	AUMYOY numeric(32,8),
	SubscriptionYOY numeric(32,8),
	RedemptionYOY numeric(32,8),
	NetYOY numeric(32,8)
)

create table #TableSubs(
	FundPK int,
	UnitAmount numeric(32,8)
)

create table #TableRed(
	FundPK int,
	UnitAmount numeric(32,8)
)

insert into @TableSelect (FundType)
select distinct C.DescOne from FundClientPosition A
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
left join MasterValue C on B.Type = C.Code and C.id = 'FundType' and C.status in (1,2)
where date in (@valuedate,@MO1,@MO3,@YOY)

--as OF
begin
	insert into #TableCloseNAV
	select FundPK,Nav from CloseNAV where Date = @valuedate and status in (1,2) 

	insert into #TableFCP
	select FundPK,sum(UnitAmount) TotalUnit from FundClientPosition where Date = @yesterday
	group by FundPK

	insert into #TableSubs
	select FundPK,sum(A.TotalUnitAmount) from (
	select FundPK,TotalUnitAmount from ClientSubscription where ValueDate = @valuedate and status = 2 and Type in (1,2)
	union all
	select FundPKTo,TotalUnitAmountFundTo from ClientSwitching where ValueDate = @valuedate and status = 2 and Type in (1,2)
	)A
	group by A.FundPK

	insert into #TableRed
	select FundPK,sum(A.TotalUnitAmount) from (
	select FundPK,TotalUnitAmount from ClientRedemption where ValueDate = @valuedate and status = 2 and Type in (1,2)
	union all
	select FundPKFrom,TotalUnitAmountFundFrom from ClientSwitching where ValueDate = @valuedate and status = 2 and Type in (1,2)
	)A
	group by A.FundPK

	update A set A.AUM = B.AUM, A.Subscription = B.Subs, A.Redemption = B.Red,A.Net = B.Net from @TableSelect A
	left join 
	(
	select D.DescOne FundType,sum(isnull(B.NAV,0) * isnull(A.UnitAmount,0)) AUM,sum(isnull(B.NAV,0) * isnull(E.UnitAmount,0)) Subs,sum(isnull(B.NAV,0) * isnull(F.UnitAmount,0)) Red,
	 sum(isnull(B.NAV,0) * isnull(E.UnitAmount,0)) - sum(isnull(B.NAV,0) * isnull(F.UnitAmount,0)) Net from #TableFCP A
	left join #TableCloseNAV B on A.FundPK = B.FundPK
	left join #TableSubs E on A.FundPK = E.FundPK
	left join #TableRed F on A.FundPK = F.FundPK
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue D on C.Type = D.Code and D.ID = 'FundType' and D.status in (1,2)
	group by D.DescOne
	) B on A.FundType = B.FundType
end

--1 Month
begin
	truncate table #TableCloseNAV
	truncate table #TableFCP
	truncate table #TableSubs
	truncate table #TableRed

	set @yesterday = dbo.FWorkingDay (@MO1,-1)

	--select @valuedate,@yesterday

	insert into #TableCloseNAV
	select FundPK,Nav from CloseNAV where Date = @valuedate and status in (1,2) 

	insert into #TableFCP
	select FundPK,sum(UnitAmount) TotalUnit from FundClientPosition where Date = @yesterday
	group by FundPK

	insert into #TableSubs
	select FundPK,sum(A.TotalUnitAmount) from (
	select A.FundPK,isnull(TotalUnitAmount,0) * isnull(B.NAV,0) TotalUnitAmount from ClientSubscription A
	left join CloseNAV B on A.FundPK = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	where ValueDate between @MO1 and @valuedate  and A.status = 2 and Type in (1,2)
	union all
	select FundPKTo,TotalUnitAmountFundTo * isnull(B.NAV,0) from ClientSwitching A
	left join CloseNAV B on A.FundPKTo = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	 where ValueDate between @MO1 and @valuedate and A.status = 2 and Type in (1,2)
	)A
	group by A.FundPK

	insert into #TableRed
	select FundPK,sum(A.TotalUnitAmount) from (
	select A.FundPK,isnull(TotalUnitAmount,0) * isnull(B.NAV,0) TotalUnitAmount from ClientRedemption A
	left join CloseNAV B on A.FundPK = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	where ValueDate between @MO1 and @valuedate and A.status = 2 and Type in (1,2)
	union all
	select FundPKFrom,TotalUnitAmountFundFrom * isnull(B.NAV,0) from ClientSwitching A
	left join CloseNAV B on A.FundPKFrom = B.FundPK and A.NAVDAte = B.Date and B.status in (1,2)
	where ValueDate between @MO1 and @valuedate and A.status = 2 and Type in (1,2)
	)A
	group by A.FundPK

	update A set A.AUM1MO = B.AUM, A.Subscription1MO = B.Subs, A.Redemption1MO = B.Red,A.Net1MO = B.Net from @TableSelect A
	left join 
	(
	select D.DescOne FundType,
	sum(isnull(B.NAV,0) * isnull(A.UnitAmount,0)) AUM,
	sum(isnull(E.UnitAmount,0)) Subs,
	sum(isnull(F.UnitAmount,0)) Red,
	 sum(isnull(E.UnitAmount,0)) - sum(isnull(F.UnitAmount,0)) Net from #TableFCP A
	left join #TableCloseNAV B on A.FundPK = B.FundPK
	left join #TableSubs E on A.FundPK = E.FundPK
	left join #TableRed F on A.FundPK = F.FundPK
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue D on C.Type = D.Code and D.ID = 'FundType' and D.status in (1,2)
	group by D.DescOne
	) B on A.FundType = B.FundType
end

--3 Month
begin
	truncate table #TableCloseNAV
	truncate table #TableFCP
	truncate table #TableSubs
	truncate table #TableRed

	
	set @yesterday = dbo.FWorkingDay (@MO3,-1)

	--select @valuedate,@yesterday

	insert into #TableCloseNAV
	select FundPK,Nav from CloseNAV where Date = @valuedate and status in (1,2) 

	insert into #TableFCP
	select FundPK,sum(UnitAmount) TotalUnit from FundClientPosition where Date = @yesterday
	group by FundPK

	insert into #TableSubs
	select FundPK,sum(A.TotalUnitAmount) from (
	select A.FundPK,isnull(TotalUnitAmount,0) * isnull(B.NAV,0) TotalUnitAmount from ClientSubscription A
	left join CloseNAV B on A.FundPK = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	where ValueDate between @MO3 and @valuedate  and A.status = 2 and Type in (1,2)
	union all
	select FundPKTo,TotalUnitAmountFundTo * isnull(B.NAV,0) from ClientSwitching A
	left join CloseNAV B on A.FundPKTo = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	 where ValueDate between @MO3 and @valuedate and A.status = 2 and Type in (1,2)
	)A
	group by A.FundPK

	insert into #TableRed
	select FundPK,sum(A.TotalUnitAmount) from (
	select A.FundPK,isnull(TotalUnitAmount,0) * isnull(B.NAV,0) TotalUnitAmount from ClientRedemption A
	left join CloseNAV B on A.FundPK = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	where ValueDate between @MO3 and @valuedate and A.status = 2 and Type in (1,2)
	union all
	select FundPKFrom,TotalUnitAmountFundFrom * isnull(B.NAV,0) from ClientSwitching A
	left join CloseNAV B on A.FundPKFrom = B.FundPK and A.NAVDAte = B.Date and B.status in (1,2)
	where ValueDate between @MO3 and @valuedate and A.status = 2 and Type in (1,2)
	)A
	group by A.FundPK

	update A set A.AUM3MO = B.AUM, A.Subscription3MO = B.Subs, A.Redemption3MO = B.Red,A.Net3MO = B.Net from @TableSelect A
	left join 
	(
	select D.DescOne FundType,
	sum(isnull(B.NAV,0) * isnull(A.UnitAmount,0)) AUM,
	sum(isnull(E.UnitAmount,0)) Subs,
	sum(isnull(F.UnitAmount,0)) Red,
    sum(isnull(E.UnitAmount,0)) - sum(isnull(F.UnitAmount,0)) Net from #TableFCP A
	left join #TableCloseNAV B on A.FundPK = B.FundPK
	left join #TableSubs E on A.FundPK = E.FundPK
	left join #TableRed F on A.FundPK = F.FundPK
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue D on C.Type = D.Code and D.ID = 'FundType' and D.status in (1,2)
	group by D.DescOne
	) B on A.FundType = B.FundType
end

--YOY
begin
	truncate table #TableCloseNAV
	truncate table #TableFCP
	truncate table #TableSubs
	truncate table #TableRed

	set @yesterday = dbo.FWorkingDay (@YOY,-1)

	--select @valuedate,@yesterday

	insert into #TableCloseNAV
	select FundPK,isnull(Nav,0) from CloseNAV where Date = @valuedate and status in (1,2) 

	insert into #TableFCP
	select FundPK,isnull(sum(UnitAmount),0) TotalUnit from FundClientPosition where Date = @yesterday
	group by FundPK

		insert into #TableSubs
	select FundPK,sum(A.TotalUnitAmount) from (
	select A.FundPK,isnull(TotalUnitAmount,0) * isnull(B.NAV,0) TotalUnitAmount from ClientSubscription A
	left join CloseNAV B on A.FundPK = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	where ValueDate between @YOY and @valuedate  and A.status = 2 and Type in (1,2)
	union all
	select FundPKTo,TotalUnitAmountFundTo * isnull(B.NAV,0) from ClientSwitching A
	left join CloseNAV B on A.FundPKTo = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	 where ValueDate between @YOY and @valuedate and A.status = 2 and Type in (1,2)
	)A
	group by A.FundPK

	insert into #TableRed
	select FundPK,sum(A.TotalUnitAmount) from (
	select A.FundPK,isnull(TotalUnitAmount,0) * isnull(B.NAV,0) TotalUnitAmount from ClientRedemption A
	left join CloseNAV B on A.FundPK = B.FundPK and A.NAVDate = B.Date and B.status in (1,2)
	where ValueDate between @YOY and @valuedate and A.status = 2 and Type in (1,2)
	union all
	select FundPKFrom,TotalUnitAmountFundFrom * isnull(B.NAV,0) from ClientSwitching A
	left join CloseNAV B on A.FundPKFrom = B.FundPK and A.NAVDAte = B.Date and B.status in (1,2)
	where ValueDate between @YOY and @valuedate and A.status = 2 and Type in (1,2)
	)A
	group by A.FundPK

	update A set A.AUMYOY = isnull(B.AUM,0), A.SubscriptionYOY = isnull(B.Subs,0), A.RedemptionYOY = isnull(B.Red,0),A.NetYOY = isnull(B.Net,0) from @TableSelect A
	left join 
	(
	select D.DescOne FundType,
	sum(isnull(A.UnitAmount,0)) AUM,
	sum(isnull(E.UnitAmount,0)) Subs,
	sum(isnull(F.UnitAmount,0)) Red,
	 sum(isnull(E.UnitAmount,0)) - sum(isnull(F.UnitAmount,0)) Net from #TableFCP A
	left join #TableCloseNAV B on A.FundPK = B.FundPK
	left join #TableSubs E on A.FundPK = E.FundPK
	left join #TableRed F on A.FundPK = F.FundPK
	left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
	left join MasterValue D on C.Type = D.Code and D.ID = 'FundType' and D.status in (1,2)
	group by D.DescOne
	) B on A.FundType = B.FundType
end

select * from @TableSelect
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@valuedate", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RekapTransaksiBulananDanTahunan" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RekapTransaksiBulananDanTahunan" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Rekap Transaksi Bulanan Dan Tahunan");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RekapTransaksiBulananDanTahunan> rList = new List<RekapTransaksiBulananDanTahunan>();
                                        while (dr0.Read())
                                        {

                                            RekapTransaksiBulananDanTahunan rSingle = new RekapTransaksiBulananDanTahunan();

                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Subscription = Convert.ToDecimal(dr0["Subscription"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["Redemption"]);
                                            rSingle.Net = Convert.ToDecimal(dr0["Net"]);

                                            rSingle.AUM1Mo = Convert.ToDecimal(dr0["AUM1Mo"]);
                                            rSingle.Subscription1Mo = Convert.ToDecimal(dr0["Subscription1Mo"]);
                                            rSingle.Redemption1Mo = Convert.ToDecimal(dr0["Redemption1Mo"]);
                                            rSingle.Net1Mo = Convert.ToDecimal(dr0["Net1Mo"]);

                                            rSingle.AUM3Mo = Convert.ToDecimal(dr0["AUM3Mo"]);
                                            rSingle.Subscription3Mo = Convert.ToDecimal(dr0["Subscription3Mo"]);
                                            rSingle.Redemption3Mo = Convert.ToDecimal(dr0["Redemption3Mo"]);
                                            rSingle.Net3Mo = Convert.ToDecimal(dr0["Net3Mo"]);

                                            rSingle.AUMYoy = Convert.ToDecimal(dr0["AUMYoy"]);
                                            rSingle.SubscriptionYoy = Convert.ToDecimal(dr0["SubscriptionYoy"]);
                                            rSingle.RedemptionYoy = Convert.ToDecimal(dr0["RedemptionYoy"]);
                                            rSingle.NetYoy = Convert.ToDecimal(dr0["NetYoy"]);



                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "As Of Date : ";
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 3].Value = "Hari Ini";
                                        worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = " Bulan";
                                        worksheet.Cells["G" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "3 Bulan";
                                        worksheet.Cells["K" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 15].Value = "Yoy";
                                        worksheet.Cells["O" + incRowExcel + ":R" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++; ;

                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Type";
                                        worksheet.Cells[incRowExcel, 3].Value = "AUM";
                                        worksheet.Cells[incRowExcel, 4].Value = "Subcription";
                                        worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                        worksheet.Cells[incRowExcel, 6].Value = "Net";

                                        worksheet.Cells[incRowExcel, 7].Value = "AUM";
                                        worksheet.Cells[incRowExcel, 8].Value = "Subcription";
                                        worksheet.Cells[incRowExcel, 9].Value = "Redemption";
                                        worksheet.Cells[incRowExcel, 10].Value = "Net";

                                        worksheet.Cells[incRowExcel, 11].Value = "AUM";
                                        worksheet.Cells[incRowExcel, 12].Value = "Subcription";
                                        worksheet.Cells[incRowExcel, 13].Value = "Redemption";
                                        worksheet.Cells[incRowExcel, 14].Value = "Net";

                                        worksheet.Cells[incRowExcel, 15].Value = "AUM";
                                        worksheet.Cells[incRowExcel, 16].Value = "Subcription";
                                        worksheet.Cells[incRowExcel, 17].Value = "Redemption";
                                        worksheet.Cells[incRowExcel, 18].Value = "Net";


                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel++;
                                        foreach (var rsHeader in GroupByReference)
                                        {







                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundType;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Subscription;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Redemption;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Net;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.AUM1Mo;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Subscription1Mo;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Redemption1Mo;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Net1Mo;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.AUM3Mo;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Subscription3Mo;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Redemption3Mo;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Net3Mo;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.AUMYoy;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.SubscriptionYoy;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.RedemptionYoy;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.NetYoy;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 18, incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }



                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 18, 18];
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();
                                        worksheet.Column(11).AutoFit();
                                        worksheet.Column(12).AutoFit();
                                        worksheet.Column(13).AutoFit();
                                        worksheet.Column(14).AutoFit();
                                        worksheet.Column(15).AutoFit();
                                        worksheet.Column(16).AutoFit();
                                        worksheet.Column(17).AutoFit();
                                        worksheet.Column(18).AutoFit();





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Rekap Transaksi Bulanan Dan Tahunan";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Client Unit Position
            if (_unitRegistryRpt.ReportName.Equals("Client Unit Position"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPk in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            cmd.CommandText =
                                    @" 
                                          --declare @date datetime
--set @date = '12/14/2020'


DECLARE @MaxDate datetime

select @MaxDate = Date from FundClientPosition where Date = (
	SELECT MAX(date) from FundClientPosition where Date <= @Date
)



DECLARE @NAV TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(18,4)
)

DECLARE @NAVLastDate TABLE
(
	FundPK INT,
	LastDate datetime
)

INSERT INTO @NAVLastDate
        ( FundPK, LastDate )
SELECT FundPK,MAX(Date) FROM CloseNAV WHERE status  = 2 AND Date <= @Date
GROUP BY FundPK



INSERT INTO @NAV
        ( LastDate, FundPK, NAV )
SELECT A.LastDate,A.FundPK,B.Nav FROM @NAVLastDate A
LEFT JOIN dbo.CloseNAV B ON A.FundPK = B.FundPK AND A.LastDate = B.Date AND B.status = 2
WHERE B.Date IN(
	SELECT DISTINCT lastDate FROM @NAVLastDate
)



Select B.Name ClientName,isnull(B.IFUACode,'') IFUA,isnull(B.SID,'') SID,B.Name ClientName,B.InvestorType InvestorType1,isnull(mv.DescOne,'') ClientCategory, C.Name  FundName,E.ID CurrencyID,@Date Date ,isnull(D.Nav,0) NavAmount,A.UnitAmount,isnull(A.CashAmount,0) CashAmount, 
case when C.CurrencyPK = 1 then isnull(sum(D.NAV * A.UnitAmount),0) else 0 end EndBalance,
case when C.CurrencyPK <> 1 then isnull(sum(D.NAV * A.UnitAmount),0) else 0 end EndBalanceUSD,
case when B.InvestorType = 2 then mv1.DescOne else 'INDIVIDUAL' end InvestorType,isnull(F.Name,'') Sales
From FundClientPosition A   
Left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2   
Left join Fund C on A.FundPK = C.FundPK and C.Status = 2
left join MasterValue mv on b.InvestorType = mv.Code  and mv.ID = 'InvestorType'  
left join MasterValue mv1 on b.Tipe = mv1.Code  and mv1.ID = 'CompanyType' 
left Join @NAV D on A.FundPK = D.FundPK  
left Join Currency E on C.CurrencyPK = E.CurrencyPK and E.status = 2
left Join Agent F on B.SellingAgentPK = F.AgentPK and F.status = 2
where A.Date = @MaxDate   and A.UnitAmount <> 0             
" + _paramFund + _paramFundClient + @"

group by B.Name,B.IFUACode,B.SID,B.InvestorType ,mv.DescOne ,C.Name, C.ID ,E.ID,D.Nav,A.UnitAmount,A.CashAmount,mv1.DescOne,C.CurrencyPK,F.Name";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ClientUnitPosition" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ClientUnitPosition" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Client Unit Position");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Sales = Convert.ToString(dr0["Sales"]);
                                            rSingle.ClientCategory = Convert.ToString(dr0["ClientCategory"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["NavAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["CashAmount"]);


                                            rList.Add(rSingle);

                                        }
                                        //mekel
                                        var QueryByClientID =
                                         from r in rList
                                         orderby r.ClientName, r.FundID
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel = 2;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date :";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToShortDateString();
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Size = 12;
                                        incRowExcel++;
                                        foreach (var rsHeader in QueryByClientID)
                                        {

                                            //
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "SID";
                                            worksheet.Cells[incRowExcel, 4].Value = "IFUA";
                                            worksheet.Cells[incRowExcel, 5].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 6].Value = "Sales";
                                            worksheet.Cells[incRowExcel, 7].Value = "Client Category";
                                            worksheet.Cells[incRowExcel, 8].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 9].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 10].Value = "Cash";
                                            string _range = "A" + incRowExcel + ":J" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            _range = "A" + incRowExcel + ":J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.IFUA;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Sales;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.ClientCategory;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Nav * rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }


                                        int _lastRow = incRowExcel;
                                        worksheet.DeleteRow(_lastRow);
                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).Width = 63;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).Width = 26;
                                        worksheet.Column(8).Width = 26;
                                        worksheet.Column(9).Width = 26;
                                        worksheet.Column(10).Width = 30;
                                        // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 CLIENT UNIT POSITION";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //Image thumb = img.GetThumbnailImage(175, 100, null, IntPtr.Zero);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Rekap Management Fee
            if (_unitRegistryRpt.ReportName.Equals("Rekap Management Fee"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                            
                            --declare @datefrom date
--declare @dateto date

--set @datefrom = '2020-03-26'
--set @dateto = '2020-03-26'

--drop table #TableMFeeDays
--drop table #TableMFeePercent
--drop table #tableDistinctAgentCSRFund
--drop table #tableAgentCSRMaxDate
--drop table #tableDistinctFund

DECLARE @StartDate datetime
                            Declare @DDate datetime
                            Declare @DFundPK int

                            create table #TableMFeeDays
                            (
	                            Date datetime,
	                            FundPK int,
	                            MFeeDays int
                            )
							CREATE CLUSTERED INDEX indx_TableMFeeDays ON #TableMFeeDays (FundPK,Date);

                            create table #TableMFeePercent
                            (
	                            Date datetime,
	                            FundPK int,
	                            MFeePercent numeric(18,8)
                            )
							CREATE CLUSTERED INDEX indx_TableMFeePercent ON #TableMFeePercent (FundPK,Date);

                            create table #tableDistinctAgentCSRFund
                            (
	                            FundPK int
                            )
							CREATE CLUSTERED INDEX indx_tableDistinctAgentCSRFund ON #tableDistinctAgentCSRFund (FundPK);

                            create table #tableAgentCSRMaxDate
                            (
	                            IsHoliday bit,
	                            DTM1 datetime,
	                            Date datetime,
	                            FundPK int
                            )
							CREATE CLUSTERED INDEX indx_tableAgentCSRMaxDate ON #tableAgentCSRMaxDate (FundPK,Date);

                            create table #tableDistinctFund
                            (
	                            FundPK int
                            )
							CREATE CLUSTERED INDEX indx_tableDistinctFund ON #tableDistinctFund (FundPK);

                            set @StartDate =  dbo.FWorkingDay(@dateFrom,-2)

                            insert into #tableDistinctAgentCSRFund
                            Select distinct FundPK From Fund where status = 2 --and fundPK = 23

                            insert into #tableAgentCSRMaxDate
                            Select 
                            IsHoliday,DTM1,Date,FundPK From ZDT_WorkingDays A, #tableDistinctAgentCSRFund B
                            where A.date between @Datefrom and @DateTo

                            insert into #tableDistinctFund
                            Select distinct FundPK From Fund where status = 2


                            Declare A Cursor For
	                            Select Date,FundPK From ZDT_WorkingDays A, #tableDistinctFund B
	                            where A.date between @Datefrom and @DateTo
                            Open A
                            Fetch Next From A
                            Into @DDate,@DFundPK

                            While @@FETCH_STATUS = 0  
                            Begin

	                            insert into #TableMFeeDays
	                            Select @DDate,A.FundPK,A.ManagementFeeDays From FundFee A
	                            where A.status = 2 and A.Date = (
		                            Select max(Date) From FundFee where fundPK = @DFundPK and status = 2 and date <= @DDate
	                            )and A.FundPK = @DFundPK 

	                            insert into #TableMFeePercent
	                            Select @DDate,A.FundPK,A.MiFeePercent From FundFeeSetup A
	                            where A.status = 2 and A.Date = (
		                            Select max(Date) From FundFeeSetup where fundPK = @DFundPK and status = 2 and date <= @DDate
	                            )and A.FundPK = @DFundPK 


	                            Fetch Next From A 
	                            Into @DDate,@DFundPK
                            End	
                            Close A
                            Deallocate A

							

                            --- VERSI BULK

                            Select F.Name NamaReksadana
                            ,case when D.MFeeDays = 0 then 0 else sum(Case when A.IsHoliday = 1 then isnull(C.AUM,0) else isnull(C.AUM,0) END 
                            * isnull(E.MFeePercent,0) / 100 / isnull(D.MFeeDays,365) * abs(abs(DATEDIFF(Day,DTM1,A.Date)))) end * 1.1

                            Gross,IsHoliday
                            From #tableAgentCSRMaxDate A
                            left join CloseNAV B on A.Date = B.Date and A.FundPK  = B.FundPK and B.status = 2 
                            left join closeNAV C on A.DTM1 = C.Date and A.FundPK = C.FundPK and C.Status = 2
                            left join #TableMFeeDays D on A.Date = D.Date and A.FundPK = D.FundPK
                            left join #TableMFeePercent E on A.Date = E.Date and A.FundPK = E.FundPK
                            left join Fund F on A.FundPK = F.FundPK and F.Status = 2
                            where A.Date in (
	                            Select distinct date from closeNAV where status = 2 and Date between @dateFrom and @dateTo
                            )
                            group by F.Name,D.MFeeDays,IsHoliday
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RekapManagementFee" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RekapManagementFee" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Rekap Management Fee");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RekapManagementFee> rList = new List<RekapManagementFee>();
                                        while (dr0.Read())
                                        {

                                            RekapManagementFee rSingle = new RekapManagementFee();
                                            rSingle.NamaReksadana = Convert.ToString(dr0["NamaReksadana"]);
                                            rSingle.Gross = Convert.ToDecimal(dr0["Gross"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;


                                        int incRowExcel = 1;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "Management Fee PT BNI ASSET MANAGEMENT";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Date From : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Date To      : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 2;

                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[RowB, 1, RowG, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Reksadana";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "GROSS";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "MI FEE 100%";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "PPN 10%";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + incRowExcel + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "PPH 23";
                                            worksheet.Cells[RowG, 6].Value = "2%";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "NET";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + incRowExcel + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;


                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaReksadana;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Gross;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4].Formula = "C" + incRowExcel + "/1.1";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Calculate();

                                                worksheet.Cells[incRowExcel, 5].Formula = "=ROUND((0.1*D" + incRowExcel + "),0)";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Calculate();

                                                worksheet.Cells[incRowExcel, 6].Formula = "=ROUND(D" + incRowExcel + "*2/100,0)";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Calculate();

                                                worksheet.Cells[incRowExcel, 7].Formula = "=C" + incRowExcel + "-F" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Calculate();





                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL";

                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();

                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 72;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Rekap Management Fee";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            else
            {
                return false;
            }
        }


        public List<FundClientCombo> GetBankRecipientCombo_ByFundClientPK(int _fundClientPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<FundClientCombo> L_FundClient = new List<FundClientCombo>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                        

                        select C.BankRecipientPK BankRecipientPK,C.NamaNasabah + ' - ' + C.Bank +  ' - ' + C.B as AccountNo from (  
                        select 1 BankRecipientPK,FC.NamaNasabah1 NamaNasabah,B.Name Bank,nomorrekening1 B from fundclient FC   
                        left join Bank B on FC.namabank1 = B.BankPK where fundclientpk = @FundClientPK and FC.status  = 2 and B.Status = 2    
                        union all    
                        select 2 BankRecipientPK,FC.NamaNasabah1 NamaNasabah,B.Name Bank,nomorrekening2 B from fundclient FC   
                        left join Bank B on FC.namabank2 = B.BankPK where fundclientpk = @FundClientPK and FC.status  = 2 and B.Status = 2   
                        union all    
                        select 3 BankRecipientPK,FC.NamaNasabah1 NamaNasabah,B.Name Bank,nomorrekening3 B from fundclient FC   
                        left join Bank B on FC.namabank3 = B.BankPK where fundclientpk = @FundClientPK and FC.status  = 2 and B.Status = 2    
                        )C 
                        UNION ALL

                        Select NoBank BankRecipientPK, A.AccountName + ' - ' + B.Name + ' - ' + A.AccountNo from FundClientBankList A
                        left join Bank B on A.BankPK = B.BankPK and B.status in (1,2)
                        where fundClientPK = @FundClientPK and A.status = 2


                        ";
                        cmd.Parameters.AddWithValue("@FundClientPK", _fundClientPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    FundClientCombo M_FundClient = new FundClientCombo();
                                    M_FundClient.BankRecipientPK = Convert.ToInt32(dr["BankRecipientPK"]);
                                    M_FundClient.AccountNo = Convert.ToString(dr["AccountNo"]);
                                    L_FundClient.Add(M_FundClient);
                                }

                            }
                            return L_FundClient;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }


        }

        public void Generate_UnitFeeSummaryNew(EndDayTrails _endDayTrails)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";
                        string _paramFundClient = "";
                        string _paramFundText = "";
                        string _paramFundClientText = "";

                        if (!_host.findString(_endDayTrails.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_endDayTrails.FundFrom))
                        {
                            _paramFund = " And A.FundPK in ( " + _endDayTrails.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }




                        if (!_host.findString(_endDayTrails.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_endDayTrails.FundClientFrom))
                        {
                            _paramFundClient = " And A.FundClientPK in ( " + _endDayTrails.FundClientFrom + " ) ";
                        }
                        else
                        {
                            _paramFundClient = "";
                        }


                        cmd.CommandText = @"
    
DELETE A from [DailyDataForCommissionRptNew] A
where A.Mfeedate between @dateFrom and @Dateto 
--and A.FundPK = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFund + _paramFundClient + @"


	DECLARE @StartDate datetime
    Declare @EndDate DATETIME
    

    set @StartDate =  dbo.FWorkingDay(@dateFrom,-3)
    set @EndDate = dbo.fworkingday(@DateTo,-1)


	DECLARE @FCAgent TABLE
    (
		Date DATETIME,
		FundClientPK INT,
		AgentPK int
	)

	DECLARE @FCFundClientPK int
	DECLARE @FCDate datetime

	Declare A Cursor For
		SELECT DISTINCT A.Date,FundClientPK FROM dbo.ZDT_WorkingDays A,dbo.FundClientAgentSetup WHERE status = 2
		AND A.date BETWEEN @StartDate AND @DateTo
	Open A
	Fetch Next From A
	INTO @FCDate,@FCFundClientPK
	
	WHILE @@FETCH_STATUS = 0  
	BEGIN
		INSERT INTO @FCAgent
		        ( Date, FundClientPK, AgentPK )
		
		SELECT  @FCDate,FundClientPK,AgentPK FROM dbo.FundClientAgentSetup 
		WHERE Status = 2 AND Date =
		(
			SELECT MAX(Date) FROM dbo.FundClientAgentSetup WHERE status = 2 AND Date<= @FCDate
			AND FundClientPK = @FCFundClientPK
		) AND FundClientPK = @FCFundClientPK
		

		FETCH NEXT FROM A 
		INTO @FCDate,@FCFundClientPK
	END	
	CLOSE A
	DEALLOCATE A


	DECLARE @FFSetup TABLE
    (
		Date DATETIME,
		FundPK INT,
		MfeeType INT
	)

	DECLARE @FFSetupDetail TABLE
    (
		Date DATETIME,
		FundPK INT,
		MfeeType INT,
		FeePercent NUMERIC(18,8),
		RangeFrom Numeric(22,4),
		RangeTo NUMERIC(22,4),
		AmortizeDate DATETIME,
		AmortizeAmount NUMERIC(22,4),
		FirstAmortizeDate datetime

	)

	DECLARE @FFFundPK INT
	DECLARE @FFDate DATETIME

	DECLARE A CURSOR FOR
		SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,Fund WHERE status = 2
		AND A.date BETWEEN @StartDate AND @DateTo
	OPEN A
	FETCH NEXT FROM A
	INTO @FFDate,@FFFundPK
	
	WHILE @@FETCH_STATUS = 0  
	BEGIN
		
		IF EXISTS(
			SELECT TOP 1 '1' FROM dbo.FundFeeSetup 
		WHERE Status = 2 AND Date =
		(
			SELECT MAX(Date) FROM dbo.FundFeeSetup WHERE status = 2 AND Date<= @FFDate AND FundPK = @FFFundPK
		)AND FundPK = @FFFundPK 
		)
		BEGIN
			INSERT INTO @FFSetup
		        ( Date, FundPK, MfeeType )
		
		SELECT TOP 1 @FFDate,FundPK,FeeType FROM dbo.FundFeeSetup 
		WHERE Status = 2 AND Date =
		(
			SELECT MAX(Date) FROM dbo.FundFeeSetup WHERE status = 2 AND Date<= @FFDate AND FundPK = @FFFundPK
		)AND FundPK = @FFFundPK 
		ORDER BY FundFeeSetupPK DESC
		END
		ELSE
		BEGIN
				INSERT INTO @FFSetup
		        ( Date, FundPK, MfeeType )
				SELECT @FFDate,@FFFundPK,1
		END
		
		IF EXISTS(
			SELECT TOP 1 '1' FROM dbo.FundFeeSetup 
			WHERE Status = 2 AND Date =
			(
				SELECT MAX(Date) FROM dbo.FundFeeSetup WHERE status = 2 AND Date<= @FFDate AND FundPK = @FFFundPK
			)AND FundPK = @FFFundPK 
		)
		BEGIN
				INSERT INTO @FFSetupDetail
		        ( Date ,
		          FundPK ,
		          MfeeType ,
		          FeePercent ,
		          RangeFrom ,
		          RangeTo ,
		          AmortizeDate ,
		          AmortizeAmount,
				  FirstAmortizeDate
		        )
				SELECT  @FFDate,FundPK,FeeType,MiFeePercent,RangeFrom,RangeTo,DateAmortize,MiFeeAmount,Date FROM dbo.FundFeeSetup 
				WHERE Status = 2 AND Date =
				(
					SELECT MAX(Date) FROM dbo.FundFeeSetup WHERE status = 2 AND Date<= @FFDate AND FundPK = @FFFundPK
				)AND FundPK = @FFFundPK 
		END
		ELSE
		BEGIN
			INSERT INTO @FFSetupDetail
		        ( Date ,
		          FundPK ,
		          MfeeType ,
		          FeePercent ,
		          RangeFrom ,
		          RangeTo ,
		          AmortizeDate ,
		          AmortizeAmount,
				  FirstAmortizeDate
		        )
				SELECT @FFDate,@FFFundPK,1,ISNULL(ManagementFeePercent,0)  
				,0,0,'',0,''
				FROM Fund WHERE status = 2 AND FundPK = @FFFundPK
		END
        

	
		

		FETCH NEXT FROM A 
		INTO @FFDate,@FFFundPK
	END	
	CLOSE A
	DEALLOCATE A


	DECLARE @AFFundPK INT
	DECLARE @AFAgentPK INT
	DECLARE @AFDate DATETIME
	
	DECLARE @AFSetup TABLE
    (
		Date DATETIME,
		FundPK INT,
		AgentPK INT,
		FeeType INT
	)

	DECLARE @AFSetupDetail TABLE
    (
		Date DATETIME,
		FundPK INT,
		AgentPK INT,
		FeeType INT,
		FeePercent NUMERIC(18,8),
		RangeFrom Numeric(22,4),
		RangeTo NUMERIC(22,4),
		AmortizeDate DATETIME,
		AmortizeAmount NUMERIC(22,4),
		FirstAmortizeDate datetime

	)

	DECLARE @AFFlagAllDate DATETIME
	DECLARE @AFFlagFundDate datetime

	DECLARE A CURSOR FOR
		SELECT DISTINCT A.Date,AgentPK,FundPK FROM dbo.ZDT_WorkingDays A,dbo.AgentFeeSetup WHERE status = 2
		AND A.date BETWEEN @StartDate AND @DateTo
	OPEN A
	FETCH NEXT FROM A
	INTO @AFDate,@AFAgentPK,@AFFundPK
	WHILE @@FETCH_STATUS = 0  
	BEGIN
				SET @AFFlagAllDate = ''
				SET @AFFlagFundDate = ''

			
				SELECT @AFFlagFundDate = MAX(Date) FROM dbo.AgentFeeSetup WHERE Status = 2 AND Date <= @AFDate
					AND AgentPK = @AFAgentPK AND FundPK = @AFFundPK

				SELECT @AFFlagAllDate =  MAX(Date) FROM dbo.AgentFeeSetup WHERE Status = 2 AND Date <= @AFDate
					AND AgentPK = @AFAgentPK AND FundPK = 0

				
				    IF @AFFlagAllDate > ISNULL(@AFFlagFundDate,'01/01/1900')  and @AFFlagFundDate is null
                    --IF (ISNULL(@AFFlagFundDate,'01/01/1900') = '01/01/1900')				
                    BEGIN
					INSERT INTO @AFSetup
					( Date, FundPK, AgentPK, FeeType )
					SELECT top 1 @AFDate Date,@AFFundPK FundPK,AgentPK,FeeType FROM dbo.AgentFeeSetup WHERE status = 2 AND Date =
					(
						SELECT MAX(Date) FROM dbo.AgentFeeSetup WHERE Status = 2 AND Date <= @AFDate
						AND AgentPK = @AFAgentPK AND FundPK = 0
						
					)AND FundPK = 0 AND AgentPK = @AFAgentPK

					INSERT INTO @AFSetupDetail
				        ( Date ,
				          FundPK ,
				          AgentPK ,
				          FeeType ,
				          FeePercent ,
				          RangeFrom ,
				          RangeTo ,
				          AmortizeDate ,
				          AmortizeAmount ,
				          FirstAmortizeDate
				        )
					SELECT @AFDate Date,@AFFundPK FundPK,AgentPK,FeeType,MiFeePercent
					,RangeFrom,RangeTo,DateAmortize,MiFeeAmount,Date
					FROM dbo.AgentFeeSetup WHERE status = 2 AND Date =
					(
						SELECT MAX(Date) FROM dbo.AgentFeeSetup WHERE Status = 2 AND Date <= @AFDate
						AND AgentPK = @AFAgentPK AND FundPK = 0

					)AND FundPK = 0 AND AgentPK = @AFAgentPK
				END
				ELSE
				BEGIN
					INSERT INTO @AFSetup
					( Date, FundPK, AgentPK, FeeType )

					SELECT top 1 @AFDate Date,FundPK,AgentPK,FeeType FROM dbo.AgentFeeSetup WHERE status = 2 AND Date =
					(
						SELECT MAX(Date) FROM dbo.AgentFeeSetup WHERE Status = 2 AND Date <= @AFDate
						AND AgentPK = @AFAgentPK AND FundPK = @AFFundPK

					)AND FundPK = @AFFundPK AND AgentPK = @AFAgentPK


						INSERT INTO @AFSetupDetail
				        ( Date ,
				          FundPK ,
				          AgentPK ,
				          FeeType ,
				          FeePercent ,
				          RangeFrom ,
				          RangeTo ,
				          AmortizeDate ,
				          AmortizeAmount ,
				          FirstAmortizeDate
				        )
						SELECT @AFDate Date,@AFFundPK FundPK,AgentPK,FeeType,MiFeePercent
						,RangeFrom,RangeTo,DateAmortize,MiFeeAmount,Date 
						FROM dbo.AgentFeeSetup WHERE status = 2 AND Date =
							(
								SELECT MAX(Date) FROM dbo.AgentFeeSetup WHERE Status = 2 AND Date <= @AFDate
								AND AgentPK = @AFAgentPK AND FundPK = @AFFundPK

							)AND FundPK = @AFFundPK AND AgentPK = @AFAgentPK
				END



				
				

		FETCH NEXT FROM A 
		INTO @AFDate,@AFAgentPK,@AFFundPK
	END	
	CLOSE A
	DEALLOCATE A


    CREATE table #FCP  
	    (
	        FundPK int,
		    FundClientPK int,
		    Unit numeric(22,4),
		    UnitDate datetime,
		    NAVDate datetime,
		    MFeeDate DATETIME,
			MfeeMethod INT,
			CurrencyPK INT,
			SharingFeeCalculation INT,
			IsHoliday BIT,
			SellingAgentPK INT,
			MFeeType INT,
			SharingFeeType INT,
			IssueDate Datetime
			
	    )

    insert into #FCP
    Select A.FundPK,A.FundClientPK,sum(isnull(UnitAmount,0)) Unit
	,CASE WHEN B.DT1 = C.IssueDate THEN B.DT1 ELSE  A.Date END UnitDate
	,B.DT1 NAVDate,B.DT2 MFeeDate
	,ISNULL(C.MFeeMethod,1)
	,ISNULL(C.CurrencyPK,1) 
	,ISNULL(C.SharingFeeCalculation,1) 
	,ISNULL(B.IsHoliday,0) 
	,ISNULL(E.AgentPK,D.SellingAgentPK) 
	,ISNULL(F.MfeeType,1) 
	,ISNULL(G.FeeType,1) 
	,C.IssueDate
    from FundClientPosition A
	LEFT JOIN ZDT_WorkingDays B ON A.Date = B.Date
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
	LEFT JOIN @FCAgent E ON A.FundClientPK = E.FundClientPK AND B.DT2 = E.Date
	LEFT JOIN @FFSetup F ON A.FundPK = F.FundPK AND B.DT2 = F.Date
	LEFT JOIN @AFSetup G ON A.FundPK = G.FundPK AND ISNULL(E.AgentPK,D.SellingAgentPK) = G.AgentPK AND B.DT2 = G.Date
    where A.Date between @StartDate and @EndDate
	
	----------PARAM DISINI
" + _paramFund + _paramFundClient + @"

    group by A.FundPK,A.FundClientPK,A.Date,B.DT1,B.DT2,C.MFeeMethod,C.CurrencyPK,C.SharingFeeCalculation,B.IsHoliday
	,D.SellingAgentPK,E.AgentPK,F.MfeeType,G.FeeType,C.IssueDate
    --having sum(isnull(UnitAmount,0)) > 1
    order by MfeeDate


	--- BUAT HANDLE SUBS DI ISSUE DATE BIAR MUNCUL DI RESULT AKHIR

	
	
		DECLARE @FundFC TABLE
        (
			FundPK INT,
			FundClientPK INT,
			AgentPK int
		)

		INSERT INTO @FundFC
		SELECT DISTINCT FundPK,FundCLientPK,SellingAgentPK FROM #FCP


	INSERT INTO #FCP
	        ( FundPK ,
	          FundClientPK ,
	          Unit ,
	          UnitDate ,
	          NAVDate ,
	          MFeeDate ,
	          MfeeMethod ,
	          CurrencyPK ,
	          SharingFeeCalculation ,
	          IsHoliday ,
	          SellingAgentPK , 
	          MFeeType ,
	          SharingFeeType ,
	          IssueDate
	        )

		SELECT  
		Z.FundPK,Z.FundClientPK,H.TotalUnitAmount Unit
	,H.ValueDate UnitDate
	,H.ValueDate NAVDate
	,H.ValueDate MFeeDate
	,ISNULL(B.MFeeMethod,1)
	,ISNULL(B.CurrencyPK,1) 
	,ISNULL(B.SharingFeeCalculation,1) 
	,ISNULL(C.IsHoliday,0) 
	,ISNULL(Z.AgentPK,0) 
	,ISNULL(F.MfeeType,1) 
	,ISNULL(G.FeeType,1) 
	,B.IssueDate
		
		FROM @FundFC Z
		INNER JOIN Fund B ON Z.FundPK = B.FundPK AND B.status  IN (1,2)
		INNER JOIN dbo.ClientSubscription H ON Z.FundPK = H.FundPK AND Z.FundClientPK = H.FundClientPK AND B.IssueDate = H.ValueDate AND H.status = 2 AND H.Posted = 1 AND H.Revised = 0
		INNER JOIN @FFSetup F ON Z.FundPK = F.FundPK AND B.IssueDate = F.Date
		INNER JOIN @AFSetup G ON Z.FundPK = G.FundPK AND Z.AgentPK	 = G.AgentPK AND B.IssueDate = G.Date
		INNER JOIN dbo.ZDT_WorkingDays C ON B.IssueDate = C.Date 
		WHERE ValueDate BETWEEN @DateFrom AND @DateTo 


		 
		
		
	Declare @FlagDate datetime
    Declare @CFundPK int
    declare @CFundClientPK int
    Declare @UnitBal numeric(22,4)

    DECLARE @cDate TABLE
    (
		Date Datetime
	)

	INSERT INTO @cDate
	Select distinct MFeeDate From #FCP
	
	INSERT #FCP
	        ( FundPK ,
	          FundClientPK ,
	          Unit ,
	          UnitDate ,
	          NAVDate ,
	          MFeeDate,
			  IsHoliday,
			  SellingAgentPK,
			  CurrencyPK,
			  MfeeMethod,
			  SharingFeeCalculation,
			  MFeeType,
			  SharingFeeType,
			  IssueDate
			  )
	        
	  
	SELECT   B.FundPK,B.FundClientPK
	
	,CASE WHEN B.UnitDate < @StartDate THEN 0 ELSE  ISNULL(B.Unit,0) END
	,CASE WHEN D.IssueDate = A.DTM1 THEN A.DTM1 ELSE A.DTM2 END UnitDate
	,A.DTM1 NAVDate,A.Date
	--,ISNULL(B.UNIT,0)
	--,B.UnitDate
	--,B.NAVDate NAVDate,A.Date

	,A.IsHoliday,ISNULL(E.AgentPK,C.SellingAgentPK),ISNULL(D.CurrencyPK,0)
	,ISNULL(B.MFeeMethod,1)
	,ISNULL(B.SharingFeeCalculation,1) 
	,ISNULL(F.MfeeType,1) 
	,ISNULL(G.FeeType,1) 
	,B.IssueDate
	FROM dbo.ZDT_WorkingDays A
	LEFT JOIN #FCP B ON B.UnitDate = CASE WHEN B.IssueDate = A.DTM1 THEN A.DTM1 else A.DTM2 END AND B.MFeeDate <> B.IssueDate --AND B.Unit > 0
	--LEFT JOIN #FCP B ON B.MFeeDate = CASE WHEN B.IssueDate = A.DTM1 THEN A.DTM1 else A.DTM2 END --AND B.Unit > 0
	LEFT JOIN FundClient C ON B.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	LEFT JOIN Fund D ON B.FundPK = D.FundPK AND D.status IN (1,2)
	LEFT JOIN @FCAgent E ON B.FundClientPK = E.FundClientPK AND A.Date = E.Date
	LEFT JOIN @FFSetup F ON B.FundPK = F.FundPK AND A.Date = F.Date
	LEFT JOIN @AFSetup G ON B.FundPK = G.FundPK AND ISNULL(E.AgentPK,C.SellingAgentPK) = G.AgentPK AND A.Date = G.Date
	WHERE A.Date NOT IN
		(
		SELECT Date FROM @cDate
		) AND A.Date BETWEEN @DateFrom AND @Dateto	
	AND B.FundPK IS NOT NULL
	AND A.Date BETWEEN @DateFrom AND @DateTo
	
DECLARE @FPCFundAndDate TABLE
(
	FundPK INT,
	Date DATETIME
)

INSERT INTO @FPCFundAndDate
SELECT DISTINCT FundPK,MFeeDate FROM #FCP

DECLARE @tableFund TABLE
(
	FundPK INT
)

INSERT into @tableFund
        ( FundPK )
SELECT DISTINCT FundPK FROM #FCP

INSERT INTO @FPCFundAndDate
SELECT FundPK,Date FROM dbo.ZDT_WorkingDays,@tableFund
WHERE Date BETWEEN @DateFrom AND @DateTo
AND Date NOT IN
(
	SELECT DISTINCT Date FROM @FPCFundAndDate
)


DECLARE @LastFundInformation TABLE
(
	Date DATETIME,
	FundPK int,
	NAV NUMERIC(22,8),
	Days INT
)

INSERT INTO @LastFundInformation
SELECT Date
,FundPK
,ISNULL(dbo.FgetLastCloseNav(Date,FundPK),0) 
,ISNULL([dbo].[FgetManagementFeeDaysByDate](Date,FundPK),0)
FROM @FPCFundAndDate



DECLARE @ClientRedemption TABLE
(
	ValueDate DATETIME,
	FundPK INT,
	FundClientPK INT,
	TotalUnitAmount NUMERIC(22,4),
	TotalCashAmount NUMERIC(22,4),
	RedemptionFee NUMERIC(22,4)
)

INSERT INTO @ClientRedemption
        ( ValueDate ,
          FundPK ,
          FundClientPK ,
          TotalUnitAmount ,
          TotalCashAmount,
		  RedemptionFee
        )
	SELECT ValueDate,FundPK,FundClientPK, sum(ISNULL(UnitAmount,0)) TotalUnitAmount
	, sum(ISNULL(CashAmount,0)) TotalCashAmount
	, sum(ISNULL(RedemptionFeeAmount,0)) FeeAmount
    from ClientRedemption where posted = 1 and revised = 0 and status = 2 and ValueDate between @DateFrom and @DateTo
    group by FundClientPK,ValueDate,FundPK


DECLARE @ClientSubscription TABLE
(
	ValueDate DATETIME,
	FundPK INT,
	FundClientPK INT,
	TotalUnitAmount NUMERIC(22,4),
	TotalCashAmount NUMERIC(22,4),
	SubscriptionFee NUMERIC(22,4)
)

INSERT INTO @ClientSubscription
        ( ValueDate ,
          FundPK ,
          FundClientPK ,
          TotalUnitAmount ,
          TotalCashAmount,
		  SubscriptionFee
        )
  Select ValueDate,FundPK,FundClientPK, sum(ISNULL(TotalUnitamount,0)) TotalUnitAmount
  , sum(ISNULL(TotalCashAmount,0)) TotalCashAmount
  ,sum(ISNULL(SubscriptionFeeAmount,0)) TotalCashAmount
    from ClientSubscription where posted = 1 and revised = 0 and status = 2 and ValueDate between @DateFrom and @DateTo
    group by FundClientPK,ValueDate,FundPK


DECLARE @ClientSwitchingFrom TABLE
(
	ValueDate DATETIME,
	FundPK INT,
	FundClientPK INT,
	TotalUnitAmountFundFrom NUMERIC(22,4),
	TotalCashAmountFundFrom NUMERIC(22,4),
	SwitchingFee NUMERIC(22,4)
)
INSERT INTO @ClientSwitchingFrom
        ( ValueDate ,
          FundPK ,
          FundClientPK ,
          TotalUnitAmountFundFrom ,
          TotalCashAmountFundFrom,
		  SwitchingFee
        )
Select ValueDate,FundPKFrom FundPK,FundClientPK, sum(ISNULL(UnitAmount,0)) TotalUnitAmountFundFrom
, sum(ISNULL(CashAmount,0)) TotalCashAmountFundFrom
, sum(ISNULL(SwitchingFeeAmount,0)) FeeAmount
from ClientSwitching where posted = 1 and revised = 0 and status = 2 and ValueDate between @DateFrom and @DateTo
group by FundClientPK,ValueDate,FundPKFrom



DECLARE @ClientSwitching TABLE
(
	ValueDate DATETIME,
	FundPK INT,
	FundClientPK INT,
	TotalUnitAmountFundTo NUMERIC(22,4),
	TotalCashAmountFundTo NUMERIC(22,4),
	SwitchingFee NUMERIC(22,4)
)

INSERT INTO @ClientSwitching
        ( ValueDate ,
          FundPK ,
          FundClientPK ,
          TotalUnitAmountFundTo ,
          TotalCashAmountFundTo,
		  SwitchingFee
        )
    Select ValueDate,FundPKTo FundPK,FundClientPK, sum(ISNULL(TotalUnitAmountFundTo,0)) TotalUnitAmountFundTo
	, sum(ISNULL(TotalCashAmountFundTo,0)) TotalCashAmountFundTo
	, SUM(ISNULL(SwitchingFeeAmount,0)) FeeAmount
    from ClientSwitching where posted = 1 and revised = 0 and status = 2 and ValueDate between @DateFrom and @DateTo
    group by FundClientPK,ValueDate,FundPKTo



CREATE table #MFeeInformation 
(
	MfeeDate DATETIME,
	AUMForMFee NUMERIC(22,4),
	MFeeType INT,
	FundClientPK INT,
	FundPK INT,
	Days INT
	--MfeePercent NUMERIC(18,8),
	--MFeeAmount NUMERIC(22,4)
)



DECLARE @SharingFeeList TABLE
(
	Date DATETIME,
	AgentPK INT,
	FundPK INT
)

INSERT INTO @SharingFeeList
        ( Date, AgentPK, FundPK )
SELECT MAX(Date),AgentPK,FundPK 
FROM SharingFeeSetup WHERE status = 2
GROUP BY AgentPK,FundPK

DECLARE @SharingFeeData TABLE
(
	AgentPK INT,
	FundPK INT,
	FeeType int
)

INSERT INTO @SharingFeeData
        ( AgentPK, FundPK, FeeType )
SELECT A.AgentPK,A.FundPK,B.FeeType FROM @SharingFeeList A
LEFT JOIN SharingFeeSetup B ON A.FundPK = B.FundPK AND A.AgentPK = B.AgentPK AND A.Date = B.Date AND B.status in (1,2)



INSERT INTO #MFeeInformation
        ( MfeeDate, AUMForMFee, MFeeType,FundClientPK,FundPK,days )

SELECT A.MFeeDate
,isnull( Case when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation)  ,0) = 0 then A.Unit  
					when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 1 then  K.UnitAmount
						when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 2 then case when A.IsHoliday = 1 then isnull(K.UnitAmount,0)  else isnull(L.UnitAmount,0)  end end
							* 
							case when A.MFeeMethod = 2 and A.CurrencyPK = 1 then 1000 
									else case when A.MFeeMethod = 2 and A.CurrencyPK <> 1 
											then 1	else
												Case when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 2 then case when A.IsHoliday = 1 then isnull(B.NAV,0)  else isnull(D.NAV,0)  end else B.NAV end
																end END,0)  AUMForMFee
,A.MFeeType
,A.FundClientPK
,A.FundPK
,ISNULL(B.Days,365)

FROM #FCP A
Left join @LastFundInformation B on A.FundPK = B.FundPK and A.NAVDate = B.Date
left join Agent C on A.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join FundClientPosition K on A.FundPK = K.FundPK and A.FundClientPK = K.FundClientPK and K.Date = A.NAVDate
left join FundClientPosition L on A.FundPK = L.FundPK and A.FundClientPK = L.FundClientPK and L.Date = A.MFeeDate
Left join @LastFundInformation D on A.FundPK = D.FundPK and A.MFeeDate = D.Date
left JOIN @SharingFeeData SFD ON A.FundPK = SFD.FundPK AND A.SellingAgentPK = SFD.AgentPK


WHERE A.MFeeDate BETWEEN @dateFrom AND @DateTo
ORDER BY A.MFeeDate ASC


CREATE Table #MFeeCal 
(
	MFeeDate datetime,
	MFeeAmount numeric(22,4),
	MFeePercent numeric(18,8),
	FundClientPK INT,
	FundPK INT
	)

INSERT INTO #MFeeCal
        ( MFeeDate, MFeeAmount, MFeePercent,FundClientPK,FundPK )

SELECT 
A.MfeeDate

--MFeeAmount
,ISNULL(CASE WHEN A.MFeeType = 1 THEN A.AUMForMFee * B.FeePercent / 100 / A.Days
WHEN A.MFeeType = 2 THEN 
	CASE WHEN A.AUMForMFee > B.RangeTo then
		(B.RangeTo - B.RangeFrom) * B.FeePercent / 100 / A.Days 
		ELSE CASE WHEN A.AUMForMFee > B.RangeFrom THEN (A.AUMForMFee - B.RangeFrom) * B.FeePercent / 100 / A.Days ELSE 0 END END
WHEN A.MFeeType = 3 THEN
	CASE WHEN A.AUMForMfee BETWEEN B.RangeFrom AND B.RangeTo 
		THEN A.AUMForMFee * B.FeePercent / 100 / A.Days ELSE 0 END
WHEN A.MFeeType = 4 AND A.MfeeDate <= B.AmortizeDate THEN
	CASE WHEN DATEDIFF(DAY,B.FirstAmortizeDate,B.AmortizeDate) > 0 AND B.AmortizeAmount > 0 
		THEN B.AmortizeAmount / (DATEDIFF(DAY,B.FirstAmortizeDate,B.AmortizeDate) + 1) ELSE 0 END
END,0) 

,ISNULL(B.FeePercent,0)
,A.FundClientPK
,A.FundPK
FROM #MFeeInformation A
LEFT JOIN @FFSetupDetail B ON A.MfeeDate = B.Date AND A.MFeeType = B.MfeeType
AND A.FundPK = B.FundPK


-- CHECK PERHITUNGAN FEE DETAIL DISINI
--SELECT * FROM #MFeeInformation ORDER BY MfeeDate
--SELECT * FROM @FFSetupDetail WHERE fundPK = 235 ORDER BY date asc
--SELECT * FROM #MFeeCal ORDER BY MFeeDate asc
---------
 




CREATE table #MFeeCalSummary 
(
	MFeeDate datetime,
	MFeeAmount numeric(22,4),
	MFeePercent numeric(18,8),
	FundClientPK INT,
	FundPK INT
)

INSERT INTO #MFeeCalSummary

        ( MFeeDate ,
          MFeeAmount ,
          MFeePercent ,
          FundClientPK ,
          FundPK
        )
SELECT MfeeDate,SUM(ISNULL(MFeeAmount,0)),AVG(MfeePercent),FundClientPK,FundPK FROM #MFeeCal
GROUP BY MFeeDate,FundClientPK,FundPK



 
CREATE table #MAgentFeeInformation 
(
	MfeeDate DATETIME,
	AgentFeeType INT,
	AgentPK INT,
	FundPK INT,
	FundClientPK INT,
	AUMForMFee NUMERIC(22,4),
	MFeeAmount NUMERIC(22,4),
	Days INT,
	MFeePercent NUMERIC(18,8)
)

INSERT INTO #MAgentFeeInformation
SELECT A.MFeeDate
,ISNULL(A.SharingFeeType,1)
,A.SellingAgentPK
,A.FundPK
,A.FundClientPK
,isnull( Case when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation)  ,0) = 0 then A.Unit  
					when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 1 then  E.UnitAmount
						when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 2 then case when A.IsHoliday = 1 then isnull(E.UnitAmount,0)  else isnull(D.UnitAmount,0)  end end
							* 
							case when A.MFeeMethod = 2 and A.CurrencyPK = 1 then 1000 
									else case when A.MFeeMethod = 2 and A.CurrencyPK <> 1 
											then 1	else
												Case when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 2 then case when A.IsHoliday = 1 then isnull(B.NAV,0)  else isnull(Y.NAV,0)  end else B.NAV end
																end END,0)  AUMForMFee
												
												
,ISNULL(M.MFeeAmount,0) MFee
,ISNULL(B.Days,365)
,M.MFeePercent
FROM #FCP A
Left join @LastFundInformation B on A.FundPK = B.FundPK and A.NAVDate = B.Date

LEFT JOIN #MFeeCalSummary M ON A.FundPK = M.FundPK  AND A.FundClientPK = M.FundClientPK AND A.MFeeDate = M.MFeeDate
left join FundClientPosition K on A.FundPK = K.FundPK and A.FundClientPK = K.FundClientPK and K.Date =  case when A.IsHoliday = 1 then A.UnitDate else A.NAVDate END
Left join @LastFundInformation Y on A.FundPK = Y.FundPK and A.MFeeDate = Y.Date 
left join Agent C on A.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join FundClientPosition D on A.FundPK = D.FundPK and A.FundClientPK = D.FundClientPK and A.MFeeDate = D.Date
left join FundClientPosition E on A.FundPK = E.FundPK and A.FundClientPK = E.FundClientPK and  A.NAVDate =  E.Date

left JOIN @SharingFeeData SFD ON A.FundPK = SFD.FundPK AND A.SellingAgentPK = SFD.AgentPK

WHERE A.MFeeDate BETWEEN @dateFrom AND @DateTo
ORDER BY A.MFeeDate ASC

--SELECT * FROM #MAgentFeeInformation ORDER BY MfeeDate

CREATE Table #MAgentFeeCal 
(
	MFeeDate datetime,
	AgentFeeAmount numeric(22,4),
	AgentFeePercent numeric(18,8),
	FundClientPK INT,
	FundPK INT,
	AgentPK int
)

--1 FLAT
--2 Tiering By Aum
--3 Tiering By MFee
--4 Prog by Aum
--5 Prog by MFee
--6 Amortize

INSERT INTO #MAgentFeeCal
SELECT A.MfeeDate
,ISNULL(CASE WHEN A.AgentFeeType = 1 THEN CASE WHEN A.MfeePercent > 0 THEN A.AUMForMFee * A.MFeePercent/100 / A.Days * ISNULL(B.FeePercent,C.Feepercent) / 100 
ELSE A.MFeeAmount * ISNULL(B.FeePercent,C.Feepercent) / 100 END
	 WHEN A.AgentFeeType = 2 THEN 
		CASE WHEN A.AUMForMFee > B.RangeTo THEN  	
		(B.RangeTo - B.RangeFrom) * ISNULL(B.FeePercent,C.Feepercent) / 100 / A.Days 
		 ELSE CASE WHEN A.AUMForMFee > B.RangeFrom THEN (A.AUMForMFee - B.RangeFrom) * ISNULL(B.FeePercent,C.Feepercent) / 100 / A.Days ELSE 0 END END
	WHEN A.AgentFeeType = 3 THEN          
		CASE WHEN A.MFeeAmount > B.RangeTo THEN  	
		(B.RangeTo - B.RangeFrom) * ISNULL(B.FeePercent,C.Feepercent) / 100 
		ELSE CASE WHEN A.MFeeAmount > B.RangeFrom THEN  (A.MFeeAmount - B.RangeFrom) * ISNULL(B.FeePercent,C.Feepercent) / 100 ELSE 0 END  END    
	WHEN A.AgentFeeType = 4 THEN
		CASE WHEN A.AUMForMfee BETWEEN B.RangeFrom AND B.RangeTo 
		THEN A.MFeeAmount * ISNULL(B.FeePercent,C.Feepercent) / 100 ELSE 0 END
	WHEN A.AgentFeeType = 5 THEN
		CASE WHEN A.MFeeAmount BETWEEN B.RangeFrom AND B.RangeTo 
		THEN A.MFeeAmount * ISNULL(B.FeePercent,C.Feepercent) / 100  ELSE 0 END
	WHEN A.AgentFeeType = 6 AND A.MfeeDate <= B.AmortizeDate THEN
		CASE WHEN DATEDIFF(DAY,B.FirstAmortizeDate,B.AmortizeDate) > 0 AND B.AmortizeAmount > 0 
		THEN B.AmortizeAmount / (DATEDIFF(DAY,B.FirstAmortizeDate,B.AmortizeDate) + 1) ELSE 0 END
 END,0)
 ,case when B.fundPK is not null and B.FeeType = 6 then 0     
    when C.FundPK is not null and C.FeeType =6 then 0 else
Case when ISNULL(B.FeePercent,0) > 0  then B.FeePercent else isnull(C.FeePercent,0) end end
 ,A.FundClientPK
 ,A.FundPK
 ,A.AgentPK
FROM #MAgentFeeInformation A
LEFT JOIN @AFSetupDetail B ON A.FundPK = B.FundPK AND A.AgentPK = B.AgentPK AND A.MfeeDate = B.Date
LEFT JOIN @AFSetupDetail C ON C.FundPK = 0 AND A.MfeeDate = C.Date AND A.AgentPK = C.AgentPK


CREATE table #AgentFeeCalSummary 
(
	MFeeDate datetime,
	AgentFeeAmount numeric(22,4),
	AgentFeePercent numeric(18,8),
	FundClientPK INT,
	FundPK INT,
	AgentPK INT
)
INSERT INTO #AgentFeeCalSummary
SELECT MFeeDate,SUM(ISNULL(AgentFeeAmount,0)),AVG(AgentFeePercent) 
,FundClientPK,FundPK,AgentPK
FROM #MAgentFeeCal
GROUP BY MFeeDate,FundClientPK,FundPK,AgentPK


-- BIKIN TABLE DailyDataForCommissionRptNEW

INSERT INTO DailyDataForCommissionRptNEW
SELECT  A.UnitDate,A.NAVDate,A.MFeeDate,A.FundPK
,A.FundClientPK,A.SellingAgentPK  
--NAV
,case when A.MFeeMethod = 2 and A.CurrencyPK = 1 then 1000 else case when A.MFeeMethod = 2 and A.CurrencyPK <> 1 then 1
else  ISNULL(Y.NAV,0)
END END NAV


,isnull(
		
			Case when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) in (1,2) then case when A.IsHoliday = 1 then isnull(J.UnitAmount,0)  else isnull(D.UnitAmount,0)  end ELSE
					case when A.IsHoliday = 1 then isnull(L.UnitAmount,0)  else isnull(J.UnitAmount,0)  end end
			* case when A.IsHoliday = 1 THEN ISNULL(B.NAV,0) ELSE ISNULL(Y.NAV,0) END
			
			,0) AUM


--,A.MFeeType

-- AUM FOR Mfee
,


isnull( Case when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation)  ,0) = 0 then A.Unit  
					when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 1 then  J.UnitAmount
						when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 2 then case when A.IsHoliday = 1 then isnull(J.UnitAmount,0)  else isnull(D.UnitAmount,0)  end end
							* 
							case when A.MFeeMethod = 2 and A.CurrencyPK = 1 then 1000 
									else case when A.MFeeMethod = 2 and A.CurrencyPK <> 1 
											then 1	else
												Case when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) = 2 then case when A.IsHoliday = 1 then isnull(B.NAV,0)  else isnull(Y.NAV,0)  end else B.NAV end
																end END,0) 



AUMForMFee

--MFee
,ISNULL(M.MFeeAmount,0) MFee
,ISNULL(M.MFeePercent,0) MFeePercent
,A.MFeeType

--AgentFee
,ISNULL(P.AgentFeeAmount,0) AgentFee
,ISNULL(P.AgentFeePercent,0) AgentFeePercent
,A.SharingFeeType


,		Case when isnull( ISNULL(SFD.FeeType,C.SharingFeeCalculation) ,0) in (1,2) then case when A.IsHoliday = 1 then isnull(J.UnitAmount,0)  else isnull(D.UnitAmount,0)  end ELSE
						case when A.IsHoliday = 1 then isnull(L.UnitAmount,0)  else isnull(J.UnitAmount,0)  end end UnitAmount

,isnull(A.CurrencyPK,'') Currency
,isnull(I.TotalCashAmount,0) SubsAmount
,isnull(F.TotalCashAmount,0) RedempAmount
,isnull(G.TotalCashAmountFundTo,0) SwitchInAmount
,isnull(H.TotalCashAmountFundFrom,0) SwitchOutAmount
,isnull(I.TotalUnitAmount,0) SubsUnit
,isnull(F.TotalUnitAmount,0) RedempUnit
,isnull(G.TotalUnitAmountFundTo,0) SwitchInUnit
,ISNULL(H.TotalUnitAmountFundFrom,0) SwitchOutUnit


FROM #FCP A
Left join @LastFundInformation B on A.FundPK = B.FundPK and A.NAVDate = B.Date
Left join @LastFundInformation Y on A.FundPK = Y.FundPK and A.MFeeDate = Y.Date 
left join @ClientRedemption F on A.FundPK = F.FundPK and A.FundClientPK = F.FundClientPK and A.MFeeDate = F.ValueDate
left JOIN @ClientSwitching G on A.FundPK = G.FundPK and A.FundClientPK = G.FundClientPK and A.MFeeDate = G.ValueDate
left JOIN @ClientSwitchingFrom H on A.FundPK = H.FundPK and A.FundClientPK = H.FundClientPK and A.MFeeDate = H.ValueDate
left join @ClientSubscription I on A.FundPK = I.FundPK and A.FundClientPK = I.FundClientPK and A.MFeeDate = I.ValueDate
LEFT JOIN #MFeeCalSummary M ON A.FundPK = M.FundPK  AND A.FundClientPK = M.FundClientPK AND A.MFeeDate = M.MFeeDate
left join FundClientPosition L on A.FundPK = L.FundPK and A.FundClientPK = L.FundClientPK and L.Date =  A.UnitDate
left join FundClientPosition J on A.FundPK = J.FundPK and A.FundClientPK = J.FundClientPK and J.Date =  A.NAVDate
LEFT JOIN #AgentFeeCalSummary P ON A.SellingAgentPK = P.AgentPK AND A.MFeeDate = P.MFeeDate AND A.FundPK = P.FundPK AND A.FundClientPK = P.FundClientPK
left join Agent C on A.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join FundClientPosition D on A.FundPK = D.FundPK and A.FundClientPK = D.FundClientPK and D.Date =  A.MFeeDate

left JOIN @SharingFeeData SFD ON A.FundPK = SFD.FundPK AND A.SellingAgentPK = SFD.AgentPK

WHERE A.MFeeDate BETWEEN @dateFrom AND @DateTo
ORDER BY A.MFeeDate ASC


CREATE TABLE #Subs
(
	FundClientPK INT,
	FundPK INT,
	MinMfeeDate DATETIME,
	MfeePercent NUMERIC(8,4),
	AgentFeePercent NUMERIC(8,4)
)

INSERT INTO #Subs
        ( FundClientPK, FundPK, MinMfeeDate )
SELECT FundClientPK,FundPK, MIN(MFeeDate) FROM dbo.DailyDataForCommissionRptNew A
WHERE 1=1 

--and A.FundPK = @FundPK and A.FundClientPK = @FundClientPK

" + _paramFund + _paramFundClient + @"


-- PARAM DISINI
 
GROUP BY FundClientPK,FundPK



UPDATE A SET  A.MfeePercent = B.MFeePercent, A.AgentFeePercent = B.AgentFeePercent FROM #Subs A
LEFT JOIN dbo.DailyDataForCommissionRptNew B ON A.FundClientPK = B.FundClientPK AND A.FundPK = B.FundPK AND A.MinMfeeDate = B.MFeeDate




INSERT INTO dbo.DailyDataForCommissionRptNew
        ( UnitDate ,
          NAVDate ,
          MFeeDate ,
          FundPK ,
          FundClientPK ,
          SellingAgentPK ,
          NAV ,
          AUM ,
          AUMForMFee ,
          MFee ,
          MFeePercent ,
          MFeeType ,
          AgentFee ,
          AgentFeePercent ,
          SharingFeeType ,
          UnitAmount ,
          Currency ,
          SubsAmount ,
          RedempAmount ,
          SwitchInAmount ,
          SwitchOutAmount ,
          SubsUnit ,
          RedempUnit ,
          SwitchInUnit ,
          SwitchOutUnit
        )
SELECT B.ValueDate,Valuedate,B.ValueDate,B.FundPK,B.FundClientPK,ISNULL(C.AgentPK,D.SellingAgentPK)
,B.NAV,0,0,0,A.MfeePercent,1,0,A.AgentFeePercent,1,0,B.CurrencyPK,B.CashAmount,0,0,0,B.UnitAmount,0,0,0
FROM #Subs A
LEFT JOIN dbo.ClientSubscription B ON A.FundClientPK = B.FundClientPK AND A.FundPK = B.FundPK AND B.ValueDate < A.MinMfeeDate AND B.Posted = 1 AND B.Status <> 3
LEFT JOIN @FCAgent C ON A.FundClientPK = C.FundClientPK AND C.Date = B.ValueDate
LEFT JOIN FundClient D ON A.FundClientPK = D.FundClientPK AND D.Status IN (1,2)
WHERE B.ClientSubscriptionPK IS NOT NULL and B.ValueDate between @datefrom and @Dateto



INSERT INTO dbo.DailyDataForCommissionRptNew
        ( UnitDate ,
          NAVDate ,
          MFeeDate ,
          FundPK ,
          FundClientPK ,
          SellingAgentPK ,
          NAV ,
          AUM ,
          AUMForMFee ,
          MFee ,
          MFeePercent ,
          MFeeType ,
          AgentFee ,
          AgentFeePercent ,
          SharingFeeType ,
          UnitAmount ,
          Currency ,
          SubsAmount ,
          RedempAmount ,
          SwitchInAmount ,
          SwitchOutAmount ,
          SubsUnit ,
          RedempUnit ,
          SwitchInUnit ,
          SwitchOutUnit
        )
SELECT B.ValueDate,Valuedate,B.ValueDate,B.FundPKTo,B.FundClientPK,ISNULL(C.AgentPK,D.SellingAgentPK)
,B.NAVFundTo,0,0,0,A.MfeePercent,1,0,A.AgentFeePercent,1,0,B.CurrencyPK,B.TotalCashAmountFundTo,0,0,0,B.TotalUnitAmountFundTo,0,0,0
FROM #Subs A
LEFT JOIN dbo.ClientSwitching B ON A.FundClientPK = B.FundClientPK AND A.FundPK = B.FundPKTo AND B.ValueDate < A.MinMfeeDate AND B.Posted = 1 AND B.Status <> 3
LEFT JOIN @FCAgent C ON A.FundClientPK = C.FundClientPK AND C.Date = B.ValueDate
LEFT JOIN FundClient D ON A.FundClientPK = D.FundClientPK AND D.Status IN (1,2)
WHERE B.ClientSwitchingPK IS NOT NULL  and B.ValueDate between @datefrom and @Dateto



DECLARE @ZCFundClientPK INT
DECLARE @ZCFundPK INT
DECLARE @ZCMinMfeeDate Datetime
DECLARE @ZCMIFeePercent NUMERIC(18,4)
DECLARE @ZCMIAgentPercent NUMERIC(18,4)

Declare A Cursor For
	SELECT A.FundClientPK,A.FundPK,A.MinMfeeDate,A.MfeePercent,A.AgentFeePercent FROM #Subs A
	WHERE MinMfeeDate > @DateFrom
Open A
Fetch Next From A
INTO @ZCFundClientPK,@ZCFundPK,@ZCMinMfeeDate,@ZCMIFeePercent,@ZCMIAgentPercent
While @@FETCH_STATUS = 0  
Begin




INSERT INTO dbo.DailyDataForCommissionRptNew
        ( UnitDate ,
          NAVDate ,
          MFeeDate ,
          FundPK ,
          FundClientPK ,
          SellingAgentPK ,
          NAV ,
          AUM ,
          AUMForMFee ,
          MFee ,
          MFeePercent ,
          MFeeType ,
          AgentFee ,
          AgentFeePercent ,
          SharingFeeType ,
          UnitAmount ,
          Currency ,
          SubsAmount ,
          RedempAmount ,
          SwitchInAmount ,
          SwitchOutAmount ,
          SubsUnit ,
          RedempUnit ,
          SwitchInUnit ,
          SwitchOutUnit
        )
	SELECT A.Date,A.Date,A.Date,@ZCFundPK,@ZCFundClientPK,ISNULL(C.AgentPK,B.SellingAgentPK)
	,ISNULL(D.NAV,F.NAV),ISNULL(G.UnitAmount * D.Nav,0),0,0,@ZCMIFeePercent,1,0,@ZCMIAgentPercent,1,isnull(G.UnitAmount,0),E.CurrencyPK,0,0,0,0,0,0,0,0 
	FROM dbo.ZDT_WorkingDays A
	LEFT JOIN FundClient B ON B.FundClientPK = @ZCFundClientPK AND B.status IN (1,2)
	LEFT JOIN @FCAgent C ON C.FundClientPK = @ZCFundClientPK  AND C.Date = A.Date
	LEFT JOIN CloseNAV D ON D.FundPK = @ZCFundPK AND D.Date = A.Date AND D.Status IN (1,2)
	LEFT JOIN Fund E ON E.FundPK = @ZCFundPK AND E.status IN (1,2) 
	LEFT JOIN CloseNAV F ON F.FundPK = @ZCFundPK AND F.Date = A.DTM1 AND F.Status IN (1,2)
LEFT JOIN dbo.FundClientPosition G ON A.DTM1 = G.Date AND G.FundClientPK = @ZCFundClientPK AND G.FundPK = @ZCFundPK
	WHERE A.date NOT IN
    (
		SELECT MFeeDate FROM dbo.DailyDataForCommissionRptNew
		WHERE fundClientPK = @ZCFundClientPK AND FundPK = @ZCFundPK
		AND MFeeDate BETWEEN @DateFrom AND @ZCMinMfeeDate
	)
	AND A.Date >
    (
		SELECT MIN(A.Date) FROM (
			SELECT ISNULL(MIN(NAVDate),'01/01/2099') Date FROM dbo.ClientSubscription WHERE fundclientPK = @ZCFundClientPK AND FundPK = @ZCFundPK
			AND Posted = 1 AND status = 2 AND Revised = 0 AND NAVDate < @ZCMinMfeeDate
			UNION ALL
			SELECT ISNULL(MIN(NAVDate),'01/01/2099') Date FROM dbo.ClientSwitching WHERE fundclientPK = @ZCFundClientPK AND FundPKTo = @ZCFundPK
			AND Posted = 1 AND status = 2 AND Revised = 0 AND NAVDate < @ZCMinMfeeDate
			) A
	)
	AND A.Date BETWEEN @DateFrom AND @ZCMinMfeeDate

	Fetch Next From A 
	INTO @ZCFundClientPK,@ZCFundPK,@ZCMinMfeeDate,@ZCMIFeePercent,@ZCMIAgentPercent
End	
Close A
Deallocate A


";

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _endDayTrails.ValueDateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _endDayTrails.ValueDateTo);
                        cmd.ExecuteNonQuery();


                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public Boolean GenerateReportCommission(string _userID, CommissionRpt _commissionRpt)
        {

            #region Sharing Fee Report AIA
            if (_commissionRpt.ReportName.Equals("Sharing Fee Report AIA"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _paramAgentFeeType = "";
                            string _paramFundFeeType = "";

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = " And A.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFeeType))
                            {
                                _paramAgentFeeType = " And A.SharingFeeType in ( " + _commissionRpt.AgentFeeType + " ) ";
                            }
                            else
                            {
                                _paramAgentFeeType = "";
                            }

                            if (!_host.findString(_commissionRpt.FundFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFeeType))
                            {
                                _paramFundFeeType = " And A.MFeeType in ( " + _commissionRpt.FundFeeType + " ) ";
                            }
                            else
                            {
                                _paramFundFeeType = "";
                            }

                            cmd.CommandText =
                                @"
                           
DECLARE @Table TABLE
(
	FundClientPK INT,
	FundPK INT
	
)

	
DECLARE @FundPK int
Declare @FundClientPK INT
    
CREATE TABLE #TempSharingFee
(
FundPK int,
FundName nvarchar(1000),
FundClientPK int,
FundClientName nvarchar(1000),
MFeePercent Numeric(20,6), 	
CurrencyID nvarchar(5),                            
MfeeDate datetime,
CloseNAV Numeric(20,6),
SubsUnit Numeric(24,4),
SubsAmount Numeric(24,2),
RedempUnit Numeric(24,4),
RedempAmount Numeric(24,2),
SwitchInUnit Numeric(24,4),
SwitchInAmount Numeric(24,2),
SwitchOutUnit Numeric(24,4),
SwitchOutAmount Numeric(24,2),
MFeeDateUnit numeric(24,4),
AUM Numeric(24,6),
ManagementFee Numeric(24,6),
SharingFee Numeric(24,6),
Percentage Numeric(24,6),
MFeeType nvarchar(100),   
SharingFeeType nvarchar(100)
)


INSERT INTO #TempSharingFee
Select  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(E.DescOne,'FLAT') MFeeType
,ISNULL(F.DescOne,'FLAT') SharingFeeType
from [dbo].[DailyDataForCommissionRptNew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN dbo.MasterValue E ON A.MFeeType = E.Code AND E.ID = 'FundFeeType' AND E.status IN (1,2)
LEFT JOIN dbo.MasterValue F ON A.SharingFeeType = F.Code AND F.ID = 'AgentFeeType' AND F.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
order by A.FundPK,A.FundClientPK,A.MfeeDate


INSERT INTO @Table
( FundClientPK, FundPK )
Select DISTINCT FundClientPK,FundPK from #TempSharingFee
where MfeeDate between @DateFrom and @DateTo 
group by FundPK,FundClientPK
having sum(ISNULL(AUM,0)) > 0 

	
SELECT  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AUM,0) * 0.045/100/ case when A.FundPK in (28) then 365 else 365 + ISDATE(CAST(year(@datefrom) AS VARCHAR) + '0229') end PungutanOJK
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(G.DescOne,'FLAT') MFeeType
,ISNULL(H.DescOne,'FLAT') SharingFeeType
from [DailyDataForCommissionRptnew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN @Table E ON A.FundPK = E.FundPK AND A.FundClientPK = E.FundClientPK
LEFT JOIN dbo.MasterValue G ON A.MFeeType = G.Code AND G.ID = 'FundFeeType' AND G.status IN (1,2)
LEFT JOIN dbo.MasterValue H ON A.SharingFeeType = H.Code AND H.ID = 'AgentFeeType' AND H.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
AND E.FundClientPK IS NOT null
order by A.FundPK,A.FundClientPK,A.MfeeDate

                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SharingFeeReportAIA" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SharingFeeReportAIA" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sharing Fee Report AIA");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SharingFeeReport> rList = new List<SharingFeeReport>();
                                        while (dr0.Read())
                                        {
                                            SharingFeeReport rSingle = new SharingFeeReport();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.FundClientName = Convert.ToString(dr0["FundClientName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientName"]));
                                            rSingle.ManagementFeePercent = Convert.ToDecimal(dr0["MfeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MfeePercent"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.Date = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.SwitchInUnit = Convert.ToDecimal(dr0["SwitchInUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInUnit"]));
                                            rSingle.SwitchInAmount = Convert.ToDecimal(dr0["SwitchInAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInAmount"]));
                                            rSingle.SwitchOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutUnit"]));
                                            rSingle.SwitchOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Percentage"]));
                                            rSingle.PungutanOJK = Convert.ToDecimal(dr0["PungutanOJK"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PungutanOJK"]));

                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MFeeType"]));
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));

                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.ManagementFeePercent, r.FundClientName, r.Currency, r.Percentage, r.MFeeType, r.SharingFeeType } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 11].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "ClientName";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundClientName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 11].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeePercent + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2783 0889";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 11].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            string _cellSharingFee = "C" + incRowExcel;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2970 7333";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 11].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.MFeeType;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Value = "Units";
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Value = "Amount";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "Units";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Rebate Gross 0.2 %";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Pungutan OJK 0.045 %";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Net Rebate";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowD + ":K" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":K" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnit + rsDetail.SwitchInUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsAmount + rsDetail.SwitchInAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempUnit + rsDetail.SwitchOutUnit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempAmount + rsDetail.SwitchOutAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";


                                                if (_commissionRpt.WithTax == 1)
                                                {

                                                    worksheet.Cells[incRowExcel, 9].Formula = "=Round((" + rsDetail.SharingFee + "/" + 1.1 + "),0)";
                                                    worksheet.Cells[incRowExcel, 9].Calculate();

                                                    worksheet.Cells[incRowExcel, 10].Formula = "=Round((" + rsDetail.PungutanOJK + "/" + 1.1 + "),0)";
                                                    worksheet.Cells[incRowExcel, 10].Calculate();
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Formula = "=Round(" + rsDetail.SharingFee + ",0)";
                                                    worksheet.Cells[incRowExcel, 9].Calculate();
                                                    worksheet.Cells[incRowExcel, 10].Formula = "=Round(" + rsDetail.PungutanOJK + ",0)";
                                                    worksheet.Cells[incRowExcel, 10].Calculate();
                                                }
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";


                                                worksheet.Cells[incRowExcel, 11].Formula = "=I" + incRowExcel + "-J" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":K" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + StartRow + ":C" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + StartRow + ":D" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";


                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Calculate();
                                            // worksheet.Cells[incRowExcel, 4].Calculate();
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 6].Calculate();


                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[incRowExcel, 9].Formula = "=Round(SUM(I" + StartRow + ":I" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Formula = "=Round(SUM(J" + StartRow + ":J" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "=Round(SUM(K" + StartRow + ":K" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();


                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel++;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Sharing Fee Report BNI Life
            if (_commissionRpt.ReportName.Equals("Sharing Fee Report BNI Life"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _paramAgentFeeType = "";
                            string _paramFundFeeType = "";

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = " And A.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFeeType))
                            {
                                _paramAgentFeeType = " And A.SharingFeeType in ( " + _commissionRpt.AgentFeeType + " ) ";
                            }
                            else
                            {
                                _paramAgentFeeType = "";
                            }

                            if (!_host.findString(_commissionRpt.FundFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFeeType))
                            {
                                _paramFundFeeType = " And A.MFeeType in ( " + _commissionRpt.FundFeeType + " ) ";
                            }
                            else
                            {
                                _paramFundFeeType = "";
                            }

                            cmd.CommandText =
                                @"
                                  
DECLARE @Table TABLE
(
	FundClientPK INT,
	FundPK INT
	
)



DECLARE @MFeeDays TABLE
(
	FundPK INT,
	MFeeDays INT
	
)


insert into @MFeeDays
select A.FundPK,ISNULL([dbo].[FgetManagementFeeDaysByDate](@datefrom,A.FundPK),0) from Fund A
where status in (1,2) 



	
DECLARE @FundPK int
Declare @FundClientPK INT
    
CREATE TABLE #TempSharingFee
(
FundPK int,
FundName nvarchar(1000),
FundClientPK int,
FundClientName nvarchar(1000),
MFeePercent Numeric(20,6), 	
CurrencyID nvarchar(5),                            
MfeeDate datetime,
CloseNAV Numeric(20,6),
SubsUnit Numeric(24,4),
SubsAmount Numeric(24,2),
RedempUnit Numeric(24,4),
RedempAmount Numeric(24,2),
SwitchInUnit Numeric(24,4),
SwitchInAmount Numeric(24,2),
SwitchOutUnit Numeric(24,4),
SwitchOutAmount Numeric(24,2),
MFeeDateUnit numeric(24,4),
AUM Numeric(24,6),
ManagementFee Numeric(24,6),
SharingFee Numeric(24,6),
Percentage Numeric(24,6),
MFeeType nvarchar(100),   
SharingFeeType nvarchar(100)
)


INSERT INTO #TempSharingFee
Select  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(E.DescOne,'FLAT') MFeeType
,ISNULL(F.DescOne,'FLAT') SharingFeeType
from [dbo].[DailyDataForCommissionRptNew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN dbo.MasterValue E ON A.MFeeType = E.Code AND E.ID = 'FundFeeType' AND E.status IN (1,2)
LEFT JOIN dbo.MasterValue F ON A.SharingFeeType = F.Code AND F.ID = 'AgentFeeType' AND F.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
order by A.FundPK,A.FundClientPK,A.MfeeDate


INSERT INTO @Table
( FundClientPK, FundPK )
Select DISTINCT FundClientPK,FundPK from #TempSharingFee
where MfeeDate between @DateFrom and @DateTo 
group by FundPK,FundClientPK
having sum(ISNULL(AUM,0)) > 0 


SELECT  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(G.DescOne,'FLAT') MFeeType
,ISNULL(H.DescOne,'FLAT') SharingFeeType
,isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0) OJKFee
,(isnull(A.MFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) * isnull(A.AgentFeePercent/100,0) SharingGross
,(isnull(A.MFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) * isnull(A.AgentFeePercent/100,0) * 0.1 PPN
,(isnull(A.MFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) * isnull(A.AgentFeePercent/100,0) * 0.02 PPH23
,((isnull(A.MFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) * isnull(A.AgentFeePercent/100,0) +
((isnull(A.MFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) * isnull(A.AgentFeePercent/100,0) * 0.1)) -
((isnull(A.MFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) * isnull(A.AgentFeePercent/100,0) * 0.02) SharingNet
from [DailyDataForCommissionRptnew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN @Table E ON A.FundPK = E.FundPK AND A.FundClientPK = E.FundClientPK
LEFT JOIN dbo.MasterValue G ON A.MFeeType = G.Code AND G.ID = 'FundFeeType' AND G.status IN (1,2)
LEFT JOIN dbo.MasterValue H ON A.SharingFeeType = H.Code AND H.ID = 'AgentFeeType' AND H.status IN (1,2)
LEFT JOIN dbo.FundFee I ON A.FundPK = i.FundPK and i.Status = 2
LEFT JOIN @MFeeDays J ON A.FundPK = J.FundPK
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
AND E.FundClientPK IS NOT null
order by A.FundPK,A.FundClientPK,A.MfeeDate


                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SharingFeeReportBNILife" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SharingFeeReportBNILife" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sharing Fee Report BNI Life");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SharingFeeReport> rList = new List<SharingFeeReport>();
                                        while (dr0.Read())
                                        {
                                            SharingFeeReport rSingle = new SharingFeeReport();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.FundClientName = Convert.ToString(dr0["FundClientName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientName"]));
                                            rSingle.ManagementFeePercent = Convert.ToDecimal(dr0["MfeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MfeePercent"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.Date = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.SwitchInUnit = Convert.ToDecimal(dr0["SwitchInUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInUnit"]));
                                            rSingle.SwitchInAmount = Convert.ToDecimal(dr0["SwitchInAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInAmount"]));
                                            rSingle.SwitchOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutUnit"]));
                                            rSingle.SwitchOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Percentage"]));

                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MFeeType"]));
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));

                                            rSingle.OJKFee = Convert.ToDecimal(dr0["OJKFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OJKFee"]));
                                            rSingle.SharingGross = Convert.ToDecimal(dr0["SharingGross"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingGross"]));
                                            rSingle.PPN = Convert.ToDecimal(dr0["PPN"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PPN"]));
                                            rSingle.PPH23 = Convert.ToDecimal(dr0["PPH23"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PPH23"]));
                                            rSingle.SharingNet = Convert.ToDecimal(dr0["SharingNet"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingNet"]));
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.ManagementFeePercent, r.FundClientName, r.Currency, r.Percentage, r.MFeeType, r.SharingFeeType } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "ClientName";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundClientName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeePercent + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2783 0889";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            string _cellSharingFee = "C" + incRowExcel;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2970 7333";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.MFeeType;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Value = "Units";
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Value = "Amount";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "Units";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Management Fee (" + rsHeader.Key.ManagementFeePercent + ")"; ;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Value = "2.5%";
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "Pungutan OJK 0.045%";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Sharing Gross";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "PPN 10%";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "PPH 23 (2%)";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Sharing Net";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowD + ":N" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":N" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnit + rsDetail.SwitchInUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsAmount + rsDetail.SwitchInAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempUnit + rsDetail.SwitchOutUnit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempAmount + rsDetail.SwitchOutAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";









                                                worksheet.Cells[incRowExcel, 9].Formula = "=Round((" + rsDetail.MGTFee + "),0)";
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Formula = "=Round((" + rsDetail.OJKFee + "),0)";
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Formula = "=Round((" + rsDetail.SharingGross + "),0)";
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Formula = "=Round((" + rsDetail.PPN + "),0)";
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Formula = "=Round((" + rsDetail.PPH23 + "),0)";
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Formula = "=Round((" + rsDetail.SharingNet + "),0)";
                                                worksheet.Cells[incRowExcel, 14].Calculate();


                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";


                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":N" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + StartRow + ":C" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + StartRow + ":D" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";


                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 3].Calculate();
                                            // worksheet.Cells[incRowExcel, 4].Calculate();
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 6].Calculate();


                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[incRowExcel, 9].Formula = "=Round(SUM(I" + StartRow + ":I" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Formula = "=Round(SUM(J" + StartRow + ":J" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "=Round(SUM(K" + StartRow + ":K" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Formula = "=Round(SUM(L" + StartRow + ":L" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "=Round(SUM(M" + StartRow + ":M" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Formula = "=Round(SUM(N" + StartRow + ":N" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Calculate();


                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel++;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 15];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Sharing Fee Report
            if (_commissionRpt.ReportName.Equals("Sharing Fee Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _paramAgentFeeType = "";
                            string _paramFundFeeType = "";

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = " And A.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFeeType))
                            {
                                _paramAgentFeeType = " And A.SharingFeeType in ( " + _commissionRpt.AgentFeeType + " ) ";
                            }
                            else
                            {
                                _paramAgentFeeType = "";
                            }

                            if (!_host.findString(_commissionRpt.FundFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFeeType))
                            {
                                _paramFundFeeType = " And A.MFeeType in ( " + _commissionRpt.FundFeeType + " ) ";
                            }
                            else
                            {
                                _paramFundFeeType = "";
                            }

                            cmd.CommandText =
                                @"
                           
DECLARE @Table TABLE
(
	FundClientPK INT,
	FundPK INT
	
)

	
DECLARE @FundPK int
Declare @FundClientPK INT
    
CREATE TABLE #TempSharingFee
(
FundPK int,
FundName nvarchar(1000),
FundClientPK int,
FundClientName nvarchar(1000),
MFeePercent Numeric(20,6), 	
CurrencyID nvarchar(5),                            
MfeeDate datetime,
CloseNAV Numeric(20,6),
SubsUnit Numeric(24,4),
SubsAmount Numeric(24,2),
RedempUnit Numeric(24,4),
RedempAmount Numeric(24,2),
SwitchInUnit Numeric(24,4),
SwitchInAmount Numeric(24,2),
SwitchOutUnit Numeric(24,4),
SwitchOutAmount Numeric(24,2),
MFeeDateUnit numeric(24,4),
AUM Numeric(24,6),
ManagementFee Numeric(24,6),
SharingFee Numeric(24,6),
Percentage Numeric(24,6),
MFeeType nvarchar(100),   
SharingFeeType nvarchar(100)
)


INSERT INTO #TempSharingFee
Select  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(E.DescOne,'FLAT') MFeeType
,ISNULL(F.DescOne,'FLAT') SharingFeeType
from [dbo].[DailyDataForCommissionRptNew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN dbo.MasterValue E ON A.MFeeType = E.Code AND E.ID = 'FundFeeType' AND E.status IN (1,2)
LEFT JOIN dbo.MasterValue F ON A.SharingFeeType = F.Code AND F.ID = 'AgentFeeType' AND F.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
order by A.FundPK,A.FundClientPK,A.MfeeDate


INSERT INTO @Table
( FundClientPK, FundPK )
Select DISTINCT FundClientPK,FundPK from #TempSharingFee
where MfeeDate between @DateFrom and @DateTo 
group by FundPK,FundClientPK
having sum(ISNULL(AUM,0)) > 0 

	
SELECT  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(G.DescOne,'FLAT') MFeeType
,ISNULL(H.DescOne,'FLAT') SharingFeeType
from [DailyDataForCommissionRptnew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN @Table E ON A.FundPK = E.FundPK AND A.FundClientPK = E.FundClientPK
LEFT JOIN dbo.MasterValue G ON A.MFeeType = G.Code AND G.ID = 'FundFeeType' AND G.status IN (1,2)
LEFT JOIN dbo.MasterValue H ON A.SharingFeeType = H.Code AND H.ID = 'AgentFeeType' AND H.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
AND E.FundClientPK IS NOT null
order by A.FundPK,A.FundClientPK,A.MfeeDate
                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SharingFeeReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SharingFeeReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Client Statement Report");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SharingFeeReport> rList = new List<SharingFeeReport>();
                                        while (dr0.Read())
                                        {
                                            SharingFeeReport rSingle = new SharingFeeReport();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.FundClientName = Convert.ToString(dr0["FundClientName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientName"]));
                                            rSingle.ManagementFeePercent = Convert.ToDecimal(dr0["MfeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MfeePercent"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.Date = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.SwitchInUnit = Convert.ToDecimal(dr0["SwitchInUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInUnit"]));
                                            rSingle.SwitchInAmount = Convert.ToDecimal(dr0["SwitchInAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInAmount"]));
                                            rSingle.SwitchOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutUnit"]));
                                            rSingle.SwitchOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Percentage"]));

                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MFeeType"]));
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));

                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.ManagementFeePercent, r.FundClientName, r.Currency, r.Percentage, r.MFeeType, r.SharingFeeType } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "ClientName";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundClientName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeePercent + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2783 0889";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2970 7333";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            if (rsHeader.Key.SharingFeeType == "Flat")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                string _cellSharingFee = "C" + incRowExcel;
                                                incRowExcel++;
                                            }




                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.MFeeType;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Value = "Units";
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Value = "Amount";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "Units";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Management Fee (" + rsHeader.Key.ManagementFeePercent + ")"; ;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Value = "2.5%";
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;
                                            if (rsHeader.Key.SharingFeeType == "Flat")
                                            {
                                                worksheet.Cells[incRowExcel, 10].Value = "FeeShare (" + rsHeader.Key.Percentage + ")";
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 10].Value = "FeeShare";
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            }
                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnit + rsDetail.SwitchInUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsAmount + rsDetail.SwitchInAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempUnit + rsDetail.SwitchOutUnit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempAmount + rsDetail.SwitchOutAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";







                                                if (Tools.ClientCode == "24")
                                                {
                                                    if (_commissionRpt.WithTax == 1)
                                                    {

                                                        worksheet.Cells[incRowExcel, 9].Formula = "=Round((" + rsDetail.MGTFee + "/" + 1.1 + "),0)";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();

                                                        worksheet.Cells[incRowExcel, 10].Formula = "=Round((" + rsDetail.SharingFee + "/" + 1.1 + "),0)";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Formula = "=Round(" + rsDetail.MGTFee + ",0)";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                                        worksheet.Cells[incRowExcel, 10].Formula = "=Round(" + rsDetail.SharingFee + ",0)";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                                    }
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                }
                                                else
                                                {
                                                    if (_commissionRpt.WithTax == 1)
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Formula = "(" + rsDetail.MGTFee + "/" + 1.1 + ")";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();

                                                        worksheet.Cells[incRowExcel, 10].Formula = "(" + rsDetail.SharingFee + "/" + 1.1 + ")";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.MGTFee;
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.SharingFee;
                                                    }
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":J" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + StartRow + ":C" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + StartRow + ":D" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";


                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Calculate();
                                            // worksheet.Cells[incRowExcel, 4].Calculate();
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 6].Calculate();


                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                            if (Tools.ClientCode == "24")
                                            {
                                                worksheet.Cells[incRowExcel, 9].Formula = "=Round(SUM(I" + StartRow + ":I" + EndRow + "),0)";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Formula = "=Round(SUM(J" + StartRow + ":J" + EndRow + "),0)";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + StartRow + ":I" + EndRow + ")";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + StartRow + ":J" + EndRow + ")";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                            }
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();


                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel++;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Sharing Fee Report BNI Life IDX 30
            if (_commissionRpt.ReportName.Equals("Sharing Fee Report BNI Life IDX 30"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _paramAgentFeeType = "";
                            string _paramFundFeeType = "";

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = " And A.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFeeType))
                            {
                                _paramAgentFeeType = " And A.SharingFeeType in ( " + _commissionRpt.AgentFeeType + " ) ";
                            }
                            else
                            {
                                _paramAgentFeeType = "";
                            }

                            if (!_host.findString(_commissionRpt.FundFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFeeType))
                            {
                                _paramFundFeeType = " And A.MFeeType in ( " + _commissionRpt.FundFeeType + " ) ";
                            }
                            else
                            {
                                _paramFundFeeType = "";
                            }

                            cmd.CommandText =
                                @"
                                  
DECLARE @Table TABLE
(
	FundClientPK INT,
	FundPK INT
	
)



DECLARE @MFeeDays TABLE
(
	FundPK INT,
	MFeeDays INT
	
)


insert into @MFeeDays
select A.FundPK,ISNULL([dbo].[FgetManagementFeeDaysByDate](@datefrom,A.FundPK),0) from Fund A
where status in (1,2) 



	
DECLARE @FundPK int
Declare @FundClientPK INT
    
CREATE TABLE #TempSharingFee
(
FundPK int,
FundName nvarchar(1000),
FundClientPK int,
FundClientName nvarchar(1000),
MFeePercent Numeric(20,6), 	
CurrencyID nvarchar(5),                            
MfeeDate datetime,
CloseNAV Numeric(20,6),
SubsUnit Numeric(24,4),
SubsAmount Numeric(24,2),
RedempUnit Numeric(24,4),
RedempAmount Numeric(24,2),
SwitchInUnit Numeric(24,4),
SwitchInAmount Numeric(24,2),
SwitchOutUnit Numeric(24,4),
SwitchOutAmount Numeric(24,2),
MFeeDateUnit numeric(24,4),
AUM Numeric(24,6),
ManagementFee Numeric(24,6),
SharingFee Numeric(24,6),
Percentage Numeric(24,6),
MFeeType nvarchar(100),   
SharingFeeType nvarchar(100)
)


INSERT INTO #TempSharingFee
Select  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(E.DescOne,'FLAT') MFeeType
,ISNULL(F.DescOne,'FLAT') SharingFeeType
from [dbo].[DailyDataForCommissionRptNew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN dbo.MasterValue E ON A.MFeeType = E.Code AND E.ID = 'FundFeeType' AND E.status IN (1,2)
LEFT JOIN dbo.MasterValue F ON A.SharingFeeType = F.Code AND F.ID = 'AgentFeeType' AND F.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
order by A.FundPK,A.FundClientPK,A.MfeeDate


INSERT INTO @Table
( FundClientPK, FundPK )
Select DISTINCT FundClientPK,FundPK from #TempSharingFee
where MfeeDate between @DateFrom and @DateTo 
group by FundPK,FundClientPK
having sum(ISNULL(AUM,0)) > 0 





	


SELECT  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(G.DescOne,'FLAT') MFeeType
,ISNULL(H.DescOne,'FLAT') SharingFeeType
,isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0) OJKFee
,(isnull(A.AgentFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0)))  SharingGross
,(isnull(A.AgentFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0)))  * 0.1 PPN
,(isnull(A.AgentFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0)))  * 0.02 PPH23
,((isnull(A.AgentFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) +
((isnull(A.AgentFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) * 0.1)) -
((isnull(A.AgentFee,0) - (isnull(A.AUMForMFee,0) * 0.00045  / ISNULL(J.MFeeDays,0))) * 0.02) SharingNet
from [DailyDataForCommissionRptnew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN @Table E ON A.FundPK = E.FundPK AND A.FundClientPK = E.FundClientPK
LEFT JOIN dbo.MasterValue G ON A.MFeeType = G.Code AND G.ID = 'FundFeeType' AND G.status IN (1,2)
LEFT JOIN dbo.MasterValue H ON A.SharingFeeType = H.Code AND H.ID = 'AgentFeeType' AND H.status IN (1,2)
LEFT JOIN dbo.FundFee I ON A.FundPK = i.FundPK and i.Status = 2
LEFT JOIN @MFeeDays J ON A.FundPK = J.FundPK
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
AND E.FundClientPK IS NOT null
order by A.FundPK,A.FundClientPK,A.MfeeDate


                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SharingFeeReportBNILifeIDX30" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SharingFeeReportBNILifeIDX30" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sharing Fee Report BNI Life IDX 30");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SharingFeeReport> rList = new List<SharingFeeReport>();
                                        while (dr0.Read())
                                        {
                                            SharingFeeReport rSingle = new SharingFeeReport();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.FundClientName = Convert.ToString(dr0["FundClientName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientName"]));
                                            rSingle.ManagementFeePercent = Convert.ToDecimal(dr0["MfeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MfeePercent"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.Date = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.SwitchInUnit = Convert.ToDecimal(dr0["SwitchInUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInUnit"]));
                                            rSingle.SwitchInAmount = Convert.ToDecimal(dr0["SwitchInAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInAmount"]));
                                            rSingle.SwitchOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutUnit"]));
                                            rSingle.SwitchOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Percentage"]));

                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MFeeType"]));
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));

                                            rSingle.OJKFee = Convert.ToDecimal(dr0["OJKFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OJKFee"]));
                                            rSingle.SharingGross = Convert.ToDecimal(dr0["SharingGross"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingGross"]));
                                            rSingle.PPN = Convert.ToDecimal(dr0["PPN"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PPN"]));
                                            rSingle.PPH23 = Convert.ToDecimal(dr0["PPH23"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PPH23"]));
                                            rSingle.SharingNet = Convert.ToDecimal(dr0["SharingNet"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingNet"]));
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.ManagementFeePercent, r.FundClientName, r.Currency, r.Percentage, r.MFeeType, r.SharingFeeType } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "ClientName";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundClientName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeePercent + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2783 0889";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            string _cellSharingFee = "C" + incRowExcel;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2970 7333";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.MFeeType;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Value = "Units";
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Value = "Amount";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "Units";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Management Fee (" + rsHeader.Key.ManagementFeePercent + ")"; ;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Value = "2.5%";
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "Pungutan OJK 0.045%";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Sharing Gross";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "PPN 10%";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "PPH 23 (2%)";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Sharing Net";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowD + ":N" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":N" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnit + rsDetail.SwitchInUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsAmount + rsDetail.SwitchInAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempUnit + rsDetail.SwitchOutUnit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempAmount + rsDetail.SwitchOutAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";









                                                worksheet.Cells[incRowExcel, 9].Formula = "=Round((" + rsDetail.SharingFee + "),0)";
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Formula = "=Round((" + rsDetail.OJKFee + "),0)";
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Formula = "=Round((" + rsDetail.SharingGross + "),0)";
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Formula = "=Round((" + rsDetail.PPN + "),0)";
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Formula = "=Round((" + rsDetail.PPH23 + "),0)";
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Formula = "=Round((" + rsDetail.SharingNet + "),0)";
                                                worksheet.Cells[incRowExcel, 14].Calculate();


                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";


                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":N" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + StartRow + ":C" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + StartRow + ":D" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";


                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 3].Calculate();
                                            // worksheet.Cells[incRowExcel, 4].Calculate();
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 6].Calculate();


                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[incRowExcel, 9].Formula = "=Round(SUM(I" + StartRow + ":I" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Formula = "=Round(SUM(J" + StartRow + ":J" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "=Round(SUM(K" + StartRow + ":K" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Formula = "=Round(SUM(L" + StartRow + ":L" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "=Round(SUM(M" + StartRow + ":M" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Formula = "=Round(SUM(N" + StartRow + ":N" + EndRow + "),0)";
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Calculate();


                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel++;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 15];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Rate Mi Fee Report
            if (_commissionRpt.ReportName.Equals("Rate Mi Fee Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {





                            cmd.CommandText = @"
declare @DateFromPeriod date, @DateToPeriod date
Select @DateFromPeriod = DateFrom, @DateToPeriod = DateTo From Period where PeriodPK = @PeriodFrom   



Create table #EndOfMonthDate 
(
Date datetime,
Month nvarchar(50)
)
insert into #EndOfMonthDate(Date,Month)
select A.Date,Format(Date,'MMMM') from CloseNAV A
where A.status = 2
and A.date between @DateFromPeriod and @DateToPeriod
order by Date


Create table #EndOfMonthDateWorkingDay 
(
Date datetime,
Month nvarchar(50)
)
insert into #EndOfMonthDateWorkingDay(Date,Month)
select max(A.date),A.Month from #EndOfMonthDate A group by A.Month

--select * from #EndOfMonthDateWorkingDay
 

declare @EndFfYearPreviousDate date --EndFfYearPreviousDate
SELECT @EndFfYearPreviousDate = case when dbo.CheckTodayIsHoliday(DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, @DateFromPeriod), 0))) = 1 
then dbo.FWorkingDay(DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, @DateFromPeriod), 0)),-1) else DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, @DateFromPeriod), 0)) end 


Create table #AUMEndFfYearPrevious 
(
AUMEndFfYearPreviousAmount numeric(22,8),
Description nvarchar(100)
)
insert into #AUMEndFfYearPrevious(AUMEndFfYearPreviousAmount,Description)
select sum(AUM) AUMEndFfYearPrevious,C.DescOne Description from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
where A.status = 2
and A.date = @EndFfYearPreviousDate
group by C.DescOne

--select * from #AUMEndFfYearPrevious

create table #AUM 
(
Description Nvarchar(100),AUMEndFfYearPreviousAmount numeric(22,8),January numeric(22,8)
,February numeric(22,8),March numeric(22,8),April numeric(22,8),May numeric(22,8),
June numeric(22,8),July numeric(22,8),August numeric(22,8),September numeric(22,8),October numeric(22,8),November numeric(22,8),
December numeric(22,8)
)

insert into #AUM(Description,AUMEndFfYearPreviousAmount,January,February,March,April,May,June,July,August,September,October,November,December)
select Description,AUMEndFfYearPreviousAmount,0,0,0,0,0,0,0,0,0,0,0,0 
from #AUMEndFfYearPrevious
union all

select C.DescOne Description,0,isnull(sum(AUM),0) January,0,0,0,0,0,0,0,0,0,0,0 
from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='January'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,isnull(sum(AUM),0) February,0,0,0,0,0,0,0,0,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='February'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,isnull(sum(AUM),0) March,0,0,0,0,0,0,0,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='March'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,isnull(sum(AUM),0) April,0,0,0,0,0,0,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='April'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,0,isnull(sum(AUM),0) May,0,0,0,0,0,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='May'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,0,0,isnull(sum(AUM),0) June,0,0,0,0,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='June'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,0,0,0,isnull(sum(AUM),0) July,0,0,0,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='July'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,0,0,0,0,isnull(sum(AUM),0) August,0,0,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='August'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,0,0,0,0,0,isnull(sum(AUM),0) September,0,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='September'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,0,0,0,0,0,0,isnull(sum(AUM),0) October,0,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='October'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,0,0,0,0,0,0,0,isnull(sum(AUM),0) November,0 from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='November'
group by C.DescOne, D.Date
union all
select C.DescOne Description,0,0,0,0,0,0,0,0,0,0,0,0,isnull(sum(AUM),0) December from CloseNAV A
left join fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status in (1,2)
left join #EndOfMonthDateWorkingDay D on A.Date = D.Date
where A.status = 2 and D.Month ='December'
group by C.DescOne, D.Date



select Description Keterangan,sum(AUMEndFfYearPreviousAmount) DesPast,sum(January)Jan,sum(February)Feb,sum(March)Mar,sum(April)Apr,sum(May)Mei,
sum(June)Jun,sum(July)Jul,sum(August)Aug,sum(September)Sep,sum(October)Okt,sum(November)Nov,sum(December)Des from #AUM A group by A.Description
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@PeriodFrom", _commissionRpt.PeriodFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RateMiFee" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RateMiFee" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet1");

                                        worksheet = package.Workbook.Worksheets.Add("Sheet2");
                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RateMiFee> rList = new List<RateMiFee>();
                                        while (dr0.Read())
                                        {

                                            RateMiFee rSingle = new RateMiFee();
                                            rSingle.Keterangan = dr0["Keterangan"].ToString();
                                            rSingle.DesPast = Convert.ToDecimal(dr0["DesPast"]);
                                            rSingle.Jan = Convert.ToDecimal(dr0["Jan"]);
                                            rSingle.Feb = Convert.ToDecimal(dr0["Feb"]);
                                            rSingle.Mar = Convert.ToDecimal(dr0["Mar"]);
                                            rSingle.Apr = Convert.ToDecimal(dr0["Apr"]);
                                            rSingle.Mei = Convert.ToDecimal(dr0["Mei"]);
                                            rSingle.Jun = Convert.ToDecimal(dr0["Jun"]);
                                            rSingle.Jul = Convert.ToDecimal(dr0["Jul"]);
                                            rSingle.Aug = Convert.ToDecimal(dr0["Aug"]);
                                            rSingle.Sep = Convert.ToDecimal(dr0["Sep"]);
                                            rSingle.Okt = Convert.ToDecimal(dr0["Okt"]);
                                            rSingle.Nov = Convert.ToDecimal(dr0["Nov"]);
                                            rSingle.Des = Convert.ToDecimal(dr0["Des"]);
                                            //rSingle.Selisih = Convert.ToDecimal(dr0["Selisih"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "AUM";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;


                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Value = "Keterangan";
                                        worksheet.Cells[incRowExcel, 3].Value = "Des";
                                        worksheet.Cells[incRowExcel, 4].Value = "Jan";
                                        worksheet.Cells[incRowExcel, 5].Value = "Feb";
                                        worksheet.Cells[incRowExcel, 6].Value = "Mar";
                                        worksheet.Cells[incRowExcel, 7].Value = "Apr";
                                        worksheet.Cells[incRowExcel, 8].Value = "Mei";
                                        worksheet.Cells[incRowExcel, 9].Value = "Jun";
                                        worksheet.Cells[incRowExcel, 10].Value = "Jul";

                                        worksheet.Cells[incRowExcel, 11].Value = "Aug";
                                        worksheet.Cells[incRowExcel, 12].Value = "Sep";
                                        worksheet.Cells[incRowExcel, 13].Value = "Okt";
                                        worksheet.Cells[incRowExcel, 14].Value = "Nov";
                                        worksheet.Cells[incRowExcel, 15].Value = "Des";
                                        worksheet.Cells[incRowExcel, 16].Value = "Selisih";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Keterangan;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DesPast;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Jan;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Feb;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Mar;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Apr;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Mei;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Jun;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Jul;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Aug;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Sep;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Okt;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Nov;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.Des;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 16].Value = "";
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";

                                                _no++;
                                                _endRowDetail = incRowExcel;


                                            }

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 14].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 15].Calculate();
                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 16].Calculate();
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;



                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                        }


                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd1 = DbCon.CreateCommand())
                                        {


                                            cmd1.CommandText = @"

Create table #EndOfMonthDate 
(
Date datetime,
Month nvarchar(50),
FundPK int
)


declare @DateFromPeriod date, @DateToPeriod date
Select @DateFromPeriod = DateFrom, @DateToPeriod = DateTo From Period where PeriodPK = @PeriodFrom   

Declare @totalDaysOfTheYear int --Total hari setahun
set @totalDaysOfTheYear = DATEDIFF(day,DATEADD(day,-1,@DateFromPeriod),@DateToPeriod)

declare @FundPK int


--drop TABLE #A
CREATE TABLE #A
(
FundPK int,
EffectiveDate datetime,
Rate numeric(18,4),
CustodiRate numeric(18,4)
)


Declare A Cursor For   

select A.FundPK from Fund A where A.status in (1,2) 

Open A                  
Fetch Next From A                  
Into @FundPK
While @@FETCH_STATUS = 0                  
Begin     
IF EXISTS(select * from FundFeeSetup where FundPK = @FundPK and status in (1,2)
and Date = (
Select max(date) from FundFeeSetup where date <= @DateToPeriod and status in (1,2) and FundPK = @FundPK
))
BEGIN
insert into #A(FundPK,EffectiveDate,Rate,CustodiRate)
select FundPK,Date,MiFeePercent,0 from FundFeeSetup where FundPK = @FundPK and status in (1,2)
and Date = (
Select max(date) from FundFeeSetup where date <= @DateToPeriod and status in (1,2) and FundPK = @FundPK
)
END
ELSE IF EXISTS(select * from FundFee where FundPK = @FundPK and status in (1,2)
and Date = (
Select max(date) from FundFee where date <= @DateToPeriod and status in (1,2) and FundPK = @FundPK
))
BEGIN
insert into #A(FundPK,EffectiveDate,Rate,CustodiRate)
select FundPK,Date,ManagementFeePercent,CustodiFeePercent from FundFee where FundPK = @FundPK and status in (1,2)
and Date = (
Select max(date) from FundFee where date <= @DateToPeriod and status in (1,2) and FundPK = @FundPK
)
END
ELSE
BEGIN
insert into #A(FundPK,EffectiveDate,Rate,CustodiRate)
select FundPK,EffectiveDate,ManagementFeePercent,CustodyFeePercent from Fund where FundPK = @FundPK and status in (1,2)
END

Fetch next From A Into @FundPK      
END                  
Close A                  
Deallocate A

--select * from #A

insert into #EndOfMonthDate(Date,Month,FundPK)
select A.Date,Format(A.Date,'MMMM'),A.FundPK from CloseNAV A
where A.status = 2
and A.date between @DateFromPeriod and @DateToPeriod
group by A.Date,A.FundPK
order by Date

--select * from #EndOfMonthDate

--drop table #ManagementFeeFund 
create table #ManagementFeeFund 
(
Description Nvarchar(100),MIFeeEndFfYearPreviousAmount numeric(22,8),January numeric(22,8)
,February numeric(22,8),March numeric(22,8),April numeric(22,8),May numeric(22,8),
June numeric(22,8),July numeric(22,8),August numeric(22,8),September numeric(22,8),October numeric(22,8),November numeric(22,8),
December numeric(22,8)
)

insert into #ManagementFeeFund(Description,MIFeeEndFfYearPreviousAmount,January,February,March,April,May,June,July,August,September,October,November,December)

--select ''Description,0 MIFeeEndFfYearPreviousAmount,0,0,0,0,0,0,0,0,0,0,0,0
--union all

select E.DescOne Description,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear January,0,0,0,0,0,0,0,0,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'January'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear February,0,0,0,0,0,0,0,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'February'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear March,0,0,0,0,0,0,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'March'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear April,0,0,0,0,0,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'April'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear May,0,0,0,0,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'May'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear June,0,0,0,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'June'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear July,0,0,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'July'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear August,0,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'August'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,0,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear September,0,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'September'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,0,0,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear October,0,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'October'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,0,0,0,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear November,0 from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'November'
group by E.DescOne, B.Month

union all

select E.DescOne Description,0,0,0,0,0,0,0,0,0,0,0,0,sum(isnull(C.rate,0) * isnull(A.AUM,0))/100 / @totalDaysOfTheYear December from CloseNAV A
left join #EndOfMonthDate B on A.FundPK = B.FundPK and A.Date = B.Date
left join #A C on B.FundPK = C.FundPK
left join Fund D on C.FundPK = D.FundPK and D.status in (1,2)
left join MasterValue E on D.FundTypeInternal = E.Code and E.ID = 'FundTypeInternal' and E.status in (1,2)
where A.status in (1,2) and B.Month = 'December'
group by E.DescOne, B.Month



select Description Keterangan,sum(MIFeeEndFfYearPreviousAmount) DesPast,sum(January)Jan,sum(February)Feb,sum(March)Mar,sum(April)Apr,sum(May)Mei,
sum(June)Jun,sum(July)Jul,sum(August)Aug,sum(September)Sep,sum(October)Okt,sum(November)Nov,sum(December)Des from #ManagementFeeFund A group by A.Description

                                        ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@PeriodFrom", _commissionRpt.PeriodFrom);

                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<RateMiFee> rList1 = new List<RateMiFee>();
                                                    while (dr1.Read())
                                                    {

                                                        RateMiFee rSingle1 = new RateMiFee();
                                                        rSingle1.Keterangan = dr1["Keterangan"].ToString();
                                                        rSingle1.DesPast = Convert.ToDecimal(dr1["DesPast"]);
                                                        rSingle1.Jan = Convert.ToDecimal(dr1["Jan"]);
                                                        rSingle1.Feb = Convert.ToDecimal(dr1["Feb"]);
                                                        rSingle1.Mar = Convert.ToDecimal(dr1["Mar"]);
                                                        rSingle1.Apr = Convert.ToDecimal(dr1["Apr"]);
                                                        rSingle1.Mei = Convert.ToDecimal(dr1["Mei"]);
                                                        rSingle1.Jun = Convert.ToDecimal(dr1["Jun"]);
                                                        rSingle1.Jul = Convert.ToDecimal(dr1["Jul"]);
                                                        rSingle1.Aug = Convert.ToDecimal(dr1["Aug"]);
                                                        rSingle1.Sep = Convert.ToDecimal(dr1["Sep"]);
                                                        rSingle1.Okt = Convert.ToDecimal(dr1["Okt"]);
                                                        rSingle1.Nov = Convert.ToDecimal(dr1["Nov"]);
                                                        rSingle1.Des = Convert.ToDecimal(dr1["Des"]);
                                                        //rSingle1.MiFeeSetahun = Convert.ToDecimal(dr1["MiFeeSetahun"]);
                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                        //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = incRowExcel + 3;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Management Fee Fund";
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    incRowExcel++;


                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                    worksheet.Cells[incRowExcel, 2].Value = "Keterangan";
                                                    worksheet.Cells[incRowExcel, 3].Value = "Des";
                                                    worksheet.Cells[incRowExcel, 4].Value = "Jan";
                                                    worksheet.Cells[incRowExcel, 5].Value = "Feb";
                                                    worksheet.Cells[incRowExcel, 6].Value = "Mar";
                                                    worksheet.Cells[incRowExcel, 7].Value = "Apr";
                                                    worksheet.Cells[incRowExcel, 8].Value = "Mei";
                                                    worksheet.Cells[incRowExcel, 9].Value = "Jun";
                                                    worksheet.Cells[incRowExcel, 10].Value = "Jul";

                                                    worksheet.Cells[incRowExcel, 11].Value = "Aug";
                                                    worksheet.Cells[incRowExcel, 12].Value = "Sep";
                                                    worksheet.Cells[incRowExcel, 13].Value = "Okt";
                                                    worksheet.Cells[incRowExcel, 14].Value = "Nov";
                                                    worksheet.Cells[incRowExcel, 15].Value = "Des";
                                                    worksheet.Cells[incRowExcel, 16].Value = "Ytd Des";

                                                    worksheet.Cells[incRowExcel, 18].Value = "Mi Fee di setahunkan";

                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Font.Size = 12;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {



                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {


                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.Keterangan;

                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.DesPast;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.Jan;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Feb;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Mar;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Apr;
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail1.Mei;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail1.Jun;
                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail1.Jul;
                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail1.Aug;
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail1.Sep;
                                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail1.Okt;
                                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail1.Nov;
                                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 15].Value = rsDetail1.Des;
                                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 16].Formula = "=SUM(D" + incRowExcel + ":O" + incRowExcel + ")";
                                                            worksheet.Cells[incRowExcel, 16].Calculate();
                                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 18].Value = "";
                                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";

                                                            _no++;
                                                            _endRowDetail = incRowExcel;





                                                        }

                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00%";
                                                        worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 13].Calculate();
                                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 14].Calculate();
                                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 15].Calculate();
                                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 16].Calculate();
                                                        worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 18].Calculate();
                                                        worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                                    }








                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 16];
                                                    worksheet.Column(1).Width = 8;
                                                    worksheet.Column(2).Width = 30;
                                                    worksheet.Column(3).Width = 21;
                                                    worksheet.Column(4).Width = 21;
                                                    worksheet.Column(5).Width = 21;
                                                    worksheet.Column(6).Width = 21;
                                                    worksheet.Column(7).Width = 21;
                                                    worksheet.Column(8).Width = 21;
                                                    worksheet.Column(9).Width = 21;
                                                    worksheet.Column(10).Width = 21;
                                                    worksheet.Column(11).Width = 21;
                                                    worksheet.Column(12).Width = 21;
                                                    worksheet.Column(13).Width = 21;
                                                    worksheet.Column(14).Width = 21;
                                                    worksheet.Column(15).Width = 21;
                                                    worksheet.Column(16).Width = 21;
                                                    worksheet.Column(17).Width = 5;
                                                    worksheet.Column(18).Width = 21;
                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Rate Mi Fee";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        package.Save();
                                        if (_commissionRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion



            else
            {
                return false;
            }
        }



    }
}