using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using System.Data;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;


namespace RFSRepository
{
    public class InvestmentReps
    {
        Host _host = new Host();

        //1
        string _insertCommand = @"INSERT INTO [dbo].[Investment] 
                            ([InvestmentPK],[HistoryPK],[StatusInvestment],[DealingPK],[StatusDealing],[SettlementPK],[StatusSettlement],[ValueDate],[PeriodPK],[InstructionDate],[Reference],[InstrumentTypePK],[TrxType],[TrxTypeID],
                            [CounterpartPK],[InstrumentPK],[FundPK],[FundCashRefPK],[OrderPrice],[Lot],[LotInShare],[RangePrice],[Volume],
                            [Amount],[InterestPercent],[BreakInterestPercent],[AccruedInterest],[LastCouponDate],[NextCouponDate],
                            [MaturityDate],[SettlementDate],[InvestmentNotes],[DoneLot],[DoneVolume],[DonePrice],[DoneAmount],[Tenor],[CommissionPercent], 
                            [LevyPercent],[KPEIPercent],[VATPercent],[WHTPercent],[OTCPercent],[IncomeTaxSellPercent],[IncomeTaxInterestPercent],
                            [IncomeTaxGainPercent],[CommissionAmount],[LevyAmount],[KPEIAmount],[VATAmount],[WHTAmount],[OTCAmount],[IncomeTaxSellAmount],
                            [IncomeTaxInterestAmount],[IncomeTaxGainAmount],[TotalAmount],[CurrencyRate],[SettlementMode],[BoardType],[AcqPrice],[AcqVolume],[AcqDate],[AcqPrice1],[AcqVolume1],[AcqDate1],[AcqPrice2],[AcqVolume2],[AcqDate2],[AcqPrice3],[AcqVolume3],[AcqDate3],[AcqPrice4],[AcqVolume4],[AcqDate4],[AcqPrice5],[AcqVolume5],[AcqDate5],[AcqPrice6],[AcqVolume6],[AcqDate6],[AcqPrice7],[AcqVolume7],[AcqDate7],[AcqPrice8],[AcqVolume8],[AcqDate8],[AcqPrice9],[AcqVolume9],[AcqDate9], 
                            [Category],[MarketPK],[TrxBuy],[TrxBuyType],[InterestDaysType],[InterestPaymentType],[PaymentModeOnMaturity],[PaymentInterestSpecificDate],[PriceMode],[BitIsAmortized],[DoneAccruedInterest],[YieldPercent],[BitIsRounding],[AccruedHoldingAmount],[BitBreakable],[CrossFundFromPK],[PurposeOfTransaction],[StatutoryType],[BitForeignTrx],[CPSafekeepingAccNumber],[PlaceOfSettlement],[FundSafekeepingAccountNumber],[SecurityCodeType],[BitHTM],[BitRollOverInterest],[InvestmentTrType],[AmountToTransfer],
                            [BIRate],[InvestmentStrategy],[InvestmentStyle],[InvestmentObjective],[Revision],[OtherInvestmentStyle],[OtherInvestmentObjective],[OtherRevision],";

        string _paramaterCommand = @"@ValueDate,@PeriodPK,@InstructionDate,@Reference,@InstrumentTypePK,@TrxType,@TrxTypeID,
                            @CounterpartPK,@InstrumentPK,@FundPK,@FundCashRefPK,@OrderPrice,@Lot,@LotInShare,@RangePrice,@Volume,
                            @Amount,@InterestPercent,@BreakInterestPercent,@AccruedInterest,@LastCouponDate,@NextCouponDate,
                            @MaturityDate,case when @SettlementDate is null then dbo.fworkingday(@ValueDate,3) else @SettlementDate end,@InvestmentNotes,@DoneLot,@DoneVolume,@DonePrice,@DoneAmount,@Tenor,@CommissionPercent,
                            @LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxSellPercent,@IncomeTaxInterestPercent,
                            @IncomeTaxGainPercent,@CommissionAmount,@LevyAmount,@KPEIAmount,@VATAmount,@WHTAmount,@OTCAmount,@IncomeTaxSellAmount,
                            @IncomeTaxInterestAmount,@IncomeTaxGainAmount,@TotalAmount,@CurrencyRate,@SettlementMode,@BoardType,@AcqPrice,@AcqVolume,@AcqDate,@AcqPrice1,@AcqVolume1,@AcqDate1,@AcqPrice2,@AcqVolume2,@AcqDate2,@AcqPrice3,@AcqVolume3,@AcqDate3,@AcqPrice4,@AcqVolume4,@AcqDate4,@AcqPrice5,@AcqVolume5,@AcqDate5,@AcqPrice6,@AcqVolume6,@AcqDate6,@AcqPrice7,@AcqVolume7,@AcqDate7,@AcqPrice8,@AcqVolume8,@AcqDate8,@AcqPrice9,@AcqVolume9,@AcqDate9,
                            @Category,@MarketPK,@TrxBuy,@TrxBuyType,@InterestDaysType,@InterestPaymentType,@PaymentModeOnMaturity,@PaymentInterestSpecificDate,@PriceMode,@BitIsAmortized,@DoneAccruedInterest,@YieldPercent,@BitIsRounding,@AccruedHoldingAmount,@BitBreakable,@CrossFundFromPK,@PurposeOfTransaction,@StatutoryType,@BitForeignTrx,@CPSafekeepingAccNumber,@PlaceOfSettlement,@FundSafekeepingAccountNumber,@SecurityCodeType,@BitHTM,@BitRollOverInterest,@InvestmentTrType,@AmountToTransfer,
                            @BIRate,@InvestmentStrategy,@InvestmentStyle,@InvestmentObjective,@Revision,@OtherInvestmentStyle,@OtherInvestmentObjective,@OtherRevision,";

        string _updateCommand = @"Update Investment set Notes='',DealingPK=@DealingPK,StatusDealing=@StatusDealing,SettlementPK=@SettlementPK,StatusSettlement=@StatusSettlement,ValueDate=@ValueDate,PeriodPK=@PeriodPK,InstructionDate=@InstructionDate,Reference=@Reference,InstrumentTypePK=@InstrumentTypePK,
                                TrxType=@TrxType,TrxTypeID=@TrxTypeID,CounterpartPK=@CounterpartPK,InstrumentPK=@InstrumentPK,FundPK=@FundPK,FundCashRefPK=@FundCashRefPK,OrderPrice=@OrderPrice,Lot=@Lot,LotInShare=@LotInShare,RangePrice=@RangePrice,Volume=@Volume,Amount=@Amount,
                                InterestPercent=@InterestPercent,BreakInterestPercent=@BreakInterestPercent,AccruedInterest=@AccruedInterest,LastCouponDate=@LastCouponDate,NextCouponDate=@NextCouponDate,MaturityDate=@MaturityDate,SettlementDate=@SettlementDate,AcqDate=@AcqDate,AcqPrice=@AcqPrice,AcqVolume=@AcqVolume,
                                DoneLot=@DoneLot,DoneVolume=@DoneVolume,DonePrice=@DonePrice,DoneAmount=@DoneAmount,Tenor=@Tenor,CommissionPercent=@CommissionPercent,
                                LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxSellPercent=@IncomeTaxSellPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,
                                IncomeTaxGainPercent=@IncomeTaxGainPercent,CommissionAmount=@CommissionAmount,LevyAmount=@LevyAmount,KPEIAmount=@KPEIAmount,VATAmount=@VATAmount,WHTAmount=@WHTAmount,OTCAmount=@OTCAmount,IncomeTaxSellAmount=@IncomeTaxSellAmount,
                                IncomeTaxInterestAmount=@IncomeTaxInterestAmount,IncomeTaxGainAmount=@IncomeTaxGainAmount,TotalAmount=@TotalAmount,CurrencyRate=@CurrencyRate,SettlementMode=@SettlementMode,BoardType=@BoardType,AcqPrice1=@AcqPrice1,AcqVolume1=@AcqVolume1,AcqDate1=@AcqDate1,AcqPrice2=@AcqPrice2,AcqVolume2=@AcqVolume2,AcqDate2=@AcqDate2,AcqPrice3=@AcqPrice3,AcqVolume3=@AcqVolume3,AcqDate3=@AcqDate3,AcqPrice4=@AcqPrice4,AcqVolume4=@AcqVolume4,AcqDate4=@AcqDate4,AcqPrice5=@AcqPrice5,AcqVolume5=@AcqVolume5,AcqDate5=@AcqDate5, 
                                AcqPrice6=@AcqPrice6,AcqVolume6=@AcqVolume6,AcqDate6=@AcqDate6,AcqPrice7=@AcqPrice7,AcqVolume7=@AcqVolume7,AcqDate7=@AcqDate7,AcqPrice8=@AcqPrice8,AcqVolume8=@AcqVolume8,AcqDate8=@AcqDate8,AcqPrice9=@AcqPrice9,AcqVolume9=@AcqVolume9,AcqDate9=@AcqDate9, 
                                Category = @Category,BankBranchPK = @BankBranchPK,MarketPK = @MarketPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode =@PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest=@DoneAccruedInterest,YieldPercent=@YieldPercent,BitIsRounding=@BitIsRounding,AccruedHoldingAmount=@AccruedHoldingAmount,BitBreakable=@BitBreakable,CrossFundFromPK = @CrossFundFromPK,PurposeOfTransaction=@PurposeOfTransaction,StatutoryType=@StatutoryType,BitForeignTrx=@BitForeignTrx,
                                CPSafekeepingAccNumber=@CPSafekeepingAccNumber,PlaceOfSettlement=@PlaceOfSettlement,FundSafekeepingAccountNumber=@FundSafekeepingAccountNumber,SecurityCodeType=@SecurityCodeType,BitHTM=@BitHTM,BitRollOverInterest=@BitRollOverInterest,InvestmentTrType=@InvestmentTrType,AmountToTransfer=@AmountToTransfer,
                                BIRate=@BIRate,InvestmentStrategy=@InvestmentStrategy,InvestmentStyle=@InvestmentStyle,InvestmentObjective=@InvestmentObjective,Revision=@Revision,OtherInvestmentStyle=@OtherInvestmentStyle,OtherInvestmentObjective=@OtherInvestmentObjective,OtherRevision=@OtherRevision,
                                AcqDate10=@AcqDate10, AcqPrice10=@AcqPrice10, AcqVolume10=@AcqVolume10, AcqDate11=@AcqDate11, AcqPrice11=@AcqPrice11, AcqVolume11=@AcqVolume11, AcqDate12=@AcqDate12, AcqPrice12=@AcqPrice12, AcqVolume12=@AcqVolume12, 
                                AcqDate13=@AcqDate13, AcqPrice13=@AcqPrice13, AcqVolume13=@AcqVolume13, AcqDate14=@AcqDate14, AcqPrice14=@AcqPrice14, AcqVolume14=@AcqVolume14, AcqDate15=@AcqDate15, AcqPrice15=@AcqPrice15, AcqVolume15=@AcqVolume15, 
                                AcqDate16=@AcqDate16, AcqPrice16=@AcqPrice16, AcqVolume16=@AcqVolume16, AcqDate17=@AcqDate17, AcqPrice17=@AcqPrice17, AcqVolume17=@AcqVolume17, AcqDate18=@AcqDate18, AcqPrice18=@AcqPrice18, AcqVolume18=@AcqVolume18, 
                                AcqDate19=@AcqDate19, AcqPrice19=@AcqPrice19, AcqVolume19=@AcqVolume19, AcqDate20=@AcqDate20, AcqPrice20=@AcqPrice20, AcqVolume20=@AcqVolume20, AcqDate21=@AcqDate21, AcqPrice21=@AcqPrice21, AcqVolume21=@AcqVolume21, 
                                AcqDate22=@AcqDate22, AcqPrice22=@AcqPrice22, AcqVolume22=@AcqVolume22, AcqDate23=@AcqDate23, AcqPrice23=@AcqPrice23, AcqVolume23=@AcqVolume23, AcqDate24=@AcqDate24, AcqPrice24=@AcqPrice24, AcqVolume24=@AcqVolume24, 
                                AcqDate25=@AcqDate25, AcqPrice25=@AcqPrice25, AcqVolume25=@AcqVolume25, AcqDate26=@AcqDate26, AcqPrice26=@AcqPrice26, AcqVolume26=@AcqVolume26, AcqDate27=@AcqDate27, AcqPrice27=@AcqPrice27, AcqVolume27=@AcqVolume27, 
                                AcqDate28=@AcqDate28, AcqPrice28=@AcqPrice28, AcqVolume28=@AcqVolume28, AcqDate29=@AcqDate29, AcqPrice29=@AcqPrice29, AcqVolume29=@AcqVolume29, 
                            ";

        string _updateCommandForSettlement = @"Update Investment set Notes='',DealingPK=@DealingPK,StatusDealing=@StatusDealing,SettlementPK=@SettlementPK,StatusSettlement=@StatusSettlement,ValueDate=@ValueDate,PeriodPK=@PeriodPK,InstructionDate=@InstructionDate,Reference=@Reference,InstrumentTypePK=@InstrumentTypePK,
                                TrxType=@TrxType,TrxTypeID=@TrxTypeID,CounterpartPK=@CounterpartPK,InstrumentPK=@InstrumentPK,FundPK=@FundPK,FundCashRefPK=@FundCashRefPK,OrderPrice=@OrderPrice,Lot=@Lot,LotInShare=@LotInShare,RangePrice=@RangePrice,Volume=@Volume,Amount=@Amount,
                                InterestPercent=@InterestPercent,BreakInterestPercent=@BreakInterestPercent,AccruedInterest=@AccruedInterest,LastCouponDate=@LastCouponDate,NextCouponDate=@NextCouponDate,MaturityDate=@MaturityDate,SettlementDate=@SettlementDate,AcqDate=@AcqDate,AcqPrice=@AcqPrice,AcqVolume=@AcqVolume,
                                DoneLot=@DoneLot,DoneVolume=@DoneVolume,DonePrice=@DonePrice,DoneAmount=@DoneAmount,Tenor=@Tenor,CommissionPercent=@CommissionPercent,
                                LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxSellPercent=@IncomeTaxSellPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,
                                IncomeTaxGainPercent=@IncomeTaxGainPercent,CommissionAmount=@CommissionAmount,LevyAmount=@LevyAmount,KPEIAmount=@KPEIAmount,VATAmount=@VATAmount,WHTAmount=@WHTAmount,OTCAmount=@OTCAmount,IncomeTaxSellAmount=@IncomeTaxSellAmount,
                                IncomeTaxInterestAmount=@IncomeTaxInterestAmount,IncomeTaxGainAmount=@IncomeTaxGainAmount,TotalAmount=@TotalAmount,CurrencyRate=@CurrencyRate,SettlementMode=@SettlementMode,BoardType=@BoardType,AcqPrice1=@AcqPrice1,AcqVolume1=@AcqVolume1,AcqDate1=@AcqDate1,AcqPrice2=@AcqPrice2,AcqVolume2=@AcqVolume2,AcqDate2=@AcqDate2,AcqPrice3=@AcqPrice3,AcqVolume3=@AcqVolume3,AcqDate3=@AcqDate3,AcqPrice4=@AcqPrice4,AcqVolume4=@AcqVolume4,AcqDate4=@AcqDate4,AcqPrice5=@AcqPrice5,AcqVolume5=@AcqVolume5,AcqDate5=@AcqDate5, 
                                AcqPrice6=@AcqPrice6,AcqVolume6=@AcqVolume6,AcqDate6=@AcqDate6,AcqPrice7=@AcqPrice7,AcqVolume7=@AcqVolume7,AcqDate7=@AcqDate7,AcqPrice8=@AcqPrice8,AcqVolume8=@AcqVolume8,AcqDate8=@AcqDate8,AcqPrice9=@AcqPrice9,AcqVolume9=@AcqVolume9,AcqDate9=@AcqDate9, 
                                Category = @Category,BankBranchPK = @BankBranchPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode =@PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest=@DoneAccruedInterest,BitIsRounding=@BitIsRounding,AccruedHoldingAmount=@AccruedHoldingAmount,BitBreakable=@BitBreakable,CrossFundFromPK = @CrossFundFromPK,PurposeOfTransaction=@PurposeOfTransaction,StatutoryType=@StatutoryType,BitForeignTrx=@BitForeignTrx,
                                CPSafekeepingAccNumber=@CPSafekeepingAccNumber,PlaceOfSettlement=@PlaceOfSettlement,FundSafekeepingAccountNumber=@FundSafekeepingAccountNumber,SecurityCodeType=@SecurityCodeType,BitHTM=@BitHTM,BitRollOverInterest=@BitRollOverInterest,InvestmentTrType=@InvestmentTrType,AmountToTransfer=@AmountToTransfer,
                                BIRate=@BIRate,InvestmentStrategy=@InvestmentStrategy,InvestmentStyle=@InvestmentStyle,InvestmentObjective=@InvestmentObjective,Revision=@Revision,OtherInvestmentStyle=@OtherInvestmentStyle,OtherInvestmentObjective=@OtherInvestmentObjective,OtherRevision=@OtherRevision,
                                AcqDate10=@AcqDate10, AcqPrice10=@AcqPrice10, AcqVolume10=@AcqVolume10, AcqDate11=@AcqDate11, AcqPrice11=@AcqPrice11, AcqVolume11=@AcqVolume11, AcqDate12=@AcqDate12, AcqPrice12=@AcqPrice12, AcqVolume12=@AcqVolume12, 
                                AcqDate13=@AcqDate13, AcqPrice13=@AcqPrice13, AcqVolume13=@AcqVolume13, AcqDate14=@AcqDate14, AcqPrice14=@AcqPrice14, AcqVolume14=@AcqVolume14, AcqDate15=@AcqDate15, AcqPrice15=@AcqPrice15, AcqVolume15=@AcqVolume15, 
                                AcqDate16=@AcqDate16, AcqPrice16=@AcqPrice16, AcqVolume16=@AcqVolume16, AcqDate17=@AcqDate17, AcqPrice17=@AcqPrice17, AcqVolume17=@AcqVolume17, AcqDate18=@AcqDate18, AcqPrice18=@AcqPrice18, AcqVolume18=@AcqVolume18, 
                                AcqDate19=@AcqDate19, AcqPrice19=@AcqPrice19, AcqVolume19=@AcqVolume19, AcqDate20=@AcqDate20, AcqPrice20=@AcqPrice20, AcqVolume20=@AcqVolume20, AcqDate21=@AcqDate21, AcqPrice21=@AcqPrice21, AcqVolume21=@AcqVolume21, 
                                AcqDate22=@AcqDate22, AcqPrice22=@AcqPrice22, AcqVolume22=@AcqVolume22, AcqDate23=@AcqDate23, AcqPrice23=@AcqPrice23, AcqVolume23=@AcqVolume23, AcqDate24=@AcqDate24, AcqPrice24=@AcqPrice24, AcqVolume24=@AcqVolume24, 
                                AcqDate25=@AcqDate25, AcqPrice25=@AcqPrice25, AcqVolume25=@AcqVolume25, AcqDate26=@AcqDate26, AcqPrice26=@AcqPrice26, AcqVolume26=@AcqVolume26, AcqDate27=@AcqDate27, AcqPrice27=@AcqPrice27, AcqVolume27=@AcqVolume27, 
                                AcqDate28=@AcqDate28, AcqPrice28=@AcqPrice28, AcqVolume28=@AcqVolume28, AcqDate29=@AcqDate29, AcqPrice29=@AcqPrice29, AcqVolume29=@AcqVolume29, 
                            ";


        //2
        private Investment setInvestment(SqlDataReader dr)
        {
            Investment M_Investment = new Investment();
            M_Investment.BankPK = dr["BankPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BankPK"]);
            if (_host.CheckColumnIsExist(dr, "BankBranchPK"))
            {
                M_Investment.BankBranchPK = dr["BankBranchPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BankBranchPK"]);
            }
            M_Investment.InvestmentPK = dr["InvestmentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentPK"]);
            M_Investment.HistoryPK = Convert.ToInt32(dr["HistoryPK"]);
            M_Investment.SelectedInvestment = Convert.ToBoolean(dr["SelectedInvestment"]);
            M_Investment.SelectedDealing = Convert.ToBoolean(dr["SelectedDealing"]);
            M_Investment.SelectedSettlement = Convert.ToBoolean(dr["SelectedSettlement"]);
            M_Investment.StatusInvestment = dr["StatusInvestment"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatusInvestment"]);
            M_Investment.StatusDealing = dr["StatusDealing"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatusDealing"]);
            M_Investment.StatusSettlement = dr["StatusSettlement"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatusSettlement"]);
            M_Investment.StatusDesc = dr["StatusDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["StatusDesc"]);
            if (_host.CheckColumnIsExist(dr, "OrderStatusDesc"))
            {
                M_Investment.OrderStatusDesc = dr["OrderStatusDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["OrderStatusDesc"]);
            }
            if (_host.CheckColumnIsExist(dr, "LotReksadana"))
            {
                M_Investment.LotReksadana = dr["LotReksadana"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LotReksadana"]);
            }
            if (_host.CheckColumnIsExist(dr, "BankID"))
            {
                M_Investment.BankID = dr["BankID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["BankID"]);
            }
            if (_host.CheckColumnIsExist(dr, "InvestmentTrType"))
            {
                M_Investment.InvestmentTrType = dr["InvestmentTrType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentTrType"]);
            }
            if (_host.CheckColumnIsExist(dr, "AmountToTransfer"))
            {
                M_Investment.AmountToTransfer = dr["AmountToTransfer"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AmountToTransfer"]);
            }
            if (_host.CheckColumnIsExist(dr, "InvestmentTrTypeDesc"))
            {
                M_Investment.InvestmentTrTypeDesc = dr["InvestmentTrTypeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InvestmentTrTypeDesc"]);
            }
            M_Investment.Notes = dr["Notes"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Notes"]);
            M_Investment.DealingPK = dr["DealingPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["DealingPK"]);
            M_Investment.SettlementPK = dr["SettlementPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["SettlementPK"]);
            M_Investment.ValueDate = dr["ValueDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["ValueDate"]);
            M_Investment.PeriodPK = dr["PeriodPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["PeriodPK"]);
            M_Investment.PeriodID = dr["PeriodID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PeriodID"]);
            M_Investment.InstructionDate = dr["InstructionDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstructionDate"]);
            M_Investment.Reference = dr["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Reference"]);
            M_Investment.RefNo = dr["RefNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["RefNo"]);
            M_Investment.InstrumentTypePK = dr["InstrumentTypePK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InstrumentTypePK"]);
            M_Investment.InstrumentTypeID = dr["InstrumentTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstrumentTypeID"]);
            M_Investment.TrxType = dr["TrxType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["TrxType"]);
            M_Investment.TrxTypeID = dr["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["TrxTypeID"]);
            M_Investment.CounterpartPK = dr["CounterpartPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["CounterpartPK"]);
            M_Investment.CounterpartID = dr["CounterpartID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CounterpartID"]);
            M_Investment.CounterpartName = dr["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CounterpartName"]);
            M_Investment.MarketPK = dr["MarketPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["MarketPK"]);
            M_Investment.MarketID = dr["MarketID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["MarketID"]);
            M_Investment.InstrumentPK = dr["InstrumentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InstrumentPK"]);
            M_Investment.InstrumentID = dr["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstrumentID"]);
            M_Investment.InstrumentName = dr["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstrumentName"]);
            M_Investment.FundPK = dr["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["FundPK"]);
            M_Investment.FundID = dr["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundID"]);
            M_Investment.FundName = dr["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundName"]);
            M_Investment.FundCashRefPK = dr["FundCashRefPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["FundCashRefPK"]);
            M_Investment.FundCashRefID = dr["FundCashRefID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundCashRefID"]);
            M_Investment.FundCashRefName = dr["FundCashRefName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundCashRefName"]);
            M_Investment.OrderPrice = dr["OrderPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["OrderPrice"]);
            M_Investment.Lot = dr["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Lot"]);
            M_Investment.LotInShare = dr["LotInShare"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LotInShare"]);
            M_Investment.RangePrice = dr["RangePrice"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["RangePrice"]);
            M_Investment.Volume = dr["Volume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Volume"]);
            M_Investment.Amount = dr["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Amount"]);
            M_Investment.InterestPercent = dr["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["InterestPercent"]);
            M_Investment.BreakInterestPercent = dr["BreakInterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["BreakInterestPercent"]);
            M_Investment.AccruedInterest = dr["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AccruedInterest"]);
            M_Investment.DoneAccruedInterest = dr["DoneAccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneAccruedInterest"]);
            M_Investment.LastCouponDate = dr["LastCouponDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["LastCouponDate"]);
            M_Investment.NextCouponDate = dr["NextCouponDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["NextCouponDate"]);
            M_Investment.MaturityDate = dr["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["MaturityDate"]);
            M_Investment.SettledDate = dr["SettlementDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["SettlementDate"]);
            M_Investment.InvestmentNotes = dr["InvestmentNotes"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InvestmentNotes"]);
            M_Investment.DoneLot = dr["DoneLot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneLot"]);
            M_Investment.DoneVolume = dr["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneVolume"]);
            M_Investment.DonePrice = dr["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DonePrice"]);
            M_Investment.DoneAmount = dr["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneAmount"]);
            M_Investment.Tenor = dr["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["Tenor"]);
            M_Investment.CommissionPercent = dr["CommissionPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["CommissionPercent"]);
            M_Investment.LevyPercent = dr["LevyPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LevyPercent"]);
            M_Investment.KPEIPercent = dr["KPEIPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["KPEIPercent"]);
            M_Investment.VATPercent = dr["VATPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["VATPercent"]);
            M_Investment.WHTPercent = dr["WHTPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["WHTPercent"]);
            M_Investment.OTCPercent = dr["OTCPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["OTCPercent"]);
            M_Investment.IncomeTaxSellPercent = dr["IncomeTaxSellPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxSellPercent"]);
            M_Investment.IncomeTaxInterestPercent = dr["IncomeTaxInterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxInterestPercent"]);
            M_Investment.IncomeTaxGainPercent = dr["IncomeTaxGainPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxGainPercent"]);
            M_Investment.CommissionAmount = dr["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["CommissionAmount"]);
            M_Investment.LevyAmount = dr["LevyAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LevyAmount"]);
            M_Investment.KPEIAmount = dr["KPEIAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["KPEIAmount"]);
            M_Investment.VATAmount = dr["VATAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["VATAmount"]);
            M_Investment.WHTAmount = dr["WHTAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["WHTAmount"]);
            M_Investment.OTCAmount = dr["OTCAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["OTCAmount"]);
            M_Investment.IncomeTaxSellAmount = dr["IncomeTaxSellAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxSellAmount"]);
            M_Investment.IncomeTaxInterestAmount = dr["IncomeTaxInterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxInterestAmount"]);
            M_Investment.IncomeTaxGainAmount = dr["IncomeTaxGainAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxGainAmount"]);
            M_Investment.TotalAmount = dr["TotalAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalAmount"]);
            M_Investment.CurrencyRate = dr["CurrencyRate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["CurrencyRate"]);
            M_Investment.SettlementMode = dr["SettlementMode"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["SettlementMode"]);
            M_Investment.SettlementModeDesc = dr["SettlementModeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["SettlementModeDesc"]);
            M_Investment.BoardType = dr["BoardType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BoardType"]);
            M_Investment.BoardTypeDesc = dr["BoardTypeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["BoardTypeDesc"]);
            if (_host.CheckColumnIsExist(dr, "InterestDaysType"))
            {
                M_Investment.InterestDaysType = dr["InterestDaysType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InterestDaysType"]);
            }
            if (_host.CheckColumnIsExist(dr, "InterestDaysTypeDesc"))
            {
                M_Investment.InterestDaysTypeDesc = dr["InterestDaysTypeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InterestDaysTypeDesc"]);
            }
            M_Investment.AcqPrice = dr["AcqPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice"]);
            M_Investment.AcqVolume = dr["AcqVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume"]);
            M_Investment.AcqDate = dr["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate"]);
            M_Investment.AcqPrice1 = dr["AcqPrice1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice1"]);
            M_Investment.AcqVolume1 = dr["AcqVolume1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume1"]);
            M_Investment.AcqDate1 = dr["AcqDate1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate1"]);
            M_Investment.AcqPrice2 = dr["AcqPrice2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice2"]);
            M_Investment.AcqVolume2 = dr["AcqVolume2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume2"]);
            M_Investment.AcqDate2 = dr["AcqDate2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate2"]);
            M_Investment.AcqPrice3 = dr["AcqPrice3"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice3"]);
            M_Investment.AcqVolume3 = dr["AcqVolume3"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume3"]);
            M_Investment.AcqDate3 = dr["AcqDate3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate3"]);
            M_Investment.AcqPrice4 = dr["AcqPrice4"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice4"]);
            M_Investment.AcqVolume4 = dr["AcqVolume4"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume4"]);
            M_Investment.AcqDate4 = dr["AcqDate4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate4"]);
            M_Investment.AcqPrice5 = dr["AcqPrice5"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice5"]);
            M_Investment.AcqVolume5 = dr["AcqVolume5"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume5"]);
            M_Investment.AcqDate5 = dr["AcqDate5"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate5"]);
            M_Investment.AcqPrice6 = dr["AcqPrice6"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice6"]);
            M_Investment.AcqVolume6 = dr["AcqVolume6"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume6"]);
            M_Investment.AcqDate6 = dr["AcqDate6"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate6"]);
            M_Investment.AcqPrice7 = dr["AcqPrice7"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice7"]);
            M_Investment.AcqVolume7 = dr["AcqVolume7"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume7"]);
            M_Investment.AcqDate7 = dr["AcqDate7"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate7"]);
            M_Investment.AcqPrice8 = dr["AcqPrice8"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice8"]);
            M_Investment.AcqVolume8 = dr["AcqVolume8"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume8"]);
            M_Investment.AcqDate8 = dr["AcqDate8"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate8"]);
            M_Investment.AcqPrice9 = dr["AcqPrice9"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice9"]);
            M_Investment.AcqVolume9 = dr["AcqVolume9"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume9"]);
            M_Investment.AcqDate9 = dr["AcqDate9"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate9"]);

            if (_host.CheckColumnIsExist(dr, "AcqPrice10"))
            {
                M_Investment.AcqPrice10 = dr["AcqPrice10"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice10"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume10"))
            {
                M_Investment.AcqVolume10 = dr["AcqVolume10"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume10"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate10"))
            {
                M_Investment.AcqDate10 = dr["AcqDate10"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate10"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice11"))
            {
                M_Investment.AcqPrice11 = dr["AcqPrice11"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice11"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume11"))
            {
                M_Investment.AcqVolume11 = dr["AcqVolume11"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume11"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate11"))
            {
                M_Investment.AcqDate11 = dr["AcqDate11"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate11"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice12"))
            {
                M_Investment.AcqPrice12 = dr["AcqPrice12"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice12"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume12"))
            {
                M_Investment.AcqVolume12 = dr["AcqVolume12"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume12"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate12"))
            {
                M_Investment.AcqDate12 = dr["AcqDate12"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate12"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice13"))
            {
                M_Investment.AcqPrice13 = dr["AcqPrice13"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice13"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume13"))
            {
                M_Investment.AcqVolume13 = dr["AcqVolume13"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume13"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate13"))
            {
                M_Investment.AcqDate13 = dr["AcqDate13"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate13"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice14"))
            {
                M_Investment.AcqPrice14 = dr["AcqPrice14"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice14"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume14"))
            {
                M_Investment.AcqVolume14 = dr["AcqVolume14"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume14"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate14"))
            {
                M_Investment.AcqDate14 = dr["AcqDate14"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate14"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice15"))
            {
                M_Investment.AcqPrice15 = dr["AcqPrice15"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice15"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume15"))
            {
                M_Investment.AcqVolume15 = dr["AcqVolume15"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume15"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate15"))
            {
                M_Investment.AcqDate15 = dr["AcqDate15"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate15"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice16"))
            {
                M_Investment.AcqPrice16 = dr["AcqPrice16"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice16"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume16"))
            {
                M_Investment.AcqVolume16 = dr["AcqVolume16"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume16"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate16"))
            {
                M_Investment.AcqDate16 = dr["AcqDate16"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate16"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice17"))
            {
                M_Investment.AcqPrice17 = dr["AcqPrice17"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice17"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume17"))
            {
                M_Investment.AcqVolume17 = dr["AcqVolume17"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume17"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate17"))
            {
                M_Investment.AcqDate17 = dr["AcqDate17"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate17"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice18"))
            {
                M_Investment.AcqPrice18 = dr["AcqPrice18"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice18"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume18"))
            {
                M_Investment.AcqVolume18 = dr["AcqVolume18"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume18"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate18"))
            {
                M_Investment.AcqDate18 = dr["AcqDate18"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate18"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice19"))
            {
                M_Investment.AcqPrice19 = dr["AcqPrice19"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice19"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume19"))
            {
                M_Investment.AcqVolume19 = dr["AcqVolume19"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume19"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate19"))
            {
                M_Investment.AcqDate19 = dr["AcqDate19"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate19"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice20"))
            {
                M_Investment.AcqPrice20 = dr["AcqPrice20"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice20"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume20"))
            {
                M_Investment.AcqVolume20 = dr["AcqVolume20"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume20"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate20"))
            {
                M_Investment.AcqDate20 = dr["AcqDate20"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate20"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice21"))
            {
                M_Investment.AcqPrice21 = dr["AcqPrice21"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice21"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume21"))
            {
                M_Investment.AcqVolume21 = dr["AcqVolume21"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume21"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate21"))
            {
                M_Investment.AcqDate21 = dr["AcqDate21"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate21"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice22"))
            {
                M_Investment.AcqPrice22 = dr["AcqPrice22"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice22"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume22"))
            {
                M_Investment.AcqVolume22 = dr["AcqVolume22"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume22"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate22"))
            {
                M_Investment.AcqDate22 = dr["AcqDate22"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate22"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice23"))
            {
                M_Investment.AcqPrice23 = dr["AcqPrice23"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice23"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume23"))
            {
                M_Investment.AcqVolume23 = dr["AcqVolume23"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume23"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate23"))
            {
                M_Investment.AcqDate23 = dr["AcqDate23"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate23"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice24"))
            {
                M_Investment.AcqPrice24 = dr["AcqPrice24"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice24"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume24"))
            {
                M_Investment.AcqVolume24 = dr["AcqVolume24"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume24"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate24"))
            {
                M_Investment.AcqDate24 = dr["AcqDate24"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate24"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice25"))
            {
                M_Investment.AcqPrice25 = dr["AcqPrice25"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice25"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume25"))
            {
                M_Investment.AcqVolume25 = dr["AcqVolume25"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume25"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate25"))
            {
                M_Investment.AcqDate25 = dr["AcqDate25"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate25"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice26"))
            {
                M_Investment.AcqPrice26 = dr["AcqPrice26"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice26"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume26"))
            {
                M_Investment.AcqVolume26 = dr["AcqVolume26"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume26"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate26"))
            {
                M_Investment.AcqDate26 = dr["AcqDate26"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate26"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice27"))
            {
                M_Investment.AcqPrice27 = dr["AcqPrice27"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice27"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume27"))
            {
                M_Investment.AcqVolume27 = dr["AcqVolume27"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume27"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate27"))
            {
                M_Investment.AcqDate27 = dr["AcqDate27"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate27"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice28"))
            {
                M_Investment.AcqPrice28 = dr["AcqPrice28"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice28"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume28"))
            {
                M_Investment.AcqVolume28 = dr["AcqVolume28"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume28"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate28"))
            {
                M_Investment.AcqDate28 = dr["AcqDate28"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate28"]);
            }

            if (_host.CheckColumnIsExist(dr, "AcqPrice29"))
            {
                M_Investment.AcqPrice29 = dr["AcqPrice29"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice29"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqVolume29"))
            {
                M_Investment.AcqVolume29 = dr["AcqVolume29"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume29"]);
            }
            if (_host.CheckColumnIsExist(dr, "AcqDate29"))
            {
                M_Investment.AcqDate29 = dr["AcqDate29"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate29"]);
            }

            if (_host.CheckColumnIsExist(dr, "Category"))
            {
                M_Investment.Category = dr["Category"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Category"]);
            }
            if (_host.CheckColumnIsExist(dr, "CurrencyPK"))
            {
                M_Investment.CurrencyPK = dr["CurrencyPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["CurrencyPK"]);
            }
            if (_host.CheckColumnIsExist(dr, "CurrencyID"))
            {
                M_Investment.CurrencyID = dr["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CurrencyID"]);
            }

            if (_host.CheckColumnIsExist(dr, "InterestDaysType"))
            {
                M_Investment.InterestDaysType = dr["InterestDaysType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InterestDaysType"]);
            }

            if (_host.CheckColumnIsExist(dr, "InterestPaymentType"))
            {
                M_Investment.InterestPaymentType = dr["InterestPaymentType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InterestPaymentType"]);
            }

            if (_host.CheckColumnIsExist(dr, "PaymentModeOnMaturity"))
            {
                M_Investment.PaymentModeOnMaturity = dr["PaymentModeOnMaturity"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["PaymentModeOnMaturity"]);
            }

            if (_host.CheckColumnIsExist(dr, "PaymentInterestSpecificDate"))
            {
                M_Investment.PaymentInterestSpecificDate = dr["PaymentInterestSpecificDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PaymentInterestSpecificDate"]);
            }

            if (_host.CheckColumnIsExist(dr, "PriceMode"))
            {
                M_Investment.PriceMode = dr["PriceMode"].Equals(DBNull.Value) == true ? 1 : Convert.ToInt16(dr["PriceMode"]);
            }

            if (_host.CheckColumnIsExist(dr, "BitIsAmortized"))
            {
                M_Investment.BitIsAmortized = dr["BitIsAmortized"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitIsAmortized"]);
            }

            if (_host.CheckColumnIsExist(dr, "TrxBuy"))
            {
                M_Investment.TrxBuy = dr["TrxBuy"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["TrxBuy"]);
            }

            if (_host.CheckColumnIsExist(dr, "TrxBuyType"))
            {
                M_Investment.TrxBuyType = dr["TrxBuyType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["TrxBuyType"]);
            }

            M_Investment.TaxExpensePercent = dr["TaxExpensePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxExpensePercent"]);
            M_Investment.YieldPercent = dr["YieldPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["YieldPercent"]);
            M_Investment.BitIsRounding = dr["BitIsRounding"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitIsRounding"]);
            M_Investment.BitBreakable = dr["BitBreakable"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitBreakable"]);
            M_Investment.AccruedHoldingAmount = dr["AccruedHoldingAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AccruedHoldingAmount"]);
            M_Investment.CrossFundFromPK = dr["CrossFundFromPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["CrossFundFromPK"]);
            M_Investment.CrossFundFromID = dr["CrossFundFromID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CrossFundFromID"]);
            if (_host.CheckColumnIsExist(dr, "PurposeOfTransaction"))
            {
                M_Investment.PurposeOfTransaction = dr["PurposeOfTransaction"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["PurposeOfTransaction"]);
            }
            if (_host.CheckColumnIsExist(dr, "PurposeOfTransactionDesc"))
            {
                M_Investment.PurposeOfTransactionDesc = dr["PurposeOfTransactionDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PurposeOfTransactionDesc"]);
            }
            if (_host.CheckColumnIsExist(dr, "StatutoryType"))
            {
                M_Investment.StatutoryType = dr["StatutoryType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatutoryType"]);
            }
            M_Investment.BitForeignTrx = dr["BitForeignTrx"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitForeignTrx"]);
            if (_host.CheckColumnIsExist(dr, "CPSafekeepingAccNumber"))
            {
                M_Investment.CPSafekeepingAccNumber = dr["CPSafekeepingAccNumber"].ToString();

            }
            if (_host.CheckColumnIsExist(dr, "PlaceOfSettlement"))
            {
                M_Investment.PlaceOfSettlement = dr["PlaceOfSettlement"].ToString();

            }
            if (_host.CheckColumnIsExist(dr, "FundSafekeepingAccountNumber"))
            {
                M_Investment.FundSafekeepingAccountNumber = dr["FundSafekeepingAccountNumber"].ToString();

            }
            if (_host.CheckColumnIsExist(dr, "SecurityCodeType"))
            {
                M_Investment.SecurityCodeType = dr["SecurityCodeType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["SecurityCodeType"]);
            }
            if (_host.CheckColumnIsExist(dr, "SecurityCodeTypeDesc"))
            {
                M_Investment.SecurityCodeTypeDesc = dr["SecurityCodeTypeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["SecurityCodeTypeDesc"]);
            }


            M_Investment.BankBranchPK = dr["BankBranchPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BankBranchPK"]);

            if (_host.CheckColumnIsExist(dr, "BankBranchID"))
            {
                M_Investment.BankBranchID = dr["BankBranchID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["BankBranchID"]);
            }

            if (_host.CheckColumnIsExist(dr, "PTPCode"))
            {
                M_Investment.PTPCode = dr["PTPCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PTPCode"]);
            }

            if (_host.CheckColumnIsExist(dr, "BitHTM"))
            {
                M_Investment.BitHTM = dr["BitHTM"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitHTM"]);
            }

            if (_host.CheckColumnIsExist(dr, "BitRollOverInterest"))
            {
                M_Investment.BitRollOverInterest = Convert.ToBoolean(dr["BitRollOverInterest"]);
            }

            if (_host.CheckColumnIsExist(dr, "AvgPrice"))
            {
                M_Investment.AvgPrice = dr["AvgPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AvgPrice"]);
            }
            if (_host.CheckColumnIsExist(dr, "AutoNo"))
            {
                M_Investment.AutoNo = dr["AutoNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AutoNo"]);
            }

            if (_host.CheckColumnIsExist(dr, "BIRate"))
            {
                M_Investment.BIRate = dr["BIRate"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BIRate"]);
            }
            if (_host.CheckColumnIsExist(dr, "BIRateDesc"))
            {
                M_Investment.BIRateDesc = dr["BIRateDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["BIRateDesc"]);
            }


            if (_host.CheckColumnIsExist(dr, "InvestmentStrategy"))
            {
                M_Investment.InvestmentStrategy = dr["InvestmentStrategy"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentStrategy"]);
            }
            if (_host.CheckColumnIsExist(dr, "InvestmentStrategyDesc"))
            {
                M_Investment.InvestmentStrategyDesc = dr["InvestmentStrategyDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InvestmentStrategyDesc"]);
            }

            if (_host.CheckColumnIsExist(dr, "InvestmentStyle"))
            {
                M_Investment.InvestmentStyle = dr["InvestmentStyle"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentStyle"]);
            }
            if (_host.CheckColumnIsExist(dr, "InvestmentStyleDesc"))
            {
                M_Investment.InvestmentStyleDesc = dr["InvestmentStyleDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InvestmentStyleDesc"]);
            }

            if (_host.CheckColumnIsExist(dr, "InvestmentObjective"))
            {
                M_Investment.InvestmentObjective = dr["InvestmentObjective"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentObjective"]);
            }
            if (_host.CheckColumnIsExist(dr, "InvestmentObjectiveDesc"))
            {
                M_Investment.InvestmentObjectiveDesc = dr["InvestmentObjectiveDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InvestmentObjectiveDesc"]);
            }

            if (_host.CheckColumnIsExist(dr, "Revision"))
            {
                M_Investment.Revision = dr["Revision"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["Revision"]);
            }
            if (_host.CheckColumnIsExist(dr, "RevisionDesc"))
            {
                M_Investment.RevisionDesc = dr["RevisionDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["RevisionDesc"]);
            }


            if (_host.CheckColumnIsExist(dr, "OtherInvestmentStyle"))
            {
                M_Investment.OtherInvestmentStyle = dr["OtherInvestmentStyle"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["OtherInvestmentStyle"]);
            }
            if (_host.CheckColumnIsExist(dr, "OtherInvestmentObjective"))
            {
                M_Investment.OtherInvestmentObjective = dr["OtherInvestmentObjective"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["OtherInvestmentObjective"]);
            }
            if (_host.CheckColumnIsExist(dr, "OtherRevision"))
            {
                M_Investment.OtherRevision = dr["OtherRevision"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["OtherRevision"]);
            }
            if (_host.CheckColumnIsExist(dr, "SIReference"))
            {
                M_Investment.SIReference = dr["SIReference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["SIReference"]);
            }

            M_Investment.Posted = dr["Posted"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["Posted"]);
            M_Investment.PostedBy = dr["PostedBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PostedBy"]);
            M_Investment.PostedTime = dr["PostedTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PostedTime"]);
            M_Investment.Revised = dr["Revised"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["Revised"]);
            M_Investment.RevisedBy = dr["RevisedBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["RevisedBy"]);
            M_Investment.RevisedTime = dr["RevisedTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["RevisedTime"]);
            M_Investment.EntryUsersID = dr["EntryUsersID"].ToString();
            M_Investment.UpdateUsersID = dr["UpdateUsersID"].ToString();
            M_Investment.ApprovedUsersID = dr["ApprovedUsersID"].ToString();
            M_Investment.VoidUsersID = dr["VoidUsersID"].ToString();
            M_Investment.EntryTime = dr["EntryTime"].ToString();
            M_Investment.UpdateTime = dr["UpdateTime"].ToString();
            M_Investment.ApprovedTime = dr["ApprovedTime"].ToString();
            M_Investment.VoidTime = dr["VoidTime"].ToString();
            M_Investment.EntryDealingID = dr["EntryDealingID"].ToString();
            M_Investment.UpdateDealingID = dr["UpdateDealingID"].ToString();
            M_Investment.ApprovedDealingID = dr["ApprovedDealingID"].ToString();
            M_Investment.VoidDealingID = dr["VoidDealingID"].ToString();
            M_Investment.EntryDealingTime = dr["EntryDealingTime"].ToString();
            M_Investment.UpdateDealingTime = dr["UpdateDealingTime"].ToString();
            M_Investment.ApprovedDealingTime = dr["ApprovedDealingTime"].ToString();
            M_Investment.VoidDealingTime = dr["VoidDealingTime"].ToString();
            M_Investment.EntrySettlementID = dr["EntrySettlementID"].ToString();
            M_Investment.UpdateSettlementID = dr["UpdateSettlementID"].ToString();
            M_Investment.ApprovedSettlementID = dr["ApprovedSettlementID"].ToString();
            M_Investment.VoidSettlementID = dr["VoidSettlementID"].ToString();
            M_Investment.EntrySettlementTime = dr["EntrySettlementTime"].ToString();
            M_Investment.UpdateSettlementTime = dr["UpdateSettlementTime"].ToString();
            M_Investment.ApprovedSettlementTime = dr["ApprovedSettlementTime"].ToString();
            M_Investment.VoidSettlementTime = dr["VoidSettlementTime"].ToString();
            M_Investment.DBUserID = dr["DBUserID"].ToString();
            M_Investment.DBTerminalID = dr["DBTerminalID"].ToString();
            M_Investment.LastUpdate = dr["LastUpdate"].ToString();
            M_Investment.LastUpdateDB = dr["LastUpdateDB"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["LastUpdateDB"]);
            return M_Investment;
        }

        public int Investment_SplitAdd(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_investment.InstrumentTypePK == 1)
                        {
                            cmd.CommandText = @"
                                    declare @splitdonelot numeric(22,4)
                                    declare @splitdoneprice numeric(22,4)
                                    declare @splitamount numeric(22,4)
                                    declare @TotalSplit int
                                    declare @DoneLot int
                                    declare @PreviousDealingPK int
                                    declare @TotalSplitAmount numeric(22,4)
                                    declare @DoneAmount numeric(22,4)
        
                                        
                                    Create Table #Split
                                    (splitdonelot numeric(22,4),
                                    splitdoneprice numeric(22,4),
                                    splitAmount numeric(22,4)
                                    )
        
                                    insert into #Split (splitdonelot,splitdoneprice,splitAmount)
                                    select @splitdonelot1,@splitdoneprice1,@splitdonelot1 * 100 * @splitdoneprice1
                                    insert into #Split (splitdonelot,splitdoneprice,splitAmount)
                                    select @splitdonelot2,@splitdoneprice2,@splitdonelot2 * 100 * @splitdoneprice2
                                    insert into #Split (splitdonelot,splitdoneprice,splitAmount)
                                    select @splitdonelot3,@splitdoneprice3,@splitdonelot3 * 100 * @splitdoneprice3
                                    insert into #Split (splitdonelot,splitdoneprice,splitAmount)
                                    select @splitdonelot4,@splitdoneprice4,@splitdonelot4 * 100 * @splitdoneprice4
                                    insert into #Split (splitdonelot,splitdoneprice,splitAmount)
                                    select @splitdonelot5,@splitdoneprice5,@splitdonelot5 * 100 * @splitdoneprice5
                                    
                                    select @PreviousDealingPK = DealingPK from Investment  where InvestmentPK = @InvestmentPK and HistoryPK = @HistoryPK and statusDealing  = 1
                                    select @DoneLot = DoneLot,@DoneAmount = DoneAmount from Investment  where InvestmentPK = @InvestmentPK and DealingPK = @PreviousDealingPK and HistoryPK = @HistoryPK and statusDealing  = 1
                                    select @TotalSplit = sum(splitdonelot) from #Split       

                                    Select @TotalSplitAmount = sum(SplitAmount) From #Split                                    

                                    DECLARE A CURSOR FOR 
                                    Select * From #Split where splitdonelot <> 0
        	
                                    Open A
                                    Fetch Next From A
                                    Into @splitdonelot,@splitdoneprice,@splitamount
        
                                    While @@FETCH_STATUS = 0
                                    BEGIN
                                    declare @DealingPK int
                                    Select @DealingPK = max(DealingPK) + 1 From investment
                                    if isnull(@DealingPK,0) = 0 BEGIN  Select @DealingPK = isnull(max(DealingPK),0) + 1 From investment END  
                                    declare @SettlementPK int
                                    Select @SettlementPK = max(SettlementPK) + 1 From investment
                                    if isnull(@SettlementPK,0) = 0 BEGIN  Select @SettlementPK = isnull(max(SettlementPK),0) + 1 From investment END  
        
                                    INSERT INTO [dbo].[Investment]  
                                    ([InvestmentPK],[HistoryPK],[StatusInvestment],[DealingPK],[StatusDealing],[SettlementPK],[StatusSettlement],[ValueDate],[PeriodPK],[InstructionDate],[Reference],[InstrumentTypePK],[TrxType],[TrxTypeID], 
                                    [CounterpartPK],[InstrumentPK],[FundPK],[FundCashRefPK],[OrderPrice],[Lot],[LotInShare],[RangePrice],[AcqPrice],[Volume], 
                                    [Amount],[InterestPercent],[BreakInterestPercent],[AccruedInterest],[LastCouponDate],[NextCouponDate], 
                                    [MaturityDate],[SettlementDate],[AcqDate],[InvestmentNotes],[DoneLot],[DoneVolume],[DonePrice],[DoneAmount],[Tenor],[OrderStatus],[BoardType],[MarketPK],[EntryDealingID],[EntryDealingTime],[UpdateDealingID],[UpdateDealingTime],[ApprovedDealingID],[ApprovedDealingTime],[EntrySettlementID],[EntrySettlementTime],[EntryUsersID],[EntryTime],[ApprovedUsersID],[ApprovedTime],[LastUpdate],
                                    [Notes])
        
                                    Select 0,1,2,@DealingPK,1,0,0,
                                    ValueDate,PeriodPK,InstructionDate,Reference,InstrumentTypePK,TrxType,TrxTypeID, 
                                    CounterpartPK,InstrumentPK,FundPK,FundCashRefPK,OrderPrice,Lot,LotInShare,RangePrice,AcqPrice,Volume, 
                                    Amount,InterestPercent,BreakInterestPercent,AccruedInterest,LastCouponDate,NextCouponDate, 
                                    MaturityDate,SettlementDate,AcqDate,InvestmentNotes,@splitdonelot,@splitdonelot*100,@splitdoneprice,@splitamount,Tenor,'P',1,MarketPK,@EntryDealingID,@EntryDealingTime,@UpdateDealingID,@UpdateDealingTime,@UpdateDealingID,@ApprovedDealingTime,@UpdateDealingID,@ApprovedDealingTime,@EntryUsersID,@EntryTime,@ApprovedUsersID,@ApprovedTime,@LastUpdate,
                                    'Investment Split Add' 
                                    from Investment where InvestmentPK = @InvestmentPK and DealingPK = @PreviousDealingPK and HistoryPK = @HistoryPK and statusDealing  = 1
        
                                    Fetch next From A Into @splitdonelot,@splitdoneprice,@splitamount
                                    END
                                    Close A
                                    Deallocate A 
                                    if (@DoneLot - @TotalSplit) = 0
                                        BEGIN
                                            update investment set statusdealing  = 3, OrderStatus ='R' ,InvestmentNotes = 'Previous Split', UpdateDealingID = @UpdateDealingID,UpdateDealingTime = @UpdateDealingTime,ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime where InvestmentPK = @InvestmentPK  and DealingPK = @PreviousDealingPK and HistoryPK = @HistoryPK and statusDealing  = 1
                                        END
                                        ELSE
                                        BEGIN
                                         if @DoneLot > 0
		BEGIN
			update investment set DoneLot  = DoneLot - @TotalSplit, DoneVolume = (DoneLot - @TotalSplit) * 100, DoneAmount = (DoneLot - @TotalSplit) * DonePrice * 100, OrderStatus ='P' ,				UpdateDealingID = @UpdateDealingID,UpdateDealingTime = @UpdateDealingTime,ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime 
            where InvestmentPK = @InvestmentPK  and	DealingPK = @PreviousDealingPK and HistoryPK = @HistoryPK and statusDealing  = 1
		END                                 
                                      END

if (@DoneAmount - @TotalSplitAmount) = 0
                                        BEGIN
                                            update investment set statusdealing  = 3, OrderStatus ='R' ,InvestmentNotes = 'Previous Split', UpdateDealingID = @UpdateDealingID,UpdateDealingTime = @UpdateDealingTime,ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime where InvestmentPK = @InvestmentPK  and DealingPK = @PreviousDealingPK and HistoryPK = @HistoryPK and statusDealing  = 1
                                        END
                                        ELSE
                                        BEGIN
                                         if @DoneAmount > 0 and isnull(@DoneLot,0) = 0
		BEGIN
			update investment set   DoneAmount = DoneAmount - @TotalSplitAmount, OrderStatus ='P' ,UpdateDealingID = @UpdateDealingID,UpdateDealingTime = @UpdateDealingTime,ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime 
            where InvestmentPK = @InvestmentPK  and	DealingPK = @PreviousDealingPK and HistoryPK = @HistoryPK and statusDealing  = 1
		END
END

                                    update Investment set selectedDealing  = 0
                                     ";
                        }
                        else
                        {
                            cmd.CommandText = "declare @DealingPK int \n Select @DealingPK = isnull(max(DealingPK),0) + 1 From investment  \n  " +
                           "declare @SettlementPK int \n Select @SettlementPK = SettlementPK From investment where   DealingPK = @DealingPK \n " +
                           "if isnull(@SettlementPK,0) = 0 BEGIN  Select @SettlementPK = isnull(max(SettlementPK),0) + 1 From investment END  \n  " +
                           _insertCommand + "[DoneAccruedInterest],[OrderStatus],[EntryDealingID],[EntryDealingTime],[UpdateDealingID],[UpdateDealingTime],[ApprovedDealingID],[ApprovedDealingTime],[EntrySettlementID],[EntrySettlementTime],[EntryUsersID],[EntryTime],[ApprovedUsersID],[ApprovedTime],[LastUpdate],[Notes])" +
                           "Select 0,1,2,@DealingPK,2,@SettlementPK,1," + _paramaterCommand + "isnull(@DoneAccruedInterest,0),'P',@EntryDealingID,@EntryDealingTime,@UpdateDealingID,@UpdateDealingTime,@UpdateDealingID,@ApprovedDealingTime,@UpdateDealingID,@ApprovedDealingTime,@EntryUsersID,@EntryTime,@ApprovedUsersID,@ApprovedTime,@LastUpdate,'Investment Split Add' \n Select @DealingPK PK ";
                            cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                        }
                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@SplitDoneLot1", _investment.DoneLot1);
                        cmd.Parameters.AddWithValue("@SplitDoneLot2", _investment.DoneLot2);
                        cmd.Parameters.AddWithValue("@SplitDoneLot3", _investment.DoneLot3);
                        cmd.Parameters.AddWithValue("@SplitDoneLot4", _investment.DoneLot4);
                        cmd.Parameters.AddWithValue("@SplitDoneLot5", _investment.DoneLot5);
                        cmd.Parameters.AddWithValue("@SplitDonePrice1", _investment.DonePrice1);
                        cmd.Parameters.AddWithValue("@SplitDonePrice2", _investment.DonePrice2);
                        cmd.Parameters.AddWithValue("@SplitDonePrice3", _investment.DonePrice3);
                        cmd.Parameters.AddWithValue("@SplitDonePrice4", _investment.DonePrice4);
                        cmd.Parameters.AddWithValue("@SplitDonePrice5", _investment.DonePrice5);
                        cmd.Parameters.AddWithValue("@EntryUsersID", _investment.EntryUsersID);
                        cmd.Parameters.AddWithValue("@EntryTime", _investment.EntryTime);
                        cmd.Parameters.AddWithValue("@ApprovedUsersID", _investment.ApprovedUsersID);
                        cmd.Parameters.AddWithValue("@ApprovedTime", _investment.ApprovedTime);
                        cmd.Parameters.AddWithValue("@EntryDealingID", _investment.EntryDealingID);
                        cmd.Parameters.AddWithValue("@EntryDealingTime", _investment.EntryDealingTime);
                        cmd.Parameters.AddWithValue("@UpdateDealingID", _investment.UpdateDealingID);
                        cmd.Parameters.AddWithValue("@UpdateDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@ApprovedDealingID", _investment.EntryDealingID);
                        cmd.Parameters.AddWithValue("@ApprovedDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_Add(Investment _investment, bool _havePrivillege)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_havePrivillege)
                        {
                            cmd.CommandText = _insertCommand + "[BankBranchPK],[BankPK],[TaxExpensePercent],[EntryUsersID],[EntryTime],[ApprovedUsersID],[ApprovedTime],[LastUpdate])" +
                                 "Select isnull(max(InvestmentPk),0) + 1,1,@statusInvestment,@DealingPK,1,@SettlementPK,0," + _paramaterCommand + "@BankBranchPK,@BankPK,@TaxExpensePercent,@EntryUsersID,@EntryTime,@ApprovedUsersID,@ApprovedTime,@LastUpdate From Investment";
                            cmd.Parameters.AddWithValue("@ApprovedUsersID", _investment.EntryUsersID);
                            cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
                        }
                        else
                        {
                            cmd.CommandText = _insertCommand + "[BankBranchPK],[BankPK],[TaxExpensePercent],[EntryUsersID],[EntryTime],[LastUpdate])" +
                                "Select isnull(max(InvestmentPk),0) + 1,1,@statusInvestment,@DealingPK,0,@SettlementPK,0," + _paramaterCommand + "@BankBranchPK,@BankPK,@TaxExpensePercent,@EntryUsersID,@EntryTime,@LastUpdate From Investment";
                        }

                        cmd.Parameters.AddWithValue("@BankPK", _investment.BankPK);
                        cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                        if (_investment.InstrumentTypePK == 1)
                        {
                            cmd.Parameters.AddWithValue("@TaxExpensePercent", 0);
                        }
                        else if (_investment.InstrumentTypePK == 5)
                        {
                            cmd.Parameters.AddWithValue("@TaxExpensePercent", 20);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@TaxExpensePercent", 5);
                        }
                        if (_investment.InvestmentTrType == 0 || _investment.InvestmentTrType == null)
                        {
                            cmd.Parameters.AddWithValue("@InvestmentTrType", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@InvestmentTrType", _investment.InvestmentTrType);
                        }

                        if (_investment.BIRate == 0 || _investment.BIRate == null)
                        {
                            cmd.Parameters.AddWithValue("@BIRate", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                        }

                        if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                        {
                            cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                        }

                        if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                        {
                            cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                        }

                        if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                        {
                            cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                        }

                        if (_investment.Revision == 0 || _investment.Revision == null)
                        {
                            cmd.Parameters.AddWithValue("@Revision", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                        }

                        if (_investment.OtherInvestmentStyle == "" || _investment.OtherInvestmentStyle == null)
                        {
                            cmd.Parameters.AddWithValue("@OtherInvestmentStyle", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                        }
                        if (_investment.OtherInvestmentObjective == "" || _investment.OtherInvestmentObjective == null)
                        {
                            cmd.Parameters.AddWithValue("@OtherInvestmentObjective", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                        }
                        if (_investment.OtherRevision == "" || _investment.OtherRevision == null)
                        {
                            cmd.Parameters.AddWithValue("@OtherRevision", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);
                        }
                        //cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                        //cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                        //cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);

                        cmd.Parameters.AddWithValue("@statusInvestment", _havePrivillege ? 2 : 1);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                        cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                        cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                        cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                        cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                        cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                        cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                        cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                        cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                        cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                        cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                        cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                        cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                        cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                        cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                        cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                        cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);


                        if (_investment.BitBreakable == null)
                        {
                            cmd.Parameters.AddWithValue("@BitBreakable", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                        }

                        if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                        {
                            cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                        }

                        if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                        {
                            cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                        }

                        if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                        {
                            cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                        }


                        if (_investment.SettledDate == "" || _investment.SettledDate == null)
                        {
                            cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                        }
                        if (_investment.InvestmentNotes == "" || _investment.InvestmentNotes == null)
                        {
                            cmd.Parameters.AddWithValue("@InvestmentNotes", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                        }
                        cmd.Parameters.AddWithValue("@DoneLot", _investment.Lot);
                        cmd.Parameters.AddWithValue("@DoneVolume", _investment.Volume);
                        cmd.Parameters.AddWithValue("@DonePrice", _investment.OrderPrice);
                        if (_investment.InstrumentTypePK == 2 || _investment.InstrumentTypePK == 3)
                        {
                            cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@DoneAmount", _investment.Amount);
                        }
                        if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                        {
                            cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                        }

                        cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                        cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                        cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                        cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                        cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                        cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                        cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                        cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                        cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                        cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                        cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                        cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                        cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                        cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                        cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                        cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                        cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                        cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                        cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                        //if (_investment.InstrumentTypePK == 2 || _investment.InstrumentTypePK == 5)
                        //{
                        //    cmd.Parameters.AddWithValue("@TotalAmount", _investment.Amount);
                        //}
                        //else
                        //{
                        cmd.Parameters.AddWithValue("@TotalAmount", _investment.Amount);
                        //}

                        cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                        cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                        cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                        cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                        cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                        if (_investment.AcqDate == "" || _investment.AcqDate == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                        cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                        if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                        cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                        if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                        cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                        if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                        cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                        if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                        cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                        if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                        cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                        if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                        cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                        if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                        cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                        if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                        }
                        cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                        cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                        if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                        }
                        if (_investment.Category == "" || _investment.Category == null)
                        {
                            cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@Category", _investment.Category);
                        }


                        if (_investment.TrxBuy == 0)
                        {
                            cmd.Parameters.AddWithValue("@TrxBuy", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@TrxBuy", _investment.TrxBuy);
                        }

                        if (_investment.TrxBuyType == "" || _investment.TrxBuyType == null)
                        {
                            cmd.Parameters.AddWithValue("@TrxBuyType", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@TrxBuyType", _investment.TrxBuyType);
                        }


                        if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                        {
                            cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                        }

                        if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                        {
                            cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                        }

                        if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                        {
                            cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                        }

                        if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                        {
                            cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                        }

                        if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                        {
                            cmd.Parameters.AddWithValue("@PriceMode", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                        }

                        if (_investment.BitIsAmortized == null)
                        {
                            cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                        }


                        if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                        {
                            cmd.Parameters.AddWithValue("@YieldPercent", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                        }

                        if (_investment.BitIsRounding == null)
                        {
                            cmd.Parameters.AddWithValue("@BitIsRounding", false);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                        }

                        if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                        {
                            cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                        }

                        if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                        {
                            cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                        }


                        if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                        {
                            cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                        }

                        if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                        {
                            cmd.Parameters.AddWithValue("@StatutoryType", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                        }

                        cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);

                        if (_investment.CPSafekeepingAccNumber == null)
                        {
                            cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                        }
                        if (_investment.PlaceOfSettlement == null)
                        {
                            cmd.Parameters.AddWithValue("@PlaceOfSettlement", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                        }
                        if (_investment.FundSafekeepingAccountNumber == null)
                        {
                            cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                        }

                        if (_investment.SecurityCodeType == 0 || _investment.SecurityCodeType == null)
                        {
                            cmd.Parameters.AddWithValue("@SecurityCodeType", 0);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                        }
                        if (_investment.BitHTM == null)
                        {
                            cmd.Parameters.AddWithValue("@BitHTM", false);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                        }

                        if (_investment.BitRollOverInterest == null)
                        {
                            cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                        }

                       

                        cmd.Parameters.AddWithValue("@EntryUsersID", _investment.EntryUsersID);
                        cmd.Parameters.AddWithValue("@EntryTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                        //

                        cmd.ExecuteNonQuery();
                        return _host.Get_LastPKByLastUpate(_dateTimeNow, "Investment");
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_Update(Investment _investment, bool _havePrivillege)
        {
            try
            {
                int _newHisPK;
                int status = _investment.StatusInvestment;
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    if (_havePrivillege)
                    {
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = _updateCommand + @"ApprovedUsersID=@ApprovedUsersID,
                                    ApprovedTime=@ApprovedTime,UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@lastUpdate
                                    where InvestmentPK = @PK and historyPK = @HistoryPK";

                            cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                            cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                            cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                            cmd.Parameters.AddWithValue("@StatusInvestment", 2);
                            cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                            cmd.Parameters.AddWithValue("@StatusDealing", 1);
                            cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                            cmd.Parameters.AddWithValue("@StatusSettlement", 0);
                            cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                            cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                            cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                            cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                            cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                            cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                            cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                            cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                            cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                            cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                            cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                            cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                            cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                            cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                            cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                            cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                            cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                            cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                            cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                            if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                            {
                                cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                            }

                            if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                            {
                                cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                            }

                            if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                            {
                                cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                            }
                            if (_investment.InvestmentTrType == 0 || _investment.InvestmentTrType == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentTrType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentTrType", _investment.InvestmentTrType);
                            }

                            if (_investment.SettledDate == "" || _investment.SettledDate == null)
                            {
                                cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                            }
                            cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                            cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                            cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                            cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                            cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                            cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                            cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                            cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                            cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                            cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                            cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                            cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                            cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                            cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                            cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                            cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                            cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                            cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                            cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                            cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                            cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                            cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                            cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                            cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                            if (_investment.AcqDate == "" || _investment.AcqDate == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                            cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                            if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                            cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                            if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                            cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                            if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                            cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                            if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                            cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                            if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                            cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                            if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                            cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                            if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                            cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                            if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                            cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                            if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                            }
                            if (_investment.Category == "" || _investment.Category == null)
                            {
                                cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@Category", _investment.Category);
                            }

                            if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                            {
                                cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                            }

                            if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                            {
                                cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                            }

                            if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                            {
                                cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                            }
                            if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                            {
                                cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                            }

                            if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                            {
                                cmd.Parameters.AddWithValue("@PriceMode", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                            }

                            if (_investment.BitIsAmortized == null)
                            {
                                cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                            }

                            if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                            {
                                cmd.Parameters.AddWithValue("@YieldPercent", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                            }

                            if (_investment.BitIsRounding == null)
                            {
                                cmd.Parameters.AddWithValue("@BitIsRounding", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                            }

                            if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                            {
                                cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                            }

                            if ( _investment.BitBreakable == null)
                            {
                                cmd.Parameters.AddWithValue("@BitBreakable", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                            }

                            if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                            {
                                cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                            }

                            if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                            {
                                cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                            }

                            if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                            {
                                cmd.Parameters.AddWithValue("@StatutoryType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                            }

                            cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);

                            if (_investment.CPSafekeepingAccNumber == null)
                            {
                                cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", "");
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                            }
                            if (_investment.PlaceOfSettlement == null)
                            {
                                cmd.Parameters.AddWithValue("@PlaceOfSettlement", "");
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                            }
                            if (_investment.FundSafekeepingAccountNumber == null)
                            {
                                cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", "");
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                            }

                            if (_investment.SecurityCodeType == 0 || _investment.SecurityCodeType == null)
                            {
                                cmd.Parameters.AddWithValue("@SecurityCodeType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                            }
                            if (_investment.BitHTM == null)
                            {
                                cmd.Parameters.AddWithValue("@BitHTM", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                            }
                            if (_investment.BitRollOverInterest == null)
                            {
                                cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                            }
                            if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                            {
                                cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                            }

                            if (_investment.BIRate == 0 || _investment.BIRate == null)
                            {
                                cmd.Parameters.AddWithValue("@BIRate", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                            }

                            if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                            }

                            if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                            }

                            if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                            }

                            if (_investment.Revision == 0 || _investment.Revision == null)
                            {
                                cmd.Parameters.AddWithValue("@Revision", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                            }

                            cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                            cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                            cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);

                            cmd.Parameters.AddWithValue("@UpdateUsersID", _investment.EntryUsersID);
                            cmd.Parameters.AddWithValue("@Updatetime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@ApprovedUsersID", _investment.EntryUsersID);
                            cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@lastupdate", _dateTimeNow);
                            cmd.ExecuteNonQuery();
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = "Update Investment set statusInvestment= 3,VoidUsersID=@VoidUsersID,VoidTime=@VoidTime,LastUpdate=@LastUpdate where InvestmentPK = @PK and statusInvestment = 4";
                            cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@VoidUsersID", _investment.EntryUsersID);
                            cmd.Parameters.AddWithValue("@VoidTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                            cmd.ExecuteNonQuery();
                        }
                        return 0;
                    }
                    else
                    {
                        if (status == 1)
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = _updateCommand +
                                    "UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@LastUpdate " +
                                    "where InvestmentPK = @PK and historyPK = @HistoryPK";
                                cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                                cmd.Parameters.AddWithValue("@StatusInvestment", 1);
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@StatusDealing", 0);
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@StatusSettlement", 0);
                                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                                cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                }

                                if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                }

                                if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }


                                if (_investment.SettledDate == "" || _investment.SettledDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                }

                                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                                cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                                cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                                cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                                cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                                cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                                cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                                if (_investment.AcqDate == "" || _investment.AcqDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                                cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                                if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                                cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                                if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                                cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                                if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                                cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                                if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                                cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                                if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                                cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                                if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                                cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                                if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                                cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                                if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                                cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                                if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                                }
                                if (_investment.Category == "" || _investment.Category == null)
                                {
                                    cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Category", _investment.Category);
                                }
                                if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                                }

                                if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                                }

                                if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                                }
                                if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                                }

                                if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                                }

                                if (_investment.BitIsAmortized == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                                }

                                if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                                }

                                if (_investment.BitIsRounding == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                                }

                                if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                                }
                                if (_investment.BitBreakable == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                                }

                                if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                                }

                                if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                                }

                                if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                                }

                                cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);

                                if (_investment.CPSafekeepingAccNumber == null)
                                {
                                    cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                                }
                                if (_investment.PlaceOfSettlement == null)
                                {
                                    cmd.Parameters.AddWithValue("@PlaceOfSettlement", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                                }
                                if (_investment.FundSafekeepingAccountNumber == null)
                                {
                                    cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                                }

                                if (_investment.SecurityCodeType == 0 || _investment.SecurityCodeType == null)
                                {
                                    cmd.Parameters.AddWithValue("@SecurityCodeType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                                }
                                if (_investment.BitHTM == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                                }
                                if (_investment.BitRollOverInterest == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                                }
                                if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                                }

                                if (_investment.BIRate == 0 || _investment.BIRate == null)
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                                }

                                if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                                }

                                if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                                }

                                if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                                }

                                if (_investment.Revision == 0 || _investment.Revision == null)
                                {
                                    cmd.Parameters.AddWithValue("@Revision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                                }

                                cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                                cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                                cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);

                                cmd.Parameters.AddWithValue("@UpdateUsersID", _investment.EntryUsersID);
                                cmd.Parameters.AddWithValue("@Updatetime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                                cmd.ExecuteNonQuery();
                            }
                            return 0;
                        }

                        else if (status == 4)
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                if (_investment.InstrumentTypePK == 1)
                                {
                                    cmd.CommandText =
                                    @"Update Investment set MarketPK = @MarketPK,InstrumentPK = @InstrumentPK,OrderPrice=@OrderPrice,DonePrice=@OrderPrice,Lot=@Lot,DoneLot=@Lot,Volume=@Volume,DoneVolume=@Volume,Amount=@Amount,DoneAmount=@Amount,InvestmentNotes=@InvestmentNotes,UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@LastUpdate
                                    where InvestmentPK = @PK and historyPK = @HistoryPK";
                                    cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                    cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                }
                                else if (_investment.InstrumentTypePK == 5)
                                {
                                    cmd.CommandText =
                                    @"Update Investment set MarketPK = @MarketPK,InstrumentPK = @InstrumentPK,Volume=@Amount,DoneVolume=@Amount,Amount=@Amount,DoneAmount=@Amount,InterestPercent=@InterestPercent,MaturityDate=@MaturityDate,UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@LastUpdate
                                    where InvestmentPK = @PK and historyPK = @HistoryPK";
                                    cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }

                                else
                                {
                                    cmd.CommandText =
                                   @"Update Investment set MarketPK = @MarketPK,InstrumentPK = @InstrumentPK,InterestPercent=@InterestPercent,AccruedInterest=@AccruedInterest, 
                                   LastCouponDate=@LastCouponDate,NextCouponDate=@NextCouponDate,MaturityDate=@MaturityDate,SettlementDate=@SettlementDate,IncomeTaxInterestAmount=@IncomeTaxInterestAmount,IncomeTaxGainAmount=@IncomeTaxGainAmount,TotalAmount=@TotalAmount, 
                                   OrderPrice=@OrderPrice,DonePrice=@OrderPrice,Volume=@Volume,DoneVolume=@Volume,Amount=@Amount,DoneAmount=@DoneAmount,
                                   UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@LastUpdate 
                                   where InvestmentPK = @PK and historyPK = @HistoryPK";

                                    cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                    cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                    cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                    cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                    cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                    cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                                    cmd.Parameters.AddWithValue("@TotalAmount", _investment.DoneAmount);
                                                   
                       
                                }

                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@UpdateUsersID", _investment.UpdateUsersID);
                                cmd.Parameters.AddWithValue("@Updatetime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                                cmd.ExecuteNonQuery();
                            }
                            return 0;
                        }
                        else
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                _newHisPK = _host.Get_NewHistoryPK(_investment.InvestmentPK, "Investment");
                                cmd.CommandText = _insertCommand + "[EntryUsersID],[EntryTime],[UpdateUsersID],[UpdateTime],[LastUpdate])" +
                                "Select @PK,@NewHistoryPK,1,@DealingPK,0,@SettlementPK,0," + _paramaterCommand + "EntryUsersID,EntryTime,@UpdateUsersID,@UpdateTime,@LastUpdate  " +
                                "From Investment where InvestmentPK =@PK and historyPK = @HistoryPK ";

                                cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                                cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@NewHistoryPK", _newHisPK);
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                                cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                }

                                if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                }

                                if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }


                                if (_investment.SettledDate == "" || _investment.SettledDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                }
                                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                                cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                                cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                                cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                                cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                                cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                                cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                                if (_investment.AcqDate == "" || _investment.AcqDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                                cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                                if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                                cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                                if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                                cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                                if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                                cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                                if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                                cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                                if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                                cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                                if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                                cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                                if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                                cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                                if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                                cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                                if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                                }
                                if (_investment.Category == "" || _investment.Category == null)
                                {
                                    cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Category", _investment.Category);
                                }
                                if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                                }

                                if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                                }

                                if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                                }
                                if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                                }
                                if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                                }

                                if (_investment.BitIsAmortized == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                                }

                                if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                                }

                                if (_investment.BitIsRounding == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                                }

                                if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                                }
                                if (_investment.BitBreakable == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                                }

                                if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                                }

                                if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                                }

                                if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                                }

                                cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);

                                if (_investment.CPSafekeepingAccNumber == null)
                                {
                                    cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                                }
                                if (_investment.PlaceOfSettlement == null)
                                {
                                    cmd.Parameters.AddWithValue("@PlaceOfSettlement", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                                }
                                if (_investment.FundSafekeepingAccountNumber == null)
                                {
                                    cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                                }

                                if (_investment.SecurityCodeType == 0 || _investment.SecurityCodeType == null)
                                {
                                    cmd.Parameters.AddWithValue("@SecurityCodeType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                                }
                                if (_investment.BitHTM == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                                }
                                if (_investment.BitRollOverInterest == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                                }
                                if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                                }

                                if (_investment.BIRate == 0 || _investment.BIRate == null)
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                                }

                                if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                                }

                                if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                                }

                                if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                                }

                                if (_investment.Revision == 0 || _investment.Revision == null)
                                {
                                    cmd.Parameters.AddWithValue("@Revision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                                }

                                cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                                cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                                cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);

                                cmd.Parameters.AddWithValue("@UpdateUsersID", _investment.EntryUsersID);
                                cmd.Parameters.AddWithValue("@UpdateTime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                                cmd.ExecuteNonQuery();
                            }

                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = "Update Investment set statusInvestment= 4,Notes=@Notes,StatusDealing = 0, " +
                                " lastupdate=@lastupdate where InvestmentPK = @PK and historyPK = @HistoryPK and  statusInvestment= 2 ";
                                cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                                cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                                cmd.ExecuteNonQuery();
                            }
                            return _newHisPK;
                        }
                    }

                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Investment_Approved(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //Insert DonePrice, DoneLot , DoneVolume
                        if (_investment.InstrumentTypePK == 1)
                        {
                            cmd.CommandText = @"declare @DealingPK int \n Select @DealingPK = DealingPK From investment where   InvestmentPK = @PK and historypk = @historyPK \n 
                            if isnull(@DealingPK,0) = 0 BEGIN  Select @DealingPK = isnull(max(DealingPK),0) + 1 From investment END  \n 
                            update Investment set DealingPK = @DealingPK, statusInvestment = 2, statusDealing = 1,InvestmentNotes=InvestmentNotes + ' - ' + @Notes,DonePrice=@OrderPrice,DoneLot=@Lot,DoneVolume=@Lot*100,DoneAmount=@Amount,BoardType = 1,SettlementDate = dbo.FWorkingDay(@ValueDate,3) ,ApprovedUsersID = @ApprovedUsersID,ApprovedTime = @ApprovedTime ,EntryDealingID = @ApprovedUsersID,EntryDealingTime = @ApprovedTime ,LastUpdate=@LastUpdate 
                            where InvestmentPK = @PK and historypk = @historyPK";
                            cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                        }
                        else
                        {
                            cmd.CommandText = @"declare @DealingPK int \n Select @DealingPK = DealingPK From investment where   InvestmentPK = @PK and historypk = @historyPK \n 
                            if isnull(@DealingPK,0) = 0 BEGIN  Select @DealingPK = isnull(max(DealingPK),0) + 1 From investment END  \n  
                            update Investment set DealingPK = @DealingPK, statusInvestment = 2, statusDealing = 1,InvestmentNotes=InvestmentNotes + ' - ' + @Notes,DonePrice=@OrderPrice,DoneLot=@Volume/100,DoneVolume=@Volume,DoneAmount=@Amount,DoneAccruedInterest=@AccruedInterest,ApprovedUsersID = @ApprovedUsersID,ApprovedTime = @ApprovedTime ,EntryDealingID = @ApprovedUsersID,EntryDealingTime = @ApprovedTime ,LastUpdate=@LastUpdate
                            where InvestmentPK = @PK and historypk = @historyPK";
                            cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                            cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                            cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                        }

                        cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                        cmd.Parameters.AddWithValue("@ApprovedUsersID", _investment.ApprovedUsersID);
                        cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                        cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                        if (_investment.InstrumentTypePK == 1)
                        {
                            cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                        }
                        cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Update Investment set statusInvestment= 3,statusDealing = 0,VoidUsersID=@VoidUsersID,VoidTime=@VoidTime,LastUpdate=@LastUpdate where InvestmentPK = @PK and statusInvestment = 4";
                        cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@VoidUsersID", _investment.ApprovedUsersID);
                        cmd.Parameters.AddWithValue("@VoidTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }


                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Investment_Reject(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "update Investment set statusInvestment = 3,statusDealing = 0,InvestmentNotes=InvestmentNotes + ' - ' + @Notes,VoidUsersID = @VoidUsersID,VoidTime = @VoidTime, LastUpdate =@LastUpdate " +
                            "where InvestmentPK = @PK and historypk = @historyPK";
                        cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                        cmd.Parameters.AddWithValue("@VoidUsersID", _investment.VoidUsersID);
                        cmd.Parameters.AddWithValue("@VoidTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Update Investment set statusInvestment= 2,statusDealing=1,LastUpdate=@LastUpdate where InvestmentPK = @PK and statusInvestment = 4";
                        cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public void Investment_AmendReject(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                            update Investment set statusInvestment = 3 ,StatusDealing = case when @DealingPK > 0 then 3 else 0 end
                            ,VoidUsersID = @UsersID,VoidTime = @LastUpdate,LastUpdate = @LastUpdate, InvestmentNotes = 'Reject By Amend'
                            where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK 
                            and HistoryPK = @HistoryPK

                            Update Investment set SelectedInvestment  = 0 
                        ";
                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@UsersID", _investment.UpdateUsersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                 
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_AddAmend(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"


Declare @MaxInvestmentPK int
Declare @MaxDealingPK int

select @MaxInvestmentPK  = max(InvestmentPK) + 1 from investment
Set @MaxInvestmentPK = isnull(@MaxInvestmentPK,1)

select @MaxDealingPK  = max(DealingPK) + 1 from investment
Set @MaxDealingPK = isnull(@MaxDealingPK,1)


INSERT INTO [dbo].[Investment]
           ([InvestmentPK],[DealingPK],[SettlementPK],[HistoryPK]
           ,[StatusInvestment],[StatusDealing],[StatusSettlement],[Notes]
           ,[ValueDate],[MarketPK],[PeriodPK],[Category]
           ,[InstructionDate],[Reference],[InstrumentTypePK],[TrxType]
           ,[TrxTypeID],[CounterpartPK],[InstrumentPK]
           ,[FundPK],[FundCashRefPK],[OrderPrice],[Lot]
           ,[LotInShare],[RangePrice],[AcqPrice],[Volume]
           ,[Amount],[InterestPercent],[BreakInterestPercent],[AccruedInterest],[DoneAccruedInterest],[LastCouponDate]
           ,[NextCouponDate],[MaturityDate],[SettlementDate],[AcqDate]
           ,[InvestmentNotes],[DoneLot],[DoneVolume],[DonePrice]
           ,[DoneAmount],[Tenor],[CommissionPercent],[LevyPercent]
           ,[KPEIPercent],[VATPercent],[WHTPercent],[OTCPercent]
           ,[IncomeTaxSellPercent],[IncomeTaxInterestPercent]
           ,[IncomeTaxGainPercent],[CommissionAmount]
           ,[LevyAmount],[KPEIAmount],[VATAmount],[WHTAmount]
           ,[OTCAmount],[IncomeTaxSellAmount],[IncomeTaxInterestAmount],[IncomeTaxGainAmount]
           ,[TotalAmount],[CurrencyRate],[AcqPrice1]
           ,[AcqDate1],[AcqPrice2]
           ,[AcqDate2],[AcqPrice3]
           ,[AcqDate3],[AcqPrice4]
           ,[AcqDate4],[AcqPrice5]
           ,[AcqDate5],[SettlementMode]
           ,[BoardType],[OrderStatus]
           ,[Posted],[PostedBy],[PostedTime]
           ,[Revised],[RevisedBy]
           ,[RevisedTime],[EntryUsersID]
           ,[EntryTime],[UpdateUsersID]
           ,[UpdateTime],[ApprovedUsersID]
           ,[ApprovedTime],[VoidUsersID]
           ,[VoidTime],[EntryDealingID]
           ,[EntryDealingTime],[UpdateDealingID]
           ,[UpdateDealingTime],[ApprovedDealingID]
           ,[ApprovedDealingTime],[VoidDealingID]
           ,[VoidDealingTime],[EntrySettlementID]
           ,[EntrySettlementTime],[UpdateSettlementID]
           ,[UpdateSettlementTime],[ApprovedSettlementID]
           ,[ApprovedSettlementTime],[VoidSettlementID]
           ,[VoidSettlementTime],[DBUserID]
           ,[DBTerminalID],[LastUpdate]
           ,[LastUpdateDB],[SelectedInvestment]
           ,[SelectedDealing],[SelectedSettlement]
           ,[BankBranchPK],[BankPK]
           ,[AcqVolume],[AcqVolume1]
           ,[AcqVolume2],[AcqVolume3]
           ,[AcqVolume4],[AcqVolume5]
           ,[AcqPrice6],[AcqVolume6]
           ,[AcqDate6],[AcqPrice7]
           ,[AcqVolume7],[AcqDate7]
           ,[AcqPrice8],[AcqVolume8] 
           ,[AcqDate8],[AcqPrice9]
           ,[AcqVolume9],[AcqDate9]
           ,[TaxExpensePercent],[TrxBuy]
           ,[TrxBuyType],[YieldPercent],[BitIsRounding],[AccruedHoldingAmount],[CrossFundFromPK],[BitForeignTrx],[CPSafekeepingAccNumber],[PlaceOfSettlement],[FundSafekeepingAccountNumber],[SecurityCodeType]
,[BIRate],[InvestmentStrategy],[InvestmentStyle],[InvestmentObjective],[Revision],[OtherInvestmentStyle],[OtherInvestmentObjective],[OtherRevision])
Select 
@MaxInvestmentPK,case when CounterpartPK = 0 then 0 else @MaxDealingPK end,0,1
           ,case when CounterpartPK = 0 then 1 else 2 end,case when CounterpartPK = 0 then 0 else 1 end,0,'Input From Amend'
           ,[ValueDate],[MarketPK],[PeriodPK],[Category]
           ,[InstructionDate],[Reference],[InstrumentTypePK],[TrxType]
           ,[TrxTypeID],[CounterpartPK],[InstrumentPK]
           ,[FundPK],[FundCashRefPK],@OrderPrice,@Lot
           ,@LotInShare,@RangePrice,[AcqPrice],@Volume
           ,@Amount,[InterestPercent],[BreakInterestPercent],[AccruedInterest],[DoneAccruedInterest],[LastCouponDate]
           ,[NextCouponDate],[MaturityDate],[SettlementDate],[AcqDate]
           ,@InvestmentNotes,@Lot,@Volume,@OrderPrice
           ,@Amount,[Tenor],[CommissionPercent],[LevyPercent]
           ,[KPEIPercent],[VATPercent],[WHTPercent],[OTCPercent]
           ,[IncomeTaxSellPercent],[IncomeTaxInterestPercent]
           ,[IncomeTaxGainPercent],[CommissionAmount]
           ,[LevyAmount],[KPEIAmount],[VATAmount],[WHTAmount]
           ,[OTCAmount],[IncomeTaxSellAmount],[IncomeTaxInterestAmount],[IncomeTaxGainAmount]
           ,[TotalAmount],[CurrencyRate],[AcqPrice1]
           ,[AcqDate1],[AcqPrice2]
           ,[AcqDate2],[AcqPrice3]
           ,[AcqDate3],[AcqPrice4]
           ,[AcqDate4],[AcqPrice5]
           ,[AcqDate5],[SettlementMode]
           ,[BoardType],case when CounterpartPK = 0 then null else 'O' end
           ,[Posted],[PostedBy],[PostedTime]
           ,[Revised],[RevisedBy]
           ,[RevisedTime],[EntryUsersID]
           ,[EntryTime],@UsersID
           ,@LastUpdate,''
           ,null,''
           ,null,[EntryDealingID]
           ,[EntryDealingTime],[UpdateDealingID]
           ,[UpdateDealingTime],[ApprovedDealingID]
           ,[ApprovedDealingTime],[VoidDealingID]
           ,[VoidDealingTime],[EntrySettlementID]
           ,[EntrySettlementTime],[UpdateSettlementID]
           ,[UpdateSettlementTime],[ApprovedSettlementID]
           ,[ApprovedSettlementTime],[VoidSettlementID]
           ,[VoidSettlementTime],[DBUserID]
           ,[DBTerminalID],@LastUpdate
           ,[LastUpdateDB],[SelectedInvestment]
           ,[SelectedDealing],[SelectedSettlement]
           ,[BankBranchPK],[BankPK]
           ,[AcqVolume],[AcqVolume1]
           ,[AcqVolume2],[AcqVolume3]
           ,[AcqVolume4],[AcqVolume5]
           ,[AcqPrice6],[AcqVolume6]
           ,[AcqDate6],[AcqPrice7]
           ,[AcqVolume7],[AcqDate7]
           ,[AcqPrice8],[AcqVolume8]
           ,[AcqDate8],[AcqPrice9]
           ,[AcqVolume9],[AcqDate9]
           ,[TaxExpensePercent],[TrxBuy]
           ,[TrxBuyType],[YieldPercent],[BitIsRounding],[AccruedHoldingAmount],[CrossFundFromPK],@BitForeignTrx,[CPSafekeepingAccNumber],[PlaceOfSettlement],[FundSafekeepingAccountNumber],[SecurityCodeType]
,[BIRate],[InvestmentStrategy],[InvestmentStyle],[InvestmentObjective],[Revision],[OtherInvestmentStyle],[OtherInvestmentObjective],[OtherRevision]
From Investment 
where InvestmentPK = @InvestmentPK and HistoryPK = @HistoryPK
and DealingPK = @DealingPK

                        ";
                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@StatusInvestment", _investment.StatusInvestment);
                        cmd.Parameters.AddWithValue("@OrderStatus", _investment.OrderStatusDesc);

                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);

                        cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                        cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                        cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                        cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                        cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                        cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                        cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                        cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);
                        cmd.Parameters.AddWithValue("@UsersID", _investment.UpdateUsersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                        return _host.Get_LastPKByLastUpate(_dateTimeNow, "Investment");
                    }

                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public void Investment_CancelAmend(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                            update Investment set statusInvestment = @StatusInvestment
                            ,StatusDealing = Case when @OrderStatus in ('3.OPEN','5.PARTIAL','2.APPROVED') then 1 else 
                            Case when @OrderStatus ='1.PENDING' then 0  else 2 end  end
                            ,VoidUsersID = '',VoidTime = null, InvestmentNotes = ''
                            where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK 
                            and HistoryPK = @HistoryPK

                            Update Investment set SelectedInvestment  = 0 

                        ";
                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@StatusInvestment", _investment.StatusInvestment);
                        cmd.Parameters.AddWithValue("@OrderStatus", _investment.OrderStatusDesc);
                        cmd.ExecuteNonQuery();
                    }

                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Investment_Void(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"update Investment set statusInvestment = 3,statusDealing = 0,LastUpdate=@LastUpdate,VoidUsersID = @VoidUsersID,VoidTime = @VoidTime 
                            where InvestmentPK = @PK and historypk = @historyPK";
                        cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@VoidUsersID", _investment.VoidUsersID);
                        cmd.Parameters.AddWithValue("@VoidTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Investment_ApproveBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"declare @investmentPK int
                                                declare @historyPK int
                                                declare @DealingPK int
                                                declare @Notes nvarchar(500)
                                                declare @OrderPrice numeric(22,8)
                                                declare @Volume numeric(22,0)
                                                declare @Amount numeric(22,0)
                                                declare @AccruedInterest numeric(22,0)

                                                Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = '' and Status = 2   
                                                  Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate)   
                                                Select @Time,@PermissionID,'Investment',InvestmentPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1  

                                                DECLARE A CURSOR FOR 
	                                                  Select InvestmentPK,DealingPK,HistoryPK,InvestmentNotes,OrderPrice,Volume,Amount,AccruedInterest From investment 
	                                                  where statusInvestment = 1 and ValueDate between @datefrom and @datefrom and Selected = 1
	
                                                Open A
                                                Fetch Next From A
                                                Into @investmentPK,@DealingPK,@historyPK,@Notes,@OrderPrice,@Volume,@Amount,@AccruedInterest

                                                While @@FETCH_STATUS = 0
                                                BEGIN
                                                Select @DealingPK = max(DealingPK) + 1 From investment
                                                if isnull(@DealingPK,0) = 0 BEGIN  Select @DealingPK = isnull(max(DealingPK),0) + 1 From investment END  
                                                update Investment set DealingPK = @DealingPK, statusInvestment = 2, statusDealing = 1,InvestmentNotes=@Notes,DonePrice=@OrderPrice,DoneLot=@Volume/100,DoneVolume=@Volume,DoneAmount=@Amount,DoneAccruedInterest=@AccruedInterest,ApprovedUsersID = @ApprovedUsersID,ApprovedTime = @ApprovedTime ,EntryDealingID = @ApprovedUsersID,EntryDealingTime = @ApprovedTime ,LastUpdate=@LastUpdate
                                                where InvestmentPK = @InvestmentPK
                                                Update Investment set statusInvestment= 3,VoidUsersID=@UsersID,VoidTime=@Time,LastUpdate=@Time  where InvestmentPK in (Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 4 and Selected  = 1)
                                                Fetch next From A Into @investmentPK,@DealingPK,@historyPK,@Notes,@OrderPrice,@Volume,@Amount,@AccruedInterest
                                                END
                                                Close A
                                                Deallocate A ";


                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            //cmd.CommandText = "Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n " +
                            //    " \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n " +
                            //    "Select @Time,@PermissionID,'Investment',InvestmentPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1 " +
                            //    "\n update Investment set statusInvestment = 2,ApprovedUsersID = @UsersID,ApprovedTime = @Time,LastUpdate=@Time where InvestmentPK in ( Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1 and InstrumentTypePK = @Type ) \n " +
                            //    "Update Investment set statusInvestment= 3,VoidUsersID=@UsersID,VoidTime=@Time,LastUpdate=@Time  where InvestmentPK in (Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 4 and Selected  = 1 and InstrumentTypePK = @Type) " +
                            //    "";
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"declare @investmentPK int
                                                declare @historyPK int
                                                declare @DealingPK int
                                                Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = '' and Status = 2   
                                                  Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate)   
                                                Select @Time,@PermissionID,'Investment',InvestmentPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1  

                                                DECLARE A CURSOR FOR 
	                                                  Select InvestmentPK,DealingPK,HistoryPK From investment 
	                                                  where statusInvestment = 1 and ValueDate between @datefrom and @datefrom and Selected = 1
	
                                                Open A
                                                Fetch Next From A
                                                Into @investmentPK,@DealingPK,@historyPK

                                                While @@FETCH_STATUS = 0
                                                BEGIN
                                                Select @DealingPK = DealingPK From investment where   InvestmentPK = @investmentPK and historypk = @historyPK  
                                                if isnull(@DealingPK,0) = 0 BEGIN  Select @DealingPK = isnull(max(DealingPK),0) + 1 From investment END  
                                                update Investment set DealingPK = @DealingPK, statusInvestment = 2, statusDealing = 1,ApprovedUsersID = @UsersID,ApprovedTime = @Time ,LastUpdate=@Time   
                                                where InvestmentPK in ( Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1 and InstrumentTypePK = @Type)
                                                Update Investment set statusInvestment= 3,VoidUsersID=@UsersID,VoidTime=@Time,LastUpdate=@Time  where InvestmentPK in (Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 4 and Selected  = 1 and InstrumentTypePK = @Type)
                                                Fetch next From A Into @investmentPK,@DealingPK,@historyPK
                                                END
                                                Close A
                                                Deallocate A ";

                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }

                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@ApprovedUsersID", _usersID);
                        cmd.Parameters.AddWithValue("@ApprovedTime", _datetimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);

                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Investment_RejectBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {

                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                          \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                         Select @Time,@PermissionID,'Investment',InvestmentPK,1,'Reject by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1 
                                         \n update Investment set statusInvestment = 3,selected = 0,VoidUsersID = @UsersID,VoidTime = @Time,LastUpdate=@Time where InvestmentPK in ( Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1 ) \n 
                                         Update Investment set statusInvestment= 2  where InvestmentPK in (Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 4 and Selected  = 1) ";
                                         ;
                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                          \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                         Select @Time,@PermissionID,'Investment',InvestmentPK,1,'Reject by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1 
                                         \n update Investment set statusInvestment = 3,selected = 0,VoidUsersID = @UsersID,VoidTime = @Time,LastUpdate=@Time where InvestmentPK in ( Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and Selected  = 1 and InstrumentTypePK = @Type) \n 
                                         Update Investment set statusInvestment= 2  where InvestmentPK in (Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 4 and Selected  = 1  and InstrumentTypePK = @Type) "
                                         ;
                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }

                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Investment_VoidBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {

                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                               \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                              Select @Time,@PermissionID,'Investment',InvestmentPK,1,'Void by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 2  and Selected  = 1 
                                              \n update Investment set statusInvestment = 3,selected = 0,VoidUsersID = @UsersID,VoidTime = @Time,LastUpdate=@Time where InvestmentPK in ( Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 2 and Selected  = 1 ) \n "
                                              ;
                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                               \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                              Select @Time,@PermissionID,'Investment',InvestmentPK,1,'Void by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 2  and Selected  = 1 and InstrumentTypePK = @Type 
                                              \n update Investment set statusInvestment = 3,selected = 0,VoidUsersID = @UsersID,VoidTime = @Time,LastUpdate=@Time where InvestmentPK in ( Select InvestmentPK from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 2 and Selected  = 1 and InstrumentTypePK = @Type) \n "
                                              ;
                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }
                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        //INVESTMENT DATA

        public List<Investment> Get_DataInvestmentByDateFromTo(int _status, DateTime _dateFrom, DateTime _dateTo)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInstrumentType = "";

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,
                             I.CurrencyPK,C.ID CurrencyID ,M.ID MarketID,TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join    
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'    left join 
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where   TP.ValueDate between @DateFrom and @DateTo  and TP.statusInvestment = 1  and (TP.StatusDealing = 0 and TP.InvestmentPK <> 0) order by RefNo ";
                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,
                             I.CurrencyPK,C.ID CurrencyID ,M.ID MarketID,TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'   left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.ValueDate between @DateFrom and @DateTo  and TP.statusInvestment = 2  and (TP.StatusDealing not in (3,4)) and (TP.StatusSettlement not in (3,4)) and TP.InvestmentPK <> 0 order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID + ' | ' + isnull(OBB.BankDescription,'') InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,
                             I.CurrencyPK,C.ID CurrencyID,I.BankPK,M.ID MarketID,TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join    
                             OMSBridgingBankBranch OBB on TP.BankBranchPK = OBB.OMSBridgingBankBranchPK left join 
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where   TP.ValueDate between @DateFrom and @DateTo  and TP.statusInvestment in (1,2,3,4) and TP.InvestmentPK <> 0 order by RefNo ";

                        }

                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Investment> Get_DataInvestmentByDateFromToAndInstrumentType(int _status, DateTime _dateFrom, DateTime _dateTo, int _instrumentType, string _fundID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInstrumentType = "";
                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_instrumentType == 2)
                        {
                            _paramInstrumentType = "and TP.InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and TP.InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,
                             I.CurrencyPK,C.ID CurrencyID ,M.ID MarketID,DoneVolume/TP.LotInShare LotReksadana,TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join    
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'    left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where   TP.ValueDate between @DateFrom and @DateTo " + _paramFund + _paramInstrumentType + " and TP.statusInvestment = 1  and (TP.StatusDealing = 0 and TP.InvestmentPK <> 0) order by RefNo ";
                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,
                             I.CurrencyPK,C.ID CurrencyID ,M.ID MarketID,DoneVolume/TP.LotInShare LotReksadana,TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'   left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.ValueDate between @DateFrom and @DateTo " + _paramFund + _paramInstrumentType + " and TP.statusInvestment = 2  and (TP.StatusDealing not in (3,4)) and (TP.StatusSettlement not in (3,4)) and TP.InvestmentPK <> 0 order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" 
                            
                            select case when TP.statusInvestment=1 then 'PENDING'  
                            else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) 
                            then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 
                            then 'APPROVED' else Case when TP.statusInvestment = 3 
                            then 'VOID' else 'WAITING' END END END END StatusDesc,  
                            case when TP.OrderStatus  = 'O' then 'OPEN' 
                            else case when TP.OrderStatus  = 'P' then 'PARTIAL' 
                            else case when TP.OrderStatus  = 'M' then 'MATCH' 
                            else case when TP.OrderStatus  = 'R' then 'REJECT' 
                            else case when TP.StatusInvestment  = 2 then 'APPROVED' 
                            else 'PENDING' END END END END END OrderStatusDesc,   
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo
                            ,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID
                            ,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                            CP.Name CounterpartName,  
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName
                            ,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                            I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,DoneVolume/TP.LotInShare LotReksadana,TP.* from Investment TP left join      
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                            Instrument I on TP.InstrumentPK = I.InstrumentPK 
                            and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                            InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                            MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join 
                            Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join    
                            Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                            where   TP.ValueDate between @DateFrom and @DateTo    
                            and TP.InvestmentNotes  <> 'Reject By Amend' 
                            and TP.statusDealing <> 3
                            and TP.statusSettlement <> 3 " + _paramFund + _paramInstrumentType + @"
                            order by RefNo 
                            ";

                        }

                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        if (_instrumentType != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _instrumentType);
                        }
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        //        public List<Investment> Get_DataInvestmentByDateFromToAndInstrumentTypeBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, int _instrumentType)
        //        {

        //            try
        //            {
        //                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //                {
        //                    DbCon.Open();
        //                    List<Investment> L_Investment = new List<Investment>();
        //                    using (SqlCommand cmd = DbCon.CreateCommand())
        //                    {
        //                        if (_status == 1)
        //                        {
        //                            cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc, " +
        //                            " case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  " +
        //                            " cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                            " CP.Name CounterpartName, " +
        //                            " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                            " I.CurrencyPK,C.ID CurrencyID ,TP.* from Investment TP left join     " +
        //                            " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                            " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     " +
        //                            " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                            " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                            " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                            " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                            " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'    left join  " +
        //                            " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                            " where  TP.TrxType = 1 and  TP.ValueDate between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK and TP.statusInvestment = 1  and (TP.StatusDealing = 0 and TP.InvestmentPK <> 0) order by RefNo ";
        //                        }
        //                        else if (_status == 2)
        //                        {
        //                            cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc, " +
        //                            " case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  " +
        //                            " cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                            " CP.Name CounterpartName, " +
        //                            " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                            " I.CurrencyPK,C.ID CurrencyID ,TP.* from Investment TP left join     " +
        //                            " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                            " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join    " +
        //                            " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                            " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                            " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                            " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                            " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'   left join  " +
        //                            " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                            " where TP.TrxType = 1 and TP.ValueDate between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK and TP.statusInvestment = 2  and (TP.StatusDealing not in (3,4)) and (TP.StatusSettlement not in (3,4)) and TP.InvestmentPK <> 0 order by RefNo ";

        //                        }

        //                        else
        //                        {
        //                            cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc, " +
        //                            " case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  " +
        //                            " cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                            " CP.Name CounterpartName, " +
        //                            " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                            " I.CurrencyPK,C.ID CurrencyID,I.BankPK ,TP.* from Investment TP left join     " +
        //                            " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                            " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join    " +
        //                            " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                            " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                            " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                            " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                            " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  " +
        //                            " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                            " where TP.TrxType = 1 and   TP.ValueDate between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK and TP.statusInvestment in (1,2,3,4) and TP.InvestmentPK <> 0 order by RefNo ";

        //                        }

        //                        cmd.Parameters.AddWithValue("@Status", _status);
        //                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
        //                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
        //                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _instrumentType);

        //                        using (SqlDataReader dr = cmd.ExecuteReader())
        //                        {
        //                            if (dr.HasRows)
        //                            {
        //                                while (dr.Read())
        //                                {
        //                                    L_Investment.Add(setInvestment(dr));
        //                                }
        //                            }
        //                            return L_Investment;
        //                        }
        //                    }
        //                }

        //            }
        //            catch (Exception err)
        //            {
        //                throw err;
        //            }

        //        }

        //        public List<Investment> Get_DataInvestmentByDateFromToAndInstrumentTypeSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, int _instrumentType)
        //        {

        //            try
        //            {
        //                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //                {
        //                    DbCon.Open();
        //                    List<Investment> L_Investment = new List<Investment>();
        //                    using (SqlCommand cmd = DbCon.CreateCommand())
        //                    {
        //                        if (_status == 1)
        //                        {
        //                            cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc, " +
        //                            " case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  " +
        //                            " cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                            " CP.Name CounterpartName, " +
        //                            " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                            " TP.* from Investment TP left join     " +
        //                            " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                            " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                            " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                            " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                            " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                            " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                            " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'    left join  " +
        //                            " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                            " where  TP.TrxType = 2 and  TP.ValueDate between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK and TP.statusInvestment = 1  and (TP.StatusDealing = 0 and TP.InvestmentPK <> 0) order by RefNo ";
        //                        }
        //                        else if (_status == 2)
        //                        {
        //                            cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc, " +
        //                            " case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  " +
        //                            " cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                            " CP.Name CounterpartName, " +
        //                            " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                            " TP.* from Investment TP left join     " +
        //                            " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                            " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                            " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                            " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                            " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                            " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                            " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'   left join  " +
        //                            " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                            " where TP.TrxType = 2 and TP.ValueDate between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK and TP.statusInvestment = 2  and (TP.StatusDealing not in (3,4)) and (TP.StatusSettlement not in (3,4)) and TP.InvestmentPK <> 0 order by RefNo ";

        //                        }

        //                        else if (_status == 3)
        //                        {
        //                            cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc, " +
        //                            " case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  " +
        //                            " cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                            " CP.Name CounterpartName, " +
        //                            " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                            " TP.* from Investment TP left join     " +
        //                            " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                            " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                            " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                            " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                            " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                            " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                            " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  " +
        //                            " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                            " where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK and TP.statusInvestment in (1,2,3,4) and TP.InvestmentPK <> 0 order by RefNo ";

        //                        }
        //                        else
        //                        {
        //                            cmd.CommandText = @"
        //                         Declare @EndDayTrailsPK int
        //
        //                            Select @EndDayTrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where ValueDate = dbo.FWorkingDay(@DateFrom,-1)
        //                            and status = 2
        // 
        // 
        // 
        //                            select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 
        //                            then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc,    
        //                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' 
        //                            else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,     
        //                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,
        //                            CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,    
        //                            CP.Name CounterpartName,    
        //                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,
        //                            MV2.DescOne BoardTypeDesc
        //                            ,InvestmentPK,DealingPK,SettlementPK,SelectedInvestment,TP.HistoryPK,StatusInvestment,StatusDealing,StatusSettlement,TP.Notes,ValueDate
        //                            ,TP.PeriodPK,TP.Category,InstructionDate,Reference,TP.InstrumentTypePK,TrxType,TrxTypeID,TP.CounterpartPK,TP.InstrumentPK,TP.FundPK	
        //                            ,TP.FundCashRefPK,OrderPrice,Lot,TP.LotInShare,RangePrice,AcqPrice,Volume,Amount,TP.InterestPercent,BreakInterestPercent
        //                            ,AccruedInterest,DoneAccruedInterest,TP.LastCouponDate,TP.NextCouponDate,TP.MaturityDate,SettlementDate,AcqDate,InvestmentNotes,DoneLot,DoneVolume
        //                            ,DonePrice,DoneAmount,Tenor,CommissionPercent,LevyPercent,KPEIPercent,VATPercent,WHTPercent,OTCPercent,IncomeTaxSellPercent
        //                            ,IncomeTaxInterestPercent,IncomeTaxGainPercent,CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,IncomeTaxInterestAmount
        //                            ,IncomeTaxGainAmount,TotalAmount,CurrencyRate,AcqPrice1,AcqDate1,AcqPrice2,AcqDate2,AcqPrice3,AcqDate3,AcqPrice4
        //                            ,AcqDate4,AcqPrice5,AcqDate5,SettlementMode,BoardType,OrderStatus,Posted,PostedBy,PostedTime,Revised,RevisedBy,RevisedTime	
        //                            ,TP.EntryUsersID,TP.EntryTime,TP.UpdateUsersID,TP.UpdateTime,TP.ApprovedUsersID,TP.ApprovedTime,TP.VoidUsersID,TP.VoidTime
        //                            ,EntryDealingID,EntryDealingTime,UpdateDealingID,UpdateDealingTime,ApprovedDealingID,ApprovedDealingTime,VoidDealingID,VoidDealingTime
        //                            ,EntrySettlementID,EntrySettlementTime,UpdateSettlementID,UpdateSettlementTime,ApprovedSettlementID,ApprovedSettlementTime,VoidSettlementID,VoidSettlementTime
        //                            ,TP.DBUserID,TP.DBTerminalID,TP.LastUpdate,TP.LastUpdateDB,I.BankPK
        //
        // 
        //                            from Investment TP left join        
        //                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join        
        //                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join        
        //                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join        
        //                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join    
        //                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join    
        //                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join        
        //                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join     
        //                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'       
        //                            where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo 
        //                            and TP.InstrumentTypePK = @InstrumentTypePK and TP.statusInvestment in (1,2,3,4) and TP.InvestmentPK <> 0 
        //  
        //                            UNION ALL
        //
        //                            Select 'VIEW ONLY','','',A.FundID,'','',A.InstrumentID,B.name,'','','','','','','',''
        //                            ,0,0,0,0,0,0,0,0,'',@DateFrom
        //                            ,0,'',@datefrom,'',	3,0,'',0,A.InstrumentPK,A.FundPK
        //                            ,0,0,0,0,'',0,A.Balance,A.Balance,B.InterestPercent,0
        //                            ,0,0,'','','','','','',0,0
        //                            ,0,0,0,0,0,0,0,0,0,0
        //                            ,0,0,0,0,0,0,0,0,0,0
        //                            ,0,0,0,0,'',0,'',0,'',0
        //                            ,'',0,'',0,0,'',0,'','',0,'',''
        //                            ,'','','','','','','','','','','','','','','','','',''
        //                            ,'','','','','','','','','','',0
        //
        //                            from FundPosition A
        //                            left join instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //                            left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
        //                            where TrailsPK = @EndDayTrailsPK
        //                            and A.MaturityDate = @DateFrom and C.Type = 3
        //
        //                            ";
        //                        }

        //                        cmd.Parameters.AddWithValue("@Status", _status);
        //                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
        //                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
        //                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _instrumentType);

        //                        using (SqlDataReader dr = cmd.ExecuteReader())
        //                        {
        //                            if (dr.HasRows)
        //                            {
        //                                while (dr.Read())
        //                                {
        //                                    L_Investment.Add(setInvestment(dr));
        //                                }
        //                            }
        //                            return L_Investment;
        //                        }
        //                    }
        //                }

        //            }
        //            catch (Exception err)
        //            {
        //                throw err;
        //            }

        //        }


        //public List<Investment> Get_DataInvestmentByDateFromTo(int _status, DateTime _dateFrom, DateTime _dateTo)
        //{

        //    try
        //    {
        //        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //        {
        //            DbCon.Open();
        //            List<Investment> L_Investment = new List<Investment>();
        //            using (SqlCommand cmd = DbCon.CreateCommand())
        //            {
        //                if (_status == 1)
        //                {
        //                    cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                    " CP.Name CounterpartName, " +
        //                    " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                    " TP.* from Investment TP left join     " +
        //                    " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                    " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                    " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                    " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                    " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                    " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                    " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  " +
        //                    " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                    " where   TP.ValueDate between @DateFrom and @DateTo and TP.statusInvestment = 1  and (TP.StatusDealing = 0) and TP.InvestmentPK <> 0  order by RefNo ";
        //                }
        //                else if (_status == 2)
        //                {
        //                    cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                    " CP.Name CounterpartName, " +
        //                    " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                    " TP.* from Investment TP left join     " +
        //                    " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                    " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                    " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                    " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                    " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                    " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                    " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  " +
        //                    " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                    " where TP.ValueDate between @DateFrom and @DateTo and TP.statusInvestment = 2  and (TP.StatusDealing not in (3,4)) and (TP.StatusSettlement not in (3,4))  and TP.InvestmentPK <> 0  order by RefNo ";

        //                }

        //                else
        //                {
        //                    cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING' else Case When TP.statusInvestment = 2 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                     " CP.Name CounterpartName, " +
        //                     " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                     " TP.* from Investment TP left join     " +
        //                     " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                     " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                     " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                     " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                     " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                     " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                     " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  " +
        //                    " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                    " where   TP.ValueDate between @DateFrom and @DateTo and TP.statusInvestment in (1,2,3,4) and TP.InvestmentPK <> 0  order by RefNo ";

        //                }

        //                cmd.Parameters.AddWithValue("@Status", _status);
        //                cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
        //                cmd.Parameters.AddWithValue("@DateTo", _dateTo);

        //                using (SqlDataReader dr = cmd.ExecuteReader())
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            L_Investment.Add(setInvestment(dr));
        //                        }
        //                    }
        //                    return L_Investment;
        //                }
        //            }
        //        }

        //    }
        //    catch (Exception err)
        //    {
        //        throw err;
        //    }

        //}



        //DEALING DATA


        public List<Investment> Get_DataDealingByDateFromToAndInstrumentType(int _status, DateTime _dateFrom, DateTime _dateTo, int _instrumentType)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                            CP.Name CounterpartName, 
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                            * from Investment TP left join     
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK 
                            and TP.StatusInvestment = 2  
                            and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) 
                            order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join    
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.InstrumentTypePK = @InstrumentTypePK 
                             and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                           CP.Name CounterpartName, 
                           TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                           * from Investment TP left join   
                           Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                           Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                           Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                           Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                           FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join
                           MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join   
                           MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join 
                           MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                           Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                           where TP.InstrumentTypePK = @InstrumentTypePK 
                           and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing in (1,2,3,4)  order by RefNo ";

                        }

                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _instrumentType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        //public List<Investment> Get_DataDealingByDateFromTo(int _status, DateTime _dateFrom, DateTime _dateTo)
        //{

        //    try
        //    {
        //        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //        {
        //            DbCon.Open();
        //            List<Investment> L_Investment = new List<Investment>();
        //            using (SqlCommand cmd = DbCon.CreateCommand())
        //            {
        //                if (_status == 1 )
        //                {
        //                    cmd.CommandText = " select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                     " CP.Name CounterpartName, " +
        //                     " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                     " * from Investment TP left join     " +
        //                     " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                     " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                     " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                     " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                     " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                     " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                     " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  " +
        //                     " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                     " where  TP.statusInvestment = 2 and TP.ValueDate between @DateFrom and @DateTo " +
        //                     " and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) " +
        //                     " order by RefNo ";
        //                }
        //                else if (_status == 2)
        //                {
        //                    cmd.CommandText = " select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                    " CP.Name CounterpartName, " +
        //                    " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                    " * from Investment TP left join     " +
        //                    " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                    " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                    " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                    " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                    " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                    " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                    " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  " +
        //                    " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                    " where TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

        //                }

        //                else
        //                {
        //                    cmd.CommandText = " select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
        //                   " CP.Name CounterpartName, " +
        //                   " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc," +
        //                   " * from Investment TP left join     " +
        //                   " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
        //                   " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
        //                   " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
        //                   " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
        //                   " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
        //                   " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
        //                   " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  " +
        //                   " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'    " +
        //                   " where TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing in (1,2,3,4)  order by RefNo ";

        //                }


        //                cmd.Parameters.AddWithValue("@status", _status);
        //                cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
        //                cmd.Parameters.AddWithValue("@DateTo", _dateTo);

        //                using (SqlDataReader dr = cmd.ExecuteReader())
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {
        //                            L_Investment.Add(setInvestment(dr));
        //                        }
        //                    }
        //                    return L_Investment;
        //                }
        //            }
        //        }

        //    }
        //    catch (Exception err)
        //    {
        //        throw err;
        //    }

        //}


        public List<Investment> Get_DataDealingByDateFromToByFundByCounterpartEquityBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,
                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,
                            CP.Name CounterpartName, 
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                            * from Investment TP left join     
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join 
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK in ( 1,4,16 ) 
                            and TP.StatusInvestment = 2 " + _paramFund + _paramCounterpart +
                            @"and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) and TP.TrxType = 1 
                            order by I.ID ";
                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join   
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join    
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.InstrumentTypePK in ( 1,4,16 ) and TP.TrxType = 1" + _paramFund + _paramCounterpart +
                             @"and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by I.ID ";
                        }
                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" 
                         select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK) AvgPrice,case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                         case when TP.OrderStatus  = 'O' then '2.OPEN' else case when TP.OrderStatus  = 'P' then '4.PARTIAL' else case when TP.OrderStatus  = 'M' then '3.MATCH'
                         else case when TP.StatusDealing = 1 then '1.PENDING' else case when TP.StatusDealing = 3 then '5.REJECT' else '5.REJECT' END  END END END END  OrderStatusDesc,   
                         cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                         CP.Name CounterpartName,  
                         TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, Z.ID CrossFundFromID,
                         * from Investment TP left join      
                         Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                         Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                         Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                         Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                         FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                         MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                         MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                         MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                         Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join 
                         Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                         where TP.InstrumentTypePK in ( 1,4,16 ) and  TP.TrxType = 1  
                         and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2  
                         and TP.statusDealing in (1,2,3,4) " + _paramFund + _paramCounterpart + @"
                           order by OrderStatusDesc,I.ID ";
                        }

                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public List<Investment> Get_DataDealingByDateFromToByFundByCounterpartEquitySellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,
                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                            CP.Name CounterpartName, 
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                            * from Investment TP left join     
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK in ( 1,4,16 )
                            and TP.StatusInvestment = 2  " + _paramFund + _paramCounterpart +
                           @" and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) and TP.TrxType = 2 
                            order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.InstrumentTypePK in ( 1,4,16 ) and TP.TrxType = 2 " + _paramFund + _paramCounterpart +
                             @"and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" 
                         select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                         case when TP.OrderStatus  = 'O' then '2.OPEN' else case when TP.OrderStatus  = 'P' then '4.PARTIAL' else case when TP.OrderStatus  = 'M' then '3.MATCH'
                         else case when TP.StatusDealing = 1 then '1.PENDING' else case when TP.StatusDealing = 3 then '5.REJECT' else '5.REJECT' END  END END END END  OrderStatusDesc,   
                         cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                         CP.Name CounterpartName,  
                         TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, Z.ID CrossFundFromID,
                         * from Investment TP left join      
                         Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                         Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                         Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                         Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                         FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                         MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                         MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                         MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join  
                         Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                         Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                         where TP.InstrumentTypePK in ( 1,4,16 ) and TP.TrxType = 2   " + _paramFund + _paramCounterpart + @"
                         and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2  
                         and TP.statusDealing in (1,2,3,4)  order by OrderStatusDesc 

                        ";

                        }

                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Investment> Get_DataDealingByDateFromToByFundByCounterpartBondBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                            CP.Name CounterpartName, 
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                            * from Investment TP left join     
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK in (2,3,8,9,13,15)  
                            and TP.StatusInvestment = 2  " + _paramFund + _paramCounterpart +
                           @" and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) and TP.TrxType = 1 
                            order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.InstrumentTypePK in (2,3,8,9,13,15)  and TP.TrxType = 1 " + _paramFund + _paramCounterpart +
                            " and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                        case when TP.OrderStatus  = 'O' then '2.OPEN' else case when TP.OrderStatus  = 'P' then '4.PARTIAL' else case when TP.OrderStatus  = 'M' then '3.MATCH'
                        else case when TP.StatusDealing = 1 then '1.PENDING' else case when TP.StatusDealing = 3 then '5.REJECT' else '5.REJECT' END  END END END END  OrderStatusDesc
                        ,   
                         cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                         CP.Name CounterpartName,  
                         TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID, 
                         * from Investment TP left join      
                         Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                         Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                         InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                         Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                         Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                         FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                         MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                         MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                         MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join   
                         Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join 
                         Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                         where IT.InstrumentTypePK in (2,3,8,9,13,15) and  TP.TrxType = 1   " + _paramFund + _paramCounterpart + @"
                         and TP.ValueDate between @DateFrom and @DateTo 
                        and StatusInvestment = 2
                          and TP.statusDealing in (1,2,3,4)
                         order by OrderStatusDesc ";

                        }

                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Investment> Get_DataDealingByDateFromToByFundByCounterpartBondSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                            CP.Name CounterpartName, 
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                            * from Investment TP left join     
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK in (2,3,8,9,13,15)  
                            and TP.StatusInvestment = 2 " + _paramFund + _paramCounterpart +
                           @" and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) and TP.TrxType = 2 
                            order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.InstrumentTypePK in (2,3,8,9,13,15)  and TP.TrxType = 2 " + _paramFund + _paramCounterpart +
                             "and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                        case when TP.OrderStatus  = 'O' then '2.OPEN' else case when TP.OrderStatus  = 'P' then '4.PARTIAL' else case when TP.OrderStatus  = 'M' then '3.MATCH'
                        else case when TP.StatusDealing = 1 then '1.PENDING' else case when TP.StatusDealing = 3 then '5.REJECT' else '5.REJECT' END  END END END END  OrderStatusDesc
                        ,   
                         cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,Z.ID CrossFundFromID,  
                         CP.Name CounterpartName,  
                         TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                         * from Investment TP left join      
                         Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                         Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                         InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                         Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                         Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                         FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                         MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                         MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                         MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join 
                         Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join   
                         Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                         where IT.InstrumentTypePK in (2,3,8,9,13,15) and  TP.TrxType = 2   " + _paramFund + _paramCounterpart + @"
                         and TP.ValueDate between @DateFrom and @DateTo 
                         and StatusInvestment = 2
                         and TP.statusDealing in (1,2,3,4)
                         order by OrderStatusDesc ";

                        }

                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public string PTPBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {



                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

create table #Text(      
[ResultText] [nvarchar](1000)  NULL  ,
InvestmentPK int,
ValueDate date        
)                        
        
truncate table #Text

insert into #Text     
select 'Transaction Status|TA Reference ID|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|TA Reference No.|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'   ,0,null   
        

insert into #Text
Select  
'NEWM' --1
+ '|' + ''
+ '|' + '1'
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
+ '|' + @CompanyID
+ '|' + isnull(A.BrokerCode,'')
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
+ '|' + cast(isnull(A.TrxType,'') as nvarchar)
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
+ '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) 
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + ''
+ '|' + case when A.CapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' +  cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,2)) as nvarchar)
+ '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(isnull(A.TotalAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end             
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankAccountNo,'')))) end              
+ '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end 
+ '|' + case when A.StatutoryType = 0 then '2' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.StatutoryType,'2')))) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))
+ '|' + '' 
+ case when A.TrxType = 1 then '' else 
+ '|' + case when A.TrxType = 1 then '' else '2' end  
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) end 
+ '|' + case when A.TrxType = 1 then '' else case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end end  
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), AcqDate, 112),'')))) end    
+ '|' + case when A.TrxType = 1 then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(A.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
+ '|' + case when A.TrxType = 1 then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(sum(A.AcqPrice * A.AcqVolume)/100 as decimal(30,2)), '')as nvarchar) end end     
+ '|' + case when A.TrxType = 1 then '' else case when A.CapitalGainAmount = 0 then '' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,@valuedate) , 112),'')))) end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(sum(A.CapitalGainAmount + A.TaxInterestAmount) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxExpensePercent = 0 then '' else cast(isnull(cast(isnull(A.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(sum(A.CapitalGainAmount + A.TaxInterestAmount) as decimal(30,2)),'')as nvarchar) end  end 
End
,A.InvestmentPK, A.ValueDate
from (      
select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK = 3 then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,F.BankAccountNo ,A.PurposeOfTransaction,A.StatutoryType,D.CurrencyPK,A.InvestmentPK,A.InvestmentTrType from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
where    
A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15) " + _paramSettlementPK + @"
and A.statusdealing = 2  and D.CurrencyPk = 1

)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentPK,A.InvestmentTrType
order by A.ValueDate Asc

select * From #Text
";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "\\" + "PTP_Bond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Bond.txt";
                                }


                            }
                            return null;
                        }


                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }



        public List<Investment> Get_DataDealingByDateFromToByFundByCounterpartTimeDepositBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,   
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                            CP.Name CounterpartName,  isnull(C.ID,'') BankID,
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,MV3.DescOne InterestDaysTypeDesc,M.ID MarketID, 
                            * from Investment TP left join      
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join   
                            MasterValue MV3 on TP.InterestDaysType = MV3.Code and MV3.Status = 2 and MV3.ID = 'InterestDaysType'  left join   
                            BankBranch B on CR.BankBranchPK = B.BankBranchPK and B.Status in (1,2) left join
							Bank C on B.BankPK = C.BankPK and C.Status in (1,2) left join
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK = 5  
                            and TP.StatusInvestment = 2  " + _paramFund + _paramCounterpart + @"
                            and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) and TP.TrxType in (1,3)  
                            order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,   
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  isnull(C.ID,'') BankID,
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,MV3.DescOne InterestDaysTypeDesc,M.ID MarketID, 
                             * from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join   
                             MasterValue MV3 on TP.InterestDaysType = MV3.Code and MV3.Status = 2 and MV3.ID = 'InterestDaysType'  left join   
                             BankBranch B on CR.BankBranchPK = B.BankBranchPK and B.Status in (1,2) left join
							 Bank C on B.BankPK = C.BankPK and C.Status in (1,2) left join
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                             where TP.InstrumentTypePK = 5 and TP.TrxType in (1,3) " + _paramFund + _paramCounterpart + @"
                             and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                        case when TP.OrderStatus  = 'O' then '2.OPEN' else case when TP.OrderStatus  = 'P' then '4.PARTIAL' else case when TP.OrderStatus  = 'M' then '3.MATCH'
                        else case when TP.StatusDealing = 1 then '1.PENDING' else case when TP.StatusDealing = 3 then '5.REJECT' else '5.REJECT' END  END END END END  OrderStatusDesc
                        ,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName
                        ,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                         CP.Name CounterpartName,   isnull(C1.ID,'') BankID,
                         TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,MV3.DescOne InterestDaysTypeDesc,M.ID MarketID,Z.ID CrossFundFromID 
                         ,BB.PTPCode +' - '+ B.ID  + ' - ' + BB.ID BankBranchID,BB.PTPCode,* from Investment TP left join      
                         Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                         Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                         Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                         Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                         FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                         MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                         MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                         MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join  
                         MasterValue MV3 on TP.InterestDaysType = MV3.Code and MV3.Status = 2 and MV3.ID = 'InterestDaysType'  left join 
                         BankBranch B1 on CR.BankBranchPK = B1.BankBranchPK and B1.Status in (1,2) left join
						 Bank C1 on B1.BankPK = C1.BankPK and C1.Status in (1,2) left join
                         Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                         Market M on TP.MarketPK = M.MarketPK and M.Status = 2  left join
                         Bank B on TP.BankPK = B.BankPK and B.status in(1,2)   left join
						 BankBranch BB on TP.BankBranchPK = BB.BankBranchPK and BB.Status in(1,2) 
                         where TP.InstrumentTypePK = 5 and  TP.TrxType in (1,3)  
						 " + _paramFund + _paramCounterpart + @"
                         and TP.ValueDate between @DateFrom and @DateTo 
                         and TP.StatusInvestment = 2 and TP.statusDealing in (1,2,3,4)
                         order by OrderStatusDesc ";

                        }

                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Investment> Get_DataDealingByDateFromToByFundByCounterpartTimeDepositSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,  
                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,   
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                            CP.Name CounterpartName,  isnull(C.ID,'') BankID,
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                            * from Investment TP left join      
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join   
                            BankBranch B on CR.BankBranchPK = B.BankBranchPK and B.Status in (1,2) left join
							Bank C on B.BankPK = C.BankPK and C.Status in (1,2) left join
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK = 5  
                            and TP.StatusInvestment = 2 " + _paramFund + _paramCounterpart +
                           @" and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) and TP.TrxType = 2 
                            order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,   
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,   isnull(C.ID,'') BankID,
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             * from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join   
                            BankBranch B on CR.BankBranchPK = B.BankBranchPK and B.Status in (1,2) left join
							Bank C on B.BankPK = C.BankPK and C.Status in (1,2) left join
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                             where TP.InstrumentTypePK = 5 and TP.TrxType = 2 " + _paramFund + _paramCounterpart +
                            @" and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                         case when TP.OrderStatus  = 'O' then '2.OPEN' else case when TP.OrderStatus  = 'P' then '4.PARTIAL' else case when TP.OrderStatus  = 'M' then '3.MATCH'
                         else case when TP.StatusDealing = 1 then '1.PENDING' else case when TP.StatusDealing = 3 then '5.REJECT' else '5.REJECT' END  END END END END  OrderStatusDesc
                         ,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName
                         ,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                         CP.Name CounterpartName,   isnull(C1.ID,'') BankID,
                         TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, Z.ID CrossFundFromID,
                         BB.PTPCode +' - '+ B.ID  + ' - ' + BB.ID BankBranchID,BB.PTPCode,* from Investment TP left join      
                         Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                         Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                         Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                         Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                         FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                         MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                         MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                         MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join 
                         BankBranch B1 on CR.BankBranchPK = B1.BankBranchPK and B1.Status in (1,2) left join
						 Bank C1 on B1.BankPK = C1.BankPK and C1.Status in (1,2) left join
                         Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join 
                         Market M on TP.MarketPK = M.MarketPK and M.Status = 2  left join
						Bank B on TP.BankPK = B.BankPK and B.status in(1,2)   left join
						BankBranch BB on TP.BankBranchPK = BB.BankBranchPK and BB.Status in(1,2) 
                         where TP.InstrumentTypePK = 5 and  TP.TrxType in (2)  
						 " + _paramFund + _paramCounterpart + @"
                         and TP.ValueDate between @DateFrom and @DateTo 
                         and TP.StatusInvestment = 2 and TP.statusDealing in (1,2,3,4)
                         order by OrderStatusDesc";

                        }

                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        //SETTLEMENT DATA

        public List<Investment> Get_DataSettlementByDateFromToAndInstrumentType(int _status, DateTime _dateFrom, DateTime _dateTo, int _instrumentType)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK 
                             and TP.statusSettlement=1    
                             order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK 
                             and TP.statusSettlement = 2 order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                              CP.Name CounterpartName, 
                              TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                              * from Investment TP left join     
                              Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                              Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                              Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                              Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                              FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                              MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                              MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                              MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                              Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                              where TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK = @InstrumentTypePK 
                              and TP.statusSettlement in (1,2,3,4) order by RefNo ";

                        }

                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _instrumentType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Investment> Get_DataSettlementByDateFromTo(int _status, DateTime _dateFrom, DateTime _dateTo)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where  TP.ValueDate  between @DateFrom and @DateTo 
                               and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2  
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo 
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo 
                               and TP.statusSettlement in (1,2,3,4) order by RefNo ";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        //SETTLEMENT

        public List<Investment> Get_DataSettlementByDateFromToByFundByCounterpartEquityBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select ROW_NUMBER() OVER(ORDER BY InvestmentPK ASC) AutoNo,case when F.AveragePriority = 3 then isnull(dbo.FGetAvgPriceByTrxOrderByInvestmentPK(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) else isnull(dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) end AvgPrice,
                               case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.Descone PurposeOfTransactionDesc,MV4.DescOne SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               left join FundAccountingSetup F on TP.FundPK = F.FundPK and F.Status = 2
                               where  TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +
                               @"and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2 and TP.InstrumentTypePK in (1,4,16) and TP.TrxType = 1 
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select ROW_NUMBER() OVER(ORDER BY InvestmentPK ASC) AutoNo,case when F.AveragePriority = 3 then isnull(dbo.FGetAvgPriceByTrxOrderByInvestmentPK(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) else isnull(dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) end AvgPrice,
                               case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.Descone PurposeOfTransactionDesc,MV4.DescOne SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join   
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               left join FundAccountingSetup F on TP.FundPK = F.FundPK and F.Status = 2
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK in (1,4,16) and TP.TrxType = 1  
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select ROW_NUMBER() OVER(ORDER BY InvestmentPK ASC) AutoNo,case when F.AveragePriority = 3 then isnull(dbo.FGetAvgPriceByTrxOrderByInvestmentPK(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) else isnull(dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) end AvgPrice,
                               case when TP.statusSettlement=1 then '1.PENDING' else Case When TP.statusSettlement = 2 then '2.APPROVED' else Case when TP.statusSettlement = 3 then '6.REJECT' else '4.WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               left join FundAccountingSetup F on TP.FundPK = F.FundPK and F.Status = 2
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK in (1,4,16) and TP.TrxType = 1 
                               and TP.statusSettlement in (1,2,3,4) order by StatusDesc ";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);


                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Investment> Get_DataSettlementByDateFromToByFundByCounterpartEquitySellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select ROW_NUMBER() OVER(ORDER BY InvestmentPK ASC) AutoNo,case when F.AveragePriority = 3 then isnull(dbo.FGetAvgPriceByTrxOrderByInvestmentPK(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) else isnull(dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) end AvgPrice,
                               case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               left join FundAccountingSetup F on TP.FundPK = F.FundPK and F.Status = 2
                               where  TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +
                               @"and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2 and TP.InstrumentTypePK in (1,4,16) and TP.TrxType = 2 
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select ROW_NUMBER() OVER(ORDER BY InvestmentPK ASC) AutoNo,case when F.AveragePriority = 3 then isnull(dbo.FGetAvgPriceByTrxOrderByInvestmentPK(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) else isnull(dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) end AvgPrice,
                               case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               left join FundAccountingSetup F on TP.FundPK = F.FundPK and F.Status = 2
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK in (1,4,16)  and TP.TrxType = 2  
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select ROW_NUMBER() OVER(ORDER BY InvestmentPK ASC) AutoNo,case when F.AveragePriority = 3 then isnull(dbo.FGetAvgPriceByTrxOrderByInvestmentPK(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) else isnull(dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK),0) end AvgPrice,
                               case when TP.statusSettlement=1 then '1.PENDING' else Case When TP.statusSettlement = 2 then '2.APPROVED' else Case when TP.statusSettlement = 3 then '6.REJECT' else '4.WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               left join FundAccountingSetup F on TP.FundPK = F.FundPK and F.Status = 2
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK in (1,4,16) and TP.TrxType = 2 
                               and TP.statusSettlement in (1,2,3,4) order by StatusDesc ";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);




                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public List<Investment> Get_DataSettlementByDateFromToByFundByCounterpartBondBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.DescOne PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where  TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +
                              @" and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2 and TP.InstrumentTypePK  in (2,3,8,9,13,15)  and TP.TrxType = 1 
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.DescOne PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +  @"and TP.InstrumentTypePK  in (2,3,8,9,13,15)   and TP.TrxType = 1  
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then '1.PENDING' else Case When TP.statusSettlement = 2 then '2.APPROVED' else Case when TP.statusSettlement = 3 then '6.REJECT' else '4.WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID,MV3.DescOne PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  in (2,3,8,9,13,15)  and TP.TrxType = 1 
                               and TP.statusSettlement in (1,2,3,4) order by StatusDesc ";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Investment> Get_DataSettlementByDateFromToByFundByCounterpartBondSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;

                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.DescOne PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join    
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where  TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +
                               @"and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2 and TP.InstrumentTypePK  in (2,3,8,9,13,15)  and TP.TrxType = 2 
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.DescOne PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  in (2,3,8,9,13,15)   and TP.TrxType = 2  
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then '1.PENDING' else Case When TP.statusSettlement = 2 then '2.APPROVED' else Case when TP.statusSettlement = 3 then '6.REJECT' else '4.WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID,MV3.DescOne PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  in (2,3,8,9,13,15)   and TP.TrxType = 2 
                               and TP.statusSettlement in (1,2,3,4) order by StatusDesc ";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public List<Investment> Get_DataSettlementByDateFromToByFundByCounterpartTimeDepositBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,MV5.Descone InterestDaysTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               MasterValue MV5 on TP.InterestDaysType = MV5.Code and MV5.Status = 2 and MV5.ID = 'InterestDaysType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where  TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +
                               @"and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2 and TP.InstrumentTypePK  = 5 and TP.TrxType in (1,3) 
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,MV5.Descone InterestDaysTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               MasterValue MV5 on TP.InterestDaysType = MV5.Code and MV5.Status = 2 and MV5.ID = 'InterestDaysType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  = 5  and TP.TrxType in (1,3)  
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"select case when TP.statusSettlement=1 then '1.PENDING' else Case When TP.statusSettlement = 2 then '2.APPROVED' else Case when TP.statusSettlement = 3 then '6.REJECT' else '4.WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                                case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,   
                                 CP.Name CounterpartName,  
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc, MV5.Descone InterestDaysTypeDesc,
                               BB.PTPCode +' - '+ B.ID  + ' - ' + BB.ID BankBranchID,BB.PTPCode,* from Investment TP left join      
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join    
                                MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join
                                MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join    
                              MasterValue MV5 on TP.InterestDaysType = MV5.Code and MV5.Status = 2 and MV5.ID = 'InterestDaysType' left join                           
                                Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join   
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2  left join
								Bank B on TP.BankPK = B.BankPK and B.status in(1,2)   left join
								BankBranch BB on TP.BankBranchPK = BB.BankBranchPK and BB.Status in(1,2) 
                               where TP.ValueDate  between @DateFrom and @DateTo "
                               + _paramFund + _paramCounterpart +
                              @" and TP.InstrumentTypePK  = 5  and TP.TrxType in (1,3)  
                               and TP.statusSettlement in (1,2,3,4) order by StatusDesc";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public List<Investment> Get_DataSettlementByDateFromToByFundByCounterpartTimeDepositSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where  TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +
                               @"and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2 and TP.InstrumentTypePK  = 5 and TP.TrxType = 2 
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                               MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join  
                               MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join 
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  = 5  and TP.TrxType = 2  
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"select case when TP.statusSettlement=1 then '1.PENDING' else Case When TP.statusSettlement = 2 then '2.APPROVED' else Case when TP.statusSettlement = 3 then '6.REJECT' else '4.WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                              case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,   
                                 CP.Name CounterpartName,  
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID,MV3.Descone PurposeOfTransactionDesc,MV4.Descone SecurityCodeTypeDesc, 
                               BB.PTPCode +' - '+ B.ID  + ' - ' + BB.ID BankBranchID,BB.PTPCode,* from Investment TP left join      
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join   
                                MasterValue MV3 on TP.PurposeOfTransaction = MV3.Code and MV3.Status = 2 and MV3.ID = 'PurposeOfTransaction'  left join
                                MasterValue MV4 on TP.SecurityCodeType = MV4.Code and MV4.Status = 2 and MV4.ID = 'SecurityCodeType' left join                               
                                Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join   
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2  left join
								Bank B on TP.BankPK = B.BankPK and B.status in(1,2)   left join
								BankBranch BB on TP.BankBranchPK = BB.BankBranchPK and BB.Status in(1,2) 
                               where TP.ValueDate  between @DateFrom and @DateTo  
							   " + _paramFund + _paramCounterpart + @"
							     and TP.InstrumentTypePK  = 5  and TP.TrxType = 2  
                               and TP.statusSettlement in (1,2,3,4) order by StatusDesc ";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }



        public int Dealing_ApproveValidate(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText =

                                          @"if @Itype = 1 Begin if Exists( Select * from Investment where DealingPK = @DealingPK 
                                            and HistoryPK = @HistoryPK and StatusDealing = 1 and ( DonePrice = 0 or DoneLot = 0 or DoneVolume = 0 --or SettlementDate is null 
                                            ) ) 
                                          begin Select 1 Result end else begin select 0 Result  end end 
                                          if @Itype = 2 begin if Exists( Select * from Investment  where DealingPK = @DealingPK and HistoryPK = @HistoryPK and StatusDealing = 1 and ( DonePrice = 0 or DoneVolume = 0 
                                           --or SettlementDate is null 
                                            ) ) 
                                          begin Select 1 Result end else begin select 0 Result end end   
                                          if @Itype = 3 begin if Exists( Select * from Investment where DealingPK = @DealingPK and HistoryPK = @HistoryPK and StatusDealing = 1 and ( DonePrice = 0 or DoneVolume = 0 
                                            --or SettlementDate is null 
                                            ) ) 
                                          begin Select 1 Result end else begin select 0 Result end end  
                                          ";

                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@Itype", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt16(dr["Result"]);
                                }
                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Dealing_Approved(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        if (_investment.InstrumentTypePK == 1 && _investment.CounterpartPK != 0)
                        {

                            cmd.CommandText =
                            @"declare @FundCashRefPK int Select @FundCashRefPK  = FundCashRefPK from FundCashRef where fundPK = @FundPK and Type = 3 and status  = 2 
                            declare @SettlementPK int \n Select @SettlementPK = SettlementPK From investment where   DealingPK = @PK and historypk = @historyPK \n 
                            if isnull(@SettlementPK,0) = 0 BEGIN  Select @SettlementPK = isnull(max(SettlementPK),0) + 1 From investment END  \n  
                            update Investment set SettlementPK = @SettlementPK, statusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',InvestmentNotes=InvestmentNotes + ' - ' + @Notes,FundCashRefPK = @FundCashRefPK,ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime ,EntrySettlementID = @ApprovedDealingID,EntrySettlementTime = @ApprovedDealingTime ,LastUpdate=@LastUpdate 
                            where DealingPK = @PK and historypk = @historyPK and DealingPK =@PK ";

                        }
                        //HITUNG TOTAL AMOUNT BOND & DEPOSITO
                        else
                        {
                            cmd.CommandText =
                            @"declare @FundCashRefPK int Select @FundCashRefPK  = FundCashRefPK from FundCashRef where fundPK = @FundPK and Type = 3 and status  = 2 
                            declare @SettlementPK int \n Select @SettlementPK = SettlementPK From investment where   DealingPK = @PK and historypk = @historyPK \n 
                            if isnull(@SettlementPK,0) = 0 BEGIN  Select @SettlementPK = isnull(max(SettlementPK),0) + 1 From investment END  \n  
                            update Investment set SettlementPK = @SettlementPK, statusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',InvestmentNotes=InvestmentNotes + ' - ' + @Notes,FundCashRefPK = @FundCashRefPK,TotalAmount=@TotalAmount, ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime ,EntrySettlementID = @ApprovedDealingID,EntrySettlementTime = @ApprovedDealingTime ,LastUpdate=@LastUpdate 
                            where DealingPK = @PK and historypk = @historyPK and DealingPK =@PK ";
                            cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                            cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                        }
                        cmd.Parameters.AddWithValue("@PK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                        cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                        cmd.Parameters.AddWithValue("@ApprovedDealingID", _investment.ApprovedDealingID);
                        cmd.Parameters.AddWithValue("@ApprovedDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }



                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Update Investment set statusDealing= 3,statusSettlement = 0,VoidDealingID=@VoidDealingID,VoidDealingTime=@VoidDealingTime,LastUpdate=@LastUpdate where DealingPK = @PK and statusDealing = 4";
                        cmd.Parameters.AddWithValue("@PK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidDealingID);
                        cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }


                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Dealing_Reject(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "update Investment set OrderStatus = 'R' ,statusDealing = 3,statusSettlement=0,InvestmentNotes=InvestmentNotes + ' - ' + @Notes,VoidDealingID = @VoidDealingID,VoidDealingTime = @VoidDealingTime ,LastUpdate=@LastUpdate " +
                            "where  historypk = @historyPK and DealingPK =@DealingPK";

                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                        cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidUsersID);
                        cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Update Investment set statusDealing = 2,statusSettlement =1, LastUpdate=@LastUpdate where DealingPK = @DealingPK and statusDealing = 4";
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Dealing_Void(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "update Investment set OrderStatus = 'R', statusDealing = 3,statusSettlement=0,VoidDealingID = @VoidDealingID,VoidDealingTime = @VoidDealingTime,LastUpdate=@LastUpdate " +
                            "where InvestmentPK = @PK and historypk = @historyPK";
                        cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidDealingID);
                        cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public void Dealing_UnApproved(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "update Investment set StatusDealing = 1,StatusSettlement = 0,VoidDealingID = @VoidDealingID,VoidDealingTime = @VoidDealingTime ,LastUpdate=@LastUpdate " +
                            "where InvestmentPK = @PK and historypk = @historyPK and DealingPK = @DealingPK";
                        cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidDealingID);
                        cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }

                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public void Dealing_ApproveBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {

                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                  \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                 Select @Time,@PermissionID,'Investment',DealingPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 1 and Selected  = 1 
                                 \n update Investment set statusDealing = 2,ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @Time,LastUpdate=@Time where DealingPK in ( Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 1 and Selected  = 1 ) and statusDealing = 1 \n 
                                 Update Investment set statusDealing= 3,VoidDealingID=@VoidDealingID,VoidDealingTime=@Time,LastUpdate=@Time  where DealingPK in (Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 4 and Selected  = 1) and statusDealing = 4 "
                                 ;
                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                 \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                Select @Time,@PermissionID,'Investment',DealingPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 1 and Selected  = 1 
                                \n update Investment set statusDealing = 2,ApprovedDealingID = @UsersID,ApprovedDealingTime = @Time,LastUpdate=@Time where DealingPK in ( Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 1 and Selected  = 1 and InstrumentTypePK = @Type ) \n 
                                Update Investment set statusDealing= 3,VoidDealingID=@UsersID,VoidDealingTime=@Time,LastUpdate=@Time  where DealingPK in (Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 4 and Selected  = 1 and InstrumentTypePK = @Type) "
                                ;
                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }

                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Dealing_RejectBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {

                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                          \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                         Select @Time,@PermissionID,'Investment',DealingPK,1,'Reject by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 1 and Selected  = 1 
                                         \n update Investment set statusDealing = 3,selected = 0,VoidDealingID = @UsersID,VoidTime = @Time,LastUpdate=@Time where DealingPK in ( Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 1 and Selected  = 1 ) \n 
                                         Update Investment set statusDealing= 2  where DealingPK in (Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 4 and Selected  = 1) 
                                         ";
                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n
                                          \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                         Select @Time,@PermissionID,'Investment',DealingPK,1,'Reject by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 1 and Selected  = 1 
                                         \n update Investment set statusDealing = 3,selected = 0,VoidDealingID = @UsersID,VoidDealingTime = @Time,LastUpdate=@Time where DealingPK in ( Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 1 and Selected  = 1 and InstrumentTypePK = @Type) \n 
                                         Update Investment set statusDealing= 2  where DealingPK in (Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 4 and Selected  = 1  and InstrumentTypePK = @Type) 
                                         ";
                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }

                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Dealing_VoidBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {

                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                               \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                              Select @Time,@PermissionID,'Investment',DealingPK,1,'Void by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 2  and Selected  = 1 
                                              \n update Investment set statusDealing = 3,selected = 0,VoidDealingID = @UsersID,VoidDealingTime = @Time,LastUpdate=@Time where DealingPK in ( Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 2 and Selected  = 1 ) \n 
                                              ";
                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                               \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                              Select @Time,@PermissionID,'Investment',DealingPK,1,'Void by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 2  and Selected  = 1 and InstrumentTypePK = @Type 
                                              \n update Investment set statusDealing = 3,selected = 0,VoidDealingID = @UsersID,VoidDealingTime = @Time,LastUpdate=@Time where DealingPK in ( Select DealingPK from Investment where ValueDate between @DateFrom and @DateTo and statusDealing = 2 and Selected  = 1 and InstrumentTypePK = @Type) \n 
                                              ";
                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }
                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        //Settlement

        //public void Settlement_Add(Investment _investment, bool _havePrivillege)
        //{
        //    try
        //    {
        //        DateTime _dateTimeNow = DateTime.Now;
        //        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //        {
        //            DbCon.Open();
        //            using (SqlCommand cmd = DbCon.CreateCommand())
        //            {
        //                if (_havePrivillege)
        //                {
        //                    cmd.CommandText = _insertCommand + "[EntryUsersID],[EntryTime],[ApprovedUsersID],[ApprovedTime],[LastUpdate])" +
        //                         "Select isnull(max(InvestmentPk),0) + 1,1,@status,isnull(max(DealingPK),0) + 1,isnull(max(SettlementPK),0) + 1," + _paramaterCommand + "@EntryUsersID,@EntryTime,@ApprovedUsersID,@ApprovedTime From Investment";
        //                    cmd.Parameters.AddWithValue("@ApprovedUsersID", _investment.EntryUsersID);
        //                    cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
        //                }
        //                else
        //                {
        //                    cmd.CommandText = _insertCommand + "[EntryUsersID],[EntryTime],[LastUpdate])" +
        //                        "Select isnull(max(InvestmentPk),0) + 1,1,@status,isnull(max(DealingPK),0) + 1,isnull(max(SettlementPK),0) + 1," + _paramaterCommand + "@EntryUsersID,@EntryTime From Investment";
        //                }
        //                cmd.Parameters.AddWithValue("@status", _havePrivillege ? 2 : 1);
        //                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
        //                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
        //                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
        //                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
        //                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
        //                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
        //                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
        //                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
        //                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
        //                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
        //                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
        //                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
        //                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
        //                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
        //                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
        //                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
        //                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
        //                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
        //                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
        //                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
        //                cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
        //                cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
        //                cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
        //                cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
        //                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
        //                cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
        //                cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
        //                cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
        //                cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
        //                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
        //                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
        //                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
        //                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
        //                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
        //                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
        //                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
        //                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
        //                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
        //                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
        //                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
        //                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
        //                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
        //                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
        //                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
        //                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
        //                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
        //                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
        //                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
        //                cmd.Parameters.AddWithValue("@EntryUsersID", _investment.EntryUsersID);
        //                cmd.Parameters.AddWithValue("@EntryTime", _dateTimeNow);
        //                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

        //                cmd.ExecuteNonQuery();
        //            }
        //        }

        //    }
        //    catch (Exception err)
        //    {
        //        throw err;
        //    }

        //}


        

        public int Settlement_ApproveValidate(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" declare @CurrencyPK int 
                          select @CurrencyPK = currencyPK from Instrument where InstrumentPK = @InstrumentPK \n 
                          if @currencyPK <> 1 Begin if Exists( Select * from Investment where SettlementPK = @SettlementPK and HistoryPK = @HistoryPK and StatusSettlement = 1 and ( CurrencyRate = 0 or CurrencyRate is null  ) )   
                          begin Select 1 Result end else begin select 0 Result  end end \n 
                          else  
                          if @Itype = 1 Begin if Exists( Select * from Investment where SettlementPK = @SettlementPK and HistoryPK = @HistoryPK and StatusSettlement = 1 and ( CounterpartPK = 0  ) )   
                          begin Select 1 Result end else begin select 0 Result  end end  \n 
                          if @Itype = 2 begin if Exists( Select * from Investment  where SettlementPK = @SettlementPK and HistoryPK = @HistoryPK and StatusSettlement = 1 and ( CounterpartPK = 0 ) )   
                          begin Select 1 Result end else begin select 0 Result end end  \n 
                          if @Itype = 3 begin if Exists( Select * from Investment where SettlementPK = @SettlementPK and HistoryPK = @HistoryPK and StatusSettlement = 1 and ( CounterpartPK = 0 ) )   
                          begin Select 1 Result end else begin select 0 Result end end ";

                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                        cmd.Parameters.AddWithValue("@Itype", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt16(dr["Result"]);
                                }
                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Settlement_Approved(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = " " +
                            "update Investment set statusSettlement = 2,InvestmentNotes=InvestmentNotes + ' - ' + @Notes,ApprovedSettlementID = @ApprovedSettlementID,ApprovedSettlementTime = @ApprovedSettlementTime, lastupdate=@lastupdate " +
                            "where settlementPK = @PK and historypk = @historyPK";
                        cmd.Parameters.AddWithValue("@PK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@ApprovedSettlementID", _investment.ApprovedSettlementID);
                        cmd.Parameters.AddWithValue("@ApprovedSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Update Investment set statusSettlement= 3,VoidSettlementID=@VoidSettlementID,VoidSettlementTime=@VoidSettlementTime, lastupdate=@lastupdate where SettlementPK = @PK and statusSettlement = 4";
                        cmd.Parameters.AddWithValue("@PK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidSettlementID);
                        cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Settlement_Reject(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "update Investment set statusSettlement = 3,InvestmentNotes=InvestmentNotes + ' - ' + @Notes,VoidSettlementID = @VoidSettlementID,VoidSettlementTime = @VoidSettlementTime ,LastUpdate=@LastUpdate " +
                            "where  historypk = @historyPK and SettlementPK =@SettlementPK";

                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                        cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidUsersID);
                        cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Update Investment set statusSettlement = 2, LastUpdate=@LastUpdate where SettlementPK = @SettlementPK and statusSettlement = 4";
                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Settlement_Void(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "update Investment set statusSettlement = 3,VoidSettlementID = @VoidSettlementID,VoidSettlementTime = @VoidSettlementTime, lastupdate=@lastupdate " +
                            "where SettlementPK = @PK and historypk = @historyPK";
                        cmd.Parameters.AddWithValue("@PK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidSettlementID);
                        cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Settlement_UnApproved(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "update Investment set StatusSettlement = 1,VoidSettlementID = @VoidSettlementID,VoidSettlementTime = @VoidSettlementTime ,LastUpdate=@LastUpdate " +
                            "where InvestmentPK = @PK and historypk = @historyPK and SettlementPK = @SettlementPK";
                        cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@historyPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidSettlementID);
                        cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }

                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        //AREA LAIN-LAIN dimulai dari sini ( untuk function diluar standart )

        public InvestmentGetInterest Instrument_GetBondInterest(Investment _investment)
        {

            try
            {
                InvestmentGetInterest M = new InvestmentGetInterest();
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText =

                            @" 
                            Declare @Rate numeric(18,6)
                            Declare @Days int
                            Declare @DivDays int
                            Declare @InterestPaymentType int
                            Declare @Amount numeric (22,4)
                            Declare @InterestDaysType int
                            Declare @Accr numeric(22,8)

                            SELECT         
                            @InterestDaysType = InterestDaysType, @Rate = InterestPercent, @InterestPaymentType = [Priority]       
                            FROM Instrument A 
                            left join MasterValue B on A.InterestPaymentType = B.Code and B.ID ='InterestPaymentType' and B.status  = 2     
                            WHERE InstrumentPK = @InstrumentPK And A.Status = 2 



                            --select * from masterValue where id = 'InterestPaymentType'

                            --select * from masterValue where id = 'InterestDaysType'

                            --5 30/360 (European)
                            --2 Act/Act

                            --set @interestDaysType = 5

                            if @interestDaysType = 2
                            BEGIN
	
	                            set @days = abs(datediff(day,@SettledDate,@lastCouponDate))
	                            set @DivDays = abs(datediff(day,@NextCouponDate,@lastCouponDate))
	                            set @Accr = @Volume /1000000 * round( @rate/100 * @Days / @DivDays /@InterestPaymentType  * 1000000,0)      
	
                            END

                            if @interestDaysType = 5
                            BEGIN
	
	                            set @days = abs([dbo].[FgetDateDiffCorporateBond](@lastCouponDate,@SettledDate))
	                            set @DivDays = abs([dbo].[FgetDateDiffCorporateBond](@lastCouponDate,@NextCouponDate))
	                            set @Accr = @Volume * @rate/100 * @Days / @DivDays / @InterestPaymentType      
	    
                            END

                            Set @Amount = @Volume * @Price/100      

                            Declare @PPHAmount numeric(18,4)      
                            Declare @MarginPrice numeric(18,4)              
                            Set @MarginPrice = abs(@Price - @AcqPrice)     
                            Set @PPHAmount = @MarginPrice / 100 * @Volume * 0.15      

                            Declare @ReceivableAmount numeric(18,4)      
                            set @ReceivableAmount = @Amount + @Accr - @PPHAmount     
      
                            Select @Accr InterestAmount, @Days Tenor , 0 IncomeTaxInterestAmount,@PPHAmount IncomeTaxGainAmount,@ReceivableAmount TotalAmount ";
                        cmd.Parameters.AddWithValue("@SettledDate", _investment.SettledDate);
                        cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                        cmd.Parameters.AddWithValue("@Price", _investment.OrderPrice);
                        cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                        cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                        cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    M.InterestAmount = Convert.ToDecimal(dr["InterestAmount"]);
                                    M.Tenor = Convert.ToInt16(dr["Tenor"]);
                                    M.IncomeTaxInterestAmount = Convert.ToDecimal(dr["IncomeTaxInterestAmount"]);
                                    M.IncomeTaxGainAmount = Convert.ToDecimal(dr["IncomeTaxGainAmount"]);
                                    M.TotalAmount = Convert.ToDecimal(dr["TotalAmount"]);
                                    return M;
                                }
                            }
                            return null;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }


        }

        //INVESTMENT RPT

        public Boolean Investment_ListingRpt(string _userID, InvestmentListing _listing)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.valueDate,I.ID InstrumentID, I.Name InstrumentName,   
                                          F.ID FundID,MV.DescOne InstrumentType,IV.InvestmentPK,IV.Volume,IV.OrderPrice,IV.InterestPercent,IV.TrxTypeID,  
                                          IV.Amount,IV.Notes, IV.RangePrice, IV.*   
                                          from Investment IV      
                                          left join Fund F on IV.FundPK = F.FundPK and F.status = 2     
                                          left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2     
                                          left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2     
                                          left join MasterValue MV on IV.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'     
                                          Where  IV.ValueDate = @ParamListDate and IV.StatusInvestment = 2 and IV.InvestmentPK <> 0 and (IV.StatusDealing not in (3,4)) and (IV.StatusSettlement not in (3,4)) 
                                          and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1) and cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) between @ReferenceFrom and @ReferenceTo order by IV.InvestmentPK";


                        cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                        cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundIDFrom);
                        cmd.Parameters.AddWithValue("@ReferenceFrom", _listing.ParamReferenceFrom);
                        cmd.Parameters.AddWithValue("@ReferenceTo", _listing.ParamReferenceTo);
                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "InvestmentListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "InvestmentListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Investment Listing");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<InvestmentListing> rList = new List<InvestmentListing>();
                                    while (dr0.Read())
                                    {
                                        InvestmentListing rSingle = new InvestmentListing();
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                        rSingle.InstrumentType = Convert.ToString(dr0["InstrumentType"]);
                                        rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                        rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                        rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                        rSingle.InvestmentPK = Convert.ToInt32(dr0["InvestmentPK"]);
                                        if (rSingle.InstrumentType == "EQUITY")
                                        {
                                            rSingle.RangePrice = Convert.ToString(dr0["RangePrice"]);
                                            rSingle.OrderPrice = Convert.ToDecimal(dr0["OrderPrice"]);

                                        }
                                        else if (rSingle.InstrumentType == "BOND")
                                        {

                                            rSingle.RangePrice = Convert.ToString(dr0["RangePrice"]);
                                            rSingle.OrderPrice = Convert.ToDecimal(dr0["OrderPrice"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);

                                        }
                                        else
                                        {

                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            if (rSingle.TrxTypeID != "PLACEMENT")
                                            {
                                                rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                            }
                                        }
                                        rSingle.Volume = Convert.ToDecimal(dr0["Volume"]);
                                        rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                        rSingle.Notes = Convert.ToString(dr0["Notes"]);

                                        rList.Add(rSingle);

                                    }

                                    var GroupByFundID =
                                         from r in rList
                                         orderby r.InstrumentType
                                         group r by new { r.InstrumentType, r.TrxTypeID } into rGroup
                                         select rGroup;



                                    int incRowExcel = 1;
                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 1].Value = "TRADE DATE :";
                                    worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_listing.ParamListDate);
                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                    incRowExcel = incRowExcel + 1;
                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 1].Value = "FUND :";
                                    worksheet.Cells[incRowExcel, 2].Value = _listing.ParamFundIDFrom;

                                    foreach (var rsHeader in GroupByFundID)
                                    {

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "INS. TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentType;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "TRX. TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.TrxTypeID;
                                        incRowExcel = incRowExcel + 1;
                                        if (rsHeader.Key.InstrumentType == "EQUITY")
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Volume / Shares";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Range Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Price";
                                            worksheet.Cells[incRowExcel, 7].Value = "Amount";
                                        }
                                        else if (rsHeader.Key.InstrumentType == "BOND")
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 4].Value = "Range Price";
                                            worksheet.Cells[incRowExcel, 5].Value = "Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Coupon %";
                                            worksheet.Cells[incRowExcel, 7].Value = "Amount";
                                        }
                                        else
                                        {
                                            if (rsHeader.Key.TrxTypeID == "LIQUIDATE" || rsHeader.Key.TrxTypeID == "ROLLOVER")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                                worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = "Value Date";
                                                worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Amount";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                                worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = "Value Date";
                                                worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Amount";
                                            }

                                        }

                                        //THICK BOX HEADER
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                        string _range = "A" + incRowExcel + ":G" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 14;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        }
                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;



                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 14;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                            }
                                            //area detail
                                            if (rsHeader.Key.InstrumentType == "EQUITY")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InvestmentPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Volume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RangePrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.OrderPrice;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                            }
                                            else if (rsHeader.Key.InstrumentType == "BOND")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InvestmentPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Volume;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.RangePrice;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.OrderPrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                            }


                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InvestmentPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Volume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                if (rsHeader.Key.TrxTypeID == "LIQUIDATE" || rsHeader.Key.TrxTypeID == "ROLLOVER")
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.ValueDate;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.ValueDate;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                                }


                                            }





                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;





                                        }

                                        _range = "A" + incRowExcel + ":G" + incRowExcel;
                                        using (ExcelRange s = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            s.Style.Font.Size = 14;
                                            s.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                        }

                                        //THICK BOX DETAIL
                                        _endRowDetail = incRowExcel - 1;
                                        worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                        if (rsHeader.Key.InstrumentType != "BOND")
                                        {
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        }
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                    }

                                    incRowExcel = incRowExcel + 2;
                                    worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                    worksheet.Cells[incRowExcel, 2].Value = _listing.Message;
                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                    worksheet.Cells["B" + incRowExcel + ":G" + (incRowExcel + 7)].Merge = true;
                                    int _rowNotes = incRowExcel + 10;
                                    worksheet.Cells["B" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["B" + _rowNotes + ":G" + _rowNotes].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["B" + incRowExcel + ":B" + _rowNotes].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["G" + incRowExcel + ":G" + _rowNotes].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                    incRowExcel = incRowExcel + 13;

                                    worksheet.Cells[incRowExcel, 1].Value = "Prepare By";
                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                    worksheet.Cells[incRowExcel, 4].Value = "Approval";
                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                    incRowExcel = incRowExcel + 5;
                                    worksheet.Cells[incRowExcel, 1].Value = "(    ";
                                    worksheet.Cells[incRowExcel, 3].Value = ")";
                                    worksheet.Cells[incRowExcel, 4].Value = "(    ";
                                    worksheet.Cells[incRowExcel, 6].Value = ")";
                                    worksheet.Row(incRowExcel).PageBreak = _listing.PageBreak;

                                    string _rangeA = "A1:G" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 18;
                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                    worksheet.Column(1).AutoFit();
                                    worksheet.Column(2).Width = 20;
                                    worksheet.Column(3).Width = 25;
                                    worksheet.Column(4).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&34 INVESTMENT APPROVAL";
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }

                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }



        }



        public Boolean Dealing_ListingRpt(string _userID, InvestmentListing _listing)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _bitIsMature = "";
                        int _counter = 0;
                        string _paramDealingPK = "";
                        string _paramDealing = "";

                        if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And IV.DealingPK in (" + _listing.stringInvestmentFrom + ") ";
                            _paramDealing = " DealingPK in (" + _listing.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And IV.DealingPK in (0) ";
                            _paramDealing = " DealingPK in (0) ";
                        }

                        if (_listing.ParamFundID != "All")
                        {
                            _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_listing.BitIsMature == true)
                        {
                            _bitIsMature = @" 
                            union all
                            Select Reference,RefNo,ValueDate,InstrumentID,InstrumentName,    
                            FundID,InstrumentType,InvestmentPK,Volume,OrderPrice,InterestPercent,TrxTypeID,DonePrice,   
                            Amount,Notes,RangePrice ,MaturityDate ,DoneVolume,DoneAmount,'',AcqDate,DealingPK,InvestmentPK,CounterpartID  
                            from InvestmentMature where" + _paramDealing;
                        }
                        else
                        {
                            _bitIsMature = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        Declare @TrailsPK int
                        Declare @MaxDateEndDayFP datetime

                        select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                        where ValueDate = 
                        (
                        select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                        )
                        and status = 2

                        Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.valueDate,I.ID InstrumentID, I.Name InstrumentName, D.DescOne InterestDaysType, E.DescOne InterestPaymentType,    
                        F.ID FundID,IT.Name InstrumentType,IV.InvestmentPK,IV.Volume,IV.OrderPrice,case when IV.TrxType = 2 and IV.InstrumentTypePK = 5 then IV.BreakInterestPercent else IV.InterestPercent end InterestPercent,IV.TrxTypeID,isnull(IV.DonePrice,0) DonePrice,    
                        isnull(IV.Amount,0) Amount,IV.Notes, IV.RangePrice,case when IV.TrxType = 2 and IV.InstrumentTypePK = 5 then IV.ValueDate else IV.MaturityDate end MaturityDate,isnull(IV.DoneVolume,0) DoneVolume
                        ,isnull(IV.DoneAmount,0) DoneAmount,IV.Notes,IV.AcqDate,IV.DealingPK,IV.InvestmentPK,isnull(C.ID,'') CounterpartID 
                        from Investment IV       
                        left join Fund F on IV.FundPK = F.FundPK and F.status = 2      
                        left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2      
                        left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 
                        left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                        left join MasterValue D on IV.InterestDaysType = D.Code and D.status = 2 and D.ID = 'InterestDaysType' 
                        left join MasterValue E on IV.InterestPaymentType = E.Code and E.status = 2 and E.ID = 'InterestPaymentType'        
                        Where  IV.ValueDate = @ParamListDate and IV.StatusInvestment = 2 and IV.StatusDealing <> 3 " + _paramDealingPK + _paramFund + _bitIsMature +
                        @"
                        order by FundID
                        ";


                        cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                        if (_listing.ParamFundID != "All")
                        {
                            cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                        }

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "DealingListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "DealingListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Dealing Listing");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<InvestmentListing> rList = new List<InvestmentListing>();
                                    while (dr0.Read())
                                    {
                                        InvestmentListing rSingle = new InvestmentListing();
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                        rSingle.InstrumentType = Convert.ToString(dr0["InstrumentType"]);
                                        rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                        rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                        rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                        rSingle.InvestmentPK = Convert.ToInt32(dr0["InvestmentPK"]);
                                        rSingle.DealingPK = Convert.ToInt32(dr0["DealingPK"]);
                                        if (rSingle.InstrumentType != "Deposito Money Market")
                                        {
                                            rSingle.DoneVolume = Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.OrderPrice = Convert.ToDecimal(dr0["OrderPrice"]);
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);

                                        }
                                        else
                                        {
                                            rSingle.DoneVolume = Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            if (rSingle.TrxTypeID != "PLACEMENT")
                                            {
                                                rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                            }
                                        }
                                        rSingle.InterestDaysType = Convert.ToString(dr0["InterestDaysType"]);
                                        rSingle.InterestPaymentType = Convert.ToString(dr0["InterestPaymentType"]);
                                        rSingle.DoneAmount = Convert.ToDecimal(dr0["DoneAmount"]);
                                        rSingle.Notes = Convert.ToString(dr0["Notes"]);
                                        rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                        rSingle.CounterpartID = Convert.ToString(dr0["CounterpartID"]);

                                        rList.Add(rSingle);

                                    }

                                    var GroupByFundID =
                                         from r in rList
                                         orderby r.FundID, r.InstrumentType
                                         group r by new { r.FundID, r.InstrumentType, r.TrxTypeID } into rGroup
                                         select rGroup;



                                    int incRowExcel = 1;
                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 1].Value = "TRADE DATE :";
                                    worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_listing.ParamListDate);
                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                    foreach (var rsHeader in GroupByFundID)
                                    {

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "FUND :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundID;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "INS. TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentType;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "TRX. TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.TrxTypeID;
                                        incRowExcel = incRowExcel + 1;
                                        if (rsHeader.Key.InstrumentType == "Equity Reguler")
                                        {
                                            _counter = 0;
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Volume / Shares";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Done Price";
                                            worksheet.Cells[incRowExcel, 7].Value = "Done Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Counterpart";
                                        }
                                        else if (rsHeader.Key.InstrumentType == "Corporate Bond" || rsHeader.Key.InstrumentType == "Government Bond" || rsHeader.Key.InstrumentType == "Sukuk" || rsHeader.Key.InstrumentType == "SBSN" || rsHeader.Key.InstrumentType == "Medium Term Notes")
                                        {
                                            _counter = 0;
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Done Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Coupon %";
                                            worksheet.Cells[incRowExcel, 7].Value = "Done Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Counterpart";
                                        }
                                        else
                                        {
                                            _counter = 1;
                                            if (rsHeader.Key.TrxTypeID == "LIQUIDATE" || rsHeader.Key.TrxTypeID == "ROLLOVER")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                                worksheet.Cells[incRowExcel, 2].Value = "Bank ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = "Acq Date";
                                                worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Tenor";
                                                worksheet.Cells[incRowExcel, 8].Value = "Interest Days Type";
                                                worksheet.Cells[incRowExcel, 9].Value = "Interest Payment Type";
                                                worksheet.Cells[incRowExcel, 10].Value = "Done Amount";
                                                worksheet.Cells[incRowExcel, 11].Value = "Int.Percent";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                                worksheet.Cells[incRowExcel, 2].Value = "Bank ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = "Value Date";
                                                worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Tenor";
                                                worksheet.Cells[incRowExcel, 8].Value = "Interest Days Type";
                                                worksheet.Cells[incRowExcel, 9].Value = "Interest Payment Type";
                                                worksheet.Cells[incRowExcel, 10].Value = "Done Amount";
                                                worksheet.Cells[incRowExcel, 11].Value = "Int.Percent";
                                            }

                                        }
                                        string _range;
                                        //THICK BOX HEADER
                                        if (_counter == 1)
                                        {
                                            _range = "A" + incRowExcel + ":K" + incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        }
                                        else
                                        {
                                            _range = "A" + incRowExcel + ":H" + incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        }





                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 14;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        }
                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;



                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 14;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                            }
                                            //area detail
                                            if (rsHeader.Key.InstrumentType == "Equity Reguler")
                                            {
                                                _counter = 0;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.OrderPrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else if (rsHeader.Key.InstrumentType == "Corporate Bond" || rsHeader.Key.InstrumentType == "Government Bond" || rsHeader.Key.InstrumentType == "Sukuk" || rsHeader.Key.InstrumentType == "SBSN" || rsHeader.Key.InstrumentType == "Medium Term Notes")
                                            {
                                                _counter = 0;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.OrderPrice;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }


                                            else
                                            {
                                                _counter = 1;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                if (rsHeader.Key.TrxTypeID == "LIQUIDATE" || rsHeader.Key.TrxTypeID == "ROLLOVER")
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.AcqDateDeposito;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Formula = "F" + incRowExcel + "-E" + incRowExcel;
                                                    worksheet.Cells[incRowExcel, 7].Calculate();
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestDaysType;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.InterestPaymentType;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.DoneAmount;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.InterestPercent;

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.ValueDate;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Formula = "F" + incRowExcel + "-E" + incRowExcel;
                                                    worksheet.Cells[incRowExcel, 7].Calculate();
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestDaysType;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.InterestPaymentType;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.DoneAmount;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.InterestPercent;

                                                }


                                            }





                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;





                                        }

                                        _range = "A" + incRowExcel + ":K" + incRowExcel;
                                        using (ExcelRange s = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            s.Style.Font.Size = 14;
                                            //s.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                        }

                                        //THICK BOX DETAIL
                                        _endRowDetail = incRowExcel - 1;


                                        if (_counter == 1)
                                        {
                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Dashed;


                                        }
                                        else
                                        {

                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            //worksheet.Cells["A" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;

                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Dashed;
                                        }

                                        //if (_counter == 1) {

                                        //}                                

                                        //else
                                        //{

                                        //}

                                    }

                                    incRowExcel = incRowExcel + 1;
                                    worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                    worksheet.Cells[incRowExcel, 2].Value = _listing.Message;
                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                    worksheet.Cells["B" + incRowExcel + ":H" + (incRowExcel + 7)].Merge = true;
                                    int _rowNotes = incRowExcel + 10;
                                    worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["B" + _rowNotes + ":H" + _rowNotes].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["B" + incRowExcel + ":B" + _rowNotes].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["H" + incRowExcel + ":H" + _rowNotes].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                    incRowExcel = incRowExcel + 13;


                                    int _RowA = incRowExcel;
                                    int _RowB = incRowExcel + 7;
                                    worksheet.Cells["A" + _RowB + ":K" + _RowB].Style.Font.Bold = true;
                                    worksheet.Cells["A" + _RowB + ":K" + _RowB].Style.Font.Size = 15;
                                    if (Tools.ClientCode == "01") //ASCEND
                                    {
                                        worksheet.Cells["A" + _RowA + ":B" + _RowA].Merge = true;
                                        worksheet.Cells[_RowA, 1].Value = "PrepareBy";
                                        worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells["A" + _RowB + ":B" + _RowB].Merge = true;
                                        worksheet.Cells[_RowB, 1].Value = "(                                  )";
                                        worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells["E" + _RowA + ":F" + _RowA].Merge = true;
                                        worksheet.Cells[_RowA, 5].Value = "Approval";
                                        worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells["E" + _RowB + ":F" + _RowB].Merge = true;
                                        worksheet.Cells[_RowB, 5].Value = "(                             )";
                                        worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    }
                                    else
                                    {
                                        if (_listing.Signature1 != 0)
                                        {
                                            worksheet.Cells[_RowA, 1].Value = _host.Get_PositionSignature(_listing.Signature1);
                                            worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 1].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                            worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 1].Value = "";
                                            worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 1].Value = "";
                                            worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }


                                        if (_listing.Signature2 != 0)
                                        {
                                            worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature2);
                                            worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                            worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature2);
                                            worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 3].Value = "";
                                            worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }

                                        if (_listing.Signature3 != 0)
                                        {
                                            worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_listing.Signature3);
                                            worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_listing.Signature3) + " )";
                                            worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 5].Value = "";
                                            worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 5].Value = "";
                                            worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }

                                        if (_listing.Signature4 != 0)
                                        {
                                            worksheet.Cells[_RowA, 8].Value = _host.Get_PositionSignature(_listing.Signature4);
                                            worksheet.Cells[_RowA, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 8].Value = "( " + _host.Get_SignatureName(_listing.Signature4) + " )";
                                            worksheet.Cells[_RowB, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 7].Value = "";
                                            worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 7].Value = "";
                                            worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }
                                    }

                                    incRowExcel = incRowExcel + 7;
                                    worksheet.Row(incRowExcel).PageBreak = true;

                                    string _rangeA = "A1:K" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 18;
                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    if (_counter == 1)
                                    {
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                    }
                                    else
                                    {
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                    }

                                    worksheet.Column(1).AutoFit();
                                    worksheet.Column(2).Width = 30;
                                    worksheet.Column(3).Width = 25;
                                    worksheet.Column(4).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.Column(8).AutoFit();
                                    worksheet.Column(9).AutoFit();
                                    worksheet.Column(10).Width = 25;
                                    worksheet.Column(11).Width = 25;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&34 DEALING TICKET";
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }



        public List<Investment> Get_DataInvestmentByDateByFundFromToAndInstrumentTypeBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, int _instrumentType, string _fundID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInstrumentType = "";
                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_instrumentType == 2)
                        {
                            _paramInstrumentType = "and TP.InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and TP.InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             I.CurrencyPK,C.ID CurrencyID ,TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'    left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2 
                             where  TP.TrxType = 1 and  TP.ValueDate between @DateFrom and @DateTo " + _paramFund + _paramInstrumentType + " and TP.statusInvestment = 1  and (TP.StatusDealing = 0 and TP.InvestmentPK <> 0) order by RefNo ";
                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             I.CurrencyPK,C.ID CurrencyID ,TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join    
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'   left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join  
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2 
                             where TP.TrxType = 1 and TP.ValueDate between @DateFrom and @DateTo " + _paramFund + _paramInstrumentType + " and TP.statusInvestment = 2  and (TP.StatusDealing not in (3,4)) and (TP.StatusSettlement not in (3,4)) and TP.InvestmentPK <> 0 order by RefNo ";

                        }

                        else
                        {

                            if (_instrumentType == 5)
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"
                                select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                                case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,   
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                                CP.Name CounterpartName,  
                                TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                                I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,Z.ID CrossFundFromID,BB.PTPCode +' - '+ B.ID  + ' - ' + BB.ID BankBranchID,BB.PTPCode,TP.* from Investment TP left join      
                                Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                                Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                                Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                                Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                                FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                                InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                                MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                                MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                                MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                                Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join       
                                Market M on TP.MarketPK = M.MarketPK and M.status = 2   left join
                                BankBranch BB on TP.BankBranchPK = BB.BankBranchPK and BB.status = 2 left join
                                Bank B on TP.BankPK = B.BankPK and B.status = 2
                                where TP.TrxType in (1,3) and   TP.ValueDate between @DateFrom and @DateTo      
                                and TP.InvestmentNotes <> 'Reject By Amend' and IT.Type = 3
                                 " + _paramFund + @" order by OrderStatusDesc 
                            ";

                            }
                            else if (_instrumentType == 2)
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join      
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 1 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' and IT.InstrumentTypePK in (2,3,8,9,13,15)
                             " + _paramFund + @"
                             order by OrderStatusDesc  ";

                            }
                            else if (_instrumentType == 6)
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join    
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join   
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 1 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' and IT.Type = 4
                             " + _paramFund + @"
                             order by OrderStatusDesc  ";

                            }
                            else
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select dbo.FGetAvgPriceByTrx(@DateFrom,TP.InstrumentPK,TP.FundPK,TP.CounterpartPK)AvgPrice,case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join  
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join     
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 1 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' and IT.Type = 1
                             " + _paramFund + @"
                             order by OrderStatusDesc  ";
                            }

                        }

                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        if (_instrumentType != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _instrumentType);
                        }
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean Settlement_ListingRpt(string _userID, InvestmentListing _listing)
        {
            if (_listing.ParamInstType == "2")
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramSettlementPK = "";

                            if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (" + _listing.stringInvestmentFrom + ") ";
                            }
                            else
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (0) ";
                            }

                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,MV.DescOne SettlementModeDesc,MV.DescTwo SettlementModeDescTwo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.EntryUsersID CheckedBy,IV.ApprovedUsersID ApprovedBy,IV.valueDate,I.ID InstrumentID,   
                                            F.ID FundID,IT.Name InstrumentType,isnull( AcqDate1,'') AcqDate1,isnull(AcqDate2,'') AcqDate2,isnull(AcqDate3,'') AcqDate3,isnull(AcqDate4,'') AcqDate4,isnull(AcqDate5,'') AcqDate5,IV.*  
                                            from Investment IV   
                                            left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                            left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                                            Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK in (2,3,8,9,13,15)  and IV.statusSettlement = 2 
                                            "+ _paramSettlementPK + _paramFund + @" order by RefNo ";

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundID != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }
                            cmd.Parameters.AddWithValue("@ParamInstType", _listing.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingBond" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingBond" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Bond");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                            rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                            rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.AcqPrice = dr0["AcqPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice"]);
                                            rSingle.AcqDate = Convert.ToDateTime(dr0["AcqDate"]);
                                            rSingle.AcqPrice1 = dr0["AcqPrice1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice1"]);
                                            rSingle.AcqDate1 = Convert.ToDateTime(dr0["AcqDate1"]);
                                            rSingle.AcqPrice2 = dr0["AcqPrice2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice2"]);
                                            rSingle.AcqDate2 = Convert.ToDateTime(dr0["AcqDate2"]);
                                            rSingle.AcqPrice3 = dr0["AcqPrice3"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice3"]);
                                            rSingle.AcqDate3 = Convert.ToDateTime(dr0["AcqDate3"]);
                                            rSingle.AcqPrice4 = dr0["AcqPrice4"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice4"]);
                                            rSingle.AcqDate4 = Convert.ToDateTime(dr0["AcqDate4"]);
                                            rSingle.AcqPrice5 = dr0["AcqPrice5"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice5"]);
                                            rSingle.AcqDate5 = Convert.ToDateTime(dr0["AcqDate5"]);
                                            rSingle.IncomeTaxGainAmount = Convert.ToDecimal(dr0["IncomeTaxGainAmount"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.AccruedInterest = dr0["DoneAccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAccruedInterest"]);
                                            rSingle.SettlementModeDesc = dr0["SettlementModeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettlementModeDesc"]);
                                            rSingle.SettlementModeDescTwo = dr0["SettlementModeDescTwo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettlementModeDescTwo"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            //rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                             from r in rList
                                             group r by new { r.FundName, r.InstrumentID } into rGroup
                                             select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            //int _rowHeader = incRowExcel;
                                            int _rowLine1 = 0;
                                            int _rowLine2 = 0;

                                            int _endRowDetail = incRowExcel;

                                            //incRowExcel++;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;


                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();

                                                int RowE = incRowExcel + 1;
                                                decimal _purchaseAmount = rsDetail.Amount;
                                                decimal _recalNetProceeds = rsDetail.TotalAmount;
                                                incRowExcel++;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = "Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstructionDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                _rowLine1 = incRowExcel;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Value = "To ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Attention ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianContactPerson;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fax No ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianFaxNo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "From ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Reference ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Re ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = "Bond Transaction -	" + rsDetail.InstrumentID;
                                                _rowLine2 = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Dear Sir,";
                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Here with we would like to confirm having bond transaction with following details :";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Bond Name ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Type of Transaction ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementModeDesc + "(" + rsDetail.SettlementModeDescTwo + ")";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Maturity Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nominal (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Price (%) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Current Coupon (%) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "CounterParty ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.CounterpartName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "care of ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.CounterpartName;
                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Trade Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Settlement Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                int RowF = incRowExcel;
                                                worksheet.Cells[incRowExcel, 1].Value = "Acq Price (%) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Acq Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;

                                                if (rsDetail.AcqPrice1 != 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Price 1 (%) ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice1;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Date 1 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate1;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                }

                                                if (rsDetail.AcqPrice2 != 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Price 2 (%) ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice2;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Date 2 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate2;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                }
                                                if (rsDetail.AcqPrice3 != 0)
                                                {
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Price 3 (%) ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice3;
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Date 3 ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate3;
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;

                                                }
                                                if (rsDetail.AcqPrice4 != 0)
                                                {
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Price 4 (%) ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice4;
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Date 4 ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate4;
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                }
                                                if (rsDetail.AcqPrice5 != 0)
                                                {
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Price 5 (%) ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice5;
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Date 5 ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate5;
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                }

                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Purchase Amount (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = _purchaseAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Interest Amount (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccruedInterest;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tax. Capital Gain (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                if (rsDetail.SettlementModeDesc == "RVP")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.IncomeTaxGainAmount * -1;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.IncomeTaxGainAmount;
                                                }

                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Net Proceeds (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = _recalNetProceeds;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                                worksheet.Cells[incRowExcel, 3].Value = _listing.Message;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells["C" + incRowExcel + ":F" + (incRowExcel + 4)].Merge = true;
                                                incRowExcel = incRowExcel + 6;
                                                worksheet.Cells[incRowExcel, 1].Value = "Please Confirm Upon Settlement";
                                                incRowExcel = incRowExcel + 2;

                                                int _RowA = incRowExcel;
                                                int _RowB = incRowExcel + 11;
                                                worksheet.Cells["A" + _RowB + ":H" + _RowB].Style.Font.Bold = true;
                                                worksheet.Cells["A" + _RowB + ":H" + _RowB].Style.Font.Size = 15;
                                                if (Tools.ClientCode == "12")
                                                {
                                                    if (_listing.Signature1 != 0)
                                                    {
                                                        worksheet.Cells[_RowA, 1].Value = _host.Get_PositionSignature(_listing.Signature1);
                                                        worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 1].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                                        worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[_RowA, 1].Value = "";
                                                        worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 1].Value = "";
                                                        worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }


                                                    if (_listing.Signature2 != 0)
                                                    {
                                                        worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                        worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                                        worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                        worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 3].Value = "";
                                                        worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }

                                                    if (_listing.Signature3 != 0)
                                                    {
                                                        worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_listing.Signature3);
                                                        worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_listing.Signature3) + " )";
                                                        worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[_RowA, 5].Value = "";
                                                        worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 5].Value = "";
                                                        worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }

                                                    if (_listing.Signature4 != 0)
                                                    {
                                                        worksheet.Cells[_RowA, 7].Value = _host.Get_PositionSignature(_listing.Signature4);
                                                        worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 7].Value = "( " + _host.Get_SignatureName(_listing.Signature4) + " )";
                                                        worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[_RowA, 7].Value = "";
                                                        worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 7].Value = "";
                                                        worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }
                                                }
                                                else
                                                {

                                                    worksheet.Cells[incRowExcel, 3].Value = "Check By";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = "Mengetahui";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel = incRowExcel + 10;
                                                    worksheet.Cells[incRowExcel, 2].Value = "(";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = _host.Get_ApprovalBySettlement(Convert.ToDateTime(_listing.ParamListDate));
                                                    worksheet.Cells[incRowExcel, 4].Value = ")";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 6].Value = "(";
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 8].Value = ")";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 3].Value = "Settlement";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 7].Value = "Director";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                    //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                                    //worksheet.Cells["D" + incRowExcel + ":E" + (incRowExcel)].Merge = true;
                                                    //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    //worksheet.Cells[incRowExcel, 4].Value = "Approved By";
                                                    //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    //incRowExcel = incRowExcel + 5;
                                                    //worksheet.Cells[incRowExcel, 1].Value = "(    ";
                                                    //worksheet.Cells[incRowExcel, 2].Value = ")";
                                                    //worksheet.Cells[incRowExcel, 3].Value = "(    ";
                                                    //worksheet.Cells[incRowExcel, 4].Value = ")     (";
                                                    //worksheet.Cells[incRowExcel, 6].Value = ")";
                                                }

                                                incRowExcel++;

                                                worksheet.Cells["A" + _rowLine1 + ":H" + _rowLine1].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLine2 + ":H" + _rowLine2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel = incRowExcel + 13;
                                                worksheet.Row(incRowExcel).PageBreak = true;
                                            }

                                            //incRowExcel++;


                                        }



                                        string _rangeA = "A1:H" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 4;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 4;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 4;
                                        worksheet.Column(7).Width = 35;
                                        worksheet.Column(8).Width = 4;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

            else if (_listing.ParamInstType == "1")
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramSettlementPK = "";

                            if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (" + _listing.stringInvestmentFrom + ") ";
                            }
                            else
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (0) ";
                            }

                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName, 
                                            F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,BB.Name BankCustodianName,BC.ContactPerson ContactPerson,BC.Fax1 FaxNo,FC.BankAccountNo,FC.BankAccountName,IV.* 
                                            from Investment IV  
                                            left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                            left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                                            Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 1 and IV.statusSettlement = 2
                                            "+ _paramSettlementPK + _paramFund + @" order by Refno ";

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundID != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }
                            cmd.Parameters.AddWithValue("@ParamInstType", _listing.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Equity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                            rSingle.CounterpartID = dr0["CounterpartID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartID"]);
                                            rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                            rSingle.BankAccountName = dr0["BankAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            //rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                            rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.CommissionAmount = dr0["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.LevyAmount = dr0["LevyAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["LevyAmount"]);
                                            rSingle.KPEIAmount = dr0["KPEIAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KPEIAmount"]);
                                            rSingle.VATAmount = dr0["VATAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["VATAmount"]);
                                            rSingle.WHTAmount = dr0["WHTAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["WHTAmount"]);
                                            rSingle.IncomeTaxSellAmount = dr0["IncomeTaxSellAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxSellAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var GroupByValueDate =
                                               from r in rList
                                               group r by new { r.ValueDate, r.FundID, r.CounterpartID, r.InstrumentType, r.TrxTypeID, r.SettlementDate, r.ContactPerson, r.FaxNo, r.BankAccountNo, r.BankAccountName, r.BankCustodianName } into rGroup
                                               select rGroup;

                                        int incRowExcel = 0;


                                        foreach (var rsHeader in GroupByValueDate)
                                        {
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "REFERENCE";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date ";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 3].Value = (rsHeader.Key.ValueDate);
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "Securities Acc No ";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = ":";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.BankAccountName;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "To :";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.BankCustodianName;
                                            worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "Cash Acc No ";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = ":";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.BankAccountNo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Attention ";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ContactPerson;
                                            worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "Instrument Type ";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = ":";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.InstrumentType;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fax no ";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FaxNo;
                                            worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "Trade Date ";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = ":";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 14].Value = (rsHeader.Key.ValueDate);
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "From ";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundID;
                                            worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "Settlement Date ";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = ":";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 14].Value = (rsHeader.Key.SettlementDate);
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Re ";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "SETTLEMENT INSTRUCTION";
                                            incRowExcel++;




                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Counterpart";
                                            worksheet.Cells[incRowExcel, 2].Value = "B / S";
                                            worksheet.Cells[incRowExcel, 3].Value = "Instrument";
                                            worksheet.Cells[incRowExcel, 4].Value = "Reference";
                                            worksheet.Cells[incRowExcel, 5].Value = "Quantity";
                                            worksheet.Cells[incRowExcel, 6].Value = "Price";
                                            worksheet.Cells[incRowExcel, 7].Value = "Total Price";
                                            worksheet.Cells[incRowExcel, 8].Value = "Comm.";
                                            worksheet.Cells[incRowExcel, 9].Value = "Levy";
                                            worksheet.Cells[incRowExcel, 10].Value = "VAT";
                                            worksheet.Cells[incRowExcel, 11].Value = "KPEI";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 12].Value = "Total Settle";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 12].Value = "Income Tax";
                                            }

                                            worksheet.Cells[incRowExcel, 13].Value = "WHT";
                                            worksheet.Cells[incRowExcel, 14].Value = "Total Payment";

                                            //THICK BOX HEADER
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            string _range = "A" + incRowExcel + ":N" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 18;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;



                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                decimal _totalSettleForBuy = 0;
                                                //decimal _totalSettleForSell = 0;
                                                _totalSettleForBuy = rsDetail.DoneAmount + rsDetail.CommissionAmount + rsDetail.LevyAmount + rsDetail.VATAmount + rsDetail.KPEIAmount;
                                                //_totalSettleForSell = rsDetail.DoneAmount + rsDetail.WHTAmount - rsDetail.CommissionAmount - rsDetail.LevyAmount - rsDetail.VATAmount - rsDetail.KPEIAmount - rsDetail.IncomeTaxSellAmount;
                                                _range = "A" + incRowExcel + ":N" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 18;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }





                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "B";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "S";

                                                }
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DoneVolume;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CommissionAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.LevyAmount;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.VATAmount;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.KPEIAmount;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 12].Value = _totalSettleForBuy;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.IncomeTaxSellAmount;
                                                }

                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.WHTAmount;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalAmount;
                                                    //worksheet.Cells[incRowExcel, 14].Value = (_totalSettleForBuy - rsDetail.WHTAmount);
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalAmount;
                                                    //worksheet.Cells[incRowExcel, 14].Value = _totalSettleForSell;
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;




                                            }
                                            //THICK BOX DETAIL
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["M" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["N" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["N" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["N" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 3].Value = "Total " + rsHeader.Key.TrxTypeID + " (IDR) :";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";

                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 12].Value = "Net Proceeds " + rsHeader.Key.TrxTypeID + " (IDR) :";
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 14].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                            worksheet.Cells[incRowExcel, 2].Value = _listing.Message;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + incRowExcel + ":N" + (incRowExcel + 2)].Merge = true;
                                            incRowExcel = incRowExcel + 4;

                                            int _RowA = incRowExcel;
                                            int _RowB = incRowExcel + 11;
                                            worksheet.Cells["A" + _RowB + ":H" + _RowB].Style.Font.Bold = true;
                                            worksheet.Cells["A" + _RowB + ":H" + _RowB].Style.Font.Size = 15;
                                            if (Tools.ClientCode == "12")
                                            {
                                                if (_listing.Signature1 != 0)
                                                {
                                                    worksheet.Cells[_RowA, 1].Value = _host.Get_PositionSignature(_listing.Signature1);
                                                    worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[_RowB, 1].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                                    worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                }
                                                else
                                                {
                                                    worksheet.Cells[_RowA, 1].Value = "";
                                                    worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[_RowB, 1].Value = "";
                                                    worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                }


                                                if (_listing.Signature2 != 0)
                                                {
                                                    worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                    worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                                    worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                }
                                                else
                                                {
                                                    worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                    worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[_RowB, 3].Value = "";
                                                    worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                }

                                                if (_listing.Signature3 != 0)
                                                {
                                                    worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_listing.Signature3);
                                                    worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_listing.Signature3) + " )";
                                                    worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                }
                                                else
                                                {
                                                    worksheet.Cells[_RowA, 5].Value = "";
                                                    worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[_RowB, 5].Value = "";
                                                    worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                }

                                                if (_listing.Signature4 != 0)
                                                {
                                                    worksheet.Cells[_RowA, 7].Value = _host.Get_PositionSignature(_listing.Signature4);
                                                    worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[_RowB, 7].Value = "( " + _host.Get_SignatureName(_listing.Signature4) + " )";
                                                    worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                }
                                                else
                                                {
                                                    worksheet.Cells[_RowA, 7].Value = "";
                                                    worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[_RowB, 7].Value = "";
                                                    worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                }
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Check By";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = "Mengetahui";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Row(incRowExcel).PageBreak = true;
                                                incRowExcel = incRowExcel + 10;
                                                worksheet.Cells[incRowExcel, 1].Value = "(            ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = _host.Get_ApprovalBySettlement(Convert.ToDateTime(_listing.ParamListDate));
                                                worksheet.Cells[incRowExcel, 3].Value = "          )";

                                                worksheet.Cells[incRowExcel, 7].Value = "(       ";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = "      )";
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Value = "Settlement";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = "Director";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;



                                                //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                                //worksheet.Cells["D" + incRowExcel + ":E" + (incRowExcel)].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 4].Value = "Approved By";
                                                //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //incRowExcel = incRowExcel + 5;
                                                //worksheet.Cells[incRowExcel, 1].Value = "(    ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ")";
                                                //worksheet.Cells[incRowExcel, 3].Value = "(    ";
                                                //worksheet.Cells[incRowExcel, 4].Value = ")     (";
                                                //worksheet.Cells[incRowExcel, 6].Value = ")";
                                            }

                                            incRowExcel = incRowExcel + 13;
                                            worksheet.Row(incRowExcel).PageBreak = true;





                                        }


                                        string _rangeA = "A1:N" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 15];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 30;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING EQUITY";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }


            else if (_listing.ParamInstType == "3")
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _bitIsMature = "";
                            string _paramFund = "";
                            string _paramSettlementPK = "";

                            if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (" + _listing.stringInvestmentFrom + ") ";
                            }
                            else
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (0) ";
                            }

                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (_listing.BitIsMature == true)
                            {
                                _bitIsMature = @"union all

                                Select  Reference,Tenor,ClearingCode,BankAccountNo,BankCustodianName,BankCustodianContactPerson,BankCustodianFaxNo,BankCustodianPhone,ContactPerson,FaxNo,Phone,InstrumentName,FundName,valueDate,InstrumentID,  
                                FundID,InstrumentType,BankBranchName ,TrxTypeID,InstructionDate,MaturityDate,Amount,DoneAmount,OrderPrice,InterestPercent,ValueDate,AcqDate,AccruedInterest,SettlementDate 
                                from InvestmentMature where Selected = 1 ";
                            }
                            else
                            {
                                _bitIsMature = "";
                            }
                            //                            cmd.CommandText = @"Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Phone,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,   
                            //                                             F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,IV.*  
                            //                                             from Investment IV   
                            //                                             left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                            //                                             left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                            //                                             left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                            //                                             left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                            //                                             left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                            //                                             left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                            //                                             left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                            //                                             Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  and IV.selectedSettlement = 1 "
                            //                                             + _paramFund + @" order by Refno ";

                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                            )
                            and status = 2

                            Select Reference, DATEDIFF (day,IV.ValueDate ,IV.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,  
                            F.ID FundID,IT.Name InstrumentType,C.Name BankBranchName,IV.TrxTypeID,IV.InstructionDate,IV.MaturityDate,IV.Amount,IV.DoneAmount,IV.OrderPrice,IV.InterestPercent,IV.ValueDate,IV.AcqDate,IV.AccruedInterest ,IV.SettlementDate 
                            from Investment IV   
                            left join BankBranch B on IV.BankBranchPK = B.BankBranchPK and B.status = 2   
                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2
                            left join Bank C on B.BankPK = C.BankPK and C.status = 2    
                            Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  
                            " + _paramFund + _paramSettlementPK + _bitIsMature;

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundID != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }
                            cmd.Parameters.AddWithValue("@ParamInstType", _listing.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Deposito");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.DoneAmount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.OrderPrice = dr0["OrderPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OrderPrice"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.BankBranchName = dr0["BankBranchName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName"]);
                                            rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                            rSingle.Phone = dr0["Phone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Phone"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                            rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                            rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.ClearingCode = dr0["ClearingCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ClearingCode"]);
                                            rSingle.Tenor = dr0["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["Tenor"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            if (rSingle.TrxTypeID == "LIQUIDATE")
                                            {
                                                rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                            }
                                            else if (rSingle.TrxTypeID == "ROLLOVER")
                                            {
                                                rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["ValueDate"]);
                                            }
                                            //rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                            rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            //rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName, r.InstrumentID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {


                                            int _rowLine1 = 0;
                                            int _rowLine2 = 0;
                                            int _rowLineA = 0;
                                            int _rowLineB = 0;
                                            int _rowLineC = 0;
                                            int _rowLineD = 0;
                                            int _rowLineE = 0;
                                            int _rowLineF = 0;
                                            int _rowLineG = 0;
                                            int _endRowDetail = incRowExcel;

                                            //incRowExcel++;



                                            // Untuk Cetak Tebal
                                            //string _range = "A" + incRowExcel + ":F" + incRowExcel;
                                            //using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            //{
                                            //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            //    r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            //    r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            //    r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //    r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            //    //r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                            //    r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //    r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            //    r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            //}
                                            //incRowExcel++;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                int _rowHeader = incRowExcel;
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;
                                                decimal _purchaseAmount = (rsDetail.Amount * rsDetail.OrderPrice);
                                                decimal _recalNetProceeds = (_purchaseAmount + rsDetail.AccruedInterest);

                                                //worksheet.Cells["A" + _rowHeader + ":F" + _rowHeader].Merge = true;               
                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;

                                                worksheet.Cells["A" + _rowHeader + ":F" + _rowHeader].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                incRowExcel++;
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = "To ";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianContactPerson;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fax / Telp ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianFaxNo;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.BankCustodianPhone;
                                                _rowLine1 = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "To ";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchName;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ContactPerson;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fax / Telp ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FaxNo;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Phone;
                                                _rowLine2 = incRowExcel;
                                                incRowExcel = incRowExcel + 1;
                                                worksheet.Cells[incRowExcel, 1].Value = "From ";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                worksheet.Cells[incRowExcel, 5].Value = "Reference : ";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Reference;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Date ";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "TIME DEPOSIT";
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Please execute the following instruction :";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Benefary Bank ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchName;
                                                worksheet.Cells[incRowExcel, 5].Value = "Clearing Code";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.ClearingCode;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                _rowLineA = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "In Favoring of ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                _rowLineB = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Amount (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                _rowLineC = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Value Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                if (rsDetail.TrxTypeID == "PLACEMENT")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                }
                                                else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                }

                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = "Interest (%) ";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                _rowLineD = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Maturity Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = "Tenor Days ";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Tenor;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                _rowLineE = incRowExcel;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                if (rsDetail.TrxTypeID == "PLACEMENT")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "NEW PLACEMENT";
                                                }
                                                else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "LIQUIDATE";
                                                }
                                                else if (rsDetail.TrxTypeID == "ROLLOVER")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "ROLLOVER";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "MATURE";
                                                }

                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Notes ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["C" + incRowExcel + ":F" + (incRowExcel + 4)].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = _listing.Message;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                incRowExcel = incRowExcel + 6;
                                                var _principalText = "";
                                                if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    _principalText = "Principal and Interest";
                                                }
                                                else
                                                {
                                                    _principalText = "Interest";
                                                }
                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Upon maturity, please transfer the " + _principalText + " to : ";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Bank Name ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                _rowLineF = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Account Name ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Account Number ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountNo;
                                                _rowLineG = incRowExcel;
                                                //incRowExcel = incRowExcel + 2;
                                                //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = "and interest to  ";
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Bank Name ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                //_rowLineH = incRowExcel;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Account Name ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Account Number ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountNo;
                                                //_rowLineI = incRowExcel;
                                                incRowExcel++;
                                                incRowExcel = incRowExcel + 4;

                                                int _RowA = incRowExcel;
                                                int _RowB = incRowExcel + 11;
                                                worksheet.Cells["A" + _RowB + ":H" + _RowB].Style.Font.Bold = true;
                                                worksheet.Cells["A" + _RowB + ":H" + _RowB].Style.Font.Size = 15;
                                                if (Tools.ClientCode == "12")
                                                {
                                                    if (_listing.Signature1 != 0)
                                                    {
                                                        worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature1);
                                                        worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                                        worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[_RowA, 3].Value = "";
                                                        worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 3].Value = "";
                                                        worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }


                                                    if (_listing.Signature2 != 0)
                                                    {
                                                        worksheet.Cells[_RowA, 4].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                        worksheet.Cells[_RowA, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 4].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                                        worksheet.Cells[_RowB, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[_RowA, 4].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                        worksheet.Cells[_RowA, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 4].Value = "";
                                                        worksheet.Cells[_RowB, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }

                                                    if (_listing.Signature3 != 0)
                                                    {
                                                        worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_listing.Signature3);
                                                        worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_listing.Signature3) + " )";
                                                        worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[_RowA, 5].Value = "";
                                                        worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 5].Value = "";
                                                        worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }

                                                    if (_listing.Signature4 != 0)
                                                    {
                                                        worksheet.Cells[_RowA, 6].Value = _host.Get_PositionSignature(_listing.Signature4);
                                                        worksheet.Cells[_RowA, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 6].Value = "( " + _host.Get_SignatureName(_listing.Signature4) + " )";
                                                        worksheet.Cells[_RowB, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[_RowA, 6].Value = "";
                                                        worksheet.Cells[_RowA, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[_RowB, 6].Value = "";
                                                        worksheet.Cells[_RowB, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    }
                                                }
                                                else if (Tools.ClientCode == "18")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = "Check By";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = "Mengetahui";
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    incRowExcel = incRowExcel + 10;
                                                    worksheet.Cells[incRowExcel, 2].Value = "(";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = _host.Get_ApprovalBySettlement(Convert.ToDateTime(_listing.ParamListDate));
                                                    worksheet.Cells[incRowExcel, 4].Value = ")                                                  (";


                                                    worksheet.Cells[incRowExcel, 6].Value = ")";
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 3].Value = "Settlement";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 5].Value = "Director";
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                                    //incRowExcel = incRowExcel + 14;
                                                    //worksheet.Row(incRowExcel).PageBreak = true;


                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "         Sincerely Yours                             Acknowledged by                   Confirmed by                        Verified by";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel = incRowExcel + 7;
                                                    worksheet.Cells[incRowExcel, 1].Value = "      (                                 )                       (                                 )            (                                 )          (                                 )";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                }


                                                worksheet.Cells["A" + _rowLine1 + ":F" + _rowLine1].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLine2 + ":F" + _rowLine2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //BORDER 
                                                worksheet.Cells["A" + _rowLineA + ":F" + _rowLineA].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineA + ":F" + _rowLineA].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineB + ":F" + _rowLineB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineC + ":F" + _rowLineC].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineD + ":F" + _rowLineD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineE + ":F" + _rowLineE].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["A" + _rowLineA + ":A" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + _rowLineA + ":C" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["D" + _rowLineA + ":D" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + _rowLineA + ":E" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["F" + _rowLineA + ":F" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["G" + _rowLineA + ":G" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["C" + _rowLineF + ":F" + _rowLineF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + _rowLineF + ":C" + _rowLineG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["F" + _rowLineF + ":F" + _rowLineG].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + _rowLineG + ":F" + _rowLineG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //worksheet.Cells["C" + _rowLineH + ":F" + _rowLineH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["C" + _rowLineH + ":C" + _rowLineI].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["F" + _rowLineH + ":F" + _rowLineI].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["C" + _rowLineI + ":F" + _rowLineI].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                incRowExcel = incRowExcel + 14;
                                                worksheet.Row(incRowExcel).PageBreak = true;

                                                //incRowExcel++;
                                            }






                                            string _rangeA = "A1:F" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 16;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            }
                                        }




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 4;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 35;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 35;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            else
            {
                return false;
            }

        }


        //SETTLEMENT RPT
        public Boolean Settlement_ListingRptEMCO(string _userID, InvestmentListing _listing)
        {
            if (_listing.ParamInstType.Equals("2"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramCounterpart = "";

                            if (_listing.ParamFundIDFrom != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (_listing.ParamCounterpartIDFrom != "All")
                            {
                                _paramCounterpart = "and C.ID = left(@ParamCounterpartIDFrom,charindex('-',@ParamCounterpartIDFrom) - 1) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,MV.DescOne SettlementModeDesc,MV.DescTwo SettlementModeDescTwo,BC.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.EntryUsersID CheckedBy,IV.ApprovedUsersID ApprovedBy,IV.valueDate,I.ID InstrumentID,  
                                             F.ID FundID,IT.Name InstrumentType,isnull( AcqDate1,'') AcqDate1,isnull(AcqDate2,'') AcqDate2,isnull(AcqDate3,'') AcqDate3,isnull(AcqDate4,'') AcqDate4,isnull(AcqDate5,'') AcqDate5,IV.* 
                                             from Investment IV  
                                             left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2 
                                             left join Fund F on IV.FundPK = F.FundPK and F.status = 2 
                                             left join BankCustodian BC on BC.BankCustodianPK = F.BankBranchPK and BC.status = 2 
                                             left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2 
                                             left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2 
                                             left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 
                                             Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK in (2,3,8,9,13,15)  and SettlementPK <> 0 and IV.statusSettlement = 2 " +
                                            _paramFund + _paramCounterpart;

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundIDFrom != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundIDFrom);
                            }
                            if (_listing.ParamCounterpartIDFrom != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamCounterpartIDFrom", _listing.ParamCounterpartIDFrom);
                            }
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingBond" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingBond" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Bond");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                            rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                            rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.AcqPrice = dr0["AcqPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice"]);
                                            rSingle.AcqDate = Convert.ToDateTime(dr0["AcqDate"]);
                                            //rSingle.AcqPrice1 = dr0["AcqPrice1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice1"]);
                                            //rSingle.AcqDate1 = Convert.ToDateTime(dr0["AcqDate1"]);
                                            //rSingle.AcqPrice2 = dr0["AcqPrice2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice2"]);
                                            //rSingle.AcqDate2 = Convert.ToDateTime(dr0["AcqDate2"]);
                                            //rSingle.AcqPrice3 = dr0["AcqPrice3"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice3"]);
                                            //rSingle.AcqDate3 = Convert.ToDateTime(dr0["AcqDate3"]);
                                            //rSingle.AcqPrice4 = dr0["AcqPrice4"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice4"]);
                                            //rSingle.AcqDate4 = Convert.ToDateTime(dr0["AcqDate4"]);
                                            //rSingle.AcqPrice5 = dr0["AcqPrice5"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice5"]);
                                            //rSingle.AcqDate5 = Convert.ToDateTime(dr0["AcqDate5"]);
                                            rSingle.IncomeTaxInterestAmount = Convert.ToDecimal(dr0["IncomeTaxInterestAmount"]);
                                            rSingle.IncomeTaxGainAmount = Convert.ToDecimal(dr0["IncomeTaxGainAmount"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.AccruedInterest = dr0["DoneAccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAccruedInterest"]);
                                            rSingle.SettlementModeDesc = dr0["SettlementModeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettlementModeDesc"]);
                                            rSingle.SettlementModeDescTwo = dr0["SettlementModeDescTwo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettlementModeDescTwo"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            //rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                             from r in rList
                                             group r by new { r.FundName, r.InstrumentID } into rGroup
                                             select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            //int _rowHeader = incRowExcel;
                                            int _rowLine1 = 0;
                                            int _rowLine2 = 0;

                                            int _endRowDetail = incRowExcel;

                                            incRowExcel++;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;


                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();

                                                int RowE = incRowExcel + 1;
                                                decimal _purchaseAmount = rsDetail.DoneAmount;
                                                decimal _recalNetProceeds = rsDetail.TotalAmount;
                                                incRowExcel++;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = "Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstructionDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                _rowLine1 = incRowExcel;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Value = "To ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Attention ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianContactPerson;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fax No ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianFaxNo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "From ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Reference ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Re ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = "Bond Transaction -	" + rsDetail.InstrumentID;
                                                _rowLine2 = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Dear Sir,";
                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Here with we would like to confirm having bond transaction with following details :";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Bond Name ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Type of Transaction ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementModeDesc + "(" + rsDetail.SettlementModeDescTwo + ")";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Maturity Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nominal (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Price (%) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Current Coupon (%) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "CounterParty ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.CounterpartName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "care of ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.CounterpartName;
                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Trade Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Settlement Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                int RowF = incRowExcel;
                                                worksheet.Cells[incRowExcel, 1].Value = "Acq Price (%) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Acq Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;

                                                if (rsDetail.AcqPrice1 != 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Price 1 (%) ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice1;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Volume 1 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqVolume3;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Date 1 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate1;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                }

                                                if (rsDetail.AcqPrice2 != 0)
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Price 2 (%) ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice2;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Volume 2 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqVolume3;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Date 2 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate2;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                }
                                                if (rsDetail.AcqPrice3 != 0)
                                                {
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Price 3 (%) ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice3;
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Volume 3 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqVolume3;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Date 3 ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate3;
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;

                                                }
                                                if (rsDetail.AcqPrice4 != 0)
                                                {
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Price 4 (%) ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice4;
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Volume 4 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqVolume3;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Date 4 ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate4;
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                }
                                                if (rsDetail.AcqPrice5 != 0)
                                                {
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Price 5 (%) ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice5;
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Acq Volume 5 ";
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqVolume3;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    incRowExcel++;
                                                    worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[RowF, 5].Value = "Acq Date 5 ";
                                                    worksheet.Cells[RowF, 6].Value = ":";
                                                    worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                    worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate5;
                                                    worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    RowF++;
                                                }

                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Purchase Amount (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = _purchaseAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Interest Amount (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccruedInterest;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tax. on Interest (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = -(rsDetail.IncomeTaxInterestAmount);
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tax. on Gain (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = -(rsDetail.IncomeTaxGainAmount);
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Net Proceeds (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = _recalNetProceeds;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                                worksheet.Cells[incRowExcel, 3].Value = _listing.Message;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells["C" + incRowExcel + ":F" + (incRowExcel + 4)].Merge = true;
                                                incRowExcel = incRowExcel + 6;
                                                worksheet.Cells[incRowExcel, 1].Value = "Please Confirm Upon Settlement";
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                                worksheet.Cells["D" + incRowExcel + ":E" + (incRowExcel)].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = "Approved By";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                incRowExcel = incRowExcel + 5;
                                                worksheet.Cells[incRowExcel, 1].Value = "(    ";
                                                worksheet.Cells[incRowExcel, 2].Value = ")";
                                                worksheet.Cells[incRowExcel, 3].Value = "(    ";
                                                worksheet.Cells[incRowExcel, 4].Value = ")     (";
                                                worksheet.Cells[incRowExcel, 6].Value = ")";
                                                incRowExcel++;

                                                worksheet.Cells["A" + _rowLine1 + ":G" + _rowLine1].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLine2 + ":G" + _rowLine2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel = incRowExcel + 4;
                                                worksheet.Row(incRowExcel).PageBreak = true;
                                            }

                                            incRowExcel++;


                                        }



                                        string _rangeA = "A1:G" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 30;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 80;
                                        worksheet.Column(2).Width = 4;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 4;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 4;
                                        worksheet.Column(7).Width = 50;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }



            else if (_listing.ParamInstType.Equals("1")) //EQUITY
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramCounterpart = "";

                            if (_listing.ParamFundIDFrom != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (_listing.ParamCounterpartIDFrom != "All")
                            {
                                _paramCounterpart = "and C.ID = left(@ParamCounterpartIDFrom,charindex('-',@ParamCounterpartIDFrom) - 1) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }
                            cmd.CommandTimeout = 0;
                            cmd.CommandText =      //Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,
                                                    @"Select C.ID CounterpartID,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,  
                                                    F.ID FundID,IT.Name InstrumentType,BC.ID BankCustodianID,BC.Name BankCustodianName,BC.ContactPerson ContactPerson,BC.Fax1 FaxNo,FC.BankAccountNo,FC.BankAccountName,
                                                    IV.ValueDate InstructionDate,sum(IV.DoneVolume) DoneVolume,sum(IV.DoneAmount) DoneAmount,IV.DonePrice DonePrice,IV.InterestPercent InterestPercent,
                                                    IV.ValueDate ValueDate,IV.SettlementDate SettlementDate,IV.TrxTypeID,sum(IV.TotalAmount) TotalAmount,sum(IV.CommissionAmount) CommissionAmount,sum(IV.LevyAmount) LevyAmount,
                                                    sum(IV.KPEIAmount) KPEIAmount,sum(IV.VATAmount) VATAmount,sum(IV.WHTAmount) WHTAmount,sum(IV.IncomeTaxSellAmount) IncomeTaxSellAmount
                                                    from Investment IV  
                                                    left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2                                                     
                                                    left join Fund F on IV.FundPK = F.FundPK and F.status = 2
                                                    left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2 
                                                    left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 
                                                    left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.Status = 2 
                                                    left join BankCustodian BC on BC.BankCustodianPK = F.BankBranchPK and BC.Status = 2
                                                    Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 1 and SettlementPK <> 0 and IV.statusSettlement in (1,2) " +
                                                    _paramFund + _paramCounterpart +
                                                    @" Group By C.ID,C.Name,I.Name,F.Name,IV.valueDate,I.ID,I.Name,  
                                                    F.ID,IT.Name,BC.ID,BC.Name,BC.ContactPerson,BC.Fax1,FC.BankAccountNo,FC.BankAccountName,
                                                    IV.ValueDate,IV.DonePrice,IV.InterestPercent,IV.SettlementDate,IV.TrxTypeID";


                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundIDFrom != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundIDFrom);
                            }
                            if (_listing.ParamCounterpartIDFrom != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamCounterpartIDFrom", _listing.ParamCounterpartIDFrom);
                            }

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Equity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            //rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                            rSingle.CounterpartID = dr0["CounterpartID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartID"]);
                                            //rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                            rSingle.BankAccountName = dr0["BankAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            //rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                            //rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.CommissionAmount = dr0["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.LevyAmount = dr0["LevyAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["LevyAmount"]);
                                            rSingle.KPEIAmount = dr0["KPEIAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KPEIAmount"]);
                                            rSingle.VATAmount = dr0["VATAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["VATAmount"]);
                                            rSingle.WHTAmount = dr0["WHTAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["WHTAmount"]);
                                            rSingle.IncomeTaxSellAmount = dr0["IncomeTaxSellAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxSellAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var GroupByValueDate =
                                               from r in rList
                                               group r by new { r.ValueDate, r.FundID, r.FundName, r.CounterpartID, r.CounterpartName, r.InstrumentType, r.TrxTypeID, r.SettlementDate, r.ContactPerson, r.FaxNo, r.BankAccountNo, r.BankAccountName, r.BankCustodianName } into rGroup
                                               select rGroup;

                                        int incRowExcel = 0;


                                        foreach (var rsHeader in GroupByValueDate)
                                        {
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "REFERENCE";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Date ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 7].Value = (rsHeader.Key.ValueDate);
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Ins. Type";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.InstrumentType;
                                            worksheet.Cells["L" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "To ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.BankCustodianName;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 12].Value = (rsHeader.Key.ValueDate);
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["L" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 11].Value = "Cash Acc No ";
                                            //worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 13].Value = ":";
                                            //worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.BankAccountNo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Attention ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            if (_host.Get_CompanyID() == "AH002")
                                            {
                                                worksheet.Cells[incRowExcel, 7].Value = "Customer Service BK";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.ContactPerson;
                                            }

                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Settled Date";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 12].Value = (rsHeader.Key.SettlementDate);
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["L" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Fax no ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.FaxNo;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Broker ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.CounterpartName;
                                            worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 10].Value = "Settlement Date";
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 11].Value = ":";
                                            //worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            //worksheet.Cells[incRowExcel, 12].Value = (rsHeader.Key.SettlementDate);
                                            //worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells["L" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.FundName;
                                            worksheet.Cells["G" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Value = "Re ";
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Value = ":";
                                            //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 7].Value = "SETTLEMENT INSTRUCTION";
                                            incRowExcel++;




                                            incRowExcel = incRowExcel + 1;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Counterpart";
                                            worksheet.Cells[incRowExcel, 1].Value = "B / S";
                                            worksheet.Cells[incRowExcel, 2].Value = "Instrument";
                                            worksheet.Cells[incRowExcel, 3].Value = "Instrument Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Quantity";
                                            worksheet.Cells[incRowExcel, 5].Value = "Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Total Price";
                                            worksheet.Cells[incRowExcel, 7].Value = "Comm.";
                                            worksheet.Cells[incRowExcel, 8].Value = "Levy + KPEI";
                                            worksheet.Cells[incRowExcel, 9].Value = "VAT";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 10].Value = "KPEI";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 10].Value = "Income Tax";
                                            }
                                            worksheet.Cells[incRowExcel, 11].Value = "Total Settle";


                                            worksheet.Cells[incRowExcel, 12].Value = "WHT";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 13].Value = "Total Payment";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 13].Value = "Total Receive";
                                            }


                                            //THICK BOX HEADER
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            string _range = "A" + incRowExcel + ":M" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 35;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;



                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                decimal _totalSettleForBuy = 0;
                                                decimal _totalSettleForSell = 0;
                                                _totalSettleForBuy = rsDetail.DoneAmount + rsDetail.CommissionAmount + rsDetail.LevyAmount + rsDetail.VATAmount + rsDetail.KPEIAmount;
                                                _totalSettleForSell = rsDetail.DoneAmount - rsDetail.CommissionAmount - rsDetail.LevyAmount - rsDetail.VATAmount - rsDetail.KPEIAmount - rsDetail.IncomeTaxSellAmount;
                                                _range = "A" + incRowExcel + ":M" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 35;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }





                                                //area detail

                                                //worksheet.Cells[incRowExcel, 1].Value = rsDetail.CounterpartID;
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "B";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "S";

                                                }
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Row(incRowExcel).Height = 60;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DoneVolume;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";   //.0000
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CommissionAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.LevyAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.VATAmount;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.KPEIAmount;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.IncomeTaxSellAmount;
                                                }

                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 11].Value = _totalSettleForBuy;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 11].Value = _totalSettleForSell;
                                                }

                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.WHTAmount;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalAmount;
                                                    //worksheet.Cells[incRowExcel, 14].Value = (_totalSettleForBuy - rsDetail.WHTAmount);
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalAmount;
                                                    //worksheet.Cells[incRowExcel, 14].Value = _totalSettleForSell;
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;




                                            }
                                            //THICK BOX DETAIL
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["M" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells["N" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["N" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            //worksheet.Cells["N" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 3].Value = "Total " + rsHeader.Key.TrxTypeID + " (IDR) :";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";

                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "Net Proceeds " + rsHeader.Key.TrxTypeID + " (IDR) :";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                            worksheet.Cells[incRowExcel, 2].Value = _listing.Message;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + incRowExcel + ":N" + (incRowExcel + 2)].Merge = true;
                                            incRowExcel = incRowExcel + 4;
                                            worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 9].Value = "Approved By";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 5;
                                            worksheet.Cells[incRowExcel, 5].Value = "(    ";
                                            worksheet.Cells[incRowExcel, 8].Value = ")";
                                            worksheet.Cells[incRowExcel, 9].Value = "(    ";
                                            worksheet.Cells[incRowExcel, 12].Value = ")";
                                            //worksheet.Cells[incRowExcel, 11].Value = "(    ";
                                            //worksheet.Cells[incRowExcel, 14].Value = ")";
                                            worksheet.Row(incRowExcel).PageBreak = true;





                                        }


                                        string _rangeA = "A1:N" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 35;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];
                                        worksheet.Column(1).Width = 18;
                                        worksheet.Column(2).Width = 35;
                                        worksheet.Column(3).Width = 130;
                                        worksheet.Column(4).Width = 40;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 50;
                                        worksheet.Column(7).Width = 37;
                                        worksheet.Column(8).Width = 40;
                                        worksheet.Column(9).Width = 40;
                                        worksheet.Column(10).Width = 42;
                                        worksheet.Column(11).Width = 50;
                                        worksheet.Column(12).Width = 40;
                                        worksheet.Column(13).Width = 50;
                                        //worksheet.Column(14).Width = 35;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&45 SETTLEMENT LISTING EQUITY";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

            else if (_listing.ParamInstType.Equals("5")) //TIME DEPOSIT
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramCounterpart = "";


                            if (_listing.ParamFundIDFrom != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (_listing.ParamCounterpartIDFrom != "All")
                            {
                                _paramCounterpart = "and C.ID = left(@ParamCounterpartIDFrom,charindex('-',@ParamCounterpartIDFrom) - 1) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.Tenor,BC.ClearingCode,BC.RTGSCode,FC.BankAccountNo,BC.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,CP.ContactPerson,CP.Fax FaxNo,CP.Phone,CP.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,  
                                             F.ID FundID,IT.Name InstrumentType,DATEDIFF(dd,  IV.ValueDate,IV.MaturityDate) TenorDays,CP.ID CounterpartID,IV.* 
                                             from Investment IV  
                                             left join Fund F on IV.FundPK = F.FundPK and F.status = 2 
                                             left join FundCashRef FC on FC.FundCashRefPK = IV.FundCashRefPK and FC.status = 2 
                                             left join BankCustodian BC on BC.BankCustodianPK = F.BankBranchPK and BC.status = 2 
                                             left join Counterpart CP on IV.CounterpartPK = CP.CounterpartPK and CP.status = 2 
                                             left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2 
                                             left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 
                                             Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and SettlementPK <> 0 and IV.statusSettlement = 2 "+
                                              _paramFund + _paramCounterpart;

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);

                            if (_listing.ParamFundIDFrom != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundIDFrom);
                            }
                            if (_listing.ParamCounterpartIDFrom != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamCounterpartIDFrom", _listing.ParamCounterpartIDFrom);
                            }
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Deposito");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.DoneAmount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.OrderPrice = dr0["OrderPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OrderPrice"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                            rSingle.Phone = dr0["Phone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Phone"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            //rSingle.BankBranchID = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                            rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                            rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.ClearingCode = dr0["ClearingCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ClearingCode"]);
                                            rSingle.RTGSCode = dr0["RTGSCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RTGSCode"]);
                                            rSingle.TenorDays = dr0["TenorDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["TenorDays"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            //if (rSingle.TrxTypeID == "LIQUIDATE" )
                                            //{
                                            //    rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                            //}
                                            //else if (rSingle.TrxTypeID == "ROLLOVER")
                                            //{
                                            //    rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["ValueDate"]);
                                            //}
                                            rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["ValueDate"]);
                                            //rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                            rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            //rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName, r.InstrumentID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel++;
                                            int _rowHeader = incRowExcel;
                                            int _rowLine1 = 0;
                                            int _rowLine2 = 0;
                                            int _rowLineA = 0;
                                            int _rowLineB = 0;
                                            int _rowLineC = 0;
                                            int _rowLineD = 0;
                                            int _rowLineE = 0;
                                            int _rowLineF = 0;
                                            int _rowLineG = 0;
                                            int _endRowDetail = incRowExcel;

                                            //incRowExcel++;
                                            worksheet.Cells["A" + _rowHeader + ":L" + _rowHeader].Merge = true;
                                            worksheet.Cells[_rowHeader, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[_rowHeader, 1].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[_rowHeader, 1].Value = "INTRUKSI SETTLEMENT DEPOSITO";
                                            worksheet.Cells[_rowHeader, 1].Style.Font.Bold = true;
                                            worksheet.Cells[_rowHeader, 1].Style.Font.Size = 20;


                                            // Untuk Cetak Tebal
                                            //string _range = "A" + incRowExcel + ":F" + incRowExcel;
                                            //using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            //{
                                            //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            //    r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            //    r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            //    r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //    r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            //    //r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                            //    r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //    r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            //    r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            //}
                                            incRowExcel++;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;
                                                decimal _purchaseAmount = (rsDetail.Amount * rsDetail.OrderPrice);
                                                decimal _recalNetProceeds = (_purchaseAmount + rsDetail.AccruedInterest);


                                                incRowExcel++;
                                                ////area detail
                                                //worksheet.Cells[incRowExcel, 1].Value = "To ";
                                                //worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                //incRowExcel++;
                                                //worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianContactPerson;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Fax / Telp ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianFaxNo;
                                                //worksheet.Cells[incRowExcel, 4].Value = rsDetail.BankCustodianPhone;

                                                worksheet.Cells[incRowExcel, 1].Value = "KEPADA ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                worksheet.Cells[incRowExcel, 6].Value = "TANGGAL ";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = ":";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "U.P. ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianContactPerson;
                                                worksheet.Cells[incRowExcel, 6].Value = "FORM NO ";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = ":";
                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.BankCustodianContactPerson;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fax / Telp ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianFaxNo;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.BankCustodianPhone;
                                                worksheet.Cells[incRowExcel, 6].Value = "REF NO ";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = ":";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Reference;
                                                _rowLine1 = incRowExcel;
                                                incRowExcel++;
                                                incRowExcel = incRowExcel + 1;
                                                worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami informasikan bahwa transaksi berikut telah efektif dengan perincian sebagai berikut : ";
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                incRowExcel = incRowExcel + 1;
                                                _rowLine2 = incRowExcel;
                                                incRowExcel = incRowExcel + 1;
                                                worksheet.Cells[incRowExcel, 1].Value = "From ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                //worksheet.Cells[incRowExcel, 5].Value = "Reference : ";
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.Reference;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nama Rekening ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No Rekening ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountNo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Jenis Transaksi ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TrxTypeID;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nama Bank ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nominal (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No Rekening ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nama Rekening ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Jangaka Waktu ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TenorDays + " Hari";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Code RTGS ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.RTGSCode;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Clearing Code ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClearingCode;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tanggal Transaksi ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                if (rsDetail.TrxTypeID == "PLACEMENT")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                }
                                                else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                }

                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tanggal Jatuh Tempo ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tingkat Nisbah (%) ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Sumber Dana ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = "NO Cash Movement";
                                                //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = "TIME DEPOSIT";
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Pada Saat Jatuh Tempo ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = "Dicairkan Pokok + Nisbah, kredit ke rekening " + rsDetail.FundName + " AC. No. " + rsDetail.BankAccountNo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Catatan ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = "Dana dari Cair DOC " + rsDetail.InstrumentName;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClearingCode;
                                                incRowExcel++;
                                                //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Please execute the following instruction :";
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Benefary Bank ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.CounterpartName;
                                                //worksheet.Cells[incRowExcel, 5].Value = "Clearing Code";
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.ClearingCode;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //_rowLineA = incRowExcel;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "In Favoring of ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                //_rowLineB = incRowExcel;
                                                //incRowExcel++;
                                                //worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Amount (IDR) ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneAmount;
                                                //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //_rowLineC = incRowExcel;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Value Date ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //if (rsDetail.TrxTypeID == "PLACEMENT")
                                                //{
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                //}
                                                //else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                //{
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                //}
                                                //else
                                                //{
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                //}

                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 5].Value = "Interest (%) ";
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.InterestPercent;
                                                //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //_rowLineD = incRowExcel;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Maturity Date ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 5].Value = "Tenor Days ";
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.TenorDays;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                _rowLineE = incRowExcel;
                                                //incRowExcel = incRowExcel + 2;
                                                //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //if (rsDetail.TrxTypeID == "PLACEMENT")
                                                //{
                                                //    worksheet.Cells[incRowExcel, 1].Value = "NEW PLACEMENT";
                                                //}
                                                //else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                //{
                                                //    worksheet.Cells[incRowExcel, 1].Value = "LIQUIDATE";
                                                //}
                                                //else 
                                                //{
                                                //    worksheet.Cells[incRowExcel, 1].Value = "ROLLOVER";
                                                //}

                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                incRowExcel = incRowExcel + 2;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Notes ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                //worksheet.Cells["C" + incRowExcel + ":F" + (incRowExcel + 4)].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = _listing.Message;
                                                //worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                incRowExcel = incRowExcel + 4;
                                                //var _principalText = "";
                                                //if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                //{
                                                //    _principalText = "Principal and Interest";
                                                //}
                                                //else
                                                //{
                                                //    _principalText = "Interest";
                                                //}
                                                //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Upon maturity, please transfer the " + _principalText + " to : ";
                                                //incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tanda tangan yang berwenang, ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                _rowLineF = incRowExcel;
                                                incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Account Name ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Account Number ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountNo;
                                                _rowLineG = incRowExcel;
                                                incRowExcel = incRowExcel + 3;
                                                //incRowExcel = incRowExcel + 2;
                                                //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = "and interest to  ";
                                                worksheet.Cells[incRowExcel, 1].Value = "Eric ";
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = "Rachman ";
                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Manager ";
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = "Manager";
                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                //_rowLineH = incRowExcel;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Account Name ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Account Number ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountNo;
                                                //_rowLineI = incRowExcel;
                                                incRowExcel++;
                                                //incRowExcel = incRowExcel + 4;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Sincerely Yours";
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 2].Value = "Acknowledged by";
                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 4].Value = "Confirmed by";
                                                //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 6].Value = "Verified by";
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 1].Value = "         Sincerely Yours                             Acknowledged by                   Confirmed by                        Verified by";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 3;
                                                worksheet.Cells[incRowExcel, 1].Value = "(";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = ")";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = "(";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = ")";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 2].Value = "(                          )";
                                                //worksheet.Cells[incRowExcel, 4].Value = "(                          )";
                                                //worksheet.Cells[incRowExcel, 6].Value = "(                          )";
                                                incRowExcel++;
                                                incRowExcel = incRowExcel + 3;
                                                worksheet.Cells[incRowExcel, 1].Value = "Contact person ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Phone ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fax ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";


                                                worksheet.Row(incRowExcel).PageBreak = true;
                                                //incRowExcel++;

                                            }

                                            //worksheet.Cells["A" + _rowHeader + ":F" + _rowHeader].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _rowLine1 + ":J" + _rowLine1].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _rowLine2 + ":J" + _rowLine2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //BORDER 
                                            //worksheet.Cells["A" + _rowLineA + ":F" + _rowLineA].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _rowLineA + ":F" + _rowLineA].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _rowLineB + ":F" + _rowLineB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _rowLineC + ":F" + _rowLineC].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _rowLineD + ":F" + _rowLineD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _rowLineE + ":J" + _rowLineE].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells["A" + _rowLineA + ":A" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["C" + _rowLineA + ":C" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            ////worksheet.Cells["D" + _rowLineA + ":D" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["E" + _rowLineA + ":E" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["F" + _rowLineA + ":F" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["G" + _rowLineA + ":G" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells["C" + _rowLineF + ":F" + _rowLineF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["C" + _rowLineF + ":C" + _rowLineG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["F" + _rowLineF + ":F" + _rowLineG].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["C" + _rowLineG + ":F" + _rowLineG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells["C" + _rowLineH + ":F" + _rowLineH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["C" + _rowLineH + ":C" + _rowLineI].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["F" + _rowLineH + ":F" + _rowLineI].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["C" + _rowLineI + ":F" + _rowLineI].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //incRowExcel++;


                                            string _rangeA = "A1:J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 20;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            }
                                        }




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                        worksheet.Column(1).Width = 40;
                                        worksheet.Column(2).Width = 4;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 35;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 4;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 10;
                                        worksheet.Column(10).Width = 10;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            else
            {
                return false;
            }

        }




        public List<Investment> Get_ReferenceFromInvestment(DateTime _date, string _fundPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        if (_fundPK == "0")
                        {
                            cmd.CommandText = "SELECT  distinct Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo FROM Investment I left join Fund F on I.FundPK = F.FundPK and F.status  = 2 " +
                            " where ValueDate = @Date and InvestmentPK <> 0 and F.ID = (select top 1 ID from Fund order by ID) and StatusInvestment = 2 order by RefNo ";
                        }
                        else
                        {
                            cmd.CommandText = "SELECT  distinct Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo FROM Investment  " +
                            " where ValueDate = @Date and InvestmentPK <> 0 and FundPK = @FundPK and StatusInvestment = 2 order by RefNo ";
                            cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        }
                        cmd.Parameters.AddWithValue("@Date", _date);


                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Investment M_Investment = new Investment();
                                    M_Investment.Reference = Convert.ToString(dr["Reference"]);
                                    M_Investment.RefNo = Convert.ToInt32(dr["RefNo"]);
                                    L_Investment.Add(M_Investment);
                                }
                            }

                            return L_Investment;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public List<Investment> Get_ReferenceFromDealing(DateTime _date, int _fundPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = "SELECT  distinct Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo FROM Investment where ValueDate = @Date and FundPK = @FundPK and StatusDealing = 2 order by RefNo ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Investment M_Investment = new Investment();
                                    M_Investment.Reference = Convert.ToString(dr["Reference"]);
                                    M_Investment.RefNo = Convert.ToInt32(dr["RefNo"]);
                                    L_Investment.Add(M_Investment);
                                }
                            }

                            return L_Investment;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public List<Investment> Get_ReferenceFromSettlement(DateTime _date, int _fundPK, int _instType)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        cmd.CommandText = " SELECT  distinct Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo FROM Investment   " +
                        "where StatusSettlement = 2 and InstrumentTypePK=@InstType and ValueDate = @Date and FundPK = @FundPK order by RefNo ";


                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@InstType", _instType);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Investment M_Investment = new Investment();
                                    M_Investment.Reference = Convert.ToString(dr["Reference"]);
                                    M_Investment.RefNo = Convert.ToInt32(dr["RefNo"]);
                                    L_Investment.Add(M_Investment);
                                }
                            }

                            return L_Investment;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public void Settlement_ApproveBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {

                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                  \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                 Select @Time,@PermissionID,'Investment',SettlementPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 1 and Selected  = 1 
                                 \n update Investment set statusSettlement = 2,ApprovedSettlementID = @UsersID,ApprovedSettlementTime = @Time,LastUpdate=@Time where SettlementPK in ( Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 1 and Selected  = 1 ) and statusSettlement = 1 \n 
                                 Update Investment set statusSettlement= 3,VoidSettlementID=@UsersID,VoidSettlementTime=@Time,LastUpdate=@Time  where SettlementPK in (Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 4 and Selected  = 1) and statusSettlement = 4 
                                 ";
                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                 \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                Select @Time,@PermissionID,'Investment',SettlementPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 1 and Selected  = 1 
                                \n update Investment set statusSettlement = 2,ApprovedSettlementID = @UsersID,ApprovedSettlementTime = @Time,LastUpdate=@Time where SettlementPK in ( Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 1 and Selected  = 1 and InstrumentTypePK = @Type ) \n 
                                Update Investment set statusSettlement= 3,VoidSettlementID=@UsersID,VoidSettlementTime=@Time,LastUpdate=@Time  where SettlementPK in (Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 4 and Selected  = 1 and InstrumentTypePK = @Type) 
                                ";
                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }

                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Settlement_RejectBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {

                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                          \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                         Select @Time,@PermissionID,'Investment',SettlementPK,1,'Reject by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 1 and Selected  = 1 
                                         \n update Investment set statusSettlement = 3,selected = 0,VoidSettlementID = @UsersID,VoidSettlementTime = @Time,LastUpdate=@Time where SettlementPK in ( Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 1 and Selected  = 1 ) \n 
                                         Update Investment set statusSettlement= 2  where SettlementPK in (Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 4 and Selected  = 1) 
                                         ";
                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                          \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                         Select @Time,@PermissionID,'Investment',SettlementPK,1,'Reject by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 1 and Selected  = 1 
                                         \n update Investment set statusSettlement = 3,selected = 0,VoidSettlementID = @UsersID,VoidSettlementTime = @Time,LastUpdate=@Time where SettlementPK in ( Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 1 and Selected  = 1 and InstrumentTypePK = @Type) \n 
                                         Update Investment set statusSettlement= 2  where SettlementPK in (Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 4 and Selected  = 1  and InstrumentTypePK = @Type) 
                                         ";
                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }

                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Settlement_VoidBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_type == "None")
                        {

                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                               \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                              Select @Time,@PermissionID,'Investment',SettlementPK,1,'Void by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 2  and Selected  = 1 
                                              \n update Investment set statusSettlement = 3,selected = 0,VoidSettlementID = @UsersID,VoidSettlementTime = @Time,LastUpdate=@Time where SettlementPK in ( Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 2 and Selected  = 1 ) \n 
                                              ";
                        }
                        else
                        {
                            int _typePK = 0;
                            if (_type == "EQUITY")
                            {
                                _typePK = 1;
                            }
                            else if (_type == "BOND")
                            {
                                _typePK = 2;
                            }
                            else
                            {
                                _typePK = 3;
                            }
                            cmd.CommandText = @"Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2 \n 
                                               \n Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate) \n 
                                              Select @Time,@PermissionID,'Investment',SettlementPK,1,'Void by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 2  and Selected  = 1 and InstrumentTypePK = @Type 
                                              \n update Investment set statusSettlement = 3,selected = 0,VoidSettlementID = @UsersID,VoidSettlementTime = @Time,LastUpdate=@Time where SettlementPK in ( Select SettlementPK from Investment where ValueDate between @DateFrom and @DateTo and statusSettlement = 2 and Selected  = 1 and InstrumentTypePK = @Type) \n 
                                              ";
                            cmd.Parameters.AddWithValue("@Type", _typePK);
                        }
                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int InvestmentNotes_Add(string _type, InvestmentListing _investment)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText =
                           @"if Exists( Select * from InvestmentNotes where Reference = @Reference ) 
                                 begin  
                                	update InvestmentNotes set Description = @Description, LastUpdate = @LastUpdate where Reference = @Reference 
                                 end  
                                   else  
                                 begin 	 
                                 INSERT INTO [dbo].[InvestmentNotes] 
                                 ([InvestmentNotesPK],[Status],[Reference],[Type],[Description],[LastUpdate]) 
                                 Select isnull(max(InvestmentNotesPK),0) + 1,2,@Reference,'" + _type + @"',@Description,@LastUpdate from InvestmentNotes
                                 end ";

                        cmd.Parameters.AddWithValue("@Reference", _investment.ParamReferenceText);
                        cmd.Parameters.AddWithValue("@Description", _investment.Message);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        cmd.ExecuteNonQuery();

                        return _host.Get_LastPKByLastUpate(_datetimeNow, "InvestmentNotes");
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }




        //public string Get_MessageFromInvestmentNotes(DateTime _paramlistDate, string _paramFundID, string _type)
        //{
        //    try
        //    {
        //        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //        {
        //            DbCon.Open();

        //            using (SqlCommand cmd = DbCon.CreateCommand())
        //            {

        //                cmd.CommandText = "SELECT  distinct ID.Description,I.Reference, cast(substring(I.reference,1,charindex('/',I.reference,1) - 1) as integer) RefNo FROM Investment I " +
        //                 " left Join InvestmentNotes ID on I.Reference  = ID.Reference and ID.status = 2 " +
        //                 " where StatusSettlement = 2  and ValueDate = @ParamListDate and I.FundPK  = @FundPK and ID.Type = @Type order by RefNo";

        //                cmd.Parameters.AddWithValue("@ParamListDate", _paramlistDate);
        //                cmd.Parameters.AddWithValue("@FundPK", _paramFundID);
        //                cmd.Parameters.AddWithValue("@Type", _type);


        //                using (SqlDataReader dr = cmd.ExecuteReader())
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {

        //                            return Convert.ToString(dr["Description"]);

        //                        }

        //                    }
        //                    return null;
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception err)
        //    {
        //        throw err;
        //    }


        //}

        //public string Get_MessageFromInvestmentNotesFromReference(string _type,InvestmentListing _investment)
        //{
        //    try
        //    {
        //        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //        {
        //            DbCon.Open();

        //            using (SqlCommand cmd = DbCon.CreateCommand())
        //            {

        //                cmd.CommandText = "SELECT  distinct Description from InvestmentNotes " +
        //                 " where Reference = @Reference and Type  = @Type ";

        //                cmd.Parameters.AddWithValue("@Reference", _investment.ParamReferenceFrom);
        //                cmd.Parameters.AddWithValue("@Type", _type);

        //                using (SqlDataReader dr = cmd.ExecuteReader())
        //                {
        //                    if (dr.HasRows)
        //                    {
        //                        while (dr.Read())
        //                        {

        //                            return Convert.ToString(dr["Description"]);

        //                        }

        //                    }
        //                    return null;
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception err)
        //    {
        //        throw err;
        //    }


        //}

        



        public int Validate_ApproveBySelectedDataSettlement(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "and InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        if (_investment.InstrumentTypePK != 5)
                        {
                            cmd.CommandText = @"
                            if Exists
                            (select * From Investment where  StatusSettlement = 2 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 2 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  StatusSettlement = 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  CounterpartPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + "  and instrumentTypePK not in (5,6) and StatusSettlement = 1 " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 4 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  FundCashRefPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + _paramSettlementPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 5 Result 
                            END 
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";
                        }
                        else
                        {
                            cmd.CommandText = @"
                            if Exists
                            (select * From Investment where  StatusSettlement = 2 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 2 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  StatusSettlement = 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  FundCashRefPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + " and StatusSettlement = 1 " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 5 Result 
                            END 
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";
                        }


                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_UnApproveBySelectedDataSettlement(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "and InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        cmd.CommandText = @"
                        if Exists
                        (select * From Investment where  StatusSettlement = 1 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + _paramFund + _paramCounterpart + @" )  
                        BEGIN 
                        Select 1 Result 
                        END 
                        ELSE IF  Exists
                        (select * From Investment where  StatusSettlement = 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + _paramFund + _paramCounterpart + @" )  
                        BEGIN 
                        Select 3 Result 
                        END 
                        ELSE 
                        BEGIN     
                        Select 0 Result 
                        END     ";

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_RejectBySelectedDataSettlement(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "and InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        cmd.CommandText = @"
                        if Exists
                        (select * From Investment where  StatusSettlement = 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramSettlementPK + _paramFund + _paramCounterpart + @" )  
                        BEGIN 
                        Select 3 Result 
                        END 
                        ELSE 
                        BEGIN     
                        Select 0 Result 
                        END     ";

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int Validate_UpdateBrokerBySelectedData(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "and InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and InstrumentTypePK = @InstrumentTypePK";
                        }

                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandTimeout = 0;
                        if (Tools.ClientCode == "03")
                        {
                            cmd.CommandText = @"
                            IF  Exists
                            (select * From Investment where  OrderStatus in ('R') and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )   
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where StatusDealing = 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )   
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";

                        }
                        else
                        {
                            cmd.CommandText = @"
                            if Exists
                            (select * From Investment where  OrderStatus in ('M') and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )   
                            BEGIN 
                            Select 2 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where StatusDealing = 2 and StatusSettlement <> 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )   
                            BEGIN 
                            Select 2 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  OrderStatus in ('R') and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )   
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where StatusDealing = 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )   
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";

                        }



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_ApproveSettlementBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        cmd.CommandText = @"Update Investment set statusSettlement  = 2, ApprovedSettlementID = @ApprovedSettlementID,ApprovedSettlementTime = @ApprovedSettlementTime 
                            where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK + " and ValueDate between @DateFrom and @DateTo and statusSettlement = 1 " + _paramFund + _paramCounterpart +
                            " --Update Investment set selectedSettlement  = 0";



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@ApprovedSettlementID", _investment.ApprovedSettlementID);
                        cmd.Parameters.AddWithValue("@ApprovedSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_UnApproveSettlementBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        cmd.CommandText = @"Update Investment set statusSettlement  = 1, UpdateSettlementID = @UpdateSettlementID,UpdateSettlementTime = @UpdateSettlementTime 
                            where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK + " and ValueDate between @DateFrom and @DateTo and statusSettlement = 2 " + _paramFund + _paramCounterpart +
                            "--Update Investment set selectedSettlement  = 0";



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@UpdateSettlementID", _investment.UpdateSettlementID);
                        cmd.Parameters.AddWithValue("@UpdateSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int Investment_RejectSettlementBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandText = @"Update Investment set statusSettlement  = 3,OrderStatus = 'R', VoidSettlementID = @VoidSettlementID,VoidSettlementTime = @VoidSettlementTime
                            where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK + " and ValueDate between @DateFrom and @DateTo and statusSettlement in (1,2) " + _paramFund + _paramCounterpart +
                            " --Update Investment set selectedSettlement  = 0";



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidSettlementID);
                        cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }



        public List<Investment> Get_DataInvestmentByDateByFundFromToAndInstrumentTypeSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, int _instrumentType, string _fundID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInstrumentType = "";
                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_instrumentType == 2)
                        {
                            _paramInstrumentType = "and TP.InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and TP.InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'    left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2 
                             where  TP.TrxType = 2 and  TP.ValueDate between @DateFrom and @DateTo " + _paramFund + _paramInstrumentType + " and TP.statusInvestment = 1  and (TP.StatusDealing = 0 and TP.InvestmentPK <> 0) order by RefNo ";
                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             TP.* from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'   left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2 
                             where TP.TrxType = 2 and TP.ValueDate between @DateFrom and @DateTo " + _paramFund + _paramInstrumentType + " and TP.statusInvestment = 2  and (TP.StatusDealing not in (3,4)) and (TP.StatusSettlement not in (3,4)) and TP.InvestmentPK <> 0 order by RefNo ";

                        }


                        else
                        {
                            if (_instrumentType == 5)
                            {


                                //     if (Tools.ClientCode == "05")
                                //     {
                                //         cmd.CommandTimeout = 0;
                                //         cmd.CommandText = @"

                                //         Declare @EndDayTrailsPK int
                                // Declare @MaxDateEndDayFP datetime

                                // --Select @EndDayTrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where ValueDate = dbo.FWorkingDay(@DateFrom,-1)
                                // --and status = 2

                                // select @EndDayTrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                                // where ValueDate = 
                                // (
                                // select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @DateFrom and FundPK = @FundPK
                                // )
                                // and status = 2 and FundPK = @FundPK



                                // select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
                                // case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                                // cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,
                                // CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,    
                                // CP.Name CounterpartName,    
                                // TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,
                                // MV2.DescOne BoardTypeDesc
                                // ,InvestmentPK,DealingPK,SettlementPK,SelectedInvestment,SelectedDealing,SelectedSettlement,TP.HistoryPK,StatusInvestment,StatusDealing,StatusSettlement,TP.Notes,ValueDate
                                // ,TP.PeriodPK,TP.Category,InstructionDate,Reference,TP.InstrumentTypePK,TrxType,TrxTypeID,TP.CounterpartPK,TP.InstrumentPK,TP.FundPK	
                                // ,TP.FundCashRefPK,OrderPrice,Lot,TP.LotInShare,RangePrice,AcqPrice,Volume,Amount,TP.InterestPercent,BreakInterestPercent
                                // ,AccruedInterest,DoneAccruedInterest,TP.LastCouponDate,TP.NextCouponDate,TP.MaturityDate,SettlementDate,AcqDate,InvestmentNotes,DoneLot,DoneVolume
                                // ,DonePrice,DoneAmount,Tenor,CommissionPercent,LevyPercent,KPEIPercent,VATPercent,WHTPercent,OTCPercent,IncomeTaxSellPercent
                                // ,IncomeTaxInterestPercent,IncomeTaxGainPercent,CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,IncomeTaxInterestAmount
                                // ,IncomeTaxGainAmount,TotalAmount,CurrencyRate,AcqPrice1,AcqDate1,AcqPrice2,AcqDate2,AcqPrice3,AcqDate3,AcqPrice4
                                // ,AcqDate4,AcqPrice5,AcqDate5,SettlementMode,BoardType,OrderStatus,Posted,PostedBy,PostedTime,Revised,RevisedBy,RevisedTime	
                                // ,TP.EntryUsersID,TP.EntryTime,TP.UpdateUsersID,TP.UpdateTime,TP.ApprovedUsersID,TP.ApprovedTime,TP.VoidUsersID,TP.VoidTime
                                // ,EntryDealingID,EntryDealingTime,UpdateDealingID,UpdateDealingTime,ApprovedDealingID,ApprovedDealingTime,VoidDealingID,VoidDealingTime
                                // ,EntrySettlementID,EntrySettlementTime,UpdateSettlementID,UpdateSettlementTime,ApprovedSettlementID,ApprovedSettlementTime,VoidSettlementID,VoidSettlementTime
                                // ,TP.DBUserID,TP.DBTerminalID,TP.LastUpdate,TP.LastUpdateDB,I.BankPK,AcqVolume,AcqVolume1,AcqVolume2,AcqVolume3,AcqVolume4,AcqVolume5,AcqPrice6,AcqDate6,AcqVolume6
                                // ,AcqPrice7,AcqDate7,AcqVolume7,AcqPrice8,AcqDate8,AcqVolume8,AcqPrice9,AcqDate9,AcqVolume9,TP.TaxExpensePercent,1 MarketPK, M.ID MarketID
                                // ,Tp.BankBranchPK,Tp.InterestDaysType,Tp.InterestPaymentType,Tp.PaymentModeOnMaturity,Tp.YieldPercent,Tp.BitIsRounding,Tp.AccruedHoldingAmount,TP.TrxBuy, Tp.BitBreakable, Tp.CrossFundFromPK,Z.ID CrossFundFromID,TP.BitForeignTrx


                                // from Investment TP left join        
                                // Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join        
                                // Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join        
                                // Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join        
                                // Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join    
                                // FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join    
                                //         InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                                // MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                                // MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join     
                                // MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join
                                // Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join 
                                // Market M on TP.MarketPK = M.MarketPK and M.status = 2      
                                // where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo  and IT.Type = 3
                                // " + _paramFund + @"   and TP.InvestmentNotes  <> 'Reject By Amend' 
                                // and TP.InvestmentPK <> 0 

                                // UNION ALL

                                // Select 'VIEW ONLY','','',A.FundID,'','',A.InstrumentID,B.name,'','','','','','','',''
                                // ,0,0,0,0,0,0,0,0,0,0,'',@DateFrom
                                // ,0,'',@datefrom,'',	3,0,'',0,A.InstrumentPK,A.FundPK
                                // ,0,0,0,0,'',0,A.Balance,A.Balance,B.InterestPercent,0
                                //,0,0,'','','',A.AcqDate SettlementDate,'','',0,0
                                // ,0,0,0,0,0,0,0,0,0,0
                                // ,0,0,0,0,0,0,0,0,0,0
                                // ,0,0,0,0,'',0,'',0,'',0
                                // ,'',0,'',0,0,'',0,'','',0,'',''
                                // ,'','','','','','','','','','','','','','','','','',''
                                // ,'','','','','','','','','','',0,0,0,0,0,0,0
                                // ,0,'',0,0,'',0,0,'',0,0,'',0,A.TaxExpensePercent,1,MR.ID
                                // ,0,0,0,0,0,0,0,0,0,0,'',0

                                // from FundPosition A
                                // left join instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                                // left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
                                // left join Fund CR on A.FundPK = CR.FundPK and CR.status = 2
                                // left join Market MR on A.MarketPK = MR.MarketPK and MR.Status = 2
                                // where TrailsPK = @EndDayTrailsPK " + _paramFund + @"
                                // and A.MaturityDate = @DateFrom and C.Type = 3
                                // order by OrderStatusDesc
                                //         ";
                                //     }


                                if (Tools.ParamFundScheme)
                                {
                                    cmd.CommandTimeout = 0;
                                    cmd.CommandText = @"

                                
declare @ValueDateFrom date
set @ValueDateFrom = dateadd(day,1,dbo.FWorkingDay(@dateto,-1))

declare @CFundPK int
declare @Temp table
(
StatusDesc nvarchar(100),OrderStatusDesc nvarchar(100),RefNo int,FundID nvarchar(100),PeriodID nvarchar(100),InstrumentTypeID nvarchar(100),InstrumentID nvarchar(100),InstrumentName nvarchar(100),CounterpartID nvarchar(100),    
CounterpartName nvarchar(100),FundName nvarchar(100),FundCashRefID nvarchar(100),FundCashRefName nvarchar(100),SettlementModeDesc nvarchar(100),
BoardTypeDesc nvarchar(100),InvestmentPK int,DealingPK int,SettlementPK int,SelectedInvestment bit,SelectedDealing bit,SelectedSettlement bit,HistoryPK int,StatusInvestment int,StatusDealing int,StatusSettlement int,Notes nvarchar(100),ValueDate datetime,
PeriodPK int,Category nvarchar(100),InstructionDate datetime,Reference nvarchar(100),InstrumentTypePK int,TrxType int,TrxTypeID nvarchar(100),CounterpartPK int,InstrumentPK int,FundPK int	,
FundCashRefPK int,OrderPrice numeric(18,8),Lot numeric(18,4),LotInShare int,RangePrice nvarchar(100),AcqPrice numeric(18,8),Volume numeric(22,4),Amount numeric(22,4),InterestPercent numeric(18,8),BreakInterestPercent numeric(18,8),
AccruedInterest numeric(22,4),DoneAccruedInterest numeric(22,4),LastCouponDate datetime,NextCouponDate datetime,MaturityDate datetime,SettlementDate datetime,AcqDate datetime,InvestmentNotes nvarchar(100),DoneLot numeric(18,4),DoneVolume numeric(22,4),
DonePrice numeric(18,8),DoneAmount numeric(22,4),Tenor int,CommissionPercent numeric(22,8),LevyPercent numeric(22,8),KPEIPercent numeric(22,8),VATPercent numeric(22,8),WHTPercent numeric(22,8),OTCPercent numeric(22,8),IncomeTaxSellPercent numeric(22,8),
IncomeTaxInterestPercent numeric(22,8),IncomeTaxGainPercent numeric(22,8),CommissionAmount numeric(22,4),LevyAmount numeric(22,4),KPEIAmount numeric(22,4),VATAmount numeric(22,4),WHTAmount numeric(22,4),OTCAmount numeric(22,4),IncomeTaxSellAmount numeric(22,4),IncomeTaxInterestAmount numeric(22,4),
IncomeTaxGainAmount numeric(22,4),TotalAmount numeric(22,4),CurrencyRate numeric(22,4),AcqPrice1 numeric(18,8),AcqDate1 datetime,AcqPrice2 numeric(18,8),AcqDate2 datetime,AcqPrice3 numeric(18,8),AcqDate3 datetime,AcqPrice4 numeric(18,8),
AcqDate4 datetime,AcqPrice5  numeric(18,8),AcqDate5 datetime,SettlementMode int,BoardType int,OrderStatus nvarchar(100),Posted bit,PostedBy nvarchar(100),PostedTime datetime,Revised bit,RevisedBy nvarchar(100),RevisedTime	datetime,
EntryUsersID nvarchar(100), EntryTime datetime,UpdateUsersID nvarchar(100),UpdateTime datetime,ApprovedUsersID nvarchar(100),ApprovedTime datetime,VoidUsersID nvarchar(100),VoidTime datetime,
EntryDealingID nvarchar(100),EntryDealingTime datetime,UpdateDealingID nvarchar(100),UpdateDealingTime datetime,ApprovedDealingID nvarchar(100),ApprovedDealingTime datetime,VoidDealingID nvarchar(100),VoidDealingTime datetime,
EntrySettlementID nvarchar(100),EntrySettlementTime datetime,UpdateSettlementID nvarchar(100),UpdateSettlementTime datetime,ApprovedSettlementID nvarchar(100),ApprovedSettlementTime datetime,VoidSettlementID nvarchar(100),VoidSettlementTime datetime,
DBUserID nvarchar(100),DBTerminalID nvarchar(100),LastUpdate datetime,LastUpdateDB datetime,BankPK int,AcqVolume numeric(18,4),AcqVolume1 numeric(18,4),AcqVolume2 numeric(18,4),AcqVolume3 numeric(18,4),AcqVolume4 numeric(18,4),AcqVolume5 numeric(18,4),AcqPrice6 numeric(18,8),AcqDate6 datetime,AcqVolume6  numeric(18,4),
AcqPrice7  numeric(18,8),AcqDate7 datetime,AcqVolume7  numeric(18,4),AcqPrice8  numeric(18,8),AcqDate8 datetime,AcqVolume8  numeric(18,4),AcqPrice9  numeric(18,8),AcqDate9 datetime,AcqVolume9  numeric(18,4),TaxExpensePercent  numeric(18,4),MarketPK int,MarketID nvarchar(100),
BankBranchPK int,InterestDaysType int,InterestPaymentType int,PaymentModeOnMaturity int,YieldPercent  numeric(18,4),BitIsRounding bit,AccruedHoldingAmount  numeric(18,4),TrxBuy int,BitBreakable bit,CrossFundFromPK int,CrossFundFromID nvarchar(100),
BankBranchID nvarchar(100),PTPCode  nvarchar(100),BitForeignTrx bit

)


CREATE TABLE #EFPFund
(
	TrailsPK int,
	FundPK int
)


CREATE CLUSTERED INDEX indx_EFPFund ON #EFPFund (TrailsPK,FundPK);	

insert into #EFPFund
Select max(EndDayTrailsFundPortfolioPK),CR.FundPK  From EndDayTrailsFundPortfolio CR
where CR.status = 2 and CR.valueDate < @DateTo " + _paramFund + @" 
group by CR.FundPK


 
insert into @Temp
select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,
CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,    
CP.Name CounterpartName,    
CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,
MV2.DescOne BoardTypeDesc
,InvestmentPK,DealingPK,SettlementPK,SelectedInvestment,SelectedDealing,SelectedSettlement,TP.HistoryPK,StatusInvestment,StatusDealing,StatusSettlement,TP.Notes,ValueDate
,TP.PeriodPK,TP.Category,InstructionDate,Reference,TP.InstrumentTypePK,TrxType,TrxTypeID,TP.CounterpartPK,TP.InstrumentPK,TP.FundPK	
,TP.FundCashRefPK,OrderPrice,Lot,TP.LotInShare,RangePrice,AcqPrice,Volume,Amount,TP.InterestPercent,BreakInterestPercent
,AccruedInterest,DoneAccruedInterest,TP.LastCouponDate,TP.NextCouponDate,TP.MaturityDate,SettlementDate,AcqDate,InvestmentNotes,DoneLot,DoneVolume
,DonePrice,DoneAmount,Tenor,CommissionPercent,LevyPercent,KPEIPercent,VATPercent,WHTPercent,OTCPercent,IncomeTaxSellPercent
,IncomeTaxInterestPercent,IncomeTaxGainPercent,CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,IncomeTaxInterestAmount
,IncomeTaxGainAmount,TotalAmount,CurrencyRate,AcqPrice1,AcqDate1,AcqPrice2,AcqDate2,AcqPrice3,AcqDate3,AcqPrice4
,AcqDate4,AcqPrice5,AcqDate5,SettlementMode,BoardType,OrderStatus,Posted,PostedBy,PostedTime,Revised,RevisedBy,RevisedTime	
,TP.EntryUsersID,TP.EntryTime,TP.UpdateUsersID,TP.UpdateTime,TP.ApprovedUsersID,TP.ApprovedTime,TP.VoidUsersID,TP.VoidTime
,EntryDealingID,EntryDealingTime,UpdateDealingID,UpdateDealingTime,ApprovedDealingID,ApprovedDealingTime,VoidDealingID,VoidDealingTime
,EntrySettlementID,EntrySettlementTime,UpdateSettlementID,UpdateSettlementTime,ApprovedSettlementID,ApprovedSettlementTime,VoidSettlementID,VoidSettlementTime
,TP.DBUserID,TP.DBTerminalID,TP.LastUpdate,TP.LastUpdateDB,I.BankPK,AcqVolume,AcqVolume1,AcqVolume2,AcqVolume3,AcqVolume4,AcqVolume5,AcqPrice6,AcqDate6,AcqVolume6
,AcqPrice7,AcqDate7,AcqVolume7,AcqPrice8,AcqDate8,AcqVolume8,AcqPrice9,AcqDate9,AcqVolume9,TP.TaxExpensePercent,1 MarketPK, M.ID MarketID
,Tp.BankBranchPK,Tp.InterestDaysType,Tp.InterestPaymentType,Tp.PaymentModeOnMaturity,Tp.YieldPercent,Tp.BitIsRounding,Tp.AccruedHoldingAmount,TP.TrxBuy, Tp.BitBreakable, Tp.CrossFundFromPK,Z.ID CrossFundFromID,
BB.PTPCode +' - '+ B.ID  + ' - ' + BB.ID BankBranchID,BB.PTPCode,TP.BitForeignTrx
 
from Investment TP left join        
Period P on TP.PeriodPK = P.PeriodPK and P.Status in(1,2)   left join        
Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join        
Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join        
Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join    
FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status in(1,2)    left join    
InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status in(1,2)   left join
MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status in(1,2)   left join      
MasterValue MV on IT.Type = MV.Code and MV.Status in(1,2)   and MV.ID = 'InstrumentType'  left join     
MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status in(1,2)   and MV2.ID = 'BoardType' left join
Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status in(1,2)    left join 
Market M on TP.MarketPK = M.MarketPK and M.status in(1,2)    left join   
Bank B on TP.BankPK = B.BankPK and B.status in(1,2)   left join
BankBranch BB on TP.BankBranchPK = BB.BankBranchPK and BB.Status in(1,2)    left join
#EFPFund C on TP.FundPK = C.FundPK   
where TP.TrxType = 2 and   TP.ValueDate between @ValueDateFrom and @DateTo  and IT.Type = 3
and TP.InvestmentNotes  <> 'Reject By Amend' 
and TP.InvestmentPK <> 0 
and C.FundPK is not null


  
UNION ALL

Select 'VIEW ONLY','','',A.FundID,'','',A.InstrumentID,B.name,'','','','','','',''
,0,0,0,0,0,0,0,0,0,0,'',@DateTo
,0,'',@DateTo,'',	3,0,'',0,A.InstrumentPK,A.FundPK
,0,0,0,0,'',0,A.Balance,A.Balance,B.InterestPercent,0
,0,0,'','','',A.AcqDate SettlementDate,'','',0,0
,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,'',0,'',0,'',0
,'',0,'',0,0,'',0,'','',0,'',''
,'','','','','','','','','','','','','','','','','',''
,'','','','','','','','','','',0,0,0,0,0,0,0
,0,'',0,0,'',0,0,'',0,0,'',0,A.TaxExpensePercent,1,MR.ID
,0,0,0,0,0,0,0,0,0,0,'',F.PTPCode +' - '+ D.ID  + ' - ' + F.ID BankBranchID,F.PTPCode,0

from FundPosition A
left join instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
left join Fund CR on A.FundPK = CR.FundPK and CR.status = 2
left join Market MR on A.MarketPK = MR.MarketPK and MR.Status = 2
left join Bank D on A.BankPK = D.BankPK and D.Status in(1,2)
left join BankBranch F on A.BankBranchPK = F.BankBranchPK and F.Status in(1,2)
left join #EFPFund E on A.TrailsPK = E.TrailsPK and A.FundPK = E.FundPK
where A.MaturityDate between @ValueDateFrom and @DateTo and C.Type = 3 and E.FundPK is not null
order by OrderStatusDesc



select * from @Temp

                                    ";
                                }
                                else
                                {
                                    cmd.CommandTimeout = 0;
                                    cmd.CommandText = @"
                                    
                                    declare @ValueDateFrom date
                                    set @ValueDateFrom = dateadd(day,1,dbo.FWorkingDay(@dateto,-1))

                                    declare @CFundPK int
                                    declare @Temp table
                                    (
                                    StatusDesc nvarchar(100),OrderStatusDesc nvarchar(100),RefNo int,FundID nvarchar(100),PeriodID nvarchar(100),InstrumentTypeID nvarchar(100),InstrumentID nvarchar(100),InstrumentName nvarchar(100),CounterpartID nvarchar(100),    
                                    CounterpartName nvarchar(100),FundName nvarchar(100),FundCashRefID nvarchar(100),FundCashRefName nvarchar(100),SettlementModeDesc nvarchar(100),
                                    BoardTypeDesc nvarchar(100),InvestmentPK int,DealingPK int,SettlementPK int,SelectedInvestment bit,SelectedDealing bit,SelectedSettlement bit,HistoryPK int,StatusInvestment int,StatusDealing int,StatusSettlement int,Notes nvarchar(100),ValueDate datetime,
                                    PeriodPK int,Category nvarchar(100),InstructionDate datetime,Reference nvarchar(100),InstrumentTypePK int,TrxType int,TrxTypeID nvarchar(100),CounterpartPK int,InstrumentPK int,FundPK int	,
                                    FundCashRefPK int,OrderPrice numeric(18,8),Lot numeric(18,4),LotInShare int,RangePrice nvarchar(100),AcqPrice numeric(18,8),Volume numeric(22,4),Amount numeric(22,4),InterestPercent numeric(18,8),BreakInterestPercent numeric(18,8),
                                    AccruedInterest numeric(22,4),DoneAccruedInterest numeric(22,4),LastCouponDate datetime,NextCouponDate datetime,MaturityDate datetime,SettlementDate datetime,AcqDate datetime,InvestmentNotes nvarchar(100),DoneLot numeric(18,4),DoneVolume numeric(22,4),
                                    DonePrice numeric(18,8),DoneAmount numeric(22,4),Tenor int,CommissionPercent numeric(22,8),LevyPercent numeric(22,8),KPEIPercent numeric(22,8),VATPercent numeric(22,8),WHTPercent numeric(22,8),OTCPercent numeric(22,8),IncomeTaxSellPercent numeric(22,8),
                                    IncomeTaxInterestPercent numeric(22,8),IncomeTaxGainPercent numeric(22,8),CommissionAmount numeric(22,4),LevyAmount numeric(22,4),KPEIAmount numeric(22,4),VATAmount numeric(22,4),WHTAmount numeric(22,4),OTCAmount numeric(22,4),IncomeTaxSellAmount numeric(22,4),IncomeTaxInterestAmount numeric(22,4),
                                    IncomeTaxGainAmount numeric(22,4),TotalAmount numeric(22,4),CurrencyRate numeric(22,4),AcqPrice1 numeric(18,8),AcqDate1 datetime,AcqPrice2 numeric(18,8),AcqDate2 datetime,AcqPrice3 numeric(18,8),AcqDate3 datetime,AcqPrice4 numeric(18,8),
                                    AcqDate4 datetime,AcqPrice5  numeric(18,8),AcqDate5 datetime,SettlementMode int,BoardType int,OrderStatus nvarchar(100),Posted bit,PostedBy nvarchar(100),PostedTime datetime,Revised bit,RevisedBy nvarchar(100),RevisedTime	datetime,
                                    EntryUsersID nvarchar(100), EntryTime datetime,UpdateUsersID nvarchar(100),UpdateTime datetime,ApprovedUsersID nvarchar(100),ApprovedTime datetime,VoidUsersID nvarchar(100),VoidTime datetime,
                                    EntryDealingID nvarchar(100),EntryDealingTime datetime,UpdateDealingID nvarchar(100),UpdateDealingTime datetime,ApprovedDealingID nvarchar(100),ApprovedDealingTime datetime,VoidDealingID nvarchar(100),VoidDealingTime datetime,
                                    EntrySettlementID nvarchar(100),EntrySettlementTime datetime,UpdateSettlementID nvarchar(100),UpdateSettlementTime datetime,ApprovedSettlementID nvarchar(100),ApprovedSettlementTime datetime,VoidSettlementID nvarchar(100),VoidSettlementTime datetime,
                                    DBUserID nvarchar(100),DBTerminalID nvarchar(100),LastUpdate datetime,LastUpdateDB datetime,BankPK int,AcqVolume numeric(18,4),AcqVolume1 numeric(18,4),AcqVolume2 numeric(18,4),AcqVolume3 numeric(18,4),AcqVolume4 numeric(18,4),AcqVolume5 numeric(18,4),AcqPrice6 numeric(18,8),AcqDate6 datetime,AcqVolume6  numeric(18,4),
                                    AcqPrice7  numeric(18,8),AcqDate7 datetime,AcqVolume7  numeric(18,4),AcqPrice8  numeric(18,8),AcqDate8 datetime,AcqVolume8  numeric(18,4),AcqPrice9  numeric(18,8),AcqDate9 datetime,AcqVolume9  numeric(18,4),TaxExpensePercent  numeric(18,4),MarketPK int,MarketID nvarchar(100),
                                    BankBranchPK int,InterestDaysType int,InterestPaymentType int,PaymentModeOnMaturity int,YieldPercent  numeric(18,4),BitIsRounding bit,AccruedHoldingAmount  numeric(18,4),TrxBuy int,BitBreakable bit,CrossFundFromPK int,CrossFundFromID nvarchar(100),
                                    BankBranchID nvarchar(100),PTPCode  nvarchar(100),BitForeignTrx bit

                                    )


                                    CREATE TABLE #EFPFund
                                    (
	                                    TrailsPK int,
	                                    FundPK int
                                    )


                                    CREATE CLUSTERED INDEX indx_EFPFund ON #EFPFund (TrailsPK,FundPK);	

                                    insert into #EFPFund
                                    Select max(EndDayTrailsFundPortfolioPK),CR.FundPK  From EndDayTrailsFundPortfolio CR
                                    where CR.status = 2 and CR.valueDate < @DateTo 
                                    group by CR.FundPK


 
                                    insert into @Temp
                                    select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
                                    case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                                    cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,
                                    CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,    
                                    CP.Name CounterpartName,    
                                    CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,
                                    MV2.DescOne BoardTypeDesc
                                    ,InvestmentPK,DealingPK,SettlementPK,SelectedInvestment,SelectedDealing,SelectedSettlement,TP.HistoryPK,StatusInvestment,StatusDealing,StatusSettlement,TP.Notes,ValueDate
                                    ,TP.PeriodPK,TP.Category,InstructionDate,Reference,TP.InstrumentTypePK,TrxType,TrxTypeID,TP.CounterpartPK,TP.InstrumentPK,TP.FundPK	
                                    ,TP.FundCashRefPK,OrderPrice,Lot,TP.LotInShare,RangePrice,AcqPrice,Volume,Amount,TP.InterestPercent,BreakInterestPercent
                                    ,AccruedInterest,DoneAccruedInterest,TP.LastCouponDate,TP.NextCouponDate,TP.MaturityDate,SettlementDate,AcqDate,InvestmentNotes,DoneLot,DoneVolume
                                    ,DonePrice,DoneAmount,Tenor,CommissionPercent,LevyPercent,KPEIPercent,VATPercent,WHTPercent,OTCPercent,IncomeTaxSellPercent
                                    ,IncomeTaxInterestPercent,IncomeTaxGainPercent,CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,IncomeTaxInterestAmount
                                    ,IncomeTaxGainAmount,TotalAmount,CurrencyRate,AcqPrice1,AcqDate1,AcqPrice2,AcqDate2,AcqPrice3,AcqDate3,AcqPrice4
                                    ,AcqDate4,AcqPrice5,AcqDate5,SettlementMode,BoardType,OrderStatus,Posted,PostedBy,PostedTime,Revised,RevisedBy,RevisedTime	
                                    ,TP.EntryUsersID,TP.EntryTime,TP.UpdateUsersID,TP.UpdateTime,TP.ApprovedUsersID,TP.ApprovedTime,TP.VoidUsersID,TP.VoidTime
                                    ,EntryDealingID,EntryDealingTime,UpdateDealingID,UpdateDealingTime,ApprovedDealingID,ApprovedDealingTime,VoidDealingID,VoidDealingTime
                                    ,EntrySettlementID,EntrySettlementTime,UpdateSettlementID,UpdateSettlementTime,ApprovedSettlementID,ApprovedSettlementTime,VoidSettlementID,VoidSettlementTime
                                    ,TP.DBUserID,TP.DBTerminalID,TP.LastUpdate,TP.LastUpdateDB,I.BankPK,AcqVolume,AcqVolume1,AcqVolume2,AcqVolume3,AcqVolume4,AcqVolume5,AcqPrice6,AcqDate6,AcqVolume6
                                    ,AcqPrice7,AcqDate7,AcqVolume7,AcqPrice8,AcqDate8,AcqVolume8,AcqPrice9,AcqDate9,AcqVolume9,TP.TaxExpensePercent,1 MarketPK, M.ID MarketID
                                    ,Tp.BankBranchPK,Tp.InterestDaysType,Tp.InterestPaymentType,Tp.PaymentModeOnMaturity,Tp.YieldPercent,Tp.BitIsRounding,Tp.AccruedHoldingAmount,TP.TrxBuy, Tp.BitBreakable, Tp.CrossFundFromPK,Z.ID CrossFundFromID,
                                    BB.PTPCode +' - '+ B.ID  + ' - ' + BB.ID BankBranchID,BB.PTPCode,TP.BitForeignTrx
 
                                    from Investment TP left join        
                                    Period P on TP.PeriodPK = P.PeriodPK and P.Status in(1,2)   left join        
                                    Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join        
                                    Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join        
                                    Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join    
                                    FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status in(1,2)    left join    
                                    InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status in(1,2)   left join
                                    MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status in(1,2)   left join      
                                    MasterValue MV on IT.Type = MV.Code and MV.Status in(1,2)   and MV.ID = 'InstrumentType'  left join     
                                    MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status in(1,2)   and MV2.ID = 'BoardType' left join
                                    Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status in(1,2)    left join 
                                    Market M on TP.MarketPK = M.MarketPK and M.status in(1,2)    left join   
                                    Bank B on TP.BankPK = B.BankPK and B.status in(1,2)   left join
                                    BankBranch BB on TP.BankBranchPK = BB.BankBranchPK and BB.Status in(1,2)    left join
                                    #EFPFund C on TP.FundPK = C.FundPK   
                                    where TP.TrxType = 2 and   TP.ValueDate between @ValueDateFrom and @DateTo  and IT.Type = 3
                                    and TP.InvestmentNotes  <> 'Reject By Amend' 
                                    and TP.InvestmentPK <> 0 
                                    and C.FundPK is not null


  
                                    UNION ALL

                                    Select 'VIEW ONLY','','',A.FundID,'','',A.InstrumentID,B.name,'','','','','','',''
                                    ,0,0,0,0,0,0,0,0,0,0,'',@DateTo
                                    ,0,'',@DateTo,'',	3,0,'',0,A.InstrumentPK,A.FundPK
                                    ,0,0,0,0,'',0,A.Balance,A.Balance,B.InterestPercent,0
                                    ,0,0,'','','',A.AcqDate SettlementDate,'','',0,0
                                    ,0,0,0,0,0,0,0,0,0,0
                                    ,0,0,0,0,0,0,0,0,0,0
                                    ,0,0,0,0,'',0,'',0,'',0
                                    ,'',0,'',0,0,'',0,'','',0,'',''
                                    ,'','','','','','','','','','','','','','','','','',''
                                    ,'','','','','','','','','','',0,0,0,0,0,0,0
                                    ,0,'',0,0,'',0,0,'',0,0,'',0,A.TaxExpensePercent,1,MR.ID
                                    ,0,0,0,0,0,0,0,0,0,0,'',F.PTPCode +' - '+ D.ID  + ' - ' + F.ID BankBranchID,F.PTPCode,0

                                    from FundPosition A
                                    left join instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                                    left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
                                    left join Fund CR on A.FundPK = CR.FundPK and CR.status = 2
                                    left join Market MR on A.MarketPK = MR.MarketPK and MR.Status = 2
                                    left join Bank D on A.BankPK = D.BankPK and D.Status in(1,2)
                                    left join BankBranch F on A.BankBranchPK = F.BankBranchPK and F.Status in(1,2)
                                    left join #EFPFund E on A.TrailsPK = E.TrailsPK and A.FundPK = E.FundPK
                                    where A.MaturityDate between @ValueDateFrom and @DateTo and C.Type = 3 and E.FundPK is not null
                                    order by OrderStatusDesc



                                    select * from @Temp

                                    ";
                                }
                            }

                            else if (_instrumentType == 2)
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join  
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' --and IT.Type in (2,5,14)
                             " + _paramFund + _paramInstrumentType + @"
                             order by OrderStatusDesc  ";

                            }
                            else if (_instrumentType == 6)
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join 
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join     
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' and IT.Type = 4
                             " + _paramFund + @"
                             order by OrderStatusDesc  ";

                            }
                            else
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join 
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join     
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' and IT.Type = 1
                             " + _paramFund + @"
                             order by RefNo  ";

                            }
                        }

                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        if (_instrumentType != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _instrumentType);
                        }
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int Validate_ApproveBySelectedDataDealing(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";
                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }

                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "and InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and InstrumentTypePK =  @InstrumentTypePK ";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandTimeout = 0;
                        if (_investment.InstrumentTypePK == 1)
                        {
                            if (Tools.ClientCode == "03")
                            {
                                cmd.CommandText = @"
IF  Exists
(select * From Investment where statusInvestment  = 2 and OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
BEGIN 
Select 3 Result 
END 
ELSE IF  Exists
(select * From Investment where  statusInvestment  = 2 and CounterpartPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + "  and StatusDealing = 1 " + _paramFund + _paramCounterpart + @" )  
BEGIN 
Select 4 Result
END  
ELSE IF  Exists
(select * From Investment where  statusInvestment  = 2 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 and (DonePrice = 0 or Donevolume = 0) " + _paramFund + _paramCounterpart + @" )  
BEGIN 
Select 5 Result
END  
ELSE IF EXISTS
(
SELECT * From Investment A
LEFT JOIN dbo.CounterpartCommission B ON (A.FundPK = B.FundPK or B.FundPK = 0)
AND (A.CounterpartPK = B.CounterpartPK) AND B.status = 2
AND A.BoardType = B.BoardType
WHERE  statusInvestment  = 2 and ValueDate between @ValueDateFrom and @ValueDateTo  
" + _paramTrxType + _paramInstrumentType + _paramDealingPK + @" 
 and StatusDealing = 1 and isnull(B.Date,'01/01/1900') <= @ValueDateFrom
AND B.CounterpartCommissionPK IS NULL

)
BEGIN
SELECT 9 Result
END
ELSE 
BEGIN     
Select 0 Result 
END      ";
                            }
                            else
                            {

                                cmd.CommandText = @"
if Exists
(select * From Investment where statusInvestment  = 2 and OrderStatus = 'M' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
BEGIN 
Select 2 Result 
END 
ELSE IF  Exists
(select * From Investment where statusInvestment  = 2 and OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
BEGIN 
Select 3 Result 
END 
ELSE IF  Exists
(select * From Investment where  statusInvestment  = 2 and CounterpartPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + "  and StatusDealing = 1 " + _paramFund + _paramCounterpart + @" )  
BEGIN 
Select 4 Result
END  
ELSE IF  Exists
(select * From Investment where  statusInvestment  = 2 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 and (DonePrice = 0 or Donevolume = 0) " + _paramFund + _paramCounterpart + @" )  
BEGIN 
Select 5 Result
END  
ELSE IF EXISTS
(
SELECT * From Investment A
LEFT JOIN dbo.CounterpartCommission B ON (A.FundPK = B.FundPK or B.FundPK = 0)
AND (A.CounterpartPK = B.CounterpartPK) AND B.status = 2
AND A.BoardType = B.BoardType
WHERE  statusInvestment  = 2 and ValueDate between @ValueDateFrom and @ValueDateTo  
" + _paramTrxType + _paramInstrumentType + _paramDealingPK + @" 
 and StatusDealing = 1 and isnull(B.Date,'01/01/1900') <= @ValueDateFrom
AND B.CounterpartCommissionPK IS NULL

)
BEGIN
SELECT 9 Result
END
ELSE 
BEGIN     
Select 0 Result 
END      ";
                            }

                        }

                        else if (_investment.InstrumentTypePK == 2)
                        {

                            if (Tools.ClientCode == "03")
                            {
                                cmd.CommandText = @"
                            IF  Exists
                            (select * From Investment where statusInvestment  = 2 and OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and CounterpartPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 4 Result
                            END  
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 and (DonePrice = 0 or Donevolume = 0) " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 5 Result
                            END  
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";
                            }
                            else
                            {
                                cmd.CommandText = @"
                            if Exists
                            (select * From Investment where statusInvestment  = 2 and OrderStatus = 'M' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 2 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where statusInvestment  = 2 and OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and CounterpartPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 4 Result
                            END  
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 and (DonePrice = 0 or Donevolume = 0) " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 5 Result
                            END  
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";
                            }


                        }
                        else
                        {
                            if (Tools.ClientCode == "03")
                            {
                                cmd.CommandText = @"
                            IF  Exists
                            (select * From Investment where statusInvestment  = 2 and OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 3 Result 
                            END  
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and CounterpartPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + " and instrumentTypePK not in (5,6) " + _paramDealingPK + " and StatusDealing = 1 " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 4 Result
                            END  
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 and (DonePrice = 0 or Donevolume = 0) " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 5 Result
                            END  
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and OrderStatus = 'P' and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 6 Result 
                            END  
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";
                            }
                            else
                            {
                                cmd.CommandText = @"
                            if Exists
                            (select * From Investment where statusInvestment  = 2 and OrderStatus = 'M' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 2 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where statusInvestment  = 2 and OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 3 Result 
                            END  
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and CounterpartPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + " and instrumentTypePK not in (5,6) " + _paramDealingPK + " and StatusDealing = 1 " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 4 Result
                            END  
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 and (DonePrice = 0 or Donevolume = 0) " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 5 Result
                            END  
                            ELSE IF  Exists
                            (select * From Investment where  statusInvestment  = 2 and OrderStatus = 'P' and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 6 Result 
                            END  
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";
                            }

                        }



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_RejectBySelectedDataDealing(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "and InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        cmd.CommandText = @"
                        if Exists
                        (select * From Investment where statusInvestment  = 2 and OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + @" )  
                        BEGIN 
                        Select 3 Result 
                        END 
                        ELSE IF  Exists
                        (select * From Investment where  StatusSettlement = 2 and OrderStatus = 'M' and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + @" )  
                        BEGIN 
                        Select 4 Result 
                        END  
                        ELSE 
                        BEGIN     
                        Select 0 Result 
                        END     ";

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_ApproveDealingBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramFundA = "";
                        string _paramCounterpart = "";
                        string _paramCounterpartA = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";
                        string _paramDealing = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And A.DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                            _paramDealing = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And A.DealingPK in (0) ";
                            _paramDealing = " And DealingPK in (0) ";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " And InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " And InstrumentTypePK = @InstrumentTypePK ";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        if (_investment.InstrumentTypePK == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"
                         	DECLARE @InvestmentPK int
    declare @DealingPK int
    declare @HistoryPK INT
    DECLARE @ValueDate DATETIME
    

    declare @Comm numeric (19,8)
    declare @Levy numeric (19,8)
    declare @KPEI numeric (19,8)
    declare @VAT numeric (19,8)
    declare @WHT numeric (19,8)
    declare @OTC numeric (19,8)
    declare @TaxInterest numeric (19,8)
    declare @TaxGain numeric (19,8)
    declare @TaxSell numeric (19,8)
    declare @TotalAmount numeric (19,8)

    declare @FundCashRefPK int 
    declare @SettlementPK int
    declare @CommissionPercent numeric (19,12),@RoundingCommission int,@DecimalCommission int,@VATPercent numeric (19,12),@RoundingVAT int,@DecimalVAT int,@LevyPercent numeric (19,12),@RoundingLevy int,@DecimalLevy int,
    @KPEIPercent numeric (19,12),@RoundingKPEI int,@DecimalKPEI int,@WHTPercent numeric (19,12),@RoundingWHT int,@DecimalWHT int,@OTCPercent numeric (19,12),@RoundingOTC int,@DecimalOTC int,
    @IncomeTaxInterestPercent numeric (19,12),@RoundingTaxInterest int,@DecimalTaxInterest int,@IncomeTaxGainPercent numeric (19,12),@RoundingTaxGain int,@DecimalTaxGain int,@IncomeTaxSellPercent numeric (19,12),@RoundingTaxSell int,@DecimalTaxSell int,@BoardType int,@FundPK int,@CounterpartPK int


	DECLARE @CounterpartCommissionTemp TABLE
    (
			[CounterpartCommissionPK] [int] NOT NULL,
			[HistoryPK] [int] NOT NULL,
			[Status] [int] NOT NULL,
			[Notes] [nvarchar](1000) NULL,
			[Date] [datetime] NULL,
			[CounterpartPK] [int] NULL,
			[BitIncludeTax] [bit] NOT NULL,
			[BoardType] [int] NULL,
			[CommissionPercent] [numeric](19, 12) NULL,
			[LevyPercent] [numeric](19, 12) NULL,
			[KPEIPercent] [numeric](19, 12) NULL,
			[VATPercent] [numeric](19, 12) NULL,
			[WHTPercent] [numeric](19, 12) NULL,
			[OTCPercent] [numeric](19, 12) NULL,
			[IncomeTaxSellPercent] [numeric](19, 12) NULL,
			[IncomeTaxInterestPercent] [numeric](19, 12) NULL,
			[IncomeTaxGainPercent] [numeric](19, 12) NULL,
			[EntryUsersID] [nvarchar](70) NULL,
			[EntryTime] [datetime] NULL,
			[UpdateUsersID] [nvarchar](70) NULL,
			[UpdateTime] [datetime] NULL,
			[ApprovedUsersID] [nvarchar](70) NULL,
			[ApprovedTime] [datetime] NULL,
			[VoidUsersID] [nvarchar](70) NULL,
			[VoidTime] [datetime] NULL,
			[DBUserID] [nvarchar](50) NULL,
			[DBTerminalID] [nvarchar](50) NULL,
			[LastUpdate] [datetime] NULL,
			[LastUpdateDB] [datetime] NULL,
			[FundPK] [int] NOT NULL,
			[RoundingCommission] [int] NULL,
			[DecimalCommission] [int] NULL,
			[RoundingLevy] [int] NULL,
			[DecimalLevy] [int] NULL,
			[RoundingKPEI] [int] NULL,
			[DecimalKPEI] [int] NULL,
			[RoundingVAT] [int] NULL,
			[DecimalVAT] [int] NULL,
			[RoundingWHT] [int] NULL,
			[DecimalWHT] [int] NULL,
			[RoundingOTC] [int] NULL,
			[DecimalOTC] [int] NULL,
			[RoundingTaxSell] [int] NULL,
			[DecimalTaxSell] [int] NULL,
			[RoundingTaxInterest] [int] NULL,
			[DecimalTaxInterest] [int] NULL,
			[RoundingTaxGain] [int] NULL,
			[DecimalTaxGain] [int] NULL
	)

	
                            
    DECLARE A CURSOR FOR 
	
    select InstrumentTypePK,TrxType,FundPK,BoardType,CounterpartPK,ValueDate from Investment 
    where statusInvestment = 2 
    and statusDealing = 1 and OrderStatus in ('O','P') and ValueDate between @DateFrom and @DateFrom " + _paramDealing + @" and InstrumentTypePK in (1,4,16)  
	" + _paramTrxType + _paramFund + _paramCounterpart + @"

    Open A
    Fetch Next From A
    Into @InstrumentTypePK,@TrxType,@FundPK,@BoardType,@CounterpartPK,@ValueDate

    While @@FETCH_STATUS = 0
    BEGIN    

		
	delete  @CounterpartCommissionTemp
		

		
		if EXISTS(
				SELECT * FROM dbo.CounterpartCommission WHERE fundPK = @FundPK AND BoardType = @BoardType
				AND CounterpartPK = @CounterpartPK AND Date <= @ValueDate
				AND status = 2
			)
			BEGIN
	
				INSERT INTO @CounterpartCommissionTemp	
		        ( CounterpartCommissionPK ,
		          HistoryPK ,
		          Status ,
		          Notes ,
		          Date ,
		          CounterpartPK ,
		          BitIncludeTax ,
		          BoardType ,
		          CommissionPercent ,
		          LevyPercent ,
		          KPEIPercent ,
		          VATPercent ,
		          WHTPercent ,
		          OTCPercent ,
		          IncomeTaxSellPercent ,
		          IncomeTaxInterestPercent ,
		          IncomeTaxGainPercent ,
		          EntryUsersID ,
		          EntryTime ,
		          UpdateUsersID ,
		          UpdateTime ,
		          ApprovedUsersID ,
		          ApprovedTime ,
		          VoidUsersID ,
		          VoidTime ,
		          DBUserID ,
		          DBTerminalID ,
		          LastUpdate ,
		          LastUpdateDB ,
		          FundPK ,
		          RoundingCommission ,
		          DecimalCommission ,
		          RoundingLevy ,
		          DecimalLevy ,
		          RoundingKPEI ,
		          DecimalKPEI ,
		          RoundingVAT ,
		          DecimalVAT ,
		          RoundingWHT ,
		          DecimalWHT ,
		          RoundingOTC ,
		          DecimalOTC ,
		          RoundingTaxSell ,
		          DecimalTaxSell ,
		          RoundingTaxInterest ,
		          DecimalTaxInterest ,
		          RoundingTaxGain ,
		          DecimalTaxGain
		        )
				SELECT TOP 1 CounterpartCommissionPK ,
		          HistoryPK ,
		          Status ,
		          Notes ,
		          Date ,
		          CounterpartPK ,
		          BitIncludeTax ,
		          BoardType ,
		          CommissionPercent ,
		          LevyPercent ,
		          KPEIPercent ,
		          VATPercent ,
		          WHTPercent ,
		          OTCPercent ,
		          IncomeTaxSellPercent ,
		          IncomeTaxInterestPercent ,
		          IncomeTaxGainPercent ,
		          EntryUsersID ,
		          EntryTime ,
		          UpdateUsersID ,
		          UpdateTime ,
		          ApprovedUsersID ,
		          ApprovedTime ,
		          VoidUsersID ,
		          VoidTime ,
		          DBUserID ,
		          DBTerminalID ,
		          LastUpdate ,
		          LastUpdateDB ,
		          FundPK ,
		          RoundingCommission ,
		          DecimalCommission ,
		          RoundingLevy ,
		          DecimalLevy ,
		          RoundingKPEI ,
		          DecimalKPEI ,
		          RoundingVAT ,
		          DecimalVAT ,
		          RoundingWHT ,
		          DecimalWHT ,
		          RoundingOTC ,
		          DecimalOTC ,
		          RoundingTaxSell ,
		          DecimalTaxSell ,
		          RoundingTaxInterest ,
		          DecimalTaxInterest ,
		          RoundingTaxGain ,
		          DecimalTaxGain FROM dbo.CounterpartCommission WHERE fundPK = @FundPK AND BoardType = @BoardType
				AND CounterpartPK = @CounterpartPK AND Date = (
					SELECT MAX(Date) FROM dbo.CounterpartCommission WHERE Date <= @ValueDate 
					AND fundPK = @FundPK AND BoardType = @BoardType
					AND CounterpartPK = @CounterpartPK AND Status = 2
				) AND status = 2
			END
			ELSE
			BEGIN

				INSERT INTO @CounterpartCommissionTemp	
		        ( CounterpartCommissionPK ,
		          HistoryPK ,
		          Status ,
		          Notes ,
		          Date ,
		          CounterpartPK ,
		          BitIncludeTax ,
		          BoardType ,
		          CommissionPercent ,
		          LevyPercent ,
		          KPEIPercent ,
		          VATPercent ,
		          WHTPercent ,
		          OTCPercent ,
		          IncomeTaxSellPercent ,
		          IncomeTaxInterestPercent ,
		          IncomeTaxGainPercent ,
		          EntryUsersID ,
		          EntryTime ,
		          UpdateUsersID ,
		          UpdateTime ,
		          ApprovedUsersID ,
		          ApprovedTime ,
		          VoidUsersID ,
		          VoidTime ,
		          DBUserID ,
		          DBTerminalID ,
		          LastUpdate ,
		          LastUpdateDB ,
		          FundPK ,
		          RoundingCommission ,
		          DecimalCommission ,
		          RoundingLevy ,
		          DecimalLevy ,
		          RoundingKPEI ,
		          DecimalKPEI ,
		          RoundingVAT ,
		          DecimalVAT ,
		          RoundingWHT ,
		          DecimalWHT ,
		          RoundingOTC ,
		          DecimalOTC ,
		          RoundingTaxSell ,
		          DecimalTaxSell ,
		          RoundingTaxInterest ,
		          DecimalTaxInterest ,
		          RoundingTaxGain ,
		          DecimalTaxGain
		        )
				SELECT TOP 1 CounterpartCommissionPK ,
		          HistoryPK ,
		          Status ,
		          Notes ,
		          Date ,
		          CounterpartPK ,
		          BitIncludeTax ,
		          BoardType ,
		          CommissionPercent ,
		          LevyPercent ,
		          KPEIPercent ,
		          VATPercent ,
		          WHTPercent ,
		          OTCPercent ,
		          IncomeTaxSellPercent ,
		          IncomeTaxInterestPercent ,
		          IncomeTaxGainPercent ,
		          EntryUsersID ,
		          EntryTime ,
		          UpdateUsersID ,
		          UpdateTime ,
		          ApprovedUsersID ,
		          ApprovedTime ,
		          VoidUsersID ,
		          VoidTime ,
		          DBUserID ,
		          DBTerminalID ,
		          LastUpdate ,
		          LastUpdateDB ,
		          FundPK ,
		          RoundingCommission ,
		          DecimalCommission ,
		          RoundingLevy ,
		          DecimalLevy ,
		          RoundingKPEI ,
		          DecimalKPEI ,
		          RoundingVAT ,
		          DecimalVAT ,
		          RoundingWHT ,
		          DecimalWHT ,
		          RoundingOTC ,
		          DecimalOTC ,
		          RoundingTaxSell ,
		          DecimalTaxSell ,
		          RoundingTaxInterest ,
		          DecimalTaxInterest ,
		          RoundingTaxGain ,
		          DecimalTaxGain FROM dbo.CounterpartCommission WHERE fundPK = 0 AND BoardType = @BoardType
				AND CounterpartPK = @CounterpartPK  AND Date = (
					SELECT MAX(Date) FROM dbo.CounterpartCommission WHERE Date <= @ValueDate 
					AND fundPK = 0 AND BoardType = @BoardType
					AND CounterpartPK = @CounterpartPK AND Status = 2
				) AND status = 2
			END

	    DECLARE B CURSOR FOR 
	                            
        Select C.FundCashRefPK,InvestmentPK,DealingPK,HistoryPK,CommissionPercent ,LevyPercent,KPEIPercent,VATPercent,
        WHTPercent,OTCPercent,IncomeTaxInterestPercent,IncomeTaxGainPercent,IncomeTaxSellPercent,
        C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,
        case when C.TrxType = 1 then sum(C.DoneAmount + C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT - C.TaxGain - C.WHT) 
        Else sum(C.DoneAmount - (C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT + C.TaxSell - C.TaxGain - C.WHT)) End TotalAmount    
        from (
        select B.RoundingCommission,B.DecimalCommission,A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,
        B.CommissionPercent ,B.LevyPercent,B.KPEIPercent,B.VATPercent,
        B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,
        --Comm
        cast(Sum(isnull(ROUND(A.DoneAmount * (B.CommissionPercent/100),B.DecimalCommission),0)) as numeric(19,8)) Comm,
        cast(Sum(isnull(ROUND(A.DoneAmount * (B.LevyPercent/100),B.DecimalLevy),0)) as numeric(19,8)) Levy,
        cast(Sum(isnull(ROUND(A.DoneAmount * (B.KPEIPercent/100),B.DecimalKPEI),0)) as numeric(19,8)) KPEI,
        cast(Sum(isnull(ROUND(A.DoneAmount * (B.VATPercent/100),B.DecimalVAT),0)) as numeric(19,8)) VAT,
        cast(Sum(isnull(ROUND(A.DoneAmount * (B.WHTPercent/100),B.DecimalWHT),0)) as numeric(19,8)) WHT,
        cast(Sum(isnull(ROUND(A.DoneAmount * (B.OTCPercent/100),B.DecimalOTC),0)) as numeric(19,8)) OTC,
        cast(Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxInterestPercent/100),B.DecimalTaxInterest),0)) as numeric(19,8)) TaxInterest,
        cast(Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxGainPercent/100),B.DecimalTaxGain),0)) as numeric(19,8)) TaxGain,
        case when TrxType = 1 then 0 else cast(Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxSellPercent/100),B.DecimalTaxSell),0)) as numeric(19,8)) End TaxSell
        from Investment A
        left join @CounterpartCommissionTemp B on A.CounterpartPK = B.CounterpartPK and A.BoardType = B.BoardType  and B.Status = 2 
        left join FundCashRef D on D.FundPK = A.FundPK and D.Status = 2
        where statusInvestment = 2 and statusDealing = 1 and OrderStatus  in ('O','P') and ValueDate between @DateFrom and @DateTo " + _paramDealingPK + @" and InstrumentTypePK = @InstrumentTypePK and A.BoardType = @BoardType and A.FundPK = @FundPK  and A.TrxType = @TrxType and B.CommissionPercent is not null
        Group By D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.TrxType,A.DoneAmount,
        B.CommissionPercent,B.LevyPercent,B.KPEIPercent,B.VATPercent,
        B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,B.RoundingCommission,B.DecimalCommission,B.RoundingLevy,B.DecimalLevy,B.RoundingKPEI,B.DecimalKPEI,B.RoundingVAT,B.DecimalVAT,
        B.RoundingWHT,B.DecimalWHT,B.RoundingOTC,B.DecimalOTC,B.RoundingTaxInterest,B.DecimalTaxInterest,B.RoundingTaxGain,B.DecimalTaxGain,B.RoundingTaxSell,B.DecimalTaxSell
        ) C
        Group By  C.TrxType,C.FundCashRefPK,C.InvestmentPK,C.DealingPK,C.HistoryPK,C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,C.DoneAmount,
        C.CommissionPercent,C.LevyPercent,C.KPEIPercent,C.VATPercent,
        C.WHTPercent,C.OTCPercent,C.IncomeTaxInterestPercent,C.IncomeTaxGainPercent,C.IncomeTaxSellPercent

	    Open B
	    Fetch Next From B
	    Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@CommissionPercent ,@LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxInterestPercent,@IncomeTaxGainPercent,@IncomeTaxSellPercent,
	    @Comm,@Levy,@KPEI,@VAT,@WHT,@OTC,@TaxInterest,@TaxGain,@TaxSell,@TotalAmount

	    While @@FETCH_STATUS = 0
	    BEGIN          
			Select @SettlementPK = max(SettlementPK) + 1 From investment
set @SettlementPK = isnull(@SettlementPK,1)
			Update Investment set SettlementPK = @SettlementPK, StatusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',FundCashRefPK = @FundCashRefPK, ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime,CommissionPercent = @CommissionPercent,LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,IncomeTaxGainPercent=@IncomeTaxGainPercent,IncomeTaxSellPercent = @IncomeTaxSellPercent,
			CommissionAmount = @Comm,LevyAmount=@Levy,KPEIAmount = @KPEI, VATAmount=@VAT,WHTAmount = @WHT,OTCAmount=@OTC,IncomeTaxInterestAmount=@TaxInterest,IncomeTaxGainAmount = @TaxGain,IncomeTaxSellAmount = @TaxSell,TotalAmount = @TotalAmount
			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

	    Fetch next From B Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@CommissionPercent ,@LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxInterestPercent,@IncomeTaxGainPercent,@IncomeTaxSellPercent,
	    @Comm,@Levy,@KPEI,@VAT,@WHT,@OTC,@TaxInterest,@TaxGain,@TaxSell,@TotalAmount
	    END
	    Close B
	    Deallocate B



    Fetch next From A Into @InstrumentTypePK,@TrxType,@FundPK,@BoardType,@CounterpartPK,@ValueDate
	END
    Close A
    Deallocate A

                    -- TAMBAHAN UNTUK OTC AMOUNT

                        declare @TotalTrx table
                        (
                        FundPK int,
                        CounterpartPK int,
                        InstrumentPK int,
                        TrxType int,
                        BoardType int,
                        InvestmentPK int
                        )


                        declare @CounterpartCommTemp table
                        (
                        FundPK int,
                        CounterpartPK int,
                        BoardType int,
                        OTCAmount numeric(18,2)
                        )

                        INSERT INTO @TotalTrx
                        select  FundPK,CounterpartPK,InstrumentPK,TrxType,BoardType,InvestmentPK from investment 
                        where valuedate = @valuedate and StatusDealing = 2 and OrderStatus = 'M' and InstrumentTypePK in (1,4,16)


                        INSERT INTO @CounterpartCommTemp	
                        SELECT distinct A.FundPK,A.CounterpartPK,A.BoardType,A.OTCAmount 
                        FROM dbo.CounterpartCommission A
                        left join @TotalTrx B on A.FundPK = B.FundPK  and A.BoardType = B.BoardType and A.CounterpartPK = B.CounterpartPK
                        WHERE A.FundPK = B.FundPK AND A.BoardType = B.BoardType AND A.CounterpartPK = B.CounterpartPK
                        AND Date = (
                        SELECT MAX(Date) FROM dbo.CounterpartCommission WHERE Date <= @ValueDate 
                        AND fundPK = B.FundPK AND BoardType = B.BoardType AND CounterpartPK = B.CounterpartPK AND Status = 2
                        ) AND status = 2

                        union all

                        SELECT distinct A.FundPK,A.CounterpartPK,A.BoardType,A.OTCAmount 
                        FROM dbo.CounterpartCommission A
                        left join @TotalTrx B on A.BoardType = B.BoardType and A.CounterpartPK = B.CounterpartPK
                        WHERE A.FundPK = 0 AND A.BoardType = B.BoardType AND A.CounterpartPK = B.CounterpartPK
                        AND Date = (
                        SELECT MAX(Date) FROM dbo.CounterpartCommission WHERE Date <= @ValueDate 
                        AND fundPK = 0 AND BoardType = B.BoardType AND CounterpartPK = B.CounterpartPK AND Status = 2
                        ) AND status = 2


                        declare @CInvestmentPK int
                        declare @CFundPK int
                        declare @CInstrumentPK int
                        declare @CTrxType int
                        declare @CBoardType int
                        declare @CCounterpartPK int
                        declare @COTCAmount numeric(18,2)

                        Declare C Cursor For 
                        select A.FundPK,A.InstrumentPK,A.TrxType,A.BoardType,
                        A.CounterpartPK,isnull(OTCAmount,0) OTCAmount,A.InvestmentPK  from @TotalTrx A
                        left join @CounterpartCommTemp B on A.CounterpartPK = B.CounterpartPK and A.BoardType = B.BoardType

                        Open C                  
                        Fetch Next From C                  
                        Into @CFundPK,@CInstrumentPK,@CTrxType,@CBoardType,@CCounterpartPK,@COTCAmount,@CInvestmentPK
                        While @@FETCH_STATUS = 0                  
                        Begin      

                        --select top 1 @CInvestmentPK = InvestmentPK from Investment 
                        --where valuedate = @valuedate and StatusDealing = 2 and OrderStatus = 'M' and InstrumentTypePK in (1,4,16) and SelectedDealing = 1  and Marketpk in (0,1)  and PriceMode in (0,1)
                        --and FundPK = @CFundPK and InstrumentPK = @CInstrumentPK and TrxType = @CTrxType and BoardType =  @CBoardType and CounterpartPK = @CCounterpartPK
                        --order by InvestmentPK asc

                        update Investment set OTCAmount = @COTCAmount, TotalAmount = case when TrxType = 1 then TotalAmount + @COTCAmount else TotalAmount - @COTCAmount end 
                        where InvestmentPK = @CInvestmentPK

                        Fetch next From C                   
                        Into @CFundPK,@CInstrumentPK,@CTrxType,@CBoardType,@CCounterpartPK,@COTCAmount,@CInvestmentPK
                        END        
                        Close C                  
                        Deallocate C





	
    --Update Investment set SelectedDealing  = 0 
                            ";



                        }
                        else if (_investment.InstrumentTypePK == 5)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"
                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int
                        declare @TotalAmount numeric (22,4)
                        declare @DoneAccruedInterest numeric (22,2)
                        declare @IncomeTaxInterestAmount numeric (22,2)
                        declare @IncomeTaxGainAmount numeric (22,2)

                        declare @FundCashRefPK int 
                        declare @SettlementPK int

                        Declare @TaxPercentageDep numeric(8,4)
                        select @TaxPercentageDep = TaxPercentageTD from FundAccountingSetup where status = 2
                            
                        DECLARE A CURSOR FOR 
	                    Select C.FundCashRefPK,InvestmentPK,DealingPK,HistoryPK,DoneAmount,isnull(DoneAccruedInterest,0),isnull(IncomeTaxInterestAmount,0),isnull(IncomeTaxGainAmount,0)   
	                    from (
	                    select A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.DoneAccruedInterest,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount
	                    from Investment A
	                    left join FundCashRef D on D.FundPK = A.FundPK and D.Status = 2
	                    where statusInvestment = 2 and statusDealing = 1 and ValueDate between @DateFrom and @DateTo " + _paramDealingPK + _paramInstrumentType + _paramTrxType + _paramFund + _paramCounterpart +
                        @"Group By A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.DoneAccruedInterest,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount
	                    ) C
	                    Group By  C.TrxType,C.FundCashRefPK,C.InvestmentPK,C.DealingPK,C.HistoryPK,C.DoneAmount,C.DoneAccruedInterest,C.IncomeTaxInterestAmount,C.IncomeTaxGainAmount
	
                        Open A
                        Fetch Next From A
                        Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@TotalAmount,@DoneAccruedInterest,@IncomeTaxInterestAmount,@IncomeTaxGainAmount

                        While @@FETCH_STATUS = 0
                        BEGIN              
                        Select @SettlementPK = max(SettlementPK) + 1 From investment
                        set @SettlementPK = isnull(@SettlementPK,1)

                        Update Investment set SettlementPK = @SettlementPK, StatusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',TotalAmount=@TotalAmount + @DoneAccruedInterest - @IncomeTaxInterestAmount - @IncomeTaxGainAmount,FundCashRefPK = @FundCashRefPK, 
                        SettlementMode = Case when TrxType  = 1 then 1 else 2 end,ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime=@ApprovedDealingTime,EntrySettlementID=@ApprovedDealingID,EntrySettlementTime=@ApprovedDealingTime,LastUpdate=@LastUpdate,
                        TaxExpensePercent = isnull(@TaxPercentageDep,TaxExpensePercent)
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

                        Fetch next From A Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@TotalAmount,@DoneAccruedInterest,@IncomeTaxInterestAmount,@IncomeTaxGainAmount
                        END
                        Close A
                        Deallocate A

                        --Update Investment set SelectedDealing  = 0 ";
                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"
                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int
                        declare @TotalAmount numeric (22,4)
                        declare @DoneAccruedInterest numeric (22,2)
                        declare @IncomeTaxInterestAmount numeric (22,2)
                        declare @IncomeTaxGainAmount numeric (22,2)

                        declare @FundCashRefPK int 
                        declare @SettlementPK int
           

                            
                        DECLARE A CURSOR FOR 
	                    Select C.FundCashRefPK,InvestmentPK,DealingPK,HistoryPK,DoneAmount,isnull(DoneAccruedInterest,0),isnull(IncomeTaxInterestAmount,0),isnull(IncomeTaxGainAmount,0)   
	                    from (
	                    select A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.DoneAccruedInterest,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount
	                    from Investment A
	                    left join FundCashRef D on D.FundPK = A.FundPK and D.Status = 2
	                    where statusInvestment = 2 and statusDealing = 1 and isnull(OrderStatus,'O') = 'O' and ValueDate between @DateFrom and @DateTo " + _paramDealingPK + _paramInstrumentType + _paramTrxType +
                        @"Group By A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.DoneAccruedInterest,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount
	                    ) C
	                    Group By  C.TrxType,C.FundCashRefPK,C.InvestmentPK,C.DealingPK,C.HistoryPK,C.DoneAmount,C.DoneAccruedInterest,C.IncomeTaxInterestAmount,C.IncomeTaxGainAmount
	
                        Open A
                        Fetch Next From A
                        Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@TotalAmount,@DoneAccruedInterest,@IncomeTaxInterestAmount,@IncomeTaxGainAmount

                        While @@FETCH_STATUS = 0
                        BEGIN              
                        Select @SettlementPK = max(SettlementPK) + 1 From investment
                        set @SettlementPK = isnull(@SettlementPK,1)
                        Update Investment set SettlementPK = @SettlementPK, StatusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',FundCashRefPK = @FundCashRefPK, 
                        ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime=@ApprovedDealingTime,EntrySettlementID=@ApprovedDealingID,EntrySettlementTime=@ApprovedDealingTime,LastUpdate=@LastUpdate
                  
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

                        Fetch next From A Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@TotalAmount,@DoneAccruedInterest,@IncomeTaxInterestAmount,@IncomeTaxGainAmount
                        END
                        Close A
                        Deallocate A

                        --Update Investment set SelectedDealing  = 0 ";
                        }


                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }

                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@ApprovedDealingID", _investment.ApprovedDealingID);
                        cmd.Parameters.AddWithValue("@ApprovedDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_RejectDealingBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandText = @"Update Investment set StatusDealing  = 3,statusSettlement = 0,OrderStatus = 'R', VoidDealingID = @VoidDealingID,VoidDealingTime = @VoidDealingTime,LastUpdate=@LastUpdate
                            where " + _paramInstrumentType + _paramTrxType + _paramDealingPK + " and ValueDate between @DateFrom and @DateTo and statusDealing in (1,2) " + _paramFund + _paramCounterpart +
                        "--Update Investment set SelectedDealing  = 0";


                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidDealingID);
                        cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_UnApproveBySelectedDataDealing(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = " And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = " And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " and InstrumentTypePK = @InstrumentTypePK ";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        if (_investment.InstrumentTypePK != 5)
                        {
                            cmd.CommandText = @"
                            if Exists
                            (select * From Investment where statusSettlement = 2 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 2 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 3 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where  CounterpartPK = 0 and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + " and StatusDealing = 1 " + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 4 Result 
                            END  
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";
                        }
                        else
                        {
                            cmd.CommandText = @"
                            if Exists
                            (select * From Investment where statusSettlement = 2 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 2 Result 
                            END 
                            ELSE IF  Exists
                            (select * From Investment where OrderStatus = 'R' and ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramTrxType + _paramInstrumentType + _paramDealingPK + _paramFund + _paramCounterpart + @" )  
                            BEGIN 
                            Select 3 Result 
                            END   
                            ELSE 
                            BEGIN     
                            Select 0 Result 
                            END     ";
                        }





                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_UnApproveDealingBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = " And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = " And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " and InstrumentTypePK = @InstrumentTypePK ";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        if (_investment.InstrumentTypePK == 1 || _investment.InstrumentTypePK == 5)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"
                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int

                        DECLARE A CURSOR FOR 
		                select InvestmentPK,DealingPK,HistoryPK from Investment 
		                where statusInvestment = 2 and statusDealing = 2 and StatusSettlement = 1 and OrderStatus in ('M') and ValueDate between @DateFrom and @DateTo " + _paramDealingPK + _paramInstrumentType + _paramTrxType + _paramFund + _paramCounterpart +

                        @"Open A
                        Fetch Next From A
                        Into @InvestmentPK,@DealingPK,@HistoryPK

                        While @@FETCH_STATUS = 0
                        BEGIN              
                        Update Investment set SettlementPK = 0, StatusDealing = 1, StatusSettlement = 0,OrderStatus = 'O',FundCashRefPK = 0, ApprovedDealingID = '',ApprovedDealingTime = '',CommissionPercent = 0,LevyPercent=0,KPEIPercent=0,VATPercent=0,WHTPercent=0,OTCPercent=0,IncomeTaxInterestPercent=0,IncomeTaxGainPercent=0,IncomeTaxSellPercent = 0,
                        CommissionAmount = 0,LevyAmount=0,KPEIAmount = 0, VATAmount=0,WHTAmount = 0,OTCAmount=0,IncomeTaxInterestAmount=0,IncomeTaxGainAmount = 0,IncomeTaxSellAmount = 0,TotalAmount = 0
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

                        Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK
                        END
                        Close A
                        Deallocate A

                        --Update Investment set SelectedDealing  = 0";

                        }
                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"
                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int

                        DECLARE A CURSOR FOR 
		                select InvestmentPK,DealingPK,HistoryPK from Investment 
		                where statusInvestment = 2 and statusDealing = 2 and StatusSettlement = 1 and OrderStatus in ('M') and ValueDate between @DateFrom and @DateTo" + _paramDealingPK + _paramInstrumentType + _paramTrxType + _paramFund + _paramCounterpart +

                        @"Open A
                        Fetch Next From A
                        Into @InvestmentPK,@DealingPK,@HistoryPK

                        While @@FETCH_STATUS = 0
                        BEGIN              
                        Update Investment set SettlementPK = 0, StatusDealing = 1, StatusSettlement = 0,OrderStatus = 'O',FundCashRefPK = 0, ApprovedDealingID = '',ApprovedDealingTime = '',CommissionPercent = 0,LevyPercent=0,KPEIPercent=0,VATPercent=0,WHTPercent=0,OTCPercent=0,
                        CommissionAmount = 0,LevyAmount=0,KPEIAmount = 0, VATAmount=0,WHTAmount = 0,OTCAmount=0,IncomeTaxSellAmount = 0
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

                        Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK
                        END
                        Close A
                        Deallocate A

                        --Update Investment set SelectedDealing  = 0";
                        }
                        

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@ApprovedDealingID", _investment.ApprovedDealingID);
                        cmd.Parameters.AddWithValue("@ApprovedDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_CheckTotalLotSplit(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                        Declare @Amount numeric (22,0)

                        Create Table #CheckTotalSplit
                        (Amount Numeric(22,0))
                        insert into #CheckTotalSplit
                        select donelot from investment where dealingpk  = @DealingPK and historyPK  = @HistoryPK and statusdealing = 1
                        insert into #CheckTotalSplit
                        select (@DoneLot1 * -1) + (@DoneLot2 * -1) + (@DoneLot3 * -1) + (@DoneLot4 * -1) + (@DoneLot5 * -1)

                        select @Amount = sum(amount) from #CheckTotalSplit
                        if (@Amount >= 0)
                        BEGIN
                        select 1 Result
                        END
                        ELSE 
                        BEGIN
                        select 0 Result
                        END    ";

                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@DoneLot1", _investment.DoneLot1);
                        cmd.Parameters.AddWithValue("@DoneLot2", _investment.DoneLot2);
                        cmd.Parameters.AddWithValue("@DoneLot3", _investment.DoneLot3);
                        cmd.Parameters.AddWithValue("@DoneLot4", _investment.DoneLot4);
                        cmd.Parameters.AddWithValue("@DoneLot5", _investment.DoneLot5);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_CheckTotalAmountSplit(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                       Declare @Amount numeric (22,4)

                        Create Table #CheckTotalSplit
                        (Amount Numeric(22,0))
                        insert into #CheckTotalSplit
                        select DoneAmount from investment where dealingpk  = @DealingPK and historyPK  = @HistoryPK and statusdealing = 1
                        insert into #CheckTotalSplit
                        select (isnull((@DoneLot1 * @DonePrice1),0) + isnull((@DoneLot2 * @DonePrice2),0) +
                        isnull((@DoneLot3 * @DonePrice3),0) + isnull((@DoneLot4 * @DonePrice4),0) + isnull((@DoneLot5 * @DonePrice5),0)) * -1 * 100

                        select @Amount = sum(amount) from #CheckTotalSplit
                        if (@Amount >= 0)
                        BEGIN
                        select 1 Result
                        END
                        ELSE 
                        BEGIN
                        select 0 Result
                        END 


                          ";

                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                        cmd.Parameters.AddWithValue("@DoneLot1", _investment.DoneLot1);
                        cmd.Parameters.AddWithValue("@DoneLot2", _investment.DoneLot2);
                        cmd.Parameters.AddWithValue("@DoneLot3", _investment.DoneLot3);
                        cmd.Parameters.AddWithValue("@DoneLot4", _investment.DoneLot4);
                        cmd.Parameters.AddWithValue("@DoneLot5", _investment.DoneLot5);
                        cmd.Parameters.AddWithValue("@DonePrice1", _investment.DonePrice1);
                        cmd.Parameters.AddWithValue("@DonePrice2", _investment.DonePrice2);
                        cmd.Parameters.AddWithValue("@DonePrice3", _investment.DonePrice3);
                        cmd.Parameters.AddWithValue("@DonePrice4", _investment.DonePrice4);
                        cmd.Parameters.AddWithValue("@DonePrice5", _investment.DonePrice5);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_CheckTotalAcqVolume(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                        Declare @Amount numeric (22,0)

                        Create Table #CheckTotalAcqVolume
                        (Amount Numeric(22,0))
                        insert into #CheckTotalAcqVolume
                        select (isnull(@Volume,0) + (isnull(@AcqVolume,0) * -1) + (isnull(@AcqVolume1,0) * -1) + (isnull(@AcqVolume2,0) * -1) + (isnull(@AcqVolume3,0) * -1) + (isnull(@AcqVolume4,0) * -1)
                        + (isnull(@AcqVolume5,0) * -1) + (isnull(@AcqVolume6,0) * -1) + (isnull(@AcqVolume7,0) * -1) + (isnull(@AcqVolume8,0) * -1) + (isnull(@AcqVolume9,0) * -1))

                        select @Amount = sum(amount) from #CheckTotalAcqVolume
                        if (@Amount = 0)
                        BEGIN
                        select 1 Result
                        END
                        ELSE 
                        BEGIN
                        select 0 Result
                        END    ";


                        cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                        cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                        cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                        cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                        cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                        cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                        cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                        cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                        cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                        cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                        cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_Update_EMCO(Investment _investment, bool _havePrivillege)
        {
            try
            {
                int _newHisPK;
                int status = _investment.StatusInvestment;
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    if (_havePrivillege)
                    {
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = _updateCommand + "ApprovedUsersID=@ApprovedUsersID, " +
                                    "ApprovedTime=@ApprovedTime,UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@lastUpdate " +
                                    "where InvestmentPK = @PK and historyPK = @HistoryPK";

                            cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                            cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                            cmd.Parameters.AddWithValue("@StatusInvestment", _investment.StatusInvestment);
                            cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                            cmd.Parameters.AddWithValue("@StatusDealing", 1);
                            cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                            cmd.Parameters.AddWithValue("@StatusSettlement", 0);
                            cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                            cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                            cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                            cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                            cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                            cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                            cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                            cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                            cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                            cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                            cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                            cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                            cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                            cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                            cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                            cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                            cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                            cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                            cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                            cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                            if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                            {
                                cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                            }

                            if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                            {
                                cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                            }

                            if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                            {
                                cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                            }


                            if (_investment.SettledDate == "" || _investment.SettledDate == null)
                            {
                                cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                            }

                            if (_investment.AcqDate == "" || _investment.AcqDate == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                            }
                            cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                            cmd.Parameters.AddWithValue("@DoneLot", _investment.Lot);
                            cmd.Parameters.AddWithValue("@DoneVolume", _investment.Volume);
                            cmd.Parameters.AddWithValue("@DonePrice", _investment.OrderPrice);
                            cmd.Parameters.AddWithValue("@DoneAmount", _investment.Amount);
                            cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                            cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                            cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                            cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                            cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                            cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                            cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                            cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                            cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                            cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                            cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                            cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                            cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                            cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                            cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                            cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                            cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                            cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                            cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                            if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                            cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                            if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                            cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                            if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                            cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                            if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                            cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                            if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                            }
                            cmd.Parameters.AddWithValue("@UpdateUsersID", _investment.EntryUsersID);
                            cmd.Parameters.AddWithValue("@Updatetime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@ApprovedUsersID", _investment.EntryUsersID);
                            cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@lastupdate", _dateTimeNow);
                            cmd.ExecuteNonQuery();
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = "Update Investment set statusInvestment= 3,VoidUsersID=@VoidUsersID,VoidTime=@VoidTime,LastUpdate=@LastUpdate where InvestmentPK = @PK and statusInvestment = 4";
                            cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@VoidUsersID", _investment.EntryUsersID);
                            cmd.Parameters.AddWithValue("@VoidTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                            cmd.ExecuteNonQuery();
                        }
                        return 0;
                    }
                    else
                    {
                        if (status == 1)
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = _updateCommand +
                                    "UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@LastUpdate " +
                                    "where InvestmentPK = @PK and historyPK = @HistoryPK";
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                                cmd.Parameters.AddWithValue("@StatusInvestment", 1);
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@StatusDealing", 0);
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@StatusSettlement", 0);
                                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                                cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                }

                                if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                }

                                if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }


                                if (_investment.SettledDate == "" || _investment.SettledDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                }

                                if (_investment.AcqDate == "" || _investment.AcqDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                                }
                                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                cmd.Parameters.AddWithValue("@DoneLot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@DoneVolume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@DonePrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@DoneAmount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                                cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                                cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                                cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                                cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                                cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                                if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                                cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                                if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                                cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                                if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                                cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                                if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                                cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                                if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                                }
                                cmd.Parameters.AddWithValue("@UpdateUsersID", _investment.EntryUsersID);
                                cmd.Parameters.AddWithValue("@Updatetime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                                cmd.ExecuteNonQuery();
                            }
                            return 0;
                        }

                        else if (status == 4)
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                if (_investment.InstrumentTypePK == 1)
                                {
                                    cmd.CommandText =
                                    @"Update Investment set MarketPK = @MarketPK,InstrumentPK = @InstrumentPK,OrderPrice=@OrderPrice,DonePrice=@OrderPrice,Lot=@Lot,DoneLot=@Lot,Volume=@Volume,DoneVolume=@Volume,Amount=@Amount,DoneAmount=@Amount,UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@LastUpdate 
                                    where InvestmentPK = @PK and historyPK = @HistoryPK";
                                    cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                }
                                else
                                {
                                    cmd.CommandText =
                                   @"Update Investment set MarketPK = @MarketPK,InstrumentPK = @InstrumentPK,RangePrice=@RangePrice,InterestPercent=@InterestPercent,Tenor=@Tenor,AccruedInterest=@AccruedInterest, 
                                   LastCouponDate=@LastCouponDate,NextCouponDate=@NextCouponDate,MaturityDate=@MaturityDate,SettlementDate=@SettlementDate,
                                   OrderPrice=@OrderPrice,DonePrice=@OrderPrice,Volume=@Volume,DoneVolume=@Volume,Amount=@Amount,DoneAmount=@Amount,UpdateUsersID=@UpdateUsersID,Updatetime=@Updatetime,LastUpdate=@LastUpdate 
                                   where InvestmentPK = @PK and historyPK = @HistoryPK";

                                    cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                    cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                    cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                    cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                    cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                    cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);

                                }

                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@UpdateUsersID", _investment.UpdateUsersID);
                                cmd.Parameters.AddWithValue("@Updatetime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                                cmd.ExecuteNonQuery();
                            }
                            return 0;
                        }
                        else
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                _newHisPK = _host.Get_NewHistoryPK(_investment.InvestmentPK, "Investment");
                                cmd.CommandText = _insertCommand + "[EntryUsersID],[EntryTime],[UpdateUsersID],[UpdateTime],[LastUpdate])" +
                                "Select @PK,@NewHistoryPK,1,@DealingPK,0,@SettlementPK,0," + _paramaterCommand + "EntryUsersID,EntryTime,@UpdateUsersID,@UpdateTime,@LastUpdate  " +
                                "From Investment where InvestmentPK =@PK and historyPK = @HistoryPK ";

                                cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@NewHistoryPK", _newHisPK);
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                                cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                }

                                if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                }

                                if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }


                                if (_investment.SettledDate == "" || _investment.SettledDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                }

                                if (_investment.AcqDate == "" || _investment.AcqDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                                }
                                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                cmd.Parameters.AddWithValue("@DoneLot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@DoneVolume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@DonePrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@DoneAmount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                                cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                                cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                                cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                                cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                                cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                                if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                                cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                                if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                                cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                                if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                                cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                                if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                                cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                                if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                                }
                                cmd.Parameters.AddWithValue("@UpdateUsersID", _investment.EntryUsersID);
                                cmd.Parameters.AddWithValue("@UpdateTime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                                cmd.ExecuteNonQuery();
                            }

                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = "Update Investment set statusInvestment= 4,Notes=@Notes,StatusDealing = 0, " +
                                " lastupdate=@lastupdate where InvestmentPK = @PK and historyPK = @HistoryPK and  statusInvestment= 2 ";
                                cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                                cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                                cmd.ExecuteNonQuery();
                            }
                            return _newHisPK;
                        }
                    }

                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean Netting_Report(string _userID, Investment _investment)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";

                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" 
                        CREATE TABLE #Netting
                        (
                        TotalLot numeric (22,2),
                        InstrumentPK int,
                        FundPK int,
                        CounterpartPK int,
                        TrxType int
                        )
                        Insert into #Netting (TotalLot,InstrumentPK,FundPK,CounterpartPK,TrxType)
                        Select sum(DoneLot),InstrumentPK,FundPK,CounterpartPK,TrxType From Investment 
                        where ValueDate = @ValueDate and TrxType = 1 " + _paramFund + _paramSettlementPK +
                        @"Group By InstrumentPK,FundPK,TrxType,CounterpartPK

                        Insert into #Netting (TotalLot,InstrumentPK,FundPK,CounterpartPK,TrxType)
                        Select sum(DoneLot) * -1,InstrumentPK,FundPK,CounterpartPK,TrxType From Investment 
                        where ValueDate = @ValueDate and TrxType = 2 " + _paramFund + _paramSettlementPK +
                        @"Group By InstrumentPK,FundPK,TrxType,CounterpartPK

                        Declare @TotalLot numeric(22,2),@InstrumentPK int,@FundPK int,@CounterpartPK int

                        DECLARE A CURSOR FOR 
                        select InstrumentPK, FundPK,CounterpartPK from #Netting  
                        Group By InstrumentPK,FundPK,CounterpartPK
                        having sum(TotalLot) = 0
	
                        Open A
                        Fetch Next From A
                        Into @InstrumentPK,@FundPK,@CounterpartPK

                        While @@FETCH_STATUS = 0
                        BEGIN
                        Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,C.ID CounterpartID,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,  
                        F.ID FundID,IT.Name InstrumentType,BC.ID BankCustodianName,BC.ContactPerson ContactPerson,BC.Fax1 FaxNo,FC.BankAccountNo,FC.BankAccountName,MV1.DescOne SettlementModeDesc,MV2.DescTwo BoardTypeDesc,IV.* 
                        from Investment IV 
                        left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2 
                        left join Fund F on IV.FundPK = F.FundPK and F.status = 2 
                        left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2
                        left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 
                        left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.Status = 2 
                        left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.Status = 2 
                        left join MasterValue MV1 on IV.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2
                        left join MasterValue MV2 on IV.BoardType = MV2.Code and MV2.ID = 'BoardType' and MV2.Status = 2   
                        Where  IV.ValueDate = @ValueDate and IV.InstrumentTypePK = 1 and SettlementPK <> 0 and IV.statusSettlement in (1,2) and IV.InstrumentPK = @InstrumentPK and IV.FundPK = @FundPK and IV.CounterpartPK = @CounterpartPK
                        Order By IV.TrxType
                        Fetch next From A Into @InstrumentPK,@FundPK,@CounterpartPK
                        END
                        Close A
                        Deallocate A ";


                        cmd.Parameters.AddWithValue("@ValueDate", _investment.DateFrom);
                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "NettingReport" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "NettingReport" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Equity");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<InvestmentListing> rList = new List<InvestmentListing>();
                                    while (dr0.Read())
                                    {
                                        InvestmentListing rSingle = new InvestmentListing();
                                        rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                        rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                        rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                        rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                        rSingle.BoardTypeDesc = Convert.ToString(dr0["BoardTypeDesc"]);
                                        rSingle.SettlementModeDesc = Convert.ToString(dr0["SettlementModeDesc"]);
                                        rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                        rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                        rSingle.CounterpartID = dr0["CounterpartID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartID"]);
                                        rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                        rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                        rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                        rSingle.BankAccountName = dr0["BankAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName"]);
                                        rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                        rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                        rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                        rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                        rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                        rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                        rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                        rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                        //rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                        rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                        //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                        rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                        rSingle.CommissionAmount = dr0["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CommissionAmount"]);
                                        rSingle.LevyAmount = dr0["LevyAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["LevyAmount"]);
                                        rSingle.KPEIAmount = dr0["KPEIAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KPEIAmount"]);
                                        rSingle.VATAmount = dr0["VATAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["VATAmount"]);
                                        rSingle.WHTAmount = dr0["WHTAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["WHTAmount"]);
                                        rSingle.IncomeTaxSellAmount = dr0["IncomeTaxSellAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxSellAmount"]);
                                        rList.Add(rSingle);

                                    }


                                    var GroupByValueDate =
                                           from r in rList
                                           group r by new { r.ValueDate, r.FundID, r.InstrumentType, r.SettlementDate, r.ContactPerson, r.FaxNo, r.BankAccountNo, r.BankAccountName, r.BankCustodianName } into rGroup
                                           select rGroup;

                                    int incRowExcel = 0;


                                    foreach (var rsHeader in GroupByValueDate)
                                    {
                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "REFERENCE";
                                        //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Reference;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date ";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 3].Value = (rsHeader.Key.ValueDate);
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Securities Acc No ";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Value = ":";
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.BankAccountName;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "To :";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.BankCustodianName;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Cash Acc No ";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Value = ":";
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.BankAccountNo;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Attention ";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ContactPerson;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Instrument Type ";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Value = ":";
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.InstrumentType;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fax no ";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FaxNo;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Trade Date ";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Value = ":";
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 14].Value = (rsHeader.Key.ValueDate);
                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "From ";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundID;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Settlement Date ";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Value = ":";
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 14].Value = (rsHeader.Key.SettlementDate);
                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Re ";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "SETTLEMENT INSTRUCTION";
                                        incRowExcel++;




                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Counterpart";
                                        worksheet.Cells[incRowExcel, 2].Value = "Board";
                                        worksheet.Cells[incRowExcel, 3].Value = "B / S";
                                        worksheet.Cells[incRowExcel, 4].Value = "S / T";
                                        worksheet.Cells[incRowExcel, 5].Value = "Shares";
                                        worksheet.Cells[incRowExcel, 6].Value = "Quantity";
                                        worksheet.Cells[incRowExcel, 7].Value = "Price";
                                        worksheet.Cells[incRowExcel, 8].Value = "Total Price";
                                        worksheet.Cells[incRowExcel, 9].Value = "Comm.";
                                        worksheet.Cells[incRowExcel, 10].Value = "Sales Tax";
                                        worksheet.Cells[incRowExcel, 11].Value = "Levy";
                                        worksheet.Cells[incRowExcel, 12].Value = "VAT Tax";
                                        worksheet.Cells[incRowExcel, 13].Value = "Comm. Tax";
                                        worksheet.Cells[incRowExcel, 14].Value = "Net Payment";
                                        worksheet.Cells[incRowExcel, 15].Value = "Gross Payment";

                                        //THICK BOX HEADER
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                        string _range = "A" + incRowExcel + ":O" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 18;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        }
                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;



                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            decimal _totalSettleForBuy = 0;
                                            decimal _totalSettleForSell = 0;
                                            _totalSettleForBuy = rsDetail.DoneAmount + rsDetail.CommissionAmount + rsDetail.LevyAmount + rsDetail.VATAmount + rsDetail.KPEIAmount;
                                            _totalSettleForSell = rsDetail.DoneAmount - rsDetail.CommissionAmount - rsDetail.LevyAmount - rsDetail.VATAmount - rsDetail.KPEIAmount - rsDetail.IncomeTaxSellAmount;
                                            _range = "A" + incRowExcel + ":O" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 18;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                            }





                                            //area detail

                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.CounterpartID;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.BoardTypeDesc;
                                            if (rsDetail.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 3].Value = "B";

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 3].Value = "S";

                                            }
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.SettlementModeDesc;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.InstrumentID;
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.DoneVolume;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.DonePrice;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.DoneAmount;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.CommissionAmount;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.IncomeTaxSellAmount;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.LevyAmount;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail.VATAmount;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail.WHTAmount;
                                            if (rsDetail.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalAmount;
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalAmount;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalAmount;
                                            }

                                            if (rsDetail.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 15].Value = _totalSettleForBuy;
                                                //worksheet.Cells[incRowExcel, 14].Value = (_totalSettleForBuy - rsDetail.WHTAmount);
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 15].Value = _totalSettleForSell;
                                                //worksheet.Cells[incRowExcel, 14].Value = _totalSettleForSell;
                                            }
                                            if (rsDetail.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalAmount;
                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.TotalAmount * -1;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.TotalAmount;
                                            }

                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;




                                        }
                                        //THICK BOX DETAIL
                                        _endRowDetail = incRowExcel - 1;
                                        worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["L" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["M" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["N" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["N" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["N" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["O" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["O" + _startRowDetail + ":O" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["O" + _startRowDetail + ":O" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["O" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        //worksheet.Cells[incRowExcel, 3].Value = "Total :";
                                        //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";

                                        //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                        worksheet.Cells[incRowExcel, 11].Calculate();
                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells[incRowExcel, 13].Calculate();
                                        worksheet.Cells[incRowExcel, 14].Calculate();
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 12].Value = "Net Proceeds :";
                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 14].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 14].Calculate();
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                        worksheet.Cells[incRowExcel, 2].Value = "NETTING";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                        worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                        worksheet.Cells["B" + incRowExcel + ":N" + (incRowExcel + 2)].Merge = true;
                                        incRowExcel = incRowExcel + 4;
                                        worksheet.Cells[incRowExcel, 3].Value = "Check By";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "Approved By";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["F" + incRowExcel + ":M" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 5;
                                        worksheet.Cells[incRowExcel, 3].Value = "(    ";
                                        worksheet.Cells[incRowExcel, 5].Value = ")";
                                        worksheet.Cells[incRowExcel, 6].Value = "(    ";
                                        worksheet.Cells[incRowExcel, 8].Value = ")";
                                        worksheet.Cells[incRowExcel, 11].Value = "(    ";
                                        worksheet.Cells[incRowExcel, 14].Value = ")";
                                        worksheet.Row(incRowExcel).PageBreak = true;





                                    }


                                    string _rangeA = "A1:O" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 18;
                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }


                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 17];
                                    worksheet.Column(1).Width = 20;
                                    worksheet.Column(2).Width = 15;
                                    worksheet.Column(3).Width = 15;
                                    worksheet.Column(4).Width = 15;
                                    worksheet.Column(5).Width = 15;
                                    worksheet.Column(6).Width = 20;
                                    worksheet.Column(7).Width = 25;
                                    worksheet.Column(8).Width = 25;
                                    worksheet.Column(9).Width = 20;
                                    worksheet.Column(10).Width = 20;
                                    worksheet.Column(11).Width = 20;
                                    worksheet.Column(12).Width = 20;
                                    worksheet.Column(13).Width = 20;
                                    worksheet.Column(14).Width = 30;
                                    worksheet.Column(15).Width = 30;
                                    worksheet.Column(16).Width = 0;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&34 NETTING EQUITY";

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                    //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }
                            }
                        }

                    }

                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public int Check_DataInvestment(DateTime _date)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                        if exists(select * from investment where valuedate = @Date and statusinvestment = 1)
                        BEGIN
                        select 1 Result
                        END
                        ELSE 
                        BEGIN
                        select 0 Result
                        END    ";

                        cmd.Parameters.AddWithValue("@Date", _date);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Check_DataDealing(DateTime _date)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                        if exists(select * from investment where valuedate = @Date and statusDealing = 1)
                        BEGIN
                        select 1 Result
                        END
                        ELSE 
                        BEGIN
                        select 0 Result
                        END    ";

                        cmd.Parameters.AddWithValue("@Date", _date);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public FundExposure Validate_CounterpartPercentage(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    string _paramDealingPK = "";

                    if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                    {
                        _paramDealingPK = " And A.DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                    }
                    else
                    {
                        _paramDealingPK = " And A.DealingPK in (0) ";
                    }
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        //                        cmd.CommandText = @"
                        //    	
                        //                        declare @BrokerFeeSelected numeric(22,2)
                        //                        declare @BrokerFee numeric(22,2)
                        //                        declare @TotalBrokerFee numeric(22,2)
                        //                        declare @PeriodPK int
                        //
                        //                        Select @PeriodPK = PeriodPK From Period where @DateFrom Between DateFrom and DateTo  
                        //
                        //                        select @BrokerFee = isnull(Sum(A.DoneAmount),0) from Investment A
                        //                        left join CounterpartCommission B on  B.CounterpartPK = @CounterpartPK  and B.Status = 2
                        //                        where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and InstrumentTypePK = @InstrumentTypePK
                        //                        and year(ValueDate) = year(@DateTo) and ValueDate <= @DateFrom   and A.CounterpartPK = @CounterpartPK
                        //
                        //
                        //                        select @BrokerFeeSelected = isnull(Sum(A.DoneAmount),0) from Investment A
                        //                        left join CounterpartCommission B on  B.CounterpartPK = @CounterpartPK  and B.Status = 2
                        //                        where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and InstrumentTypePK = @InstrumentTypePK
                        //                        and valueDate between @DateFrom and @DateTo and  SelectedDealing = 1  and A.CounterpartPK = 0 
                        //
                        //
                        //                        select @TotalBrokerFee = isnull(Sum(A.DoneAmount),0) from Investment A
                        //                        left join CounterpartCommission B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
                        //                        where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and InstrumentTypePK = @InstrumentTypePK and PeriodPK = @PeriodPK
                        //                        and A.CounterpartPK <> 0
                        //
                        //
                        //                        select B.Name CounterpartName,case when @TotalBrokerFee = 0 then 0 else case when (@BrokerFeeSelected + @BrokerFee)/(@TotalBrokerFee + @BrokerFeeSelected) * 100 >= 30 
                        //                        then 1 else 0 end end ValidateAmount,case when @TotalbrokerFee = 0 then 0 when  
                        //                        (@BrokerFeeSelected + @BrokerFee)/(@TotalBrokerFee + @BrokerFeeSelected) * 100 > 100 then 100 
                        //                        else (@BrokerFeeSelected + @BrokerFee)/(@TotalBrokerFee + @BrokerFeeSelected) * 100 end ExposurePercent from investment A
                        //                        left join Counterpart B on @CounterpartPK = B.CounterpartPK and B.Status = 2
                        //                        Group By B.Name
                        //
                        //
                        //                           ";

                        cmd.CommandText = @"
                        Declare @PositionForExp TABLE
                        (
	                        ID NVARCHAR(200),
	                        Name NVARCHAR(200),
	                        TotalBrokerFee NUMERIC(22,4),
	                        AllBrokerFee numeric(22,4),
	                        Exposure NUMERIC(18,4)
                        )

                        Declare @PeriodPK int

                        select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

                        DECLARE @TotalInvestmentAllFundForCounterpartExposure numeric(26,6)
                        DECLARE @BrokerFeeSelected numeric(22,2)

                        select @TotalInvestmentAllFundForCounterpartExposure = isnull(Sum(A.DoneAmount),0)
                        FROM dbo.Investment A
                        LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
                        LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
                        WHERE  ValueDate <= @DateFrom  and A.PeriodPK = @PeriodPK and StatusSettlement = 2
                        AND C.GroupType in (1,2)

                        select @BrokerFeeSelected = isnull(Sum(A.DoneAmount),0) from Investment A
                        left join CounterpartCommission B on  B.CounterpartPK = @CounterpartPK  and B.Status = 2
                        where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and InstrumentTypePK = @InstrumentTypePK
                        and valueDate between @DateFrom and @DateTo " + _paramDealingPK + @"


                        INSERT INTO @PositionForExp
	                                (
				                        ID,
				                        Name,
				                        TotalBrokerFee,
				                        AllBrokerFee,
				                        Exposure
	                                )
                        SELECT ISNULL(G.ID,''),ISNULL(G.Name,'')
                        ,SUM(ISNULL(A.DoneAmount,0)) MarketValue
                        ,@TotalInvestmentAllFundForCounterpartExposure
                        , (SUM(ISNULL(A.DoneAmount,0)) + @BrokerFeeSelected) /  (@TotalInvestmentAllFundForCounterpartExposure + @BrokerFeeSelected) * 100 ExposurePercent
                        FROM dbo.Investment A
                        LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
                        LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
                        LEFT JOIN dbo.MasterValue E ON E.Code = 20 AND E.ID = 'ExposureType' AND E.status IN (1,2)
                        LEFT JOIN Counterpart G ON A.CounterpartPK = G.CounterpartPK AND G.status IN (1,2)
                        WHERE  ValueDate <= @DateFrom and PeriodPK = @PeriodPK and StatusSettlement = 2
                        AND C.GroupType in (1,2) and A.CounterpartPK = @CounterpartPK

                        GROUP BY G.ID,G.Name

                        select Name CounterpartName,case when Exposure >= 30 then 1 else 0 end ValidateAmount, Exposure ExposurePercent from @PositionForExp A
                         order by Exposure desc ";

                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new FundExposure()
                                {
                                    CounterpartName = dr["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CounterpartName"]),
                                    ValidateAmount = dr["ValidateAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["ValidateAmount"]),
                                    ExposurePercent = dr["ExposurePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["ExposurePercent"]),


                                };
                            }
                            else
                            {
                                return new FundExposure()
                                {
                                    CounterpartName = "",
                                    ValidateAmount = 0,
                                    ExposurePercent = 0,

                                };
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public List<CounterpartExposure> Get_CounterpartExposure(string _date)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<CounterpartExposure> _L = new List<CounterpartExposure>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        //                        cmd.CommandText = @" 
                        //
                        //                                declare @TotalBrokerFee numeric(22,2)
                        //                                declare @PeriodPK int
                        //                                Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  
                        //
                        //                                select @TotalBrokerFee = isnull(Sum(A.DoneAmount * (B.CommissionPercent/100)),0) from Investment A
                        //                                left join CounterpartCommission B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
                        //                                where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and  PeriodPK = @PeriodPK
                        //                                and A.CounterpartPK <> 0
                        //
                        //                                select C.ID,C.Name,cast(isnull(Sum(A.DoneAmount * (B.CommissionPercent/100)),0) as numeric(22,8)) TotalPerBrokerFee
                        //                                ,cast(@TotalBrokerFee as numeric(22,8)) AllBrokerFee
                        //                                ,isnull(Sum(A.DoneAmount * (B.CommissionPercent/100)),0)/@TotalBrokerFee * 100 Exposure from Investment A
                        //                                left join Counterpart C on A.CounterpartPK = c.CounterpartPK and C.status = 2
                        //                                left join CounterpartCommission B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
                        //                                left join Fund D on A.FundPK = D.FundPK and D.status in (1,2)                                 
                        //                                where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and  PeriodPK = @PeriodPK
                        //                                and A.CounterpartPK <> 0  and D.FundTypeInternal not in (2)
                        //                                group by C.ID,C.Name
                        //                         ";

                        cmd.CommandText = @" 
                        Declare @PositionForExp TABLE
                        (
	                        ID NVARCHAR(200),
	                        Name NVARCHAR(200),
	                        TotalPerBrokerFee NUMERIC(22,4),
	                        AllBrokerFee numeric(22,4),
	                        Exposure NUMERIC(8,4)
                        )

                        Declare @PeriodPK int

                        select @PeriodPK = PeriodPK from Period where @ValueDate between DateFrom and DateTo and status = 2

                        DECLARE @TotalInvestmentAllFundForCounterpartExposure numeric(26,6)

                        select @TotalInvestmentAllFundForCounterpartExposure = SUM(case when TrxType = 1 then ISNULL(DoneAmount,0) else ISNULL(DoneAmount,0) * -1 end) 
                        FROM dbo.Investment A
                        LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
                        LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
                        WHERE  ValueDate <= @ValueDate  and A.PeriodPK = @PeriodPK and StatusSettlement = 2
                        AND C.GroupType in (1,2)


                        INSERT INTO @PositionForExp
	                                (
				                        ID,
				                        Name,
				                        TotalPerBrokerFee,
				                        AllBrokerFee,
				                        Exposure
	                                )
                        SELECT ISNULL(G.ID,''),ISNULL(G.Name,'')
                        ,SUM(ISNULL(A.DoneAmount,0)) MarketValue
                        ,@TotalInvestmentAllFundForCounterpartExposure
                        , SUM(ISNULL(A.DoneAmount,0)) /  @TotalInvestmentAllFundForCounterpartExposure * 100 ExposurePercent
                        FROM dbo.Investment A
                        LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
                        LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
                        LEFT JOIN dbo.MasterValue E ON E.Code = 20 AND E.ID = 'ExposureType' AND E.status IN (1,2)
                        LEFT JOIN Counterpart G ON A.CounterpartPK = G.CounterpartPK AND G.status IN (1,2)
                        WHERE  ValueDate <= @ValueDate and PeriodPK = @PeriodPK and StatusSettlement = 2
                        AND C.GroupType in (1,2) 

                        GROUP BY G.ID,G.Name

                        select * from @PositionForExp order by Exposure desc
                           ";

                        cmd.Parameters.AddWithValue("@ValueDate", _date);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    CounterpartExposure _M = new CounterpartExposure();
                                    _M.ID = dr["ID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["ID"]);
                                    _M.Name = dr["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Name"]);
                                    _M.TotalPerBrokerFee = dr["TotalPerBrokerFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalPerBrokerFee"]);
                                    _M.AllBrokerFee = dr["AllBrokerFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AllBrokerFee"]);
                                    _M.Exposure = dr["Exposure"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Exposure"]);
                                    _L.Add(_M);
                                }
                            }
                            return _L;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string PTPEquity_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        //                cmd.CommandText = @"
                        //                 BEGIN  
                        //                 SET NOCOUNT ON         

                        //                       create table #Text(      
                        //                      [ResultText] [nvarchar](1000)  NULL ,
                        // TrxType int      ,
                        // ValueDate date   
                        //                      )                        

                        //                      truncate table #Text      
                        //                      insert into #Text     
                        //                      select '' ,0,null
                        //                      insert into #Text 
                        //                            Select  
                        //                            'NEWM'
                        //                            + '|' + ''
                        //                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
                        //                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
                        //                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
                        //                            + '|' + @CompanyID
                        //                            + '|' + isnull(A.BrokerCode,'')
                        //                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
                        //                            + '|' + RTRIM(LTRIM(isnull(A.Instrument,'')))
                        //                            + '|' + cast(isnull(A.TrxType,'') as nvarchar)
                        //                            + '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
                        //                            + '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
                        //                            + '|' + case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)), '')as nvarchar) end
                        //                            + '|' + case when A.CommissionAmount = 0 then '0' else cast(isnull(cast(A.CommissionAmount as decimal(30,2)), '')as nvarchar) end
                        //                            + '|' + case when A.TrxType = 1 then '0' else cast(isnull(cast(A.IncomeTaxSellAmount as decimal(30,2)), '')as nvarchar) end
                        //                            + '|' + case when A.LevyAmount = 0 then '0' else cast(isnull(cast(A.LevyAmount as decimal(30,2)), '')as nvarchar) end 
                        //                            + '|' + case when A.VATAmount = 0 then '0' else cast(isnull(cast(A.VATAmount as decimal(30,2)), '')as nvarchar) end 
                        //                            + '|' + case when A.OtherCharges = 0 then '0' else cast(isnull(cast(A.OtherCharges as decimal(30,2)), '')as nvarchar) end 
                        //                            + '|' + case when A.TrxType = 1 then cast(isnull(cast((A.TradeAmount + A.CommissionAmount + A.VATAmount + A.LevyAmount + A.OtherCharges) as decimal (30,2)), '') as nvarchar) else cast(isnull(cast((A.TradeAmount - A.CommissionAmount - A.VATAmount - A.LevyAmount - A.OtherCharges - A.IncomeTaxSellAmount) as decimal (30,2)), '') as nvarchar) end
                        //                            + '|' + case when A.WHTAmount = 0 then '0' else cast(isnull(cast(A.WHTAmount as decimal(30,2)), '')as nvarchar) end 
                        //                            + '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(A.TotalAmount as decimal(30,2)), '')as nvarchar) end 
                        //                            + '|' + case when A.TrxType = 1 then '2' else '1' end         
                        //                            + '|' + case when @ClientCode = '05' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))  end
                        //                            + '|' + '' , A.TrxType, A.valuedate
                        //                            from (      
                        //                      	    select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                        //                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                        //                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,InvestmentPK from investment A
                        //                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                        //                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                        //                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                        //                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                        //                            where    
                        //                            A.ValueDate =  @ValueDate " + _paramSettlementPK + @" 
                        //and A.statusdealing = 2 and A.InstrumentTypePK in (1,4,16)
                        //                            )A    
                        //                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                        //                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.InvestmentPK
                        //                            order by A.valuedate asc

                        //                select ResultText from #text order by ValueDate,TrxType asc
                        //                END

                        //                ";

                        cmd.CommandText = @"

                         --declare @ValueDate date
                        --declare @CompanyID nvarchar(100)
                        --declare @ClientCode nvarchar(100)

                        --set @ValueDate = '2020-10-22'
                        --select @CompanyID = ID from company where status = 2
                        --set @ClientCode = '17'

                        --drop table #tempSort
                        --drop table #Text

                        create table #Text(      
                        [ResultText] [nvarchar](1000)  NULL          
                        )   

                        create table #tempSort
                        (
	                        IdentInt int identity,
	                        Reference nvarchar(100),
	                        valuedate datetime,
	                        settlementdate datetime,
	                        BrokerCode nvarchar(100),
	                        FundCode nvarchar(100),
	                        Instrument nvarchar(100),
	                        DonePrice numeric(32,12),
	                        Quantity numeric(32,4),
	                        TradeAmount numeric(32,6),
	                        CommissionAmount numeric(32,6),
	                        IncomeTaxSellAmount numeric(32,6),
	                        LevyAmount numeric(32,6),
	                        VatAmount numeric(32,6),
	                        OtherCharges numeric(32,6),
	                        TransactionType int,
	                        TotalAmount numeric(32,6),
	                        WHTAmount numeric(32,6),
	                        InvestmentNotes nvarchar(100),
	                        TrxType int,
	                        SettlementMode int
                        )


                        --1. avg priority buy
                        insert into #tempSort(Reference,valuedate,settlementdate,BrokerCode,FundCode,Instrument,DonePrice,Quantity,TradeAmount,CommissionAmount,IncomeTaxSellAmount,LevyAmount,VatAmount,OtherCharges,TransactionType,TotalAmount,WHTAmount,InvestmentNotes,TrxType,SettlementMode)
                        select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                        A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                        A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode from investment A
                        left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                        left join Fund C on A.fundpk = C.fundpk and C.status = 2
                        left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                        left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                        where    
                        A.ValueDate =  @ValueDate " + _paramSettlementPK + @" 
                        and A.statusdealing = 2 and A.InstrumentTypePK in (1,4,16) and A.FundPk in (select FundPK from FundAccountingSetup where AveragePriority = 1 and status = 2)
                        order by Valuedate,TrxType asc

                        --2. avg priority sell
                        insert into #tempSort(Reference,valuedate,settlementdate,BrokerCode,FundCode,Instrument,DonePrice,Quantity,TradeAmount,CommissionAmount,IncomeTaxSellAmount,LevyAmount,VatAmount,OtherCharges,TransactionType,TotalAmount,WHTAmount,InvestmentNotes,TrxType,SettlementMode)
                        select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                        A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                        A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode from investment A
                        left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                        left join Fund C on A.fundpk = C.fundpk and C.status = 2
                        left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                        left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                        where    
                        A.ValueDate =  @ValueDate " + _paramSettlementPK + @" 
                        and A.statusdealing = 2 and A.InstrumentTypePK in (1,4,16) and A.FundPk in (select FundPK from FundAccountingSetup where AveragePriority = 2 and status = 2)
                        order by Valuedate,TrxType desc

                        --3. avg priority InvestmentPK
                        insert into #tempSort(Reference,valuedate,settlementdate,BrokerCode,FundCode,Instrument,DonePrice,Quantity,TradeAmount,CommissionAmount,IncomeTaxSellAmount,LevyAmount,VatAmount,OtherCharges,TransactionType,TotalAmount,WHTAmount,InvestmentNotes,TrxType,SettlementMode)
                        select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                        A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                        A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode from investment A
                        left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                        left join Fund C on A.fundpk = C.fundpk and C.status = 2
                        left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                        left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                        where    
                        A.ValueDate =  @ValueDate " + _paramSettlementPK + @" 
                        and A.statusdealing = 2 and A.InstrumentTypePK in (1,4,16) and A.FundPk in (select FundPK from FundAccountingSetup where AveragePriority = 3 and status = 2)
                        order by Valuedate,Investmentpk asc


                        BEGIN  
                        SET NOCOUNT ON     
                            truncate table #Text      
                            insert into #Text     
                            select '' 
                            insert into #Text 
                            Select  
                            'NEWM'
                            + '|' + ''
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
                            + '|' + @CompanyID
                            + '|' + isnull(A.BrokerCode,'')
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
                            + '|' + RTRIM(LTRIM(isnull(A.Instrument,'')))
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar)
                            + '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
                            + '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
                            + '|' + case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)), '')as nvarchar) end
                            + '|' + case when A.CommissionAmount = 0 then '0' else cast(isnull(cast(A.CommissionAmount as decimal(30,2)), '')as nvarchar) end
                            + '|' + case when A.TrxType = 1 then '0' else cast(isnull(cast(A.IncomeTaxSellAmount as decimal(30,2)), '')as nvarchar) end
                            + '|' + case when A.LevyAmount = 0 then '0' else cast(isnull(cast(A.LevyAmount as decimal(30,2)), '')as nvarchar) end 
                            + '|' + case when A.VATAmount = 0 then '0' else cast(isnull(cast(A.VATAmount as decimal(30,2)), '')as nvarchar) end 
                            + '|' + case when A.OtherCharges = 0 then '0' else cast(isnull(cast(A.OtherCharges as decimal(30,2)), '')as nvarchar) end 
                            + '|' + case when A.TrxType = 1 then cast(isnull(cast((A.TradeAmount + A.CommissionAmount + A.VATAmount + A.LevyAmount + A.OtherCharges) as decimal (30,2)), '') as nvarchar) else cast(isnull(cast((A.TradeAmount - A.CommissionAmount - A.VATAmount - A.LevyAmount - A.OtherCharges - A.IncomeTaxSellAmount) as decimal (30,2)), '') as nvarchar) end
                            + '|' + case when A.WHTAmount = 0 then '0' else cast(isnull(cast(A.WHTAmount as decimal(30,2)), '')as nvarchar) end 
                            + '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(A.TotalAmount as decimal(30,2)), '')as nvarchar) end 
                            + '|' + case when A.TrxType = 1 then '2' else '1' end         
                            + '|' + case when @ClientCode = '05' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))  end
                            + '|' + '' ResultText
                            from (      
                                select * from #tempSort
                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.IdentInt
                            order by A.IdentInt asc

                            select * from #text
                        END

                        ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);
                        cmd.Parameters.AddWithValue("@ClientCode", Tools.ClientCode);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Equity.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Equity.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public string PTPDeposito_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, bool _param5, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }

                string paramPTPMatureSelected = "";
                paramPTPMatureSelected = "A.RefNo in (" + _investment.PTPMatureSelected + ") ";


                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _mature = "";
                        if (_param5 == true)
                        {
                            if (Tools.ClientCode == "01")
                            {
                                _mature = @"union all

                                select CONVERT(varchar(15), [identity]) + '/FP/'  
                                + REPLACE(RIGHT(CONVERT(VARCHAR(8), A.MaturityDate, 3), 5) ,'/','') Reference,A.MaturityDate valuedate, A.MaturityDate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.Balance Quantity, 
                                A.Balance TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.Balance TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.Balance OldTradeAmount,A.InterestPercent OldInterestPercent,A.MaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.Balance * 1 AmountTrf, A.InterestPercent BreakInterestPercent,AcqDate, 
                                round(A.Balance * (A.InterestPercent/100)/365 * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,1 Mature,0 BitRollOverInterest
                                from FundPosition A
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2  
                                left join Bank F on A.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                where A.MaturityDate = @ValueDate and Date = (select max(date) from FundPosition where date < @ValueDate) ";
                            }
                            else if (Tools.ClientCode == "02")
                            {
                                _mature = @"
                                union all

                                select A.Reference,A.MaturityDate valuedate valuedate, A.valuedate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneVolume Quantity, 
                                A.DoneVolume TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneVolume OldTradeAmount,A.InterestPercent OldInterestPercent,A.MaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneVolume * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate,A.AcqDate , 
                                round(A.DoneVolume * (A.InterestPercent/100)/case when I.InterestDaysType in (2,4) then 365 else 360 end * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,0 BitRollOverInterest
                                from InvestmentMature A
                                left join Investment I on A.InvestmentPK = I.InvestmentPK and I.statusDealing = 2
                                left join Fund C on I.FundPK = C.FundPK and C.status in (1,2)
                                left join instrument D on I.instrumentpk = D.instrumentpk and D.status in (1,2)
                                left join Bank F on I.BankPK = F.BankPK and F.status in (1,2)
                                left join BankBranch G on I.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                where " + paramPTPMatureSelected;
                            }
                            else if (Tools.ClientCode == "03")
                            {
                                _mature = @"union all
                                select A.Reference,A.MaturityDate valuedate, A.valuedate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneAmount Quantity, 
                                A.DoneAmount TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneAmount OldTradeAmount,A.InterestPercent OldInterestPercent,A.MaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneAmount * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate, 
                                round(A.DoneAmount * (A.InterestPercent/100)/case when B.InterestDaysType in (2) then DATEDIFF(DAY, J.DateFrom, J.DateTo) + 1 else case when B.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,1 Mature,A.Reference ParentReference,B.InterestDaysType,0 BitRollOverInterest
                                from InvestmentMature A
                                left join Investment B on A.InvestmentPK = B.InvestmentPK and B.StatusSettlement = 2 and B.InvestmentPK <> 0 
                                left join Fund C on A.FundID = C.ID and C.status = 2
                                left join instrument D on B.instrumentpk = D.instrumentpk and D.status = 2  
                                left join Bank F on B.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on B.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                left join Period J on B.PeriodPK = J.PeriodPK and J.status = 2
                                where " + paramPTPMatureSelected;
                            }
                            else if (Tools.ClientCode == "05")
                            {
                                _mature = "";
                            }
                            else if (Tools.ClientCode == "19")
                            {
                                _mature = @"
                                union all

                                select CONVERT(varchar(15), [identity]) + '/FP/'  
                                + REPLACE(RIGHT(CONVERT(VARCHAR(8), A.MaturityDate, 3), 5) ,'/','') Reference,A.MaturityDate valuedate, A.MaturityDate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.Balance Quantity, 
                                A.Balance TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.Balance TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.Balance OldTradeAmount,A.InterestPercent OldInterestPercent,A.MaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.Balance * 1 AmountTrf, A.InterestPercent BreakInterestPercent,AcqDate,AcqDate , 
                                round(A.Balance * (A.InterestPercent/100)/365 * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,0 BitRollOverInterest
                                from FundPosition A
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2  
                                left join Bank F on A.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                where A.MaturityDate = @ValueDate and A.TrailsPK = @TrailsPK  ";
                            }
                            else if (Tools.ClientCode == "25")
                            {
                                _mature = @"
                                union all

                                select A.Reference,A.MaturityDate valuedate, A.valuedate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneVolume Quantity, 
                                A.DoneVolume TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneVolume OldTradeAmount,A.InterestPercent OldInterestPercent,A.MaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneVolume * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate,A.AcqDate , 
                                round(A.DoneVolume * (A.InterestPercent/100)/case when I.InterestDaysType in (2,4) then 365 else 360 end * datediff(day,A.AcqDate,A.MaturityDate),0) * 0.8 InterestAmount
                                from InvestmentMature A
                                left join Investment I on A.InvestmentPK = I.InvestmentPK and I.statusDealing = 2
                                left join Fund C on I.FundPK = C.FundPK and C.status in (1,2)
                                left join instrument D on I.instrumentpk = D.instrumentpk and D.status in (1,2)
                                left join Bank F on I.BankPK = F.BankPK and F.status in (1,2)
                                left join BankBranch G on I.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                where " + paramPTPMatureSelected;
                            }
                            else
                            {
                                _mature = @"union all
						        select A.Reference,A.MaturityDate valuedate, A.ValueDate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneAmount Quantity, 
                                A.DoneAmount TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneAmount OldTradeAmount,A.InterestPercent OldInterestPercent,A.MaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneAmount * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate, 
                                round(A.DoneAmount * (A.InterestPercent/100)/case when B.InterestDaysType in (2) then DATEDIFF(DAY, J.DateFrom, J.DateTo) + 1 else case when B.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,1 Mature,A.Reference ParentReference,0 BitRollOverInterest
                                from InvestmentMature A
                                left join Investment B on A.InvestmentPK = B.InvestmentPK and B.StatusSettlement = 2 and B.InvestmentPK <> 0 
                                left join Fund C on A.FundID = C.ID and C.status = 2
                                left join instrument D on B.instrumentpk = D.instrumentpk and D.status = 2  
                                left join Bank F on B.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on B.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                left join Period J on B.PeriodPK = J.PeriodPK and J.status = 2
                                where A.MaturityDate between case when DATEDIFF(day,dbo.FWorkingDay(@valuedate,-1),@ValueDate) > 1 then  dateadd(day,1,dbo.FWorkingDay(@valuedate,-1)) else @ValueDate end and @valuedate and " + paramPTPMatureSelected;
                            }
                        }
                        else
                        {
                            _mature = "";
                        }

                        if (Tools.ClientCode == "01")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate
                            )
                            and status = 2

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),'')as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),'')as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + '' -- 20.Withdrawal Interest
                            + '|' + '' -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.Mature = 1 then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else cast(isnull(A.AmountTrf,0) as nvarchar) end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else '' end end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then 0 else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/365 * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode


                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "02")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate
                            )
                            and status = 2

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                             + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else case when A.TrxType = 1 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), PrevDate, 112),'')))) end end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '0' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),'')as nvarchar) end else '' end -- 20.Withdrawal Interest
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),'')as nvarchar) else '' end -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount + A.InterestAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 1  then cast(isnull(A.AmountTrf,0) as nvarchar) else '0' end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else '' end end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then cast(isnull(A.DoneAmount,0) as decimal(30,2)) else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,I.AcqDate PrevDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2,4) then 365 else 360 end * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,I.AcqDate,A.InterestDaysType,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode

                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.PrevDate,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "03")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate   --and FundPK = @FundPK
                            )
                            and status = 2   --and FundPK = @FundPK

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType in (1,3)  then case when isnull(A.InterestPaymentType,'') in (1,4) then '1' 
                            else case when isnull(A.InterestPaymentType,'') = 7 then '4'
                            else case when isnull(A.InterestPaymentType,'') in (10,13) then '5'
                            else case when isnull(A.InterestPaymentType,'') = 16 then '6'
                            else case when isnull(A.InterestPaymentType,'') = 19 then '7' end end end end end
                            else '' end -- 14.Investment.InterestPaymentType              
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(SUM(ISNULL(A.TradeAmount * BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.SettlementDate) as decimal(30,2)),'')as nvarchar)  else '' end -- 20.Withdrawal Interest
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(SUM(ISNULL(A.TradeAmount * BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.SettlementDate) + A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.Mature = 1 then cast(isnull(cast((SUM(ISNULL(A.TradeAmount * BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.SettlementDate) + A.TradeAmount )* -1 as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((SUM(ISNULL(A.TradeAmount * A.BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.SettlementDate) + A.TradeAmount )* -1 as decimal(30,2)),'')as nvarchar) else cast(isnull(cast(A.AmountTrf as decimal(30,2)),0) as nvarchar) end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType in (2,3) then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,''))))  else '' end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then 0 else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2) then DATEDIFF(DAY, K.DateFrom, K.DateTo) + 1 else case when A.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,J.Reference ParentReference,A.InterestDaysType,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            left join Investment J on case when A.TrxType = 3 then I.InstrumentPK  else A.InstrumentPK end = J.InstrumentPK
                            and case when A.TrxType = 3 then I.FundPK  else A.FundPK end = J.FundPK 
                            and case when A.TrxType = 3 then I.AcqDate  else A.AcqDate end = J.ValueDate 
                            and J.StatusSettlement = 2
                            left join Period K on A.PeriodPK = K.PeriodPK and K.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,J.Reference,A.InterestDaysType,K.DateFrom,K.DateTo,A.BitRolloverInterest,D.CurrencyPK,F.USDPTPCode


                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.ParentReference ,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "05")
                        {
                            cmd.CommandText = @"
                            BEGIN  
                            SET NOCOUNT ON         

                            create table #Text(      
                            [ResultText] [nvarchar](1000)  NULL          
                            )                        
        
                                
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType in (2,3)  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.InvestmentNotes = 'MATURE'  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) else case when A.InvestmentNotes = 'LIQUIDATE'  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),0)as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),0)as nvarchar) end else '' end -- 20.Withdrawal Interest
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),0)as nvarchar) else '' end -- 21.Total Withdrawal Amount
                            + '|' + case when A.TrxType = 3  then case when A.CurrencyPK = 1  then '1' else '2' end  else '' end -- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(((A.TradeAmount + A.InterestAmount) * -1) as decimal(30,2)),'')as nvarchar) else case when A.TrxType in (1)  then cast(isnull(A.AmountTrf,0) as nvarchar) else cast(isnull(cast(A.InterestAmount * -1 as decimal(30,2)),0)as nvarchar) end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,'')))) else '' end end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                                select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                                A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, Z.TrxType TransactionType,
                                A.TotalAmount, A.WHTAmount, Z.TrxTypeID InvestmentNotes, Z.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                                A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                                case when A.TrxType = 3 then cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) else cast(isnull(A.DoneAmount,0) as decimal(30,2)) end AmountTrf,case when Z.TrxTypeID = 'MATURE' then A.InterestPercent else A.BreakInterestPercent end BreakInterestPercent,Z.AcqDate,
                                case when Z.TrxTypeID = 'MATURE' then (round(A.DoneAmount * (A.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.MaturityDate),0)*0.8) 
                                else case when Z.TrxTypeID = 'LIQUIDATE' then (round(A.DoneAmount * (A.BreakInterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) 
                                else case when Z.TrxTypeID = 'ROLLOVER' then (round(A.DoneAmount * (I.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) 
                                else (round(A.DoneAmount * (A.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) end end end InterestAmount,Z.OldReference ParentReference,C.CurrencyPK
                                from InvestmentMature Z
                                left join investment A on Z.InvestmentPK = A.InvestmentPK and A.StatusSettlement in (1,2)
                                left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                                left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                                left join Bank F on A.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                                where " + paramPTPMatureSelected + @" and A.InvestmentPK in (select InvestmentPK from Investment where StatusSettlement in (1,2))

                                Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                                A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, Z.TrxType,
                                A.TotalAmount, A.WHTAmount ,Z.TrxTypeID, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                                A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,Z.AcqDate,Z.OldReference,C.CurrencyPK,Z.TransactionType,D.CurrencyPK,F.USDPTPCode


                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.ParentReference,A.CurrencyPK 
                            order by A.ValueDate Asc
                            select * from #text 
                            END



                                    ";
                        }
                        else if (Tools.ClientCode == "17")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate   --and FundPK = @FundPK
                            )
                            and status = 2   --and FundPK = @FundPK

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType in (1,3)  then case when isnull(A.InterestPaymentType,'') in (1,4) then '1' 
                            else case when isnull(A.InterestPaymentType,'') = 7 then '4'
                            else case when isnull(A.InterestPaymentType,'') in (10,13) then '5'
                            else case when isnull(A.InterestPaymentType,'') = 16 then '6'
                            else case when isnull(A.InterestPaymentType,'') = 19 then '7' end end end end end
                            else '' end -- 14.Investment.InterestPaymentType              
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then case when isnull(A.AmountTrf,0) = 0 then '' else cast(isnull(cast(A.AmountTrf as decimal(30,2)),'')as nvarchar) end else '' end -- 19.Withdrawal Principle
                            + '|' + '' -- 20.Withdrawal Interest
                            + '|' + '' -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.Mature = 1 then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((A.AmountTrf) as decimal(30,2)),'')as nvarchar) else cast(isnull(cast(A.AmountTrf as decimal(30,2)),0) as nvarchar) end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType in (2,3) then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,''))))  else '' end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            isnull(A.AmountToTransfer,0) AmountTrf,A.BreakInterestPercent,A.AcqDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2) then DATEDIFF(DAY, K.DateFrom, K.DateTo) + 1 else case when A.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,J.Reference ParentReference,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            left join Investment J on case when A.TrxType = 3 then I.InstrumentPK  else A.InstrumentPK end = J.InstrumentPK
                            and case when A.TrxType = 3 then I.FundPK  else A.FundPK end = J.FundPK 
                            and case when A.TrxType = 3 then I.AcqDate  else A.AcqDate end = J.ValueDate 
                            and J.StatusSettlement = 2
                            left join Period K on A.PeriodPK = K.PeriodPK and K.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,J.Reference,A.InterestDaysType,K.DateFrom,K.DateTo,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode,A.AmountToTransfer

                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.ParentReference,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "19")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate
                            )
                            and status = 2

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                             + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else case when A.TrxType = 1 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), PrevDate, 112),'')))) end end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                             + '|' + case when A.TrxType in (1,3)  then case when isnull(A.InterestPaymentType,'') in (1,4) then '1' 
                            else case when isnull(A.InterestPaymentType,'') = 7 then '4'
                            else case when isnull(A.InterestPaymentType,'') in (10,13) then '5'
                            else case when isnull(A.InterestPaymentType,'') = 16 then '6'
                            else case when isnull(A.InterestPaymentType,'') = 19 then '7' end end end end end
                            else '' end -- 14.Investment.InterestPaymentType    
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '0' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),'')as nvarchar) end else '' end -- 20.Withdrawal Interest
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),'')as nvarchar) else '' end -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount + A.InterestAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 1  then cast(isnull(A.AmountTrf,0) as nvarchar) else '0' end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else '' end end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then cast(isnull(A.DoneAmount,0) as decimal(30,2)) else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,I.AcqDate PrevDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/365 * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,I.AcqDate,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode

                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.PrevDate ,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "20") // Custom untuk rollover , kolom 12 bukan ambil dr valuedate, tp dr prev valuedate 
                        {
                            cmd.CommandText = @"
                            
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate   --and FundPK = @FundPK
                            )
                            and status = 2   --and FundPK = @FundPK

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType in (1,3)  then case when isnull(A.InterestPaymentType,'') in (1,4) then '1' 
                            else case when isnull(A.InterestPaymentType,'') = 7 then '4'
                            else case when isnull(A.InterestPaymentType,'') in (10,13) then '5'
                            else case when isnull(A.InterestPaymentType,'') = 16 then '6'
                            else case when isnull(A.InterestPaymentType,'') = 19 then '7' end end end end end
                            else '' end -- 14.Investment.InterestPaymentType              
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + '' -- 20.Withdrawal Interest
                            + '|' + '' -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.Mature = 1 then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else cast(isnull(cast(A.AmountTrf as decimal(30,2)),0) as nvarchar) end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType in (2,3) then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,''))))  else '' end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,case when A.TrxType = 3 then J.ValueDate else A.valuedate end valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then 0 else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2) then DATEDIFF(DAY, K.DateFrom, K.DateTo) + 1 else case when A.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,J.Reference ParentReference,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            left join Investment J on case when A.TrxType = 3 then I.InstrumentPK  else A.InstrumentPK end = J.InstrumentPK
                            and case when A.TrxType = 3 then I.FundPK  else A.FundPK end = J.FundPK 
                            and case when A.TrxType = 3 then I.AcqDate  else A.AcqDate end = J.ValueDate 
                            and J.StatusSettlement = 2
                            left join Period K on A.PeriodPK = K.PeriodPK and K.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5) 

                            --and A.SettlementPK = 251
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,J.Reference,A.InterestDaysType,K.DateFrom,K.DateTo,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode,J.valuedate

                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.ParentReference,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "25")
                        {
                            cmd.CommandText = @"
                                Declare @TrailsPK int
                                Declare @MaxDateEndDayFP datetime

                                select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                                where ValueDate = 
                                (
                                select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate
                                )
                                and status = 2

                                BEGIN  
                                        SET NOCOUNT ON         
          
                                    create table #Text(      
                                    [ResultText] [nvarchar](1000)  NULL          
                                    )                        
        
                                truncate table #Text  
                                insert into #Text     
                                select ''     
                                insert into #Text
                                Select  
                                'NEWM' -- 1.Transaction Status
                                + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                                + '|' + @CompanyID -- 3.IM Code
                                 + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                                + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                                + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                                + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                                else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                                 + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                                else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                                + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else case when A.TrxType = 1 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), PrevDate, 112),'')))) end end -- 12.Investment.ValueDate
                                + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                                else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                                + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                                + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                                + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                                + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end -- 17.WithdrawalDate
                                + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                                + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                                + '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),'')as nvarchar) end else '' end -- 20.Withdrawal Interest
                                + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),'')as nvarchar) else '' end -- 21.Total Withdrawal Amount
                                + '|' + -- 22.Rollover Type
                                + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                                + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                                + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                                + '|' + case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount + A.InterestAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 1  then cast(isnull(A.AmountTrf,0) as nvarchar) else '0' end end-- 26.Amount to be Transfer
                                + '|' + -- 27.Statutory Type
                                + '|' + isnull(A.ContactPerson,'') -- 28.BankBranch.ContactPerson
                                + '|' + isnull(A.Phone1,'') -- 29.BankBranch.Phone1
                                + '|' + isnull(A.Fax1,'') -- 30.BankBranch.Fax1
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                                + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else '' end end -- 32.Investment.Reference
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                                + '|' + ''  
                                from (      
                                select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                                A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                                A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                                A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                                isnull(A.AmountToTransfer,0) AmountTrf,A.BreakInterestPercent,A.AcqDate,I.AcqDate PrevDate,
                                round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2,4) then 365 else 360 end * datediff(day,A.AcqDate,A.Valuedate),0) * 0.8 InterestAmount
                                from investment A
                                left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                                left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                                left join Bank F on A.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                                where    
                                A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                                " + _paramSettlementPK + @"
                                and A.statusdealing = 2

                                Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                                A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                                A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                                A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,I.AcqDate,A.InterestDaysType,G.Email1,A.AmountToTransfer,D.CurrencyPK,F.USDPTPCode

                                    " + _mature + @"

                                )A    
                                Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                                A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                                A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                                A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.PrevDate
                                order by A.ValueDate Asc
                                select * from #text 
                                END


                                            ";
                        }
                        else
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate   --and FundPK = @FundPK
                            )
                            and status = 2   --and FundPK = @FundPK

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType in (1,3)  then case when isnull(A.InterestPaymentType,'') in (1,4) then '1' 
                            else case when isnull(A.InterestPaymentType,'') = 7 then '4'
                            else case when isnull(A.InterestPaymentType,'') in (10,13) then '5'
                            else case when isnull(A.InterestPaymentType,'') = 16 then '6'
                            else case when isnull(A.InterestPaymentType,'') = 19 then '7' end end end end end
                            else '' end -- 14.Investment.InterestPaymentType              
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + '' -- 20.Withdrawal Interest
                            + '|' + '' -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.Mature = 1 then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else cast(isnull(cast(A.AmountTrf as decimal(30,2)),0) as nvarchar) end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType in (2,3) then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,''))))  else '' end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then 0 else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2) then DATEDIFF(DAY, K.DateFrom, K.DateTo) + 1 else case when A.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,J.Reference ParentReference,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            left join Investment J on case when A.TrxType = 3 then I.InstrumentPK  else A.InstrumentPK end = J.InstrumentPK
                            and case when A.TrxType = 3 then I.FundPK  else A.FundPK end = J.FundPK 
                            and case when A.TrxType = 3 then I.AcqDate  else A.AcqDate end = J.ValueDate 
                            and J.StatusSettlement = 2
                            left join Period K on A.PeriodPK = K.PeriodPK and K.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,J.Reference,A.InterestDaysType,K.DateFrom,K.DateTo,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode

                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.ParentReference,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Deposito.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Deposito.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public string PTPAvgPriceByEquity_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                               BEGIN  
    SET NOCOUNT ON  


    Create Table #A
    (
    Reference nvarchar(50),valuedate datetime,settlementdate datetime,BrokerCode nvarchar(50),
    FundCode nvarchar(50),Instrument nvarchar(50),DonePrice numeric(18,4),Quantity numeric(18,4), 
    TradeAmount numeric(18,4),CommissionAmount numeric(18,4),IncomeTaxSellAmount numeric(18,4),
    LevyAmount numeric(18,4),VatAmount numeric(18,4),OtherCharges numeric(18,4),TransactionType numeric(18,4),
    TotalAmount numeric(18,4),WHTAmount numeric(18,4),Notes nvarchar(100),TrxType int,SettlementMode int,
    FundPK int,CounterpartPK int,InstrumentPK int
    )

    declare @UpRef nvarchar(50)
    declare @Reference nvarchar(50)
    declare @FundCode nvarchar(50)
    declare @BrokerCode nvarchar(50)
    declare @Instrument nvarchar(50)


    declare @AvgData table
    (
    ValueDate datetime,
    InstrumentPK int,
    FundPK int,
    CounterpartPK int,
	TrxType int
    )

    insert into @AvgData
    select distinct ValueDate,InstrumentPK,FundPK,CounterpartPK,TrxType from Investment 
    where ValueDate =  @ValueDate "+ _paramSettlementPK+ @" and statusSettlement = 2 and InstrumentTypePK = 1


    insert into #A

    
    select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
    A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
    A.TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,A.FundPK,A.CounterpartPK,A.InstrumentPK from investment A
    left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
    left join Fund C on A.fundpk = C.fundpk and C.status = 2
    left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
    left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode' 
    inner join @AvgData F on A.ValueDate = F.ValueDate and A.InstrumentPK = F.InstrumentPK and A.FundPK = F.FundPK and A.CounterpartPK = F.CounterpartPK and A.TrxType = F.TrxType
    where    
    A.ValueDate =  @ValueDate
    and A.statusSettlement = 2 and A.InstrumentTypePK = 1

    Declare A Cursor For 
    select Reference,FundCode,BrokerCode,Instrument from #A

    Open A                  
    Fetch Next From A                  
    Into @Reference,@FundCode,@BrokerCode,@Instrument
    While @@FETCH_STATUS = 0                  
    Begin      

    select top 1 @UpRef = Reference from #A where FundCode = @FundCode and BrokerCode = @BrokerCode and Instrument = @Instrument
    order by Reference desc

    update #A set Reference = @UpRef where FundCode = @FundCode and BrokerCode = @BrokerCode and Instrument = @Instrument 

    Fetch next From A                   
    Into @Reference,@FundCode,@BrokerCode,@Instrument
    END        
    Close A                  
    Deallocate A

       
          
create table #Text(      
[ResultText] [nvarchar](1000)  NULL          
)                        
        
truncate table #Text      
insert into #Text     
select '' 
insert into #Text 
    Select  
    'NEWM'
    + '|' + ''
    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
    + '|' + @CompanyID
    + '|' + isnull(A.BrokerCode,'')
    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
    + '|' + cast(isnull(A.TrxType,'') as nvarchar)
    + '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
    + '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
    + '|' + case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)), '')as nvarchar) end
    + '|' + case when A.CommissionAmount = 0 then '0' else cast(isnull(cast(A.CommissionAmount as decimal(30,2)), '')as nvarchar) end
    + '|' + case when A.TrxType = 1 then '0' else cast(isnull(cast(A.IncomeTaxSellAmount as decimal(30,2)), '')as nvarchar) end
    + '|' + case when A.LevyAmount = 0 then '0' else cast(isnull(cast(A.LevyAmount as decimal(30,2)), '')as nvarchar) end 
    + '|' + case when A.VATAmount = 0 then '0' else cast(isnull(cast(A.VATAmount as decimal(30,2)), '')as nvarchar) end 
    + '|' + case when A.OtherCharges = 0 then '0' else cast(isnull(cast(A.OtherCharges as decimal(30,2)), '')as nvarchar) end 
    + '|' + case when A.TrxType = 1 then cast(isnull(cast((A.TradeAmount + A.CommissionAmount + A.VATAmount + A.LevyAmount + A.OtherCharges) as decimal (30,2)), '') as nvarchar) else cast(isnull(cast((A.TradeAmount - A.CommissionAmount - A.VATAmount - A.LevyAmount - A.OtherCharges - A.IncomeTaxSellAmount) as decimal (30,2)), '') as nvarchar) end
    + '|' + case when A.WHTAmount = 0 then '0' else cast(isnull(cast(A.WHTAmount as decimal(30,2)), '')as nvarchar) end 
    + '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(A.TotalAmount as decimal(30,2)), '')as nvarchar) end 
    + '|' + case when A.TrxType = 1 then '2' else '1' end         
    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Notes,''))))
    + '|' + ''
    from (      
                                    
   select Reference,valuedate, settlementdate, BrokerCode,  FundCode, Instrument, FundPK,CounterpartPK,InstrumentPK,cast(round(cast(sum(TradeAmount) as numeric(32,10))/sum(Quantity),6) as numeric(32,6)) DonePrice, sum(Quantity) Quantity, 
    sum(TradeAmount) TradeAmount,sum(CommissionAmount) CommissionAmount, sum(IncomeTaxSellAmount) IncomeTaxSellAmount, sum(LevyAmount) LevyAmount,
    sum(VatAmount) VatAmount,  sum(isnull(OtherCharges,0)) OtherCharges,  TransactionType,
    sum(TotalAmount)TotalAmount, sum(WHTAmount) WHTAmount, isnull(Notes,'') Notes, TrxType,SettlementMode
    from (
    select * from #A
    ) Z
    group by Reference,valuedate, settlementdate, BrokerCode,  FundCode, Instrument,TransactionType,isnull(Notes,''), TrxType,SettlementMode,FundPK,CounterpartPK,InstrumentPK
        )A    
    Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
    A.TransactionType, A.LevyAmount, A.VatAmount,A.OtherCharges,A.TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode
    order by A.ValueDate Asc

select * from #text 
END


                        ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Equity.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Equity.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean BrokerFee_Rpt(string _userID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        declare @TotalBrokerFee numeric (22,2)
                        declare @Year int
                        declare @Quarter int

                        create table #Temp
                        (
                        [Year] int,
                        [Quarter] int, 
                        BrokerFee numeric (22,2), 
                        CounterpartName nvarchar(50),
                        TotalBrokerFee numeric (22,2), 
                        )

                        insert into #Temp ([Year],[Quarter], BrokerFee, CounterpartName,TotalBrokerFee)
                        SELECT DATEPART(YEAR,ValueDate) [Year],
                        DATEPART(QUARTER,ValueDate) [Quarter], isnull(Sum(A.DoneAmount * (C.CommissionPercent/100)),0) TotalBrokerFee,B.name CounterpartName,0
                        FROM Investment A
                        left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
                        left join CounterpartCommission C on A.CounterpartPK = C.CounterpartPK and C.Status = 2
                        where StatusDealing = 2 and A.InstrumentTypePK = 1
                        GROUP BY DATEPART(YEAR,ValueDate),DATEPART(QUARTER,ValueDate),B.name

                        DECLARE A CURSOR FOR
                        SELECT DATEPART(YEAR,ValueDate),DATEPART(QUARTER,ValueDate),isnull(Sum(A.DoneAmount * (C.CommissionPercent/100)),0)
                        FROM Investment A
                        left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
                        left join CounterpartCommission C on A.CounterpartPK = C.CounterpartPK and C.Status = 2
                        where StatusDealing = 2 and A.InstrumentTypePK = 1
                        GROUP BY DATEPART(YEAR,ValueDate),DATEPART(QUARTER,ValueDate)

                        Open A
                        Fetch Next From A
                        Into @Year,@Quarter,@TotalBrokerFee

                        While @@FETCH_STATUS = 0
                        BEGIN

	                        update #Temp set TotalBrokerFee = @TotalBrokerFee where Year = @Year and Quarter = @Quarter

                        Fetch next From A Into @Year,@Quarter,@TotalBrokerFee
                        END
                        Close A
                        Deallocate A 

                        select Year,Quarter,BrokerFee,CounterpartName,sum(BrokerFee/TotalBrokerFee) * 100 Percentage from #Temp
                        group By Year,Quarter,BrokerFee,CounterpartName ";

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "BrokerFeeRpt" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "BrokerFeeRpt" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Broker Fee Rpt");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<BrokerFeeRpt> rList = new List<BrokerFeeRpt>();
                                    while (dr0.Read())
                                    {
                                        BrokerFeeRpt rSingle = new BrokerFeeRpt();
                                        rSingle.Year = Convert.ToInt32(dr0["Year"]);
                                        rSingle.Quarter = Convert.ToInt32(dr0["Quarter"]);
                                        rSingle.CounterpartName = Convert.ToString(dr0["CounterpartName"]);
                                        rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"]);

                                        rList.Add(rSingle);

                                    }

                                    var GroupByFundID =
                                         from r in rList
                                         orderby r.Year
                                         group r by new { r.Year } into rGroup
                                         select rGroup;



                                    int incRowExcel = 1;

                                    foreach (var rsHeader in GroupByFundID)
                                    {

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "YEAR :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Year;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        incRowExcel = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "QUARTER";
                                        worksheet.Cells[incRowExcel, 2].Value = "BROKER";
                                        worksheet.Cells[incRowExcel, 3].Value = "%";

                                        //THICK BOX HEADER
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                        string _range = "A" + incRowExcel + ":C" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 14;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        }
                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;



                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            _range = "A" + incRowExcel + ":C" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 14;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                            }
                                            //area detail

                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.Quarter;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.CounterpartName;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Percentage;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;

                                        }

                                        _range = "A" + incRowExcel + ":C" + incRowExcel;
                                        using (ExcelRange s = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            s.Style.Font.Size = 14;
                                            s.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                        }

                                        //THICK BOX DETAIL
                                        _endRowDetail = incRowExcel - 1;
                                        worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                    }

                                    incRowExcel = incRowExcel + 2;

                                    //worksheet.Cells[incRowExcel, 1].Value = "Prepare By";
                                    //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                    //worksheet.Cells[incRowExcel, 4].Value = "Approval";
                                    //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                    //incRowExcel = incRowExcel + 5;
                                    //worksheet.Cells[incRowExcel, 1].Value = "(    ";
                                    //worksheet.Cells[incRowExcel, 3].Value = ")";
                                    //worksheet.Cells[incRowExcel, 4].Value = "(    ";
                                    //worksheet.Cells[incRowExcel, 6].Value = ")";
                                    worksheet.Row(incRowExcel).PageBreak = true;

                                    string _rangeA = "A1:G" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 18;
                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                    worksheet.Column(1).AutoFit();
                                    worksheet.Column(2).Width = 70;
                                    worksheet.Column(3).Width = 20;



                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&28 TRADE DONE ORDER";
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    //Image img = Image.FromFile(Tools.ReportImage1);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }

                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }



        }

        public FundPriceExposure Validate_CheckPriceExposureSplit(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                            declare @Closeprice numeric(18,4)
                            declare @Minprice numeric(18,4)
                            declare @Maxprice numeric(18,4)
                            declare @parameter numeric(18,4)
							declare @Result nvarchar(1000)

                            declare @Validate1 int,@Validate2 int,@Validate3 int,@Validate4 int,@Validate5 int

                            create table #A (MinPrice numeric (18,4),MaxPrice numeric (18,4),Validate1 int,Validate2 int,Validate3 int,Validate4 int,Validate5 int)

                            select @Closeprice = ClosePriceValue
                            From ClosePrice A
                            where A.Date = (select max(date) from ClosePrice A where A.date <= @Date and A.InstrumentPK = @instrumentPK and A.status  = 2)
                            and A.status = 2 and A.InstrumentPK = @InstrumentPK
                            
                            set @ClosePrice = isnull(@ClosePrice,0)

                            select @Minprice = @Closeprice - (@Closeprice * (MinPricePercent/100)), @Maxprice = @Closeprice + (@Closeprice * (MaxPricePercent/100)) 
                            From RangePrice A 
                            where A.status  = 2 and  @Closeprice between MinPrice and MaxPrice

                            insert into #A (MinPrice,MaxPrice,Validate1,Validate2,Validate3,Validate4,Validate5)
                            select round(@Minprice,0) MinPrice,round(@Maxprice,0) MaxPrice,
                            case when @Price1 <> 0  then case when @Price1 between round(@MinPrice,0) and round(@Maxprice,0) then 0 else 1 end else 0 end Validate1,
                            case when @Price2 <> 0  then case when @Price2 between round(@MinPrice,0) and round(@Maxprice,0) then 0 else 1 end else 0 end Validate2,
                            case when @Price3 <> 0  then case when @Price3 between round(@MinPrice,0) and round(@Maxprice,0) then 0 else 1 end else 0 end Validate3,
                            case when @Price4 <> 0  then case when @Price4 between round(@MinPrice,0) and round(@Maxprice,0) then 0 else 1 end else 0 end Validate4,
                            case when @Price5 <> 0  then case when @Price5 between round(@MinPrice,0) and round(@Maxprice,0) then 0 else 1 end else 0 end Validate5

                            select @Validate1 = Validate1,@Validate2 = Validate2,@Validate3 = Validate3,@Validate4 = Validate4,@Validate5 = Validate5 from #A

							if @Validate1 = 1
								set @Result = COALESCE(@Result + ', ', '') + '1'
							if @Validate2 = 1
								set @Result = COALESCE(@Result + ', ', '') + '2'
							if @Validate3 = 1
								set @Result = COALESCE(@Result + ', ', '') + '3'
							if @Validate4 = 1
								set @Result = COALESCE(@Result + ', ', '') + '4'
							if @Validate5= 1
								set @Result = COALESCE(@Result + ', ', '') + '5'
							

                            if (@Validate1 = 0 and @Validate2 = 0 and @Validate3 = 0 and @Validate4 = 0 and @Validate5 = 0)
                            BEGIN
	                            select MinPrice,MaxPrice,0 Validate, isnull(@Result,'') Result From #A
                            END
                            ELSE
                            BEGIN
								set @Result = 'split price : ' + @Result
	                            select MinPrice,MaxPrice,1 Validate, isnull(@Result,'') Result From #A
                            END
                           ";

                        cmd.Parameters.AddWithValue("@Date", _investment.ValueDate);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                        cmd.Parameters.AddWithValue("@Price1", _investment.DonePrice1);
                        cmd.Parameters.AddWithValue("@Price2", _investment.DonePrice2);
                        cmd.Parameters.AddWithValue("@Price3", _investment.DonePrice3);
                        cmd.Parameters.AddWithValue("@Price4", _investment.DonePrice4);
                        cmd.Parameters.AddWithValue("@Price5", _investment.DonePrice5);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new FundPriceExposure()
                                {
                                    MinPrice = dr["MinPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["MinPrice"]),
                                    MaxPrice = dr["MaxPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["MaxPrice"]),
                                    Validate = dr["Validate"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["Validate"]),
                                    Result = dr["Result"].Equals(DBNull.Value) == true ? "" : dr["Result"].ToString(),
                                };
                            }
                            else
                            {
                                return new FundPriceExposure()
                                {
                                    MinPrice = 0,
                                    MaxPrice = 0,
                                    Validate = 0,
                                    Result = "",
                                };
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean Validate_ApproveBySelectedDataDealingBond(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                            cmd.CommandText = @"
                            Create Table #A (AcqPrice numeric(18,4))
                            Insert into #A  (AcqPrice)
                            select AcqPrice from Investment 
                            where InstrumentTypePK in (2,3,8,9,13,15)  " + _paramFund + _paramCounterpart + _paramTrxType + @"  
                            and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramDealingPK + @"
                            IF NOT EXISTS(select AcqPrice from #A where AcqPrice = 0)
                            BEGIN
	                            select 1 Result
                            END
                            ELSE
                            BEGIN
	                            select 0 Result
                            END ";
                        

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToBoolean(dr["Result"]);

                            }
                            return false;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public SettlementRecalculate Settlement_Recalculate(SettlementRecalculate _settlement)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Settlement_Recalculate";

                        cmd.Parameters.AddWithValue("@CounterpartPK", _settlement.CounterpartPK);
                        cmd.Parameters.AddWithValue("@CommissionPercent", _settlement.CommissionPercent);
                        cmd.Parameters.AddWithValue("@LevyPercent", _settlement.LevyPercent);
                        cmd.Parameters.AddWithValue("@KPEIPercent", _settlement.KPEIPercent);
                        cmd.Parameters.AddWithValue("@VATPercent", _settlement.VATPercent);
                        cmd.Parameters.AddWithValue("@WHTPercent", _settlement.WHTPercent);
                        cmd.Parameters.AddWithValue("@OTCPercent", _settlement.OTCPercent);
                        cmd.Parameters.AddWithValue("@TaxSellPercent", _settlement.TaxSellPercent);
                        cmd.Parameters.AddWithValue("@TaxInterestPercent", _settlement.TaxInterestPercent);
                        cmd.Parameters.AddWithValue("@TaxGainPercent", _settlement.TaxGainPercent);
                        cmd.Parameters.AddWithValue("@CommissionAmount", _settlement.CommissionAmount);
                        cmd.Parameters.AddWithValue("@LevyAmount", _settlement.LevyAmount);
                        cmd.Parameters.AddWithValue("@KPEIAmount", _settlement.KPEIAmount);
                        cmd.Parameters.AddWithValue("@VATAmount", _settlement.VATAmount);
                        cmd.Parameters.AddWithValue("@WHTAmount", _settlement.WHTAmount);
                        cmd.Parameters.AddWithValue("@OTCAmount", _settlement.OTCAmount);
                        cmd.Parameters.AddWithValue("@TaxSellAmount", _settlement.TaxSellAmount);
                        cmd.Parameters.AddWithValue("@TaxInterestAmount", _settlement.TaxInterestAmount);
                        cmd.Parameters.AddWithValue("@TaxGainAmount", _settlement.TaxGainAmount);
                        cmd.Parameters.AddWithValue("@DoneAmount", _settlement.DoneAmount);
                        cmd.Parameters.AddWithValue("@Mode", _settlement.Mode);
                        cmd.Parameters.AddWithValue("@BuySell", _settlement.TrxType);
                        cmd.Parameters.AddWithValue("@BoardType", _settlement.BoardType);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {

                            if (dr.HasRows)
                            {
                                dr.Read();
                                return setSettlementRecalculate(dr);
                            }
                            return null;
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        private SettlementRecalculate setSettlementRecalculate(SqlDataReader dr)
        {
            SettlementRecalculate M_SettlementRecalculate = new SettlementRecalculate();
            M_SettlementRecalculate.CommissionAmount = dr["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["CommissionAmount"]);
            M_SettlementRecalculate.LevyAmount = dr["LevyAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LevyAmount"]);
            M_SettlementRecalculate.KPEIAmount = dr["KPEIAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["KPEIAmount"]);
            M_SettlementRecalculate.VATAmount = dr["VATAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["VATAmount"]);
            M_SettlementRecalculate.WHTAmount = dr["WHTAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["WHTAmount"]);
            M_SettlementRecalculate.OTCAmount = dr["OTCAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["OTCAmount"]);
            M_SettlementRecalculate.TaxGainAmount = dr["TaxGainAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxGainAmount"]);
            M_SettlementRecalculate.TaxInterestAmount = dr["TaxInterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxInterestAmount"]);
            M_SettlementRecalculate.TaxSellAmount = dr["TaxSellAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxSellAmount"]);
            M_SettlementRecalculate.TotalAmount = dr["TotalAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalAmount"]);
            M_SettlementRecalculate.CommissionPercent = dr["CommissionPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["CommissionPercent"]);
            M_SettlementRecalculate.LevyPercent = dr["LevyPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LevyPercent"]);
            M_SettlementRecalculate.KPEIPercent = dr["KPEIPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["KPEIPercent"]);
            M_SettlementRecalculate.VATPercent = dr["VATPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["VATPercent"]);
            M_SettlementRecalculate.WHTPercent = dr["WHTPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["WHTPercent"]);
            M_SettlementRecalculate.OTCPercent = dr["OTCPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["OTCPercent"]);
            M_SettlementRecalculate.TaxGainPercent = dr["TaxGainPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxGainPercent"]);
            M_SettlementRecalculate.TaxInterestPercent = dr["TaxInterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxInterestPercent"]);
            M_SettlementRecalculate.TaxSellPercent = dr["TaxSellPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxSellPercent"]);
            return M_SettlementRecalculate;
        }

        public string ImportDealingEquityTemp(string _fileSource, string _userID, string _valueDate)
        {
            string _msg = string.Empty;
            DateTime _now = DateTime.Now;
            try
            {
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = "truncate table dbo.DealingEquityImportTemp";
                        cmd2.ExecuteNonQuery();
                    }
                }

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.DealingEquityImportTemp";
                    bulkCopy.WriteToServer(CreateDataTableFromOMSEquityTempExcelFile(_fileSource));
                }

                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        // 1. Check ada investment yang approve apa engga
                        // 2. check master counterpart
                        // 3. check master instruments
                        // 4. 
                        cmd2.CommandTimeout = 0;
                        cmd2.CommandText =
                            @"
                             --declare @ValueDate		date,
                                		--@UsersID		nvarchar(100),
                                		--@LastUpdate		datetime

                                	--set @ValueDate		= '05/08/19'
                                	--set @UsersID		= 'aming'
                                	--set @LastUpdate		= '01/05/18'

                                declare @success	bit,
		                                @msg		nvarchar(max)

	                                set @success	= 1
	                                set @msg		= ''

                                if exists (select * from DealingEquityImportTemp where BuySell <> 'B/S' and InstrumentID  <> '')
                                begin
	                                -- Cek Data Import
	                                if exists (
		                                select *
		                                from Investment
		                                where StatusInvestment = 2 and StatusDealing = 1 and ValueDate = @ValueDate
			                                and InstrumentPK in (
				                                select distinct b.InstrumentPK
				                                from DealingEquityImportTemp a
					                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
				                                where a.BuySell <> 'B/S' and A.InstrumentID  <> ''
			                                )
	                                )
	                                begin
		                                -- Cek Master Counterpart
		                                if not exists (
			                                select distinct CounterpartID
			                                from DealingEquityImportTemp
			                                where BuySell <> 'B/S' and InstrumentID  <> ''
				                                and CounterpartID not in (select distinct ID from Counterpart where [Status] = 2 
				                                and CounterpartPK in (select distinct CounterpartPK from CounterpartCommission where [Status] = 2 and BoardType = 1))
		                                )
		                                begin
			                                -- Cek Master Counterpart & Instrument
			                                if not exists (
				                                select distinct InstrumentID
				                                from DealingEquityImportTemp
				                                where BuySell <> 'B/S' 
					                                and InstrumentID not in (select distinct ID from Instrument where [Status] = 2) and InstrumentID  <> ''
			                                )
			                                begin
				                                begin transaction

				                                begin try
					                                declare @InvestmentPK			int,
							                                @InstrumentPK			int,
							                                @CounterpartPK			int,
							                                @FundPK					int,
							                                @DealingPK				int,
							                                @MaxDealingPK			int,  
							                                @CCounterpartID			nvarchar(100),
							                                @CBuySell				nvarchar(20),
							                                @CInstrumentID			nvarchar(100),
							                                @CPrice					numeric(22,6),
							                                @CLot					numeric(22,4),
							                                @CAmount				numeric(22,4),
							                                @DonePrice				numeric(22,6),
							                                @DoneLot				numeric(22,4),
							                                @DoneAmount				numeric(22,4)

					                                declare @Cp1 nvarchar(100), @Cp2 nvarchar(100), @Cp3 nvarchar(100), @Cp4 nvarchar(100), @Cp5 nvarchar(100),
							                                @Cp6 nvarchar(100), @Cp7 nvarchar(100), @Cp8 nvarchar(100), @Cp9 nvarchar(100), @Cp10 nvarchar(100),
							                                @Cp11 nvarchar(100), @Cp12 nvarchar(100), @Cp13 nvarchar(100), @Cp14 nvarchar(100), @Cp15 nvarchar(100), @Cp16 nvarchar(100)

					                                declare curImport cursor for
						                                select top 1 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16 
						                                from DealingEquityImportTemp 
						                                where BuySell = 'B/S' and InstrumentID  <> ''
					                                open curImport

					                                fetch next from curImport
					                                into @Cp1, @Cp2, @Cp3, @Cp4, @Cp5, @Cp6, @Cp7, @Cp8, @Cp9, @Cp10, @Cp11, @Cp12, @Cp13, @Cp14, @Cp15, @Cp16

					                                while @@fetch_status = 0  
					                                begin  
						                                if @Cp1 <> 'Spare Fund' and isnull(@Cp1, '') <> '' and len(@Cp1) <> 0
						                                begin
							                                declare curCp1 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F1, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F1, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp1 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F1 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp1

							                                fetch next from curCp1   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp1 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
																--select @CBuySell,@CPrice,@DonePrice,@CLot,@DoneLot
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
																				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp1   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp1
							                                deallocate curCp1
						                                end

						                                if @Cp2 <> 'Spare Fund' and isnull(@Cp2, '') <> '' and len(@Cp2) <> 0
						                                begin
							                                declare curCp2 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F2, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F2, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp2 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F2 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp2

							                                fetch next from curCp2   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp2 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp2   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp2
							                                deallocate curCp2
						                                end
						
						                                if @Cp3 <> 'Spare Fund' and isnull(@Cp3, '') <> '' and len(@Cp3) <> 0
						                                begin
							                                declare curCp3 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F3, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F3, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp3 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F3 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp3

							                                fetch next from curCp3   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp3 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp3   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp3
							                                deallocate curCp3
						                                end

						                                if @Cp4 <> 'Spare Fund' and isnull(@Cp4, '') <> '' and len(@Cp4) <> 0
						                                begin
							                                declare curCp4 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F4, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F4, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp4 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F4 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp4

							                                fetch next from curCp4   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp4 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp4   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp4
							                                deallocate curCp4
						                                end

						                                if @Cp5 <> 'Spare Fund' and isnull(@Cp5, '') <> '' and len(@Cp5) <> 0
						                                begin
							                                declare curCp5 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F5, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F5, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp5 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F5 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp5

							                                fetch next from curCp5   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp5 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp5   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp5
							                                deallocate curCp5
						                                end

						                                if @Cp6 <> 'Spare Fund' and isnull(@Cp6, '') <> '' and len(@Cp6) <> 0
						                                begin
							                                declare curCp6 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F6, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F6, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp6 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F6 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp6

							                                fetch next from curCp6   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp6 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp6   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp6
							                                deallocate curCp6
						                                end

						                                if @Cp7 <> 'Spare Fund' and isnull(@Cp7, '') <> '' and len(@Cp7) <> 0
						                                begin
							                                declare curCp7 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F7, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F7, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp7 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F7 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp7

							                                fetch next from curCp7   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp7 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp7   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp7
							                                deallocate curCp7
						                                end

						                                if @Cp8 <> 'Spare Fund' and isnull(@Cp8, '') <> '' and len(@Cp8) <> 0
						                                begin
							                                declare curCp8 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F8, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F8, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp8 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F8 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp8

							                                fetch next from curCp8   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp8 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp8   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp8
							                                deallocate curCp8
						                                end

						                                if @Cp9 <> 'Spare Fund' and isnull(@Cp9, '') <> '' and len(@Cp9) <> 0
						                                begin
							                                declare curCp9 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F9, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F9, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp9 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F9 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp9

							                                fetch next from curCp9   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp9 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp9   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp9
							                                deallocate curCp9
						                                end

						                                if @Cp10 <> 'Spare Fund' and isnull(@Cp10, '') <> '' and len(@Cp10) <> 0
						                                begin
							                                declare curCp10 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F10, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F10, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp10 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F10 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp10

							                                fetch next from curCp10   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp10 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp10   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp10
							                                deallocate curCp10
						                                end

						                                if @Cp11 <> 'Spare Fund' and isnull(@Cp11, '') <> '' and len(@Cp11) <> 0
						                                begin
							                                declare curCp11 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F11, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F11, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp11 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F11 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp11

							                                fetch next from curCp11   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp11 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp11   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp11
							                                deallocate curCp11
						                                end

						                                if @Cp12 <> 'Spare Fund' and isnull(@Cp12, '') <> '' and len(@Cp12) <> 0
						                                begin
							                                declare curCp12 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F12, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F12, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp12 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F12 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp12

							                                fetch next from curCp12   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp12 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp12   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp12
							                                deallocate curCp12
						                                end

						                                if @Cp13 <> 'Spare Fund' and isnull(@Cp13, '') <> '' and len(@Cp13) <> 0
						                                begin
							                                declare curCp13 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F13, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F13, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp13 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F13 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp13

							                                fetch next from curCp13   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp13 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp13   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp13
							                                deallocate curCp13
						                                end

						                                if @Cp14 <> 'Spare Fund' and isnull(@Cp14, '') <> '' and len(@Cp14) <> 0
						                                begin
							                                declare curCp14 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F14, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F14, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp14 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F14 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp14

							                                fetch next from curCp14   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp14 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp14   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp14
							                                deallocate curCp14
						                                end

						                                if @Cp15 <> 'Spare Fund' and isnull(@Cp15, '') <> '' and len(@Cp15) <> 0
						                                begin
							                                declare curCp15 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F15, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F15, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp15 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F15 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp15

							                                fetch next from curCp15   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp15 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp15   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp15
							                                deallocate curCp15
						                                end

						                                if @Cp16 <> 'Spare Fund' and isnull(@Cp16, '') <> '' and len(@Cp16) <> 0
						                                begin
							                                declare curCp16 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F16, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp16 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp16

							                                fetch next from curCp16   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp16 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
								                                begin
									                                if @CPrice <= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice <= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 1, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Buy
											                                if @CPrice <= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                if @CBuySell = 'S'
								                                begin
									                                if @CPrice >= @DonePrice and @CLot <= @DoneLot
									                                begin
										                                if @CPrice >= @DonePrice and @CLot = @DoneLot
										                                begin
											                                update Investment set 
												                                CounterpartPK = @CounterpartPK, 
												                                SettlementMode = 2, -- Default 'RVP'
												                                OrderStatus = 'O', -- Default 'OPEN'
												                                DonePrice = @CPrice, DoneLot = @CLot, 
												                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
												                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
												                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
											                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
												                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
										                                end
										                                else
										                                begin
											                                -- Split Sell
											                                if @CPrice >= @DonePrice and @CLot < @DoneLot
											                                begin
												                                insert into [dbo].[Investment] (
													                                [InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
													                                [BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
													                                [UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
													                                [UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                [EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
													                                [LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
												                                )
												                                select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
													                                [ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
													                                @CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
													                                [InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
													                                [SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
													                                @CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
													                                [CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
													                                [IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
													                                [OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
													                                [AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
													                                1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
													                                [PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
													                                [UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
													                                @UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
													                                @UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
													                                [VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
													                                [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
													                                [AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
													                                [AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
												                                from Investment 
												                                where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
											                                end

											                                if (@DoneLot - @CLot) = 0
											                                begin
												                                update Investment set 
													                                StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
													                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
												                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
													                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
											                                end
											                                else
											                                begin
												                                if @DoneLot > 0
												                                begin
													                                update Investment set 
														                                DoneLot = @DoneLot - isnull(@CLot, 0), 
														                                DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
														                                DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
														                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
													                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
														                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
												                                end                                 
											                                end
										                                end
									                                end
								                                end

								                                fetch next from curCp16   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp16
							                                deallocate curCp16
						                                end

						                                fetch next from curImport 
						                                into @Cp1, @Cp2, @Cp3, @Cp4, @Cp5, @Cp6, @Cp7, @Cp8, @Cp9, @Cp10, @Cp11, @Cp12, @Cp13, @Cp14, @Cp15, @Cp16
					                                end   
					                                close curImport
					                                deallocate curImport
				                                end try
				                                begin catch
					                                rollback transaction
					                                set @success	= 0
					                                set @msg		= cast(error_message() as nvarchar(max))
				                                end catch

				                                if(@success = 1)
				                                begin
					                                commit transaction
					                                set @msg = 'Import Dealing Equity Success'
				                                end
			                                end
			                                else
			                                begin
				                                set @msg = 'Import Dealing Equity Canceled, import data does not exist in master instrument!'
			                                end
		                                end
		                                else
		                                begin
			                                set @msg = 'Import Dealing Equity Canceled, import data does not exist in master counterpart!'
		                                end
	                                end
	                                else
	                                begin
		                                set @msg = 'Import Dealing Equity Canceled, import data or data pending not found!'
	                                end
                                end
                                else
                                begin
	                                set @msg = 'Import Dealing Equity Canceled, import data not found!'
                                end

                                select @msg as ResultMsg
                            ";
                        cmd2.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd2.Parameters.AddWithValue("@UsersID", _userID);
                        cmd2.Parameters.AddWithValue("@LastUpdate", _now);
                        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                        {
                            if (!dr2.HasRows)
                            {
                                _msg = "Import Dealing Equity Canceled, import data not found!";
                            }
                            else
                            {
                                dr2.Read();
                                _msg = Convert.ToString(dr2["ResultMsg"]);
                            }
                        }
                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromOMSEquityTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CounterpartID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BuySell";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Price";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F1";
                    dc.Unique = false;
                    dt.Columns.Add(dc);


                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F2";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F3";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F4";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F5";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F6";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F7";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F8";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F9";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F10";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F11";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F12";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F13";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F14";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F15";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F16";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    using (OleDbConnection odConnection = new OleDbConnection(Tools.ConStringExcel2007(_path)))
                    {
                        odConnection.Open();
                        using (OleDbCommand odCmd = odConnection.CreateCommand())
                        {
                            odCmd.CommandText = "SELECT * FROM [FormatLoad$]";
                            using (OleDbDataReader odRdr = odCmd.ExecuteReader())
                            {
                                if (odRdr.HasRows)
                                {
                                    odRdr.Read();

                                    int _no = 1;
                                    string _val = string.Empty;
                                    do
                                    {
                                        dr = dt.NewRow();
                                        if (_no == 1) { _val = "Spare Fund"; } else { _val = "0"; }

                                        dr["CounterpartID"] = Convert.ToString(odRdr[0]);
                                        dr["BuySell"] = Convert.ToString(odRdr[1]);
                                        dr["InstrumentID"] = Convert.ToString(odRdr[2]);
                                        dr["Price"] = Convert.ToString(odRdr[3]);
                                        dr["F1"] = odRdr[4].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[4]);
                                        dr["F2"] = odRdr[5].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[5]);
                                        dr["F3"] = odRdr[6].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[6]);
                                        dr["F4"] = odRdr[7].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[7]);
                                        dr["F5"] = odRdr[8].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[8]);
                                        dr["F6"] = odRdr[9].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[9]);
                                        dr["F7"] = odRdr[10].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[10]);
                                        dr["F8"] = odRdr[11].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[11]);
                                        dr["F9"] = odRdr[12].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[12]);
                                        dr["F10"] = odRdr[13].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[13]);
                                        dr["F11"] = odRdr[14].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[14]);
                                        dr["F12"] = odRdr[15].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[15]);
                                        dr["F13"] = odRdr[16].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[16]);
                                        dr["F14"] = odRdr[17].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[17]);
                                        dr["F15"] = odRdr[18].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[18]);
                                        dr["F16"] = odRdr[19].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[19]);

                                        if (
                                            dr["CounterpartID"].Equals(DBNull.Value) != true &&
                                            dr["BuySell"].Equals(DBNull.Value) != true &&
                                            dr["InstrumentID"].Equals(DBNull.Value) != true &&
                                            dr["Price"].Equals(DBNull.Value) != true
                                        ) { dt.Rows.Add(dr); _no++; }
                                    } while (odRdr.Read());
                                }
                            }
                        }
                        odConnection.Close();
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public void SelectDeselectDataMature(bool _toggle, string _reference)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"Update InvestmentMature set  selected = @Toggle where Reference = REPLACE(@Reference,'-','/')
                        ";

                        cmd.Parameters.AddWithValue("@Toggle", _toggle);
                        cmd.Parameters.AddWithValue("@Reference", _reference);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public void SelectDeselectAllDataByDateMature(bool _toggle, DateTime _date)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"Update InvestmentMature set  selected = @Toggle
                        where ValueDate = @Date ";

                        cmd.Parameters.AddWithValue("@Toggle", _toggle);
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }
        public List<Investment> Get_DataMatureByDate()
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        cmd.CommandText = @" 

                            select Selected,Reference,RefNo,AcqDate,FundID,InstrumentID,Volume,AcqDate,InterestPercent,AmountToTransfer from InvestmentMature

                            ";

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Investment M_Investment = new Investment();
                                    M_Investment.Selected = Convert.ToBoolean(dr["Selected"]);
                                    M_Investment.Reference = Convert.ToString(dr["Reference"]);
                                    M_Investment.RefNo = Convert.ToInt32(dr["RefNo"]);
                                    M_Investment.FundID = Convert.ToString(dr["FundID"]);
                                    M_Investment.InstrumentID = Convert.ToString(dr["InstrumentID"]);
                                    M_Investment.Volume = Convert.ToDecimal(dr["Volume"]);
                                    M_Investment.AcqDate = Convert.ToString(dr["AcqDate"]);
                                    M_Investment.InterestPercent = Convert.ToDecimal(dr["InterestPercent"]);
                                    M_Investment.AmountToTransfer = Convert.ToDecimal(dr["AmountToTransfer"]);
                                    L_Investment.Add(M_Investment);

                                }
                            }

                            return L_Investment;
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }
        }

        public List<Investment> Init_DataMatureByDate(DateTime _date, string _fundID, string _counterpartID)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";
                        string _paramCounterpart = "";
                        if (_fundID != "0")
                        {
                            _paramFund = "And A.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And A.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        cmd.CommandTimeout = 0;
                        //                        cmd.CommandText = @" 
                        //                            Declare @PeriodPK int
                        //select @PeriodPK = PeriodPK from Period where status = 2 and DateFrom <= @DateFrom and DateTo >= @DateTo

                        //truncate table InvestmentMature
                        //insert into InvestmentMature (Selected,Reference,RefNo,ValueDate,InstrumentID,InstrumentName,
                        //FundID,InstrumentType,InvestmentPK,Volume,OrderPrice,InterestPercent,TrxTypeID,
                        //Amount,Notes,RangePrice,MaturityDate,DoneVolume,DoneAmount,AcqDate,DonePrice,DealingPK,CounterpartID,
                        //Tenor,ClearingCode,BankAccountNo,BankCustodianName,BankCustodianContactPerson,BankCustodianFaxNo,
                        //BankCustodianPhone,ContactPerson,FaxNo,Phone,FundName,BankBranchName,InstructionDate,AccruedInterest,SettlementDate,
                        //BrokerCode,FundCode,Quantity,TradeAmount,CommissionAmount,IncomeTaxSellAmount,LevyAmount,VatAmount,OtherCharges,TransactionType,
                        //TotalAmount, WHTAmount,InvestmentNotes,TrxType,SettlementMode,LastCouponDate,NextCouponDate,AccruedDays,
                        //InterestAmount,CapitalGainAmount,TaxInterestAmount,BankCode,BankBranchCode,BankName,
                        //BitSyariah,Phone1,Fax1,BankAccountName,OldTradeAmount,OldInterestPercent,OldMaturityDate,OldReference  
                        //)


                        //select 0,A.Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,A.MaturityDate ValueDate,I.ID InstrumentID, I.Name InstrumentName,    
                        //F.ID FundID,D.Name InstrumentType,InvestmentPK,Volume,DonePrice,A.InterestPercent,'MATURE' TrxTypeID,   
                        //A.DoneAmount,'' Notes,RangePrice ,A.MaturityDate ,A.DoneVolume,A.DoneAmount,A.AcqDate,0,0,'',
                        //DATEDIFF (day,A.AcqDate ,A.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,
                        //BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,F.Name FundName,C.Name BankBranchName ,A.InstructionDate,DoneAccruedInterest,A.SettlementDate,
                        //'' BrokerCode, F.Sinvestcode FundCode, A.Volume, 
                        //A.DoneAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TrxType,
                        //A.TotalAmount, 0 WHTAmount, '' InvestmentNotes,2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                        //0 InterestAmount,0 CapitalGainAmount,0 TaxInterestAmount,C.PTPCode BankCode,B.PTPCode BankBranchCode,C.Name BankName,
                        //C.BitSyariah,B.Phone1,B.Fax1,B.BankAccountName,0 OldTradeAmount,0 OldInterestPercent,'' OldMaturityDate,'' OldReference 

                        //from Investment A
                        //left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2
                        //left join InstrumentType D on I.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
                        //left join Fund F on A.FundPK = F.FundPK and F.status = 2  
                        //left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                        //left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                        //left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2 
                        //left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                        //where A.InstrumentTypePK = 5 and A.MaturityDate between @DateFrom and @DateTo  and StatusSettlement in (2)
                        //and A.InstrumentPK not in  (
                        //select InstrumentPK	from Investment where StatusSettlement = 2 and TrxType in (2) and MaturityDate between @DateFrom and @DateTo 
                        //) --and A.PeriodPK = @PeriodPK



                        //union all

                        //select 0,CONVERT(varchar(10), A.FundEndYearPortfolioPK) + '/FP/' + REPLACE(RIGHT(CONVERT(VARCHAR(8), A.MaturityDate, 3), 5) ,'/','') Reference, '' RefNo,A.MaturityDate ValueDate,I.ID InstrumentID, I.Name InstrumentName,    
                        //F.ID FundID,D.Name InstrumentType,0 InvestmentPK,Volume Volume,1 OrderPrice,A.InterestPercent,'MATURE' TrxTypeID,   
                        //TrxAmount Amount,'' Notes, 1 RangePrice ,A.MaturityDate ,A.Volume DoneVolume,A.Volume DoneAmount,A.AcqDate,0,0,'',
                        //DATEDIFF (day,A.AcqDate ,A.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,
                        //BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,F.Name FundName,C.Name BankBranchName ,AcqDate InstructionDate,0 AccruedInterest,AcqDate SettlementDate,
                        //'' BrokerCode, F.Sinvestcode FundCode, A.Volume Quantity, 
                        //A.Volume TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                        //A.Volume TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                        //0 InterestAmount,0 CapitalGainAmount,0 TaxInterestAmount,C.PTPCode BankCode,B.PTPCode BankBranchCode,C.Name BankName,
                        //C.BitSyariah,B.Phone1,B.Fax1,B.BankAccountName,0 OldTradeAmount,0 OldInterestPercent,'' OldMaturityDate,'' OldReference  

                        //from FundEndYearPortfolio A
                        //left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2
                        //left join InstrumentType D on I.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
                        //left join Fund F on A.FundPK = F.FundPK and F.status = 2  
                        //left join BankBranch BC on BC.BankBranchPK = A.BankBranchPK and BC.status = 2  
                        //left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                        //left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2 
                        //left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                        //where A.MaturityDate between @DateFrom and @DateTo and I.InstrumentTypePK = 5 and A.PeriodPK = @PeriodPK


                        //select Selected,Reference,AcqDate,FundID,InstrumentID,Volume,AcqDate,InterestPercent from InvestmentMature
                        //where TrxTypeID = 'MATURE'
                        //                            ";

                        cmd.CommandText = @"Declare @PeriodPK int
declare @ValueDateFrom date
select @PeriodPK = PeriodPK from Period where status = 2 and DateFrom <= @DateFrom and DateTo >= @DateTo

declare @DateMinOne datetime
set @DateMinOne = dbo.FWorkingDay(@datefrom,-1)


if (dbo.CheckIsYesterdayHoliday(@DateFrom) = 1)
	set @ValueDateFrom = dateadd(day,1,dbo.FWorkingDay(@DateFrom,-1))
else
	set @ValueDateFrom = @DateFrom

truncate table InvestmentMature
insert into InvestmentMature (Selected,Reference,RefNo,ValueDate,InstrumentID,InstrumentName,
FundID,InstrumentType,InvestmentPK,Volume,OrderPrice,InterestPercent,TrxTypeID,
Amount,Notes,RangePrice,MaturityDate,DoneVolume,DoneAmount,AcqDate,DonePrice,DealingPK,CounterpartID,
Tenor,ClearingCode,BankAccountNo,BankCustodianName,BankCustodianContactPerson,BankCustodianFaxNo,
BankCustodianPhone,ContactPerson,FaxNo,Phone,FundName,BankBranchName,InstructionDate,AccruedInterest,SettlementDate,
BrokerCode,FundCode,Quantity,TradeAmount,CommissionAmount,IncomeTaxSellAmount,LevyAmount,VatAmount,OtherCharges,TransactionType,
TotalAmount, WHTAmount,InvestmentNotes,TrxType,SettlementMode,LastCouponDate,NextCouponDate,AccruedDays,
InterestAmount,CapitalGainAmount,TaxInterestAmount,BankCode,BankBranchCode,BankName,
BitSyariah,Phone1,Fax1,BankAccountName,OldTradeAmount,OldInterestPercent,OldMaturityDate,OldReference,AmountToTransfer
)
    
                       
select 0,A.Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,A.MaturityDate ValueDate,I.ID InstrumentID, I.Name InstrumentName,    
F.ID FundID,D.Name InstrumentType,InvestmentPK,Volume,DonePrice,A.InterestPercent,'MATURE' TrxTypeID,   
A.DoneAmount,'' Notes,RangePrice ,case when A.PaymentModeOnMaturity = 1 then A.MaturityDate when A.PaymentModeOnMaturity = 2 then case when dbo.CheckTodayIsHoliday(A.MaturityDate) = 1 then dbo.FWorkingDay(A.MaturityDate,1) else A.MaturityDate end else case when dbo.CheckTodayIsHoliday(A.MaturityDate) = 1 then dbo.FWorkingDay(A.MaturityDate,-1) else A.MaturityDate end end MaturityDate ,A.DoneVolume,A.DoneAmount,A.AcqDate,0,0,'',
DATEDIFF (day,A.AcqDate ,case when A.PaymentModeOnMaturity = 2 then A.MaturityDate when A.PaymentModeOnMaturity = 1 then dbo.FWorkingDay(A.MaturityDate,1) else dbo.FWorkingDay(A.MaturityDate,-1) end ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,
BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,F.Name FundName,C.Name BankBranchName ,A.InstructionDate,DoneAccruedInterest,A.SettlementDate,
'' BrokerCode, F.Sinvestcode FundCode, A.Volume, 
A.DoneAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TrxType,
A.TotalAmount, 0 WHTAmount, '' InvestmentNotes,2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
0 InterestAmount,0 CapitalGainAmount,0 TaxInterestAmount,C.PTPCode BankCode,B.PTPCode BankBranchCode,C.Name BankName,
C.BitSyariah,B.Phone1,B.Fax1,B.BankAccountName,0 OldTradeAmount,0 OldInterestPercent,A.MaturityDate OldMaturityDate,'' OldReference,isnull(A.AmountToTransfer,0) AmountToTransfer

from Investment A
left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2
left join InstrumentType D on I.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
left join Fund F on A.FundPK = F.FundPK and F.status = 2  
left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2 
left join Bank C on B.BankPK = C.BankPK and C.status = 2 
where A.InstrumentTypePK = 5 and A.MaturityDate between @ValueDateFrom and @DateTo  and StatusSettlement in (2)
and A.InstrumentPK not in  (
select InstrumentPK	from Investment where StatusSettlement = 2 and TrxType in (2) and MaturityDate between @ValueDateFrom and @DateTo 
) --and A.PeriodPK = @PeriodPK



--union all

insert into InvestmentMature (Selected,Reference,RefNo,ValueDate,InstrumentID,InstrumentName,
FundID,InstrumentType,InvestmentPK,Volume,OrderPrice,InterestPercent,TrxTypeID,
Amount,Notes,RangePrice,MaturityDate,DoneVolume,DoneAmount,AcqDate,DonePrice,DealingPK,CounterpartID,
Tenor,ClearingCode,BankAccountNo,BankCustodianName,BankCustodianContactPerson,BankCustodianFaxNo,
BankCustodianPhone,ContactPerson,FaxNo,Phone,FundName,BankBranchName,InstructionDate,AccruedInterest,SettlementDate,
BrokerCode,FundCode,Quantity,TradeAmount,CommissionAmount,IncomeTaxSellAmount,LevyAmount,VatAmount,OtherCharges,TransactionType,
TotalAmount, WHTAmount,InvestmentNotes,TrxType,SettlementMode,LastCouponDate,NextCouponDate,AccruedDays,
InterestAmount,CapitalGainAmount,TaxInterestAmount,BankCode,BankBranchCode,BankName,
BitSyariah,Phone1,Fax1,BankAccountName,OldTradeAmount,OldInterestPercent,OldMaturityDate,OldReference,AmountToTransfer
)
                       
select 0,CONVERT(varchar(10), A.[Identity]) + '/FP/' + REPLACE(RIGHT(CONVERT(VARCHAR(8), A.MaturityDate, 3), 5) ,'/','') Reference, '' RefNo,A.MaturityDate ValueDate,I.ID InstrumentID, I.Name InstrumentName,    
F.ID FundID,D.Name InstrumentType,0 InvestmentPK,A.Balance Volume,1 OrderPrice,A.InterestPercent,'MATURE' TrxTypeID,   
TrxAmount Amount,'' Notes, 1 RangePrice ,A.MaturityDate ,A.Balance DoneVolume,A.Balance DoneAmount,A.AcqDate,0,0,'',
DATEDIFF (day,A.AcqDate ,A.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,
BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,F.Name FundName,C.Name BankBranchName ,A.AcqDate InstructionDate,0 AccruedInterest,A.AcqDate SettlementDate,
'' BrokerCode, F.Sinvestcode FundCode, A.Balance Quantity, 
A.Balance TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
A.Balance TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
0 InterestAmount,0 CapitalGainAmount,0 TaxInterestAmount,C.PTPCode BankCode,B.PTPCode BankBranchCode,C.Name BankName,
C.BitSyariah,B.Phone1,B.Fax1,B.BankAccountName,0 OldTradeAmount,0 OldInterestPercent,A.MaturityDate OldMaturityDate,'' OldReference, 0 AmountToTransfer

from FundPosition A
left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2
left join InstrumentType D on I.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
left join Fund F on A.FundPK = F.FundPK and F.status = 2  
left join BankBranch BC on BC.BankBranchPK = A.BankBranchPK and BC.status = 2  
left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2 
left join Bank C on B.BankPK = C.BankPK and C.status = 2 
left join InvestmentMature Z on F.ID = Z.FundID and I.ID = Z.InstrumentID and A.AcqDate = Z.AcqDate and A.InterestPercent = Z.InterestPercent and A.Balance = Z.Volume
where A.MaturityDate between @ValueDateFrom and @DateTo and I.InstrumentTypePK = 5 and A.Date = @DateMinOne and Z.FundID is null



select Selected,Reference,RefNo,AcqDate,FundID,InstrumentID,Volume,AcqDate,InterestPercent,AmountToTransfer from InvestmentMature
where TrxTypeID = 'MATURE'
                            ";


                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@DateFrom", _date);
                        cmd.Parameters.AddWithValue("@DateTo", _date);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Investment M_Investment = new Investment();
                                    M_Investment.Selected = Convert.ToBoolean(dr["Selected"]);
                                    M_Investment.Reference = Convert.ToString(dr["Reference"]);
                                    M_Investment.RefNo = Convert.ToInt32(dr["RefNo"]);
                                    M_Investment.FundID = Convert.ToString(dr["FundID"]);
                                    M_Investment.InstrumentID = Convert.ToString(dr["InstrumentID"]);
                                    M_Investment.Volume = Convert.ToDecimal(dr["Volume"]);
                                    M_Investment.AcqDate = Convert.ToString(dr["AcqDate"]);
                                    M_Investment.InterestPercent = Convert.ToDecimal(dr["InterestPercent"]);
                                    M_Investment.AmountToTransfer = Convert.ToDecimal(dr["AmountToTransfer"]);
                                    L_Investment.Add(M_Investment);

                                }
                            }

                            return L_Investment;
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }
        }


        public void SelectDeselectDataDeposito(bool _toggle, string _reference)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"Update InvestmentMature set  selected = @Toggle where Reference = REPLACE(@Reference,'-','/')
                        ";

                        cmd.Parameters.AddWithValue("@Toggle", _toggle);
                        cmd.Parameters.AddWithValue("@Reference", _reference);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public void SelectDeselectAllDataByDateDeposito(bool _toggle, DateTime _date)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"Update InvestmentMature set selected = @Toggle " ;
                        //where ValueDate between @DateFrom and @DateTo ";

                        cmd.Parameters.AddWithValue("@Toggle", _toggle);
                        //cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public List<Investment> Get_DataDepositoByDate()
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        cmd.CommandText = @" 

                            select ROW_NUMBER() OVER(ORDER BY TrxType,ValueDate ASC) DepNo,Selected,TrxTypeID,Reference,FundID,InstrumentID,Volume,ValueDate,InterestPercent,MaturityDate from InvestmentMature
                            Order By TrxType,ValueDate asc

                            ";

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Investment M_Investment = new Investment();
                                    M_Investment.DepNo = Convert.ToInt32(dr["DepNo"]);
                                    M_Investment.Selected = Convert.ToBoolean(dr["Selected"]);
                                    M_Investment.TrxTypeID = Convert.ToString(dr["TrxTypeID"]);
                                    M_Investment.Reference = Convert.ToString(dr["Reference"]);
                                    M_Investment.FundID = Convert.ToString(dr["FundID"]);
                                    M_Investment.InstrumentID = Convert.ToString(dr["InstrumentID"]);
                                    M_Investment.Volume = Convert.ToDecimal(dr["Volume"]);
                                    M_Investment.ValueDate = Convert.ToString(dr["ValueDate"]);
                                    M_Investment.InterestPercent = Convert.ToDecimal(dr["InterestPercent"]);
                                    M_Investment.MaturityDate = Convert.ToString(dr["MaturityDate"]);
                                    L_Investment.Add(M_Investment);

                                }
                            }

                            return L_Investment;
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }
        }


        public List<Investment> Init_DataDepositoByDate(DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";
                        if (_fundID != "0")
                        {
                            _paramFund = "And A.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" 

                        truncate table InvestmentMature
                        insert into InvestmentMature (Selected,Reference,RefNo,ValueDate,InstrumentID,InstrumentName,
                        FundID,InstrumentType,InvestmentPK,Volume,OrderPrice,InterestPercent,TrxTypeID,
                        Amount,Notes,RangePrice,MaturityDate,DoneVolume,DoneAmount,AcqDate,DonePrice,DealingPK,CounterpartID,
                        Tenor,ClearingCode,BankAccountNo,BankCustodianName,BankCustodianContactPerson,BankCustodianFaxNo,
                        BankCustodianPhone,ContactPerson,FaxNo,Phone,FundName,BankBranchName,InstructionDate,AccruedInterest,SettlementDate,
                        BrokerCode,FundCode,Quantity,TradeAmount,CommissionAmount,IncomeTaxSellAmount,LevyAmount,VatAmount,OtherCharges,TransactionType,
                        TotalAmount, WHTAmount,InvestmentNotes,TrxType,SettlementMode,LastCouponDate,NextCouponDate,AccruedDays,
                        InterestAmount,CapitalGainAmount,TaxInterestAmount,BankCode,BankBranchCode,BankName,
                        BitSyariah,Phone1,Fax1,BankAccountName,OldTradeAmount,OldInterestPercent,OldMaturityDate,OldReference  
                        )
                                              
                        -- PLACEMENT/ROLLOVER
                        select 0,A.Reference, cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) RefNo,A.ValueDate,I.ID InstrumentID, I.Name InstrumentName,    
                        F.ID FundID,D.Name InstrumentType,A.InvestmentPK,A.Volume,A.DonePrice,A.InterestPercent,A.TrxTypeID,   
                        A.DoneAmount,'' Notes,A.RangePrice ,A.MaturityDate ,A.DoneVolume,A.DoneAmount,case when A.TrxType = 3 then E.ValueDate else A.AcqDate end AcqDate,0,0,'',
                        DATEDIFF (day,A.AcqDate ,A.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,
                        BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,F.Name FundName,C.Name BankBranchName ,A.InstructionDate,A.DoneAccruedInterest,A.SettlementDate,
                        '' BrokerCode, F.Sinvestcode FundCode, A.Volume, 
                        A.DoneAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, A.TrxType,
                        A.TotalAmount, 0 WHTAmount, '' InvestmentNotes,A.TrxType,A.SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                        0 InterestAmount,0 CapitalGainAmount,0 TaxInterestAmount,C.PTPCode BankCode,B.PTPCode BankBranchCode,C.Name BankName,
                        C.BitSyariah,B.Phone1,B.Fax1,B.BankAccountName,0 OldTradeAmount,0 OldInterestPercent,'' OldMaturityDate,isnull(E.Reference,'') 

                        from Investment A
                        left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2
                        left join InstrumentType D on I.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
                        left join Fund F on A.FundPK = F.FundPK and F.status = 2  
                        left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                        left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                        left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2 
                        left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                        left join FundPosition Z on A.TrxBuy = Z.[Identity] and Z.status = 2 
                        left join Investment E on Z.InstrumentPK = E.InstrumentPK and E.StatusSettlement = 2 and Z.FundPK = E.FundPK
                        where A.InstrumentTypePK = 5 and A.ValueDate between @DateFrom and @DateTo  and A.StatusSettlement in (2) and A.TrxType in (1,3)
                        and A.MaturityDate not between @DateFrom and @DateTo 
                        " + _paramFund + @"

                        union all

                        -- LIQUIDATE
                        select 0,A.Reference, cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) RefNo,A.ValueDate,I.ID InstrumentID, I.Name InstrumentName,    
                        F.ID FundID,D.Name InstrumentType,A.InvestmentPK,A.Volume,A.DonePrice,A.InterestPercent,A.TrxTypeID,   
                        A.DoneAmount,'' Notes,A.RangePrice ,A.MaturityDate ,A.DoneVolume,A.DoneAmount,case when A.TrxType = 3 then E.ValueDate else A.AcqDate end AcqDate,0,0,'',
                        DATEDIFF (day,A.AcqDate ,A.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,
                        BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,F.Name FundName,C.Name BankBranchName ,A.InstructionDate,A.DoneAccruedInterest,A.SettlementDate,
                        '' BrokerCode, F.Sinvestcode FundCode, A.Volume, 
                        A.DoneAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, A.TrxType,
                        A.TotalAmount, 0 WHTAmount, '' InvestmentNotes,A.TrxType,A.SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                        0 InterestAmount,0 CapitalGainAmount,0 TaxInterestAmount,C.PTPCode BankCode,B.PTPCode BankBranchCode,C.Name BankName,
                        C.BitSyariah,B.Phone1,B.Fax1,B.BankAccountName,0 OldTradeAmount,0 OldInterestPercent,'' OldMaturityDate,isnull(E.Reference,'') 

                        from Investment A
                        left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2
                        left join InstrumentType D on I.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
                        left join Fund F on A.FundPK = F.FundPK and F.status = 2  
                        left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                        left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                        left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2 
                        left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                        left join FundPosition Z on A.TrxBuy = Z.[Identity] and Z.status = 2 
                        left join Investment E on Z.InstrumentPK = E.InstrumentPK and E.StatusSettlement = 2 and Z.FundPK = E.FundPK and A.InvestmentPK = E.InvestmentPK
                        where A.InstrumentTypePK = 5 and A.ValueDate between @DateFrom and @DateTo  and A.StatusSettlement in (2) and A.TrxType in (2)
                        and A.MaturityDate not between @DateFrom and @DateTo 
                        " + _paramFund + @"

                        union all
                       
                        select 0,A.Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,ValueDate,I.ID InstrumentID, I.Name InstrumentName,    
                        F.ID FundID,D.Name InstrumentType,InvestmentPK,Volume,DonePrice,A.InterestPercent,'MATURE' TrxTypeID,   
                        A.DoneAmount,'' Notes,RangePrice ,A.MaturityDate ,A.DoneVolume,A.DoneAmount,A.AcqDate,0,0,'',
                        DATEDIFF (day,A.AcqDate ,A.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,
                        BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,F.Name FundName,C.Name BankBranchName ,A.InstructionDate,DoneAccruedInterest,A.SettlementDate,
                        '' BrokerCode, F.Sinvestcode FundCode, A.Volume, 
                        A.DoneAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TrxType,
                        A.TotalAmount, 0 WHTAmount, '' InvestmentNotes,2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                        0 InterestAmount,0 CapitalGainAmount,0 TaxInterestAmount,C.PTPCode BankCode,B.PTPCode BankBranchCode,C.Name BankName,
                        C.BitSyariah,B.Phone1,B.Fax1,B.BankAccountName,0 OldTradeAmount,0 OldInterestPercent,'' OldMaturityDate,'' OldReference 

                        from Investment A
                        left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2
                        left join InstrumentType D on I.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
                        left join Fund F on A.FundPK = F.FundPK and F.status = 2  
                        left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                        left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                        left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2 
                        left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                        where A.InstrumentTypePK = 5 and A.MaturityDate between @DateFrom and @DateTo  and StatusSettlement in (2)
                        and A.InstrumentPK not in  (
                        select InstrumentPK	from Investment where StatusSettlement = 2 and TrxType in (2) and MaturityDate between @DateFrom and @DateTo 
                        )
                        " + _paramFund + @"


                        union all
                       
                        select 0,CONVERT(varchar(10), A.FundEndYearPortfolioPK) + '/FP/' + REPLACE(RIGHT(CONVERT(VARCHAR(8), A.MaturityDate, 3), 5) ,'/','') Reference, '' RefNo,AcqDate ValueDate,I.ID InstrumentID, I.Name InstrumentName,    
                        F.ID FundID,D.Name InstrumentType,0 InvestmentPK,Volume Volume,1 OrderPrice,A.InterestPercent,'MATURE' TrxTypeID,   
                        TrxAmount Amount,'' Notes, 1 RangePrice ,A.MaturityDate ,A.Volume DoneVolume,A.Volume DoneAmount,A.AcqDate,0,0,'',
                        DATEDIFF (day,A.AcqDate ,A.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,
                        BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,F.Name FundName,C.Name BankBranchName ,AcqDate InstructionDate,0 AccruedInterest,AcqDate SettlementDate,
                        '' BrokerCode, F.Sinvestcode FundCode, A.Volume Quantity, 
                        A.Volume TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                        A.Volume TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                        0 InterestAmount,0 CapitalGainAmount,0 TaxInterestAmount,C.PTPCode BankCode,B.PTPCode BankBranchCode,C.Name BankName,
                        C.BitSyariah,B.Phone1,B.Fax1,B.BankAccountName,0 OldTradeAmount,0 OldInterestPercent,'' OldMaturityDate,'' OldReference  

                        from FundEndYearPortfolio A
                        left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2
                        left join InstrumentType D on I.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
                        left join Fund F on A.FundPK = F.FundPK and F.status = 2  
                        left join BankBranch BC on BC.BankBranchPK = A.BankBranchPK and BC.status = 2  
                        left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                        left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2 
                        left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                        where A.MaturityDate between @DateFrom and @DateTo and I.InstrumentTypePK = 5


                        delete A from InvestmentMature A
                        left join InvestmentMature B on A.Reference = B.OldReference
                        where A.TrxTypeID = 'MATURE' and B.OldReference is not null



                        select ROW_NUMBER() OVER(ORDER BY TrxType,ValueDate ASC) DepNo,Selected,TrxTypeID,Reference,FundID,InstrumentID,Volume,ValueDate,InterestPercent,MaturityDate,InvestmentPK from InvestmentMature
                        Order By TrxType,ValueDate asc

                            ";


                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Investment M_Investment = new Investment();
                                    M_Investment.DepNo = Convert.ToInt32(dr["DepNo"]);
                                    M_Investment.InvestmentPK = Convert.ToInt32(dr["InvestmentPK"]);
                                    M_Investment.Selected = Convert.ToBoolean(dr["Selected"]);
                                    M_Investment.TrxTypeID = Convert.ToString(dr["TrxTypeID"]);
                                    M_Investment.Reference = Convert.ToString(dr["Reference"]);
                                    M_Investment.FundID = Convert.ToString(dr["FundID"]);
                                    M_Investment.InstrumentID = Convert.ToString(dr["InstrumentID"]);
                                    M_Investment.Volume = Convert.ToDecimal(dr["Volume"]);
                                    M_Investment.ValueDate = Convert.ToString(dr["ValueDate"]);
                                    M_Investment.InterestPercent = Convert.ToDecimal(dr["InterestPercent"]);
                                    M_Investment.MaturityDate = Convert.ToString(dr["MaturityDate"]);
                                    L_Investment.Add(M_Investment);

                                }
                            }

                            return L_Investment;
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }
        }

        public string PTPCrossFund_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                            
BEGIN  
SET NOCOUNT ON         
  --DROP table #Text        
create table #Text(      
[ResultText] [nvarchar](1000)  NULL          
)                        
        
                              
truncate table #Text      
insert into #Text     
select 'Transaction Status|Data Type|Trade ID|Trade Date|Settlement Date|Fund Code(Seller)|Fund Code(Buyer)|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|Trade ID|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'      

insert into #Text
Select  
'NEWM' --1
+ '|' + '1'
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) --Trade Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) --Fund Code(Seller)
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CrossFundCode,'')))) --Fund Code(Buyer)
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
+ '|' + '' --trxtype
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
+ '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) 
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + ''
+ '|' + case when A.TaxCapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxCapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(sum((A.TaxCapitalGainAmount + A.TaxInterestAmount)) as decimal(30,2)),'')as nvarchar)   end -- WHT Tax
+ '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(isnull(A.TotalAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + case when A.SettlementMode in (1,2) then '5' else case when A.SettlementMode in (3,4)  then '6' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end             
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.TaxID,''))))         
+ '|' + '' 
+ '|' + '2' 
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Notes,''))))
+ '|' + '' 
--+ case when A.TrxType = 1 then '' else  
+ '|' + case when A.TrxType not in (1,2) then '' else '2' end  
+ '|' + case when A.TrxType not in (1,2) then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) end 
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end end  
+ '|' + case when A.TrxType not in (1,2) then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), AcqDate, 112),'')))) end    
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.AcqPrice = 0 then '0' else cast(isnull(cast(A.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.AcqPrice = 0 then '0' else cast(isnull(cast(sum(A.AcqPrice * A.AcqVolume)/100 as decimal(30,2)), '')as nvarchar) end end     
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.CapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType not in (1,2) then '' else case when A.AcqDate > A.LastCouponDate then (LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,A.AcqDate) , 112),'')))) else (LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,A.LastCouponDate) , 112),'')))) end  end -- Day Holding
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar)   end 
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(sum(A.CapitalGainAmount + A.InterestAmount) as decimal(30,2)),'')as nvarchar)   end 
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(isnull(A.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar)   end 
+ '|' + case when A.TrxType not in (1,2) then '' else  cast(isnull(cast(sum((A.TaxCapitalGainAmount + A.TaxInterestAmount)) as decimal(30,2)),'')as nvarchar)   end 
--End
from (      
select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.Notes, A.TrxType,E.Code SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) TaxCapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,C.NPWP TaxID,Z.Sinvestcode CrossFundCode,
round((A.DonePrice-A.AcqPrice)/100 * A.DoneVolume,0) CapitalGainAmount
 from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
left join Fund Z on A.CrossFundFromPK = Z.FundPK and Z.status = 2
where    
A.ValueDate =  @valuedate and A.InstrumentTypePK in (2,3,8,9,13,15) 
and A.statusdealing = 2 and statussettlement in (1,2) and A.TrxType = 2 " + _paramSettlementPK + @"
)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.TaxCapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,TaxID,A.CrossFundCode,A.CapitalGainAmount
order by A.ValueDate Asc


select * from #text 
END
";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_CrossFundBond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_CrossFundBond.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public List<Investment> Get_DataSettlementByDateFromToByFundByCounterpartReksadanaBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where  TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +
                               @"and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2 and TP.InstrumentTypePK  = 6 and TP.TrxType = 1 
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  = 6  and TP.TrxType = 1  
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then '1.PENDING' else Case When TP.statusSettlement = 2 then '2.APPROVED' else Case when TP.statusSettlement = 3 then '6.REJECT' else '4.WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  = 6  and TP.TrxType = 1 
                               and TP.statusSettlement in (1,2,3,4) order by StatusDesc ";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);


                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Investment> Get_DataSettlementByDateFromToByFundByCounterpartReksadanaSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                               case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                               CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where  TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart +
                               @"and TP.statusSettlement=1  and TP.statusDealing = 2 and TP.StatusInvestment = 2 and TP.InstrumentTypePK  = 6 and TP.TrxType = 2 
                               order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then 'PENDING' else Case When TP.statusSettlement = 2 then 'APPROVED' else Case when TP.statusSettlement = 3 then 'VOID' else 'WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  = 6  and TP.TrxType = 2  
                               and TP.statusSettlement = 2 and TP.statusDealing = 2 and TP.StatusInvestment = 2  order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.statusSettlement=1 then '1.PENDING' else Case When TP.statusSettlement = 2 then '2.APPROVED' else Case when TP.statusSettlement = 3 then '6.REJECT' else '4.WAITING' END END END StatusDesc,cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                                 case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc,  
                                 CP.Name CounterpartName, 
                               TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,Z.ID CrossFundFromID,
                               * from Investment TP left join     
                               Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                               Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                               Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                               Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                               FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                               MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                               MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                               MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                               Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                               Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                               where TP.ValueDate  between @DateFrom and @DateTo " + _paramFund + _paramCounterpart + @" and TP.InstrumentTypePK  = 6  and TP.TrxType = 2 
                               and TP.statusSettlement in (1,2,3,4) order by StatusDesc ";

                        }


                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);




                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public List<Investment> Get_DataDealingByDateFromToByFundByCounterpartReksadanaBuyOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                            CP.Name CounterpartName, 
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                            * from Investment TP left join     
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK = 6 
                            and TP.StatusInvestment = 2 " + _paramFund + _paramCounterpart +
                            @"and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) and TP.TrxType = 1 
                            order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.InstrumentTypePK = 6 and TP.TrxType = 1" + _paramFund + _paramCounterpart +
                            " and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" 
                         select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                         case when TP.OrderStatus  = 'O' then '2.OPEN' else case when TP.OrderStatus  = 'P' then '4.PARTIAL' else case when TP.OrderStatus  = 'M' then '3.MATCH'
                         else case when TP.StatusDealing = 1 then '1.PENDING' else case when TP.StatusDealing = 3 then '5.REJECT' else '5.REJECT' END  END END END END  OrderStatusDesc,   
                         cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                         CP.Name CounterpartName,  
                         TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, Z.ID CrossFundFromID,
                         * from Investment TP left join      
                         Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                         Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                         Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                         Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                         FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                         MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                         MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                         MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                         Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join 
                         Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                         where TP.InstrumentTypePK = 6 and  TP.TrxType = 1  
                         and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2  
                         and TP.statusDealing in (1,2,3,4) " + _paramFund + _paramCounterpart + @"
                           order by OrderStatusDesc 
                        ";

                        }

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public List<Investment> Get_DataDealingByDateFromToByFundByCounterpartReksadanaSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, string _fundID, string _counterpartID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";

                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_counterpartID != "0")
                        {
                            _paramCounterpart = "And CP.CounterpartPK  = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }

                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc,
                            case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                            CP.Name CounterpartName, 
                            TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                            * from Investment TP left join     
                            Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                            Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                            FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                            MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                            MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                            MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  
                            Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK = 6 
                            and TP.StatusInvestment = 2  " + _paramFund + _paramCounterpart +
                           @" and TP.StatusDealing = 1 and (TP.StatusSettlement = 0) and TP.TrxType = 2 
                            order by RefNo ";

                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                             case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, 
                             CP.Name CounterpartName, 
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID,
                             * from Investment TP left join     
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join 
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join 
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     
                             MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join  
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Market M on TP.MarketPK = M.MarketPK and M.Status = 2 
                             where TP.InstrumentTypePK = 6 and TP.TrxType = 2 " + _paramFund + _paramCounterpart +
                            " and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2 and TP.statusDealing = 2  and (TP.StatusSettlement not in (3,4)) order by RefNo ";

                        }

                        else
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @" 
                         select case when TP.StatusDealing=1 then 'PENDING' else Case When TP.StatusDealing = 2 then 'APPROVED' else Case when TP.StatusDealing = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                         case when TP.OrderStatus  = 'O' then '2.OPEN' else case when TP.OrderStatus  = 'P' then '4.PARTIAL' else case when TP.OrderStatus  = 'M' then '3.MATCH'
                         else case when TP.StatusDealing = 1 then '1.PENDING' else case when TP.StatusDealing = 3 then '5.REJECT' else '5.REJECT' END  END END END END  OrderStatusDesc,   
                         cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,CR.Name FundName,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                         CP.Name CounterpartName,  
                         TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, Z.ID CrossFundFromID,
                         * from Investment TP left join      
                         Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                         Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join      
                         Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                         Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                         FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                         MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                         MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                         MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join  
                         Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2 left join  
                         Market M on TP.MarketPK = M.MarketPK and M.Status = 2  
                         where TP.InstrumentTypePK = 6 and TP.TrxType = 2   " + _paramFund + _paramCounterpart + @"
                         and TP.ValueDate between @DateFrom and @DateTo and TP.StatusInvestment = 2  
                         and TP.statusDealing in (1,2,3,4)  order by OrderStatusDesc 

                        ";

                        }

                        cmd.Parameters.AddWithValue("@status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _counterpartID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int Investment_AmortizeBondBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = " and InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        cmd.CommandText = @"Update Investment set statusSettlement  = 2, ApprovedSettlementID = @ApprovedSettlementID,ApprovedSettlementTime = @ApprovedSettlementTime 
                            where " + _paramInstrumentType + _paramTrxType + " and selectedSettlement = 1 and ValueDate between @DateFrom and @DateTo and statusSettlement = 1 " + _paramFund + _paramCounterpart +
                            " Update Investment set selectedSettlement  = 0";



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@ApprovedSettlementID", _investment.ApprovedSettlementID);
                        cmd.Parameters.AddWithValue("@ApprovedSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public InvestmentAvgPriceByTrx Validate_GetAvgPriceByTrx(DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {
            try
            {
                string _paramDealingPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramDealingPK = " And DealingPK in (0) ";
                }
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        Create Table #A
                        (
                        ValueDate datetime,FundPK int,CounterpartPK int,InstrumentPK int
                        )

                        declare @Count int

                        INSERT INTO #A
                        select ValueDate,FundPK,CounterpartPK,InstrumentPK from Investment where valuedate between @DateFrom and @DateTo 
                        and StatusInvestment = 2 and StatusDealing <> 3 and InstrumentTypePK = 1 and OrderStatus in ('O','M')
                        " + _paramDealingPK + @"
                        group by ValueDate,FundPK,CounterpartPK,InstrumentPK

                        select @Count = count(*) from #A

                        if (@Count > 1) 
                        begin 
                            select 1 Result,FundPK,A.CounterpartPK,A.InstrumentPK,B.ID InstrumentID from #A A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        end 
                        ELSE
                        BEGIN
                            select 0 Result,FundPK,A.CounterpartPK,A.InstrumentPK,B.ID InstrumentID from #A A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        END
                     


                          ";

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new InvestmentAvgPriceByTrx()
                                {
                                    Result = Convert.ToBoolean(dr["Result"]),
                                    FundPK = Convert.ToInt32(dr["FundPK"]),
                                    CounterpartPK = Convert.ToInt32(dr["CounterpartPK"]),
                                    InstrumentPK = Convert.ToInt32(dr["InstrumentPK"]),
                                    InstrumentID = Convert.ToString(dr["InstrumentID"])
                                };
                            }
                            else
                            {
                                return null;
                            }


                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public decimal Get_AvgPriceByTrx(InvestmentAvgPriceByTrx _investment)
        {
            try
            {
                string _paramDealingPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramDealingPK = " And DealingPK in (0) ";
                }
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        

DECLARE @ReturnValue NUMERIC(26, 8) 

DECLARE @RunningAmount NUMERIC(26, 6) 

DECLARE @RunningBalance NUMERIC(26, 6) 

DECLARE @RunningAvgPrice NUMERIC(24, 8) 

DECLARE @Data TABLE 

( 

[runningamount]   [NUMERIC](26, 6) NULL, 

[runningbalance]  [NUMERIC](26, 6) NULL, 

[runningavgprice] [NUMERIC](24, 8) NULL, 

[valuedate]       [DATETIME] NULL, 

[volume]          [NUMERIC](26, 6) NULL, 

[amount]          [NUMERIC](26, 6) NULL, 

[price]           [NUMERIC](26, 8) NULL, 

[trxtype]         [INT] NULL 

) 

DECLARE @PeriodPK INT 



SELECT @PeriodPK = periodpk 

FROM   period 

WHERE  @Date BETWEEN datefrom AND dateto 

AND status = 2 



DECLARE @Mode INT -- ntar mode Ambil dari Setup Accounting     

SET @Mode = 1 -- 1 = priority Buy, 2 = priority Sell     

INSERT INTO @Data 

SELECT Cast(0 AS NUMERIC(26, 6)) RunningAmount, 

Cast(0 AS NUMERIC(26, 6)) RunningBalance, 

Cast(0 AS NUMERIC(24, 8)) RunningAvgPrice, 

* 

FROM   (

SELECT valuedate, 

Cast(donevolume AS NUMERIC(26, 6))             Volume, 

Cast(donevolume * doneprice AS NUMERIC(26, 6)) Amount, 

Cast(doneprice AS NUMERIC(26, 6)) DonePrice, 

1 trxtype 

FROM   investment 

WHERE  instrumentpk = @InstrumentPK 

AND fundpk = @FundPK and CounterpartPK = @CounterpartPK

AND StatusDealing <> 3 and InstrumentTypePK = 1  

AND PeriodPK = @PeriodPK "+ _paramDealingPK + @"
	 

) dt 

WHERE  @Mode = 1 

ORDER  BY valuedate, 

trxtype ASC 



SET @RunningAmount = 0 

SET @RunningBalance = 0 

SET @RunningAvgPrice = 0 



IF @Mode = 1 

BEGIN 

WITH q 

AS (SELECT TOP 1000000000 * 

FROM   @Data 

ORDER  BY valuedate, 

    trxtype ASC) 

UPDATE q 

SET    @RunningBalance = runningbalance = @RunningBalance + ( 

                            volume * CASE 

                                        WHEN 

                                trxtype = 1 THEN 1 

                                        ELSE -1 

                                    END ), 

@RunningAmount = runningamount = @RunningAmount + CASE WHEN 

                        trxtype 

                        = 

                        1 

                        THEN 

                        volume * price ELSE 

                        -volume * 

                        @RunningAvgPrice 

                        END, 

@RunningAvgPrice = runningavgprice = 

            CASE 

            WHEN trxtype = 1 THEN 

                CASE 

                WHEN @RunningBalance 

                        = 0 

                THEN 

                0 

                ELSE @RunningAmount 

                        / 

                        @RunningBalance 

                END 

            ELSE @RunningAvgPrice 

            END 

END 

ELSE 

BEGIN 

WITH q 

AS (SELECT TOP 1000000000 * 

FROM   @Data 

ORDER  BY valuedate, 

    trxtype DESC) 

UPDATE q 

SET    @RunningBalance = runningbalance = @RunningBalance + ( 

                            volume * CASE 

                                        WHEN 

                                trxtype = 1 THEN 1 

                                        ELSE -1 

                                    END ), 

@RunningAmount = runningamount = @RunningAmount + CASE WHEN 

                        trxtype 

                        = 

                        1 

                        THEN 

                        volume * price ELSE 

                        -volume * 

                        @RunningAvgPrice 

                        END, 

@RunningAvgPrice = runningavgprice = 

            CASE 

            WHEN trxtype = 1 THEN 

                CASE 

                WHEN @RunningBalance 

                        = 0 

                THEN 

                0 

                ELSE @RunningAmount 

/ 

                        @RunningBalance 

                END 

            ELSE @RunningAvgPrice 

            END 

END 



SELECT @ReturnValue = runningavgprice 

FROM   @Data 

WHERE  valuedate IN (SELECT Max(valuedate) 

FROM   @Data 

WHERE  valuedate <= @Date) 

select @ReturnValue AvgPrice
                          ";

                        cmd.Parameters.AddWithValue("@Date", _investment.Date);
                        cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["AvgPrice"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }
        public string PTPOverseasEquity_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                                BEGIN  
                                SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                                truncate table #Text      
                                insert into #Text     
                                select '' 
                                insert into #Text 
                                Select  
                                'NEWM' -- 1.Transaction status
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 2.Trade ID
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) -- 3.Trade Date
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),'')))) -- 4.Settlement Date
                                + '|' + @CompanyID -- 5.IM Code
                                + '|' + isnull(A.BrokerCode,'') --6. BR Foreign  Code
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CounterpartName,''))))  --7. BR Foreign Name
                                + '|' + isnull(A.BrokerCode,'')  --8.Counterpart Code
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CounterpartName,''))))   --9.Counterpart Name
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CPSafekeepingAccNumber,''))))  --10.CP Safekeeping Acc Number
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.PlaceOfSettlement,''))))  --11.Place of Settlement
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 12. Fund Code
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundSafekeepingAccountNumber,''))))  --13.Fund's safe keeping account number (at Local Custodian)
                                + '|' + '1'  --14.Security Type
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SecurityCodeType,''))))  --15.Security Code Type
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,'')))) --16.Security Code
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InstrumentName,'')))) --17.Security Name
                                + '|' + cast(isnull(A.TrxType,'') as nvarchar) --18.Buy/Sell
                                + '|' + cast(isnull(A.CurrencyID,'') as nvarchar) --19.Currency
                                + '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end --20.Price
                                + '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end --21.Quantity
                                + '|' + case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)), '')as nvarchar) end --22.TradeAmount
                                + '|' + case when A.CommissionAmount = 0 then '0' else cast(isnull(cast(A.CommissionAmount as decimal(30,2)), '')as nvarchar) end --23.CommissionAmount
                                + '|' + case when A.TrxType = 1 then '0' else cast(isnull(cast(A.IncomeTaxSellAmount as decimal(30,2)), '')as nvarchar) end --24.IncomeTaxSellAmount
                                + '|' + case when A.LevyAmount = 0 then '0' else cast(isnull(cast(A.LevyAmount as decimal(30,2)), '')as nvarchar) end  --25.LevyAmount
                                + '|' + case when A.VATAmount = 0 then '0' else cast(isnull(cast(A.VATAmount as decimal(30,2)), '')as nvarchar) end --26.VATAmount
                                + '|' + case when A.OtherCharges = 0 then '0' else cast(isnull(cast(A.OtherCharges as decimal(30,2)), '')as nvarchar) end --27.OtherCharges
                                + '|' + case when A.TrxType = 1 then cast(isnull(cast((A.TradeAmount + A.CommissionAmount + A.VATAmount + A.LevyAmount + A.OtherCharges) as decimal (30,2)), '') as nvarchar) else cast(isnull(cast((A.TradeAmount - A.CommissionAmount - A.VATAmount - A.LevyAmount - A.OtherCharges - A.IncomeTaxSellAmount) as decimal (30,2)), '') as nvarchar) end --28.GrossAmount
                                + '|' + case when A.WHTAmount = 0 then '0' else cast(isnull(cast(A.WHTAmount as decimal(30,2)), '')as nvarchar) end --29.WHT
                                + '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(A.TotalAmount as decimal(30,2)), '')as nvarchar) end --30.Net Amount
                                + '|' + case when A.TrxType = 1 then '2' else '1' end  -- 31. Instruction Type       
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Notes,'')))) -- 32.Remarks
                                + '|' + ''
                                from (      
                                select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode,B.Name CounterpartName, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                                A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                                A.TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,F.ID CurrencyID,D.Name InstrumentName,A.CPSafekeepingAccNumber,A.PlaceOfSettlement,A.FundSafekeepingAccountNumber,
                                A.SecurityCodeType from investment A
                                left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2     
                                left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'  
                                left join Currency F on D.CurrencyPK = F.CurrencyPK and F.status = 2 
                                where    
                                A.ValueDate =  @ValueDate "+ _paramSettlementPK + @" and A.statusdealing = 2 and A.InstrumentTypePK = 1 and A.BitForeignTrx = 1
                                )A    
                                Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.CounterpartName,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                                A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,A.CurrencyID,A.InstrumentName,A.CPSafekeepingAccNumber,A.PlaceOfSettlement,
                                A.FundSafekeepingAccountNumber,A.SecurityCodeType
                                order by A.ValueDate Asc

                                select * from #text 
                                END
                        ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_OverseasEquity.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_OverseasEquity.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public string PTPOverseasBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                                BEGIN  
                                SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                                truncate table #Text      
                                insert into #Text     
                                select 'Transaction Status|TA Reference ID|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|TA Reference No.|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'      
        
                                insert into #Text
                                Select  
                                'NEWM' --1 .Transaction Status
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 2.Trade ID
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) -- 3.Trade Date
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),'')))) -- 4.Settlement Date
                                + '|' + @CompanyID -- 5. IM Code
                                + '|' + isnull(A.BrokerCode,'') --6. BR Foreign  Code
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CounterpartName,''))))  --7. BR Foreign Name
                                + '|' + isnull(A.BrokerCode,'')  --8.Counterpart Code
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CounterpartName,''))))   --9.Counterpart Name
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CPSafekeepingAccNumber,''))))  --10.CP Safekeeping Acc Number
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.PlaceOfSettlement,''))))  --11.Place of Settlement
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 12.Fund Code
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundSafekeepingAccountNumber,''))))  --13.Fund's safe keeping account number (at Local Custodian)
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SecurityType,''))))  --14.Security Type
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SecurityCodeType,''))))  --15.Security Code Type
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,'')))) -- 16. Security Code
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InstrumentName,'')))) -- 17. Security Name
                                + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 18.Buy/Sell
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 19. CCY
                                + '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end --20.Price 
                                + '|' + case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end -- 21. Face Value
                                + '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end -- 22.Proceeds
                                + '|' + case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(30,6)),'')as nvarchar) end -- 23.Interest Percent
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) -- 24.MaturityDate
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),'')))) -- 25.LastCouponDate
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),'')))) -- 26.NextCouponDate
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) -- 27.AccruedDays
                                + '|' + case when A.InterestAmount = 0 then '' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end -- 28. Interest Amount
                                + '|' + cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,2)) as nvarchar)  -- 29. Other Fee
                                + '|' + case when A.TotalAmount = 0 then '' else cast(isnull(cast(isnull(A.TotalAmount,0) as decimal(30,2)),'')as nvarchar) end  --30.Net Proceeds
                                + '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end  -- 31. InstructionType                  
                                + '|' + case when A.PurposeOfTransaction = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.PurposeOfTransaction,'3'))) ) end -- 32. PurposeOfTransaction
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Notes,'')))) -- 33. Remarks
                                + '|' + '' 
                                from (      
                                select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate,  B.SInvestCode BrokerCode,B.Name CounterpartName, C.Sinvestcode FundCode, D.ID Instrument,D.Name InstrumentName, A.DonePrice, A.DoneVolume Quantity, 
                                round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                                round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                                round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,F.BankAccountNo,A.PurposeOfTransaction,A.StatutoryType, G.ID CurrencyID,A.InterestPercent,
                                A.CPSafekeepingAccNumber,A.PlaceOfSettlement,A.FundSafekeepingAccountNumber,A.SecurityCodeType,A.MaturityDate,case when A.InstrumentTypePK = 3 then 2 else case when A.InstrumentTypePK = 2 then 3 else case when A.InstrumentTypePK = 9 then 7 else 1 end end end SecurityType from investment A
                                left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                                left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
                                left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
                                left join Currency G on D.CurrencyPK = G.CurrencyPK and G.status = 2
                                where    
                                A.ValueDate =  @valuedate and A.InstrumentTypePK in (2,3,8,9,13,15) and A.BitForeignTrx = 1
                                "+ _paramSettlementPK + @" and A.statusdealing = 2

                                )A    
                                Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.CounterpartName,A.FundCode,A.Instrument,A.InstrumentName,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                                A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                                A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.CurrencyID,A.InterestPercent,
                                A.CPSafekeepingAccNumber,A.PlaceOfSettlement,A.FundSafekeepingAccountNumber,A.SecurityCodeType,A.MaturityDate,A.SecurityType
                                order by A.ValueDate Asc


                                select * from #text 
                                END";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_OverseasBond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_OverseasBond.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public int Update_SettlementEquityBuy(Investment _investment)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                        declare @TotalAmount numeric(19,2)
                        select @TotalAmount = sum(@DoneAmount + @CommissionAmount + @LevyAmount + @KPEIAmount + @VATAmount - @WHTAmount)

                        Update Investment set SettlementDate = @SettlementDate,TotalAmount = @TotalAmount, DoneAmount = @DoneAmount, CommissionAmount = @CommissionAmount,
                        LevyAmount = @LevyAmount,KPEIAmount = @KPEIAmount,VATAmount = @VATAmount,WHTAmount = @WHTAmount
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and SettlementPK = @SettlementPK ";

                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                        cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                        cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                        cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                        cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                        cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                        cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);


                        cmd.ExecuteNonQuery();
                    }
                    return 0;


                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public int Update_SettlementEquitySell(Investment _investment)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                        declare @TotalAmount numeric(19,2)
                        select @TotalAmount = sum(@DoneAmount - (@CommissionAmount + @LevyAmount + @KPEIAmount + @VATAmount + @TaxSell - @WHTAmount))
   
                        Update Investment set SettlementDate = @SettlementDate,TotalAmount = @TotalAmount, DoneAmount = @DoneAmount, CommissionAmount = @CommissionAmount,
                        LevyAmount = @LevyAmount,KPEIAmount = @KPEIAmount,VATAmount = @VATAmount,WHTAmount = @WHTAmount,IncomeTaxSellAmount = @TaxSell
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and SettlementPK = @SettlementPK ";

                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                        cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                        cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                        cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                        cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                        cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                        cmd.Parameters.AddWithValue("@TaxSell", _investment.IncomeTaxSellAmount);
                        cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);


                        cmd.ExecuteNonQuery();
                    }
                    return 0;


                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public int Update_SettlementTimeDepositBuy(Investment _investment)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                       
                        Update Investment set AmountToTransfer = @AmountToTransfer
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and SettlementPK = @SettlementPK ";

                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);


                        cmd.ExecuteNonQuery();
                    }
                    return 0;


                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public int Update_SettlementTimeDepositSell(Investment _investment)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                       
                        Update Investment set AmountToTransfer = @AmountToTransfer
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and SettlementPK = @SettlementPK ";

                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                        cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                        cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);


                        cmd.ExecuteNonQuery();
                    }
                    return 0;


                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public int Update_PTPMature(Investment _investment)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                       
                        Update InvestmentMature set AmountToTransfer = @AmountToTransfer
                        where RefNo = @RefNo";

                        cmd.Parameters.AddWithValue("@RefNo", _investment.RefNo);
                        cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);


                        cmd.ExecuteNonQuery();
                    }
                    return 0;


                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private Investment setInvestmentDetail(SqlDataReader dr)
        {
            Investment M_Investment = new Investment();
            M_Investment.InstrumentID = dr["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstrumentID"]);
            M_Investment.InstrumentName = dr["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstrumentName"]);
            M_Investment.TotalOrderPrice = dr["TotalOrderPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalOrderPrice"]);
            return M_Investment;
        }

        public List<Investment> Get_DataDealingTotalByInstrument(int _instrumentPK, DateTime _date)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        
                        cmd.CommandText = @"
                        select isnull(b.ID,'') InstrumentID,isnull(b.Name,'') InstrumentName,sum(OrderPrice) TotalOrderPrice from Investment a 
                        left join Instrument b on a.InstrumentPK = b.InstrumentPK and b.Status in(1,2) 
                        where StatusDealing in(1,2) and a.InstrumentPK = @InstrumentPK and a.InstructionDate = @Date
                        Group By a.InstrumentPK,b.Name,b.id";
                        cmd.Parameters.AddWithValue("@InstrumentPK", _instrumentPK);
                        cmd.Parameters.AddWithValue("@Date", _date);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestmentDetail(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Update_MaturityForDeposito(Investment _investment)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                        Update Investment set MaturityDate = @MaturityDate  where Reference = @Reference and InvestmentPK = @InvestmentPK";

                        cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                        cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                        cmd.Parameters.AddWithValue("@Reference", _investment.Reference);


                        cmd.ExecuteNonQuery();
                    }
                    return 0;


                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


//        public Boolean GenerateBroker(string _userID, DateTime _dateFrom, DateTime _dateTo)
//        {
//            try
//            {
//                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
//                {
//                    DbCon.Open();
//                    using (SqlCommand cmd = DbCon.CreateCommand())
//                    {

//                        DateTime _dateTimeNow = DateTime.Now;

//                        cmd.CommandText = @"
//	                          select A.CounterpartPK,isnull(B.ID,'') Broker,isnull(C.ID,'') Stock,case when A.TrxType = 1 then 'B' else 'S' end Status, D.Name, case when A.TrxType = 1 then A.Volume else 0 end Lot, Case when A.TrxType = 2 then A.Volume else 0 end Nominal,A.DoneAmount NominalVolume,* from Investment A 
//							  left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.Status in(1,2)
//							  left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in(1,2)
//							  left join Fund D on A.FundPK = D.FundPK and D.status in(1,2)
//							  where A.InstrumentTypePK = 1 and A.StatusInvestment =  2 
//                              and A.StatusDealing <> 3 and A.CounterpartPK <> 0 and A.SelectedDealing = 1 and A.ValueDate between @DateFrom and @DateTo ";
//                        cmd.CommandTimeout = 0;

//                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
//                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

//                        using (SqlDataReader dr0 = cmd.ExecuteReader())
//                        {
//                            if (!dr0.HasRows)
//                            {
//                                return false;
//                            }
//                            else
//                            {
//                                string filePath = Tools.ExcelFilePath + "Broker" + "_" + _userID + ".xlsx";
//                                string pdfPath = Tools.ExcelFilePath + "Broker" + "_" + _userID + ".pdf";
//                                FileInfo excelFile = new FileInfo(filePath);
//                                if (excelFile.Exists)
//                                {
//                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
//                                    excelFile = new FileInfo(filePath);
//                                }

//                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
//                                using (ExcelPackage package = new ExcelPackage(excelFile))
//                                {
//                                    package.Workbook.Properties.Title = "InvestmentReport";
//                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
//                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
//                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
//                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
//                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

//                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Broker");


//                                    //ATUR DATA GROUPINGNYA DULU
//                                    List<BrokerRpt> rList = new List<BrokerRpt>();
//                                    while (dr0.Read())
//                                    {
//                                        BrokerRpt rSingle = new BrokerRpt();
//                                        rSingle.Broker = dr0["Broker"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Broker"]);
//                                        rSingle.Stock = dr0["Stock"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Stock"]);
//                                        rSingle.Status = dr0["Status"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Status"]);
//                                        rSingle.FundName = dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]);
//                                        rSingle.Lot = dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]);
//                                        rSingle.Nominal = dr0["Nominal"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Nominal"]);
//                                        rSingle.NominalVolume = dr0["NominalVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NominalVolume"]);
//                                        //rSingle.Lot2 = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
//                                        //rSingle.Share = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
//                                        //rSingle.Nominal2 = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
//                                        rList.Add(rSingle);

//                                    }

//                                    var GroupByAccountID =
//                                         from r in rList
//                                         group r by new { } into rGroup
//                                         select rGroup;

//                                    int incRowExcel = 0;
//                                    foreach (var rsHeader in GroupByAccountID)
//                                    {
//                                        incRowExcel++;
//                                        worksheet.Cells[incRowExcel, 1].Value = _dateTimeNow;
//                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yyyy";
//                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
//                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

//                                        incRowExcel = incRowExcel + 2;
//                                        int _RowA = incRowExcel;
//                                        int _RowB = incRowExcel + 1;
//                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
//                                        worksheet.Cells["A" + _RowA + ":A" + _RowB].Merge = true;
//                                        worksheet.Cells[incRowExcel, 2].Value = "Broker";
//                                        worksheet.Cells["B" + _RowA + ":B" + _RowB].Merge = true;
//                                        worksheet.Cells[incRowExcel, 3].Value = "Stock";
//                                        worksheet.Cells["C" + _RowA + ":C" + _RowB].Merge = true;
//                                        worksheet.Cells[incRowExcel, 4].Value = "Status";
//                                        worksheet.Cells[incRowExcel, 5].Value = "Nama Fund";
//                                        worksheet.Cells["E" + _RowA + ":E" + _RowB].Merge = true;
//                                        worksheet.Cells[incRowExcel, 8].Value = "Price";
//                                        worksheet.Cells["H" + _RowA + ":H" + _RowB].Merge = true;
//                                        worksheet.Cells[incRowExcel, 9].Value = "Lot";
//                                        worksheet.Cells["I" + _RowA + ":I" + _RowB].Merge = true;
//                                        worksheet.Cells[incRowExcel, 10].Value = "Share";
//                                        worksheet.Cells["J" + _RowA + ":J" + _RowB].Merge = true;
//                                        worksheet.Cells[incRowExcel, 11].Value = "Nominal";
//                                        worksheet.Cells["K" + _RowA + ":K" + _RowB].Merge = true;

//                                        worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
//                                        incRowExcel++;
//                                        worksheet.Cells[_RowB, 4].Value = "B/S";
//                                        worksheet.Cells[_RowB, 6].Value = "Volume";
//                                        worksheet.Cells[_RowB, 7].Value = "Nominal";

//                                        incRowExcel++;

//                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
//                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
//                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.Border.Left.Style = ExcelBorderStyle.Thin;
//                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.Border.Right.Style = ExcelBorderStyle.Thin;
//                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
//                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
//                                        int _no = 1;
//                                        int _startRowDetail = incRowExcel;
//                                        int _endRowDetail = 0;
//                                        foreach (var rsDetail in rsHeader)
//                                        {

//                                            worksheet.Cells[incRowExcel, 1].Value = _no;
//                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Broker;
//                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Stock;
//                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Status;
//                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundName;
//                                            if (rsDetail.Status == "B")
//                                            {
//                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Lot;
//                                            }
//                                            else
//                                            {
//                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Nominal;
//                                            }

//                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.NominalVolume;
//                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.Price;
//                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.Lot2;
//                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.Share;
//                                            worksheet.Cells[incRowExcel, 11].Value = 0;

//                                            worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
//                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
//                                            worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
//                                            worksheet.Cells["E" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
//                                            worksheet.Cells["F" + incRowExcel + ":K" + incRowExcel].Style.Numberformat.Format = "#,##0.00";
//                                            _endRowDetail = incRowExcel;
//                                            incRowExcel++;
//                                            _no++;
//                                        }
//                                        worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
//                                        worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
//                                        worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
//                                        worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;
//                                        worksheet.Row(incRowExcel).PageBreak = true;

//                                    }


//                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
//                                    worksheet.PrinterSettings.FitToPage = true;
//                                    worksheet.PrinterSettings.FitToWidth = 1;
//                                    worksheet.PrinterSettings.FitToHeight = 0;
//                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
//                                    worksheet.Column(1).Width = 5;
//                                    worksheet.Column(2).Width = 25;
//                                    worksheet.Column(3).Width = 25;
//                                    worksheet.Column(4).Width = 10;
//                                    worksheet.Column(5).Width = 45;
//                                    worksheet.Column(6).Width = 20;
//                                    worksheet.Column(7).Width = 20;
//                                    worksheet.Column(8).Width = 20;
//                                    worksheet.Column(9).Width = 20;
//                                    worksheet.Column(10).Width = 20;
//                                    worksheet.Column(11).Width = 20;
//                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
//                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
//                                    // worksheet.PrinterSettings.FitToPage = true;
//                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
//                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
//                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
//                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
//                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
//                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
//                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 BROKER";

//                                    Image img = Image.FromFile(Tools.ReportImage);
//                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);



//                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
//                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

//                                    worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
//                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();
//                                    worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();

//                                    package.Save();
//                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
//                                    return true;
//                                }

//                            }
//                        }
//                    }
//                }

//            }
//            catch (Exception err)
//            {
//                return false;
//                throw err;
//            }

//        }



        public int Get_LastInvestmentPK()
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = "SELECT  Max(InvestmentPK) Result from Investment ";

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;

                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public string PTPReksadana_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                                BEGIN  
                                  SET NOCOUNT ON         
          
                               create table #Text(      
                              [ResultText] [nvarchar](1000)  NULL          
                              )                        
        
                              truncate table #Text      
                              insert into #Text     
                              select '' 
                              insert into #Text 
                                    Select  
                                    'NEWM'
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
                                    + '|' + @CompanyID
                                    + '|' + isnull(A.BrokerCode,'')
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
                                    + '|' + case when A.FundTypeInternal = 1 then '50' else case when A.FundTypeInternal = 2 then '52' else '90' end end
                                    + '|' + '1'
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InstrumentName,''))))
                                    + '|' + cast(isnull(A.TrxType,'') as nvarchar)
                                    + '|' + cast(isnull(A.CurrencyID,'') as nvarchar)
                                    + '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
                                    + '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
                                    + '|' + case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)), '')as nvarchar) end
                                    + '|' + case when A.CommissionAmount = 0 then '0' else cast(isnull(cast(A.CommissionAmount as decimal(30,2)), '')as nvarchar) end
                                    + '|' + case when A.TrxType = 1 then '0' else cast(isnull(cast(A.IncomeTaxSellAmount as decimal(30,2)), '')as nvarchar) end
                                    + '|' + case when A.LevyAmount = 0 then '0' else cast(isnull(cast(A.LevyAmount as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.VATAmount = 0 then '0' else cast(isnull(cast(A.VATAmount as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.OtherCharges = 0 then '0' else cast(isnull(cast(A.OtherCharges as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.TrxType = 1 then cast(isnull(cast((A.TradeAmount + A.CommissionAmount + A.VATAmount + A.LevyAmount + A.OtherCharges) as decimal (30,2)), '') as nvarchar) else cast(isnull(cast((A.TradeAmount - A.CommissionAmount - A.VATAmount - A.LevyAmount - A.OtherCharges - A.IncomeTaxSellAmount) as decimal (30,2)), '') as nvarchar) end
                                    + '|' + case when A.WHTAmount = 0 then '0' else cast(isnull(cast(A.WHTAmount as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(A.TotalAmount as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.TrxType = 1 then '2' else '1' end         
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))
                                    + '|' + ''
                                    from (      

                                    select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument,D.Name InstrumentName, A.DonePrice, A.DoneVolume Quantity, 
                                    A.Amount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                                    A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,C.FundTypeInternal,F.ID CurrencyID from investment A
                                    left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                    left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                    left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                                    left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'  
                                    left join Currency F on C.CurrencyPK = F.CurrencyPK and F.status = 2
                                    where    
                                    A.ValueDate =  @ValueDate and A.StatusInvestment = 2 and A.InstrumentTypePK = 6 --"+ _paramSettlementPK + @" 
                                    )A    
                                    Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.InstrumentName,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                                    A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,FundTypeInternal,CurrencyID
                                    order by A.ValueDate Asc

                        select * from #text 
                        END
                        ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Reksadana.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Reksadana.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public List<InvestmentDataAcq> Get_InvestmentDataAcq(int _DealingPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<InvestmentDataAcq> _L = new List<InvestmentDataAcq>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;

                        cmd.CommandText = @" 
                            select * from InvestmentTaxDataAcq where investmentpk = (
                            select InvestmentPK from Investment where dealingpk = @dealingPk and StatusInvestment = 2 and StatusDealing in (1,2))
                            order by AcqNo
                           ";

                        cmd.Parameters.AddWithValue("@dealingPk", _DealingPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    InvestmentDataAcq _M = new InvestmentDataAcq();
                                    _M.InvestmentPK = dr["InvestmentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentPK"]);
                                    _M.AcqNo = dr["AcqNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AcqNo"]);
                                    _M.AcqDate = dr["AcqDate"].Equals(DBNull.Value) == true ? "" : dr["AcqDate"].ToString();
                                    _M.AcqVolume = dr["AcqAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqAmount"]);
                                    _M.AcqPrice = dr["AcqPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice"]);
                                    _M.DaysOfHoldingInterest = dr["DaysOfHoldingInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["DaysOfHoldingInterest"]);
                                    _M.IncomeTaxGainAmount = dr["IncomeTaxGainAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxGainAmount"]);
                                    _M.IncomeTaxInterestAmount = dr["IncomeTaxInterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxInterestAmount"]);
                                    _M.TotalTaxIncomeAmount = dr["TotalTaxIncomeAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalTaxIncomeAmount"]);
                                    _M.TaxAmount = dr["TaxAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxAmount"]);
                                    _L.Add(_M);
                                }
                            }
                            return _L;
                        }
                    }
                }
                
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string Investment_UpdateDataInvestmentAcq(List<InvestmentDataAcq> _InvestmentAcq)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    foreach (var _obj in _InvestmentAcq)
                    {
                        InvestmentDataAcq _m = new InvestmentDataAcq();
                        _m.InvestmentPK = _obj.InvestmentPK;
                        _m.AcqNo = _obj.AcqNo;
                        _m.AcqVolume = _obj.AcqVolume;
                        _m.AcqDate = _obj.AcqDate;
                        _m.AcqPrice = _obj.AcqPrice;
                        _m.IncomeTaxGainAmount = _obj.IncomeTaxGainAmount;
                        _m.DaysOfHoldingInterest = _obj.DaysOfHoldingInterest;
                        _m.IncomeTaxInterestAmount = _obj.IncomeTaxInterestAmount;
                        _m.TotalTaxIncomeAmount = _obj.TotalTaxIncomeAmount;
                        _m.TaxAmount = _obj.TaxAmount;

                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"
                                                update InvestmentTaxDataAcq set IncomeTaxGainAmount = @IncomeTaxGainAmount,DaysOfHoldingInterest = @DaysOfHoldingInterest,IncomeTaxInterestAmount = @IncomeTaxInterestAmount,
                                                TotalTaxIncomeAmount = @TotalTaxIncomeAmount,TaxAmount = @TaxAmount where investmentpk = @InvestmentPK and AcqNo = @AcqNo
                                          ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@InvestmentPK", _m.InvestmentPK);
                            cmd.Parameters.AddWithValue("@AcqNo", _m.AcqNo);
                            cmd.Parameters.AddWithValue("@AcqVolume", _m.AcqVolume);
                            cmd.Parameters.AddWithValue("@AcqDate", _m.AcqDate);
                            cmd.Parameters.AddWithValue("@AcqPrice", _m.AcqPrice);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _m.IncomeTaxGainAmount);
                            cmd.Parameters.AddWithValue("@DaysOfHoldingInterest", _m.DaysOfHoldingInterest);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _m.IncomeTaxInterestAmount);
                            cmd.Parameters.AddWithValue("@TotalTaxIncomeAmount", _m.TotalTaxIncomeAmount);
                            cmd.Parameters.AddWithValue("@TaxAmount", _m.TaxAmount);
                            cmd.ExecuteNonQuery();

                        }
                    }

                    return "Update Investment Acquisition Success";
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_CheckStatusSettlement(int _dealingPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"if (select StatusSettlement from Investment where dealingPK = @dealingpk and StatusDealing in (1,2) ) in (2,3,4)
                                            select 1 Result
                                        else
                                            select 0 Result";
                        cmd.Parameters.AddWithValue("@DealingPK", _dealingPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;

                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public Boolean GenerateBroker(string _userID, DateTime _dateFrom, DateTime _dateTo)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        DateTime _dateTimeNow = DateTime.Now;

                        cmd.CommandText = @"
	                          select A.CounterpartPK,isnull(B.ID,'') Broker,isnull(C.ID,'') Stock,case when A.TrxType = 1 then 'B' else 'S' end Status, D.Name, case when A.TrxType = 1 then A.Volume else 0 end Lot, Case when A.TrxType = 2 then A.Volume else 0 end Nominal,A.DoneAmount NominalVolume,* from Investment A 
							  left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.Status in(1,2)
							  left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in(1,2)
							  left join Fund D on A.FundPK = D.FundPK and D.status in(1,2)
							  where A.InstrumentTypePK = 1 and A.StatusInvestment =  2 
                              and A.StatusDealing <> 3 and A.CounterpartPK <> 0 and A.SelectedDealing = 1 and A.ValueDate between @DateFrom and @DateTo ";
                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.BrokerPath + "Broker" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.BrokerPath + "Broker" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Broker");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<BrokerRpt> rList = new List<BrokerRpt>();
                                    while (dr0.Read())
                                    {
                                        BrokerRpt rSingle = new BrokerRpt();
                                        rSingle.Broker = dr0["Broker"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Broker"]);
                                        rSingle.Stock = dr0["Stock"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Stock"]);
                                        rSingle.Status = dr0["Status"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Status"]);
                                        rSingle.FundName = dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]);
                                        rSingle.Lot = dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]);
                                        rSingle.Nominal = dr0["Nominal"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Nominal"]);
                                        rSingle.NominalVolume = dr0["NominalVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NominalVolume"]);
                                        //rSingle.Lot2 = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                        //rSingle.Share = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                        //rSingle.Nominal2 = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                        rList.Add(rSingle);

                                    }

                                    var GroupByAccountID =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                    int incRowExcel = 0;
                                    foreach (var rsHeader in GroupByAccountID)
                                    {
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = _dateTimeNow;
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        incRowExcel = incRowExcel + 2;
                                        int _RowA = incRowExcel;
                                        int _RowB = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells["A" + _RowA + ":A" + _RowB].Merge = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Broker";
                                        worksheet.Cells["B" + _RowA + ":B" + _RowB].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Stock";
                                        worksheet.Cells["C" + _RowA + ":C" + _RowB].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Status";
                                        worksheet.Cells[incRowExcel, 5].Value = "Nama Fund";
                                        worksheet.Cells["E" + _RowA + ":E" + _RowB].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Price";
                                        worksheet.Cells["H" + _RowA + ":H" + _RowB].Merge = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "Lot";
                                        worksheet.Cells["I" + _RowA + ":I" + _RowB].Merge = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "Share";
                                        worksheet.Cells["J" + _RowA + ":J" + _RowB].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Nominal";
                                        worksheet.Cells["K" + _RowA + ":K" + _RowB].Merge = true;

                                        worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[_RowB, 4].Value = "B/S";
                                        worksheet.Cells[_RowB, 6].Value = "Volume";
                                        worksheet.Cells[_RowB, 7].Value = "Nominal";

                                        incRowExcel++;

                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + _RowA + ":K" + _RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        int _no = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        foreach (var rsDetail in rsHeader)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Broker;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Stock;
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Status;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundName;
                                            if (rsDetail.Status == "B")
                                            {
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Lot;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Nominal;
                                            }

                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.NominalVolume;
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.Price;
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.Lot2;
                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.Share;
                                            worksheet.Cells[incRowExcel, 11].Value = 0;

                                            worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["E" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells["F" + incRowExcel + ":K" + incRowExcel].Style.Numberformat.Format = "#,##0.00";
                                            _endRowDetail = incRowExcel;
                                            incRowExcel++;
                                            _no++;
                                        }
                                        worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Row(incRowExcel).PageBreak = true;

                                    }


                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                    worksheet.Column(1).Width = 5;
                                    worksheet.Column(2).Width = 25;
                                    worksheet.Column(3).Width = 25;
                                    worksheet.Column(4).Width = 10;
                                    worksheet.Column(5).Width = 45;
                                    worksheet.Column(6).Width = 20;
                                    worksheet.Column(7).Width = 20;
                                    worksheet.Column(8).Width = 20;
                                    worksheet.Column(9).Width = 20;
                                    worksheet.Column(10).Width = 20;
                                    worksheet.Column(11).Width = 20;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 BROKER";

                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);



                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();
                                    worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();

                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }

                            }
                        }
                    }
                }

            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public string PTPDepositoAmmend_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                            create table #Text(      
                            [ResultText] [nvarchar](1000)  NULL          
                            )    

                            truncate table #Text  

                            insert into #Text     
                            select ''     
                            insert into #Text

                            select RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SIReference,'')))) + 
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 2.Investment.InterestPercent
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) end  end  -- 3.Investment.MaturityDate
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 4.Investment.Reference						
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 5.Investment.InvestmentNotes
                            from Investment A
                            where 
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2 and isnull(A.SIReference,'') <> ''   

                            select * from #Text


                                        ";

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Deposito.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Deposito.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public string ImportSInvestDeposito(string _fileSource, string _userID)
        {
            string _msg = "";
            try
            {
                DateTime _now = DateTime.Now;

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table ZUPLOAD_SINVEST";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.ZUPLOAD_SINVEST";
                            bulkCopy.WriteToServer(CreateDataTableFromSIDeposito(_fileSource));
                        }

                        // logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"       
                                    update A set A.SIReference = B.SIReferenceID, A.UpdateUsersID = @UsersID, A.UpdateTime = @LastUpdate--, LastUpdate = @LastUpdate
                                    from Investment A
                                    inner join ZUPLOAD_SINVEST B on dbo.AlphaRemoveExceptLetter(A.Reference) = B.ReferenceNo
                                    where A.StatusDealing = 2
                                        ";

                                cmd1.Parameters.AddWithValue("@UsersID", _userID);
                                cmd1.Parameters.AddWithValue("@LastUpdate", _now);

                                cmd1.ExecuteNonQuery();

                            }
                            _msg = "Update SIReferenceID Deposito Done";

                        }

                    }
                }



                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        private DataTable CreateDataTableFromSIDeposito(string _fileSource)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "No";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransactionStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ActionType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InputCancelationDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CBCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CBName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FundCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FundName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementBankCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementBankName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BranchCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BranchName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementBankCashACName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementBankCashACNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CCY";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Principle";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestRatePS";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "MaturityDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestFrequency";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestDayCountConvention";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ShariaDeposit";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "WithdrawalDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AdjustedInterestRatePS";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "WithdrawalPrinciple";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "WithdrawalInterest";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TotalWithdrawalAmount";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RolloverDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RolloverType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NewPrincipleAmount";
            dc.Unique = false;
            dt.Columns.Add(dc);





            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NewInterestratePS";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NewMaturityDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AmountToBeTransferred";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "StatutoryType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ContactPerson";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TelephoneNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FaxNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ReferenceNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ParentReferenceNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Description";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SIReferenceID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SICreationDateTime";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CutOffStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);





            FileInfo excelFile = new FileInfo(_fileSource);
            using (ExcelPackage package = new ExcelPackage(excelFile))
            {
                int i = 2;
                ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                var end = worksheet.Dimension.End;
                while (i <= end.Row)
                {
                    dr = dt.NewRow();

                    if (worksheet.Cells[i, 1].Value == null)
                        dr["No"] = "";
                    else
                        dr["No"] = worksheet.Cells[i, 1].Value.ToString();

                    if (worksheet.Cells[i, 2].Value == null)
                        dr["TransactionStatus"] = "";
                    else
                        dr["TransactionStatus"] = worksheet.Cells[i, 2].Value.ToString();

                    if (worksheet.Cells[i, 3].Value == null)
                        dr["ActionType"] = "";
                    else
                        dr["ActionType"] = worksheet.Cells[i, 3].Value.ToString();

                    if (worksheet.Cells[i, 4].Value == null)
                        dr["InputCancelationDate"] = "";
                    else
                        dr["InputCancelationDate"] = worksheet.Cells[i, 4].Value.ToString();

                    if (worksheet.Cells[i, 5].Value == null)
                        dr["CBCode"] = "";
                    else
                        dr["CBCode"] = worksheet.Cells[i, 5].Value.ToString();

                    if (worksheet.Cells[i, 6].Value == null)
                        dr["CBName"] = "";
                    else
                        dr["CBName"] = worksheet.Cells[i, 6].Value.ToString();

                    if (worksheet.Cells[i, 7].Value == null)
                        dr["FundCode"] = "";
                    else
                        dr["FundCode"] = worksheet.Cells[i, 7].Value.ToString();

                    if (worksheet.Cells[i, 8].Value == null)
                        dr["FundName"] = "";
                    else
                        dr["FundName"] = worksheet.Cells[i, 8].Value.ToString();

                    if (worksheet.Cells[i, 9].Value == null)
                        dr["PlacementBankCode"] = "";
                    else
                        dr["PlacementBankCode"] = worksheet.Cells[i, 9].Value.ToString();

                    if (worksheet.Cells[i, 10].Value == null)
                        dr["PlacementBankName"] = "";
                    else
                        dr["PlacementBankName"] = worksheet.Cells[i, 10].Value.ToString();

                    if (worksheet.Cells[i, 11].Value == null)
                        dr["BranchCode"] = "";
                    else
                        dr["BranchCode"] = worksheet.Cells[i, 11].Value.ToString();

                    if (worksheet.Cells[i, 12].Value == null)
                        dr["BranchName"] = "";
                    else
                        dr["BranchName"] = worksheet.Cells[i, 12].Value.ToString();

                    if (worksheet.Cells[i, 13].Value == null)
                        dr["PlacementBankCashACName"] = 0;
                    else
                        dr["PlacementBankCashACName"] = worksheet.Cells[i, 13].Value.ToString();

                    if (worksheet.Cells[i, 14].Value == null)
                        dr["PlacementBankCashACNo"] = 0;
                    else
                        dr["PlacementBankCashACNo"] = worksheet.Cells[i, 14].Value.ToString();

                    if (worksheet.Cells[i, 15].Value == null)
                        dr["CCY"] = 0;
                    else
                        dr["CCY"] = worksheet.Cells[i, 15].Value.ToString();

                    if (worksheet.Cells[i, 16].Value == null)
                        dr["Principle"] = 0;
                    else
                        dr["Principle"] = worksheet.Cells[i, 16].Value.ToString();

                    if (worksheet.Cells[i, 17].Value == null)
                        dr["InterestRatePS"] = 0;
                    else
                        dr["InterestRatePS"] = worksheet.Cells[i, 17].Value.ToString();

                    if (worksheet.Cells[i, 18].Value == null)
                        dr["PlacementDate"] = "";
                    else
                        dr["PlacementDate"] = worksheet.Cells[i, 18].Value.ToString();

                    if (worksheet.Cells[i, 19].Value == null)
                        dr["MaturityDate"] = "";
                    else
                        dr["MaturityDate"] = worksheet.Cells[i, 19].Value.ToString();

                    if (worksheet.Cells[i, 20].Value == null)
                        dr["InterestFrequency"] = 0;
                    else
                        dr["InterestFrequency"] = worksheet.Cells[i, 20].Value.ToString();

                    if (worksheet.Cells[i, 21].Value == null)
                        dr["InterestDayCountConvention"] = 0;
                    else
                        dr["InterestDayCountConvention"] = worksheet.Cells[i, 21].Value.ToString();

                    if (worksheet.Cells[i, 22].Value == null)
                        dr["InterestType"] = 0;
                    else
                        dr["InterestType"] = worksheet.Cells[i, 22].Value.ToString();

                    if (worksheet.Cells[i, 23].Value == null)
                        dr["ShariaDeposit"] = 0;
                    else
                        dr["ShariaDeposit"] = worksheet.Cells[i, 23].Value.ToString();

                    if (worksheet.Cells[i, 24].Value == null)
                        dr["WithdrawalDate"] = "19000101";
                    else
                        dr["WithdrawalDate"] = worksheet.Cells[i, 24].Value.ToString();

                    if (worksheet.Cells[i, 25].Value == null)
                        dr["AdjustedInterestRatePS"] = 0;
                    else
                        dr["AdjustedInterestRatePS"] = worksheet.Cells[i, 25].Value.ToString();

                    if (worksheet.Cells[i, 26].Value == null)
                        dr["WithdrawalPrinciple"] = 0;
                    else
                        dr["WithdrawalPrinciple"] = worksheet.Cells[i, 26].Value.ToString();

                    if (worksheet.Cells[i, 27].Value == null)
                        dr["WithdrawalInterest"] = 0;
                    else
                        dr["WithdrawalInterest"] = worksheet.Cells[i, 27].Value.ToString();

                    if (worksheet.Cells[i, 28].Value == null)
                        dr["TotalWithdrawalAmount"] = 0;
                    else
                        dr["TotalWithdrawalAmount"] = worksheet.Cells[i, 28].Value.ToString();

                    if (worksheet.Cells[i, 29].Value == null)
                        dr["RolloverDate"] = 0;
                    else
                        dr["RolloverDate"] = worksheet.Cells[i, 29].Value.ToString();

                    if (worksheet.Cells[i, 30].Value == null)
                        dr["RolloverType"] = 0;
                    else
                        dr["RolloverType"] = worksheet.Cells[i, 30].Value.ToString();

                    if (worksheet.Cells[i, 31].Value == null)
                        dr["NewPrincipleAmount"] = 0;
                    else
                        dr["NewPrincipleAmount"] = worksheet.Cells[i, 31].Value.ToString();

                    if (worksheet.Cells[i, 32].Value == null)
                        dr["NewInterestRatePS"] = 0;
                    else
                        dr["NewInterestRatePS"] = worksheet.Cells[i, 32].Value.ToString();

                    if (worksheet.Cells[i, 33].Value == null)
                        dr["NewMaturityDate"] = 0;
                    else
                        dr["NewMaturityDate"] = worksheet.Cells[i, 33].Value.ToString();

                    if (worksheet.Cells[i, 34].Value == null)
                        dr["AmountToBeTransferred"] = 0;
                    else
                        dr["AmountToBeTransferred"] = worksheet.Cells[i, 34].Value.ToString();

                    if (worksheet.Cells[i, 35].Value == null)
                        dr["StatutoryType"] = 0;
                    else
                        dr["StatutoryType"] = worksheet.Cells[i, 35].Value.ToString();

                    if (worksheet.Cells[i, 36].Value == null)
                        dr["ContactPerson"] = 0;
                    else
                        dr["ContactPerson"] = worksheet.Cells[i, 36].Value.ToString();

                    if (worksheet.Cells[i, 37].Value == null)
                        dr["TelephoneNo"] = 0;
                    else
                        dr["TelephoneNo"] = worksheet.Cells[i, 37].Value.ToString();

                    if (worksheet.Cells[i, 38].Value == null)
                        dr["FaxNo"] = 0;
                    else
                        dr["FaxNo"] = worksheet.Cells[i, 38].Value.ToString();

                    if (worksheet.Cells[i, 39].Value == null)
                        dr["ReferenceNo"] = 0;
                    else
                        dr["ReferenceNo"] = worksheet.Cells[i, 39].Value.ToString();

                    if (worksheet.Cells[i, 40].Value == null)
                        dr["ParentReferenceNo"] = 0;
                    else
                        dr["ParentReferenceNo"] = worksheet.Cells[i, 40].Value.ToString();

                    if (worksheet.Cells[i, 41].Value == null)
                        dr["Description"] = 0;
                    else
                        dr["Description"] = worksheet.Cells[i, 41].Value.ToString();

                    if (worksheet.Cells[i, 42].Value == null)
                        dr["SIReferenceID"] = 0;
                    else
                        dr["SIReferenceID"] = worksheet.Cells[i, 42].Value.ToString();

                    if (worksheet.Cells[i, 43].Value == null)
                        dr["SICreationDateTime"] = 0;
                    else
                        dr["SICreationDateTime"] = worksheet.Cells[i, 43].Value.ToString();

                    if (worksheet.Cells[i, 44].Value == null)
                        dr["CutOffStatus"] = 0;
                    else
                        dr["CutOffStatus"] = worksheet.Cells[i, 44].Value.ToString();


                    //dr["ClosePriceValue"] = worksheet.Cells[i, 2].Value.Equals(null) == true ? "" : worksheet.Cells[i, 2].Value.ToString();

                    if (dr["No"].Equals(null) != true ||
                        dr["TransactionStatus"].Equals(null) != true ||
                        dr["ActionType"].Equals(null) != true ||
                        dr["InputCancelationDate"].Equals(null) != true ||
                        dr["CBCode"].Equals(null) != true ||
                        dr["CBName"].Equals(null) != true ||
                        dr["FundCode"].Equals(null) != true ||
                        dr["FundName"].Equals(null) != true ||
                        dr["PlacementBankCode"].Equals(null) != true ||
                        dr["PlacementBankName"].Equals(null) != true ||
                        dr["BranchCode"].Equals(null) != true ||
                        dr["BranchName"].Equals(null) != true ||
                        dr["PlacementBankCashACName"].Equals(null) != true ||
                        dr["PlacementBankCashACNo"].Equals(null) != true ||

                        dr["CCY"].Equals(null) != true ||
                        dr["Principle"].Equals(null) != true ||
                        dr["InterestRatePS"].Equals(null) != true ||
                        dr["PlacementDate"].Equals(null) != true ||
                        dr["MaturityDate"].Equals(null) != true ||
                        dr["InterestFrequency"].Equals(null) != true ||
                        dr["InterestDayCountConvention"].Equals(null) != true ||
                        dr["InterestType"].Equals(null) != true ||
                        dr["ShariaDeposit"].Equals(null) != true ||
                        dr["WithdrawalDate"].Equals(null) != true ||
                        dr["AdjustedInterestRatePS"].Equals(null) != true ||
                        dr["WithdrawalPrinciple"].Equals(null) != true ||
                        dr["WithdrawalInterest"].Equals(null) != true ||
                        dr["TotalWithdrawalAmount"].Equals(null) != true ||
                        dr["RolloverDate"].Equals(null) != true ||

                        dr["RolloverType"].Equals(null) != true ||
                        dr["NewPrincipleAmount"].Equals(null) != true ||
                        dr["NewInterestRatePS"].Equals(null) != true ||
                        dr["NewMaturityDate"].Equals(null) != true ||
                        dr["AmountToBeTransferred"].Equals(null) != true ||
                        dr["StatutoryType"].Equals(null) != true ||
                        dr["ContactPerson"].Equals(null) != true ||
                        dr["TelephoneNo"].Equals(null) != true ||
                        dr["FaxNo"].Equals(null) != true ||
                        dr["ReferenceNo"].Equals(null) != true ||
                        dr["ParentReferenceNo"].Equals(null) != true ||
                        dr["Description"].Equals(null) != true ||
                        dr["SIReferenceID"].Equals(null) != true ||
                        dr["SICreationDateTime"].Equals(null) != true ||
                        dr["CutOffStatus"].Equals(null) != true) { dt.Rows.Add(dr); }
                    i++;

                }
            }

            return dt;
        }


        public string Investment_GetReferenceForDepoAmmend(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OMSDepositoInstrumentDetailPerFundPerBank> L_model = new List<OMSDepositoInstrumentDetailPerFundPerBank>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        declare @count int
                        declare @NewReference nvarchar(30)

                        select @count = (LEN(@Reference) - LEN(REPLACE(@Reference,'/','')))/COALESCE(NULLIF(LEN('/'), 0), 1)

                        if @count = 2
	                        set @NewReference = @Reference + '/N1'
                        else
	                        set @NewReference = SUBSTRING(@Reference,0,LEN(@Reference) -  CHARINDEX('N',REVERSE(@Reference)) + 2) +  cast((cast(SUBSTRING( @Reference , LEN(@Reference) -  CHARINDEX('N',REVERSE(@Reference)) + 2  , LEN(@Reference)  ) as int) + 1) as nvarchar)

                        select @NewReference Reference
                        ";
                        cmd.Parameters.AddWithValue("@Reference", _investment.Reference);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return dr["Reference"].ToString();
                            }
                            return _investment.Reference;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        private Investment setInvestmentBySummary(SqlDataReader dr)
        {
            Investment M_Investment = new Investment();
            M_Investment.InstrumentID = dr["InstrumentID"].ToString();
            M_Investment.TrxTypeID = dr["TrxTypeID"].ToString();
            M_Investment.Lot = dr["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Lot"]);
            M_Investment.ValueDate = dr["ValueDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["ValueDate"]);
            return M_Investment;
        }

        public List<Investment> Get_DataDealingByDateFromToBySummaryEquity(DateTime _dateFrom, DateTime _dateTo)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" 
                            select TP.ValueDate,I.ID InstrumentID,TP.TrxTypeID, sum(DoneLot) Lot from Investment TP left join        
                            Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join        
                            Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2 
                            where  TP.ValueDate  between @DateFrom and @DateTo and TP.InstrumentTypePK in ( 1,4,16 ) 
                            and TP.StatusInvestment = 2 and TP.StatusDealing in (1,2) --and (TP.StatusSettlement = 0) 
							group by TP.InstrumentPK,I.ID,TP.TrxTypeID,TP.ValueDate
							order by I.ID
                            ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestmentBySummary(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        private InvestmentPreviewGrouping setPreviewGrouping(SqlDataReader dr)
        {
            InvestmentPreviewGrouping M_Investment = new InvestmentPreviewGrouping();
            M_Investment.BulkOrderEquityPK = dr["BulkOrderEquityPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BulkOrderEquityPK"]);
            M_Investment.ValueDate = dr["ValueDate"].Equals(DBNull.Value) == true ? "" : dr["ValueDate"].ToString();
            M_Investment.InstrumentID = dr["InstrumentID"].Equals(DBNull.Value) == true ? "" : dr["InstrumentID"].ToString();
            M_Investment.DoneVolume = dr["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneVolume"]);
            M_Investment.TotalVolume = dr["TotalVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalVolume"]);
            M_Investment.AvgPrice = dr["AvgPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AvgPrice"]);
            M_Investment.TrxTypeID = dr["TrxTypeID"].Equals(DBNull.Value) == true ? "" : dr["TrxTypeID"].ToString();
            M_Investment.CounterpartID = dr["CounterpartID"].Equals(DBNull.Value) == true ? "" : dr["CounterpartID"].ToString();
            M_Investment.SettlementModeID = dr["SettlementModeID"].Equals(DBNull.Value) == true ? "" : dr["SettlementModeID"].ToString();
            M_Investment.BoardTypeID = dr["BoardTypeID"].Equals(DBNull.Value) == true ? "" : dr["BoardTypeID"].ToString();
            M_Investment.StatusDesc = dr["StatusDesc"].Equals(DBNull.Value) == true ? "" : dr["StatusDesc"].ToString();
            return M_Investment;
        }

        public void get_PreviewGrouping(string _userID, InvestmentPreviewGrouping _investmentListing)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _now = DateTime.Now;
                    List<InvestmentPreviewGrouping> L_Investment = new List<InvestmentPreviewGrouping>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramDealingPK = "";
                        string _paramDealing = "";

                        if (!_host.findString(_investmentListing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investmentListing.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investmentListing.stringInvestmentFrom + ") ";
                            _paramDealing = " And B.DealingPK in (" + _investmentListing.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = "";
                            _paramDealing = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" 
                        declare @maxPK int

                        select @maxPK = max(isnull(BulkOrderEquityPK,0)) from BulkOrderEquity
                        set @maxPK = isnull(@MaxPK,0)

                        insert into BulkOrderEquity
                        select ROW_NUMBER() over (order by ValueDate) + @maxPK BulkOrderEquityPK,A.ValueDate,B.ID InstrumentID,A.InstrumentPK, 0 DoneVolume,sum(A.DoneVolume) TotalVolume,0 AvgPrice,0,0,0,TrxTypeID,2,0,0,@UserID,@LastUpdate from Investment A 
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        where A.ValueDate = @datefrom and investmentpk not in (
	                        select B.InvestmentPK from BulkOrderEquity A 
	                        left join BulkOrderEquityDetail B on A.BulkOrderEquityPK = B.BulkOrderEquityPK
	                        where status = 2
                        )
                        and A.statusinvestment = 2 and A.InstrumentTypePK in (1,4,6) and A.StatusDealing = 1 " + _paramDealingPK + @"
                        group by ValueDate,B.ID,TrxTypeID,A.InstrumentPK


                        insert into BulkOrderEquityDetail
                        select B.BulkOrderEquityPK, ROW_NUMBER() over (order by A.InvestmentPK),A.InvestmentPK,0 from Investment A
                        left join BulkOrderEquity B on A.InstrumentPK = B.InstrumentPK  and A.ValueDate = B.ValueDate and A.TrxTypeID = B.TrxTypeID
                        where A.ValueDate = @datefrom and A.InvestmentPK not in (
	                        select isnull(B.InvestmentPK,0) from BulkOrderEquity A 
	                        left join BulkOrderEquityDetail B on A.BulkOrderEquityPK = B.BulkOrderEquityPK
	                        where status = 2 
                        ) and B.BulkOrderEquityPK not in (
							 (select BulkOrderEquityPK from BulkOrderEquityDetail)
						) 
						and A.StatusInvestment = 2 and A.StatusDealing = 1 " + _paramDealingPK
                        ;

                        cmd.Parameters.AddWithValue("@UserID", _userID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _now);
                        cmd.Parameters.AddWithValue("@DateFrom", _investmentListing.ParamDateFrom);
                        cmd.ExecuteReader();
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string DeleteBulkOrderEquity(int _BulkOrderEquityPK)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OMSDepositoInstrumentDetailPerFundPerBank> L_model = new List<OMSDepositoInstrumentDetailPerFundPerBank>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        update BulkOrderEquity set status = 3, lastupdate = @LastUpdate where BulkOrderEquitypk = @BulkOrderEquitypk

                        ";
                        cmd.Parameters.AddWithValue("@BulkOrderEquityPK", _BulkOrderEquityPK);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteReader();

                        return "Delete success";
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<InvestmentPreviewGrouping> GetBulkOrderEquity(DateTime _dateFrom)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _now = DateTime.Now;
                    List<InvestmentPreviewGrouping> L_Investment = new List<InvestmentPreviewGrouping>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" 
                        
                        select isnull(B.ID,'') CounterpartID,isnull(C.DescOne,'') SettlementModeID,isnull(D.DescOne,'') BoardTypeID,
                        case when A.StatusSplit = 0 and A.StatusMatch = 0 then 'READY TO SPLIT' when A.StatusSplit = 1 and A.StatusMatch = 0 then 'READY TO MATCH' when A.StatusMatch = 1 then 'MATCH' else '' end StatusDesc,* from BulkOrderEquity A
                        left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
                        left join MasterValue C on A.SettlementMode = C.Code and C.ID = 'SettlementMode' and C.Status = 2
                        left join MasterValue D on A.BoardType = D.Code and D.ID = 'BoardType' and D.Status = 2
                        where A.ValueDate = @datefrom and A.status = 2 
                        order by TrxTypeID

                        ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setPreviewGrouping(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Validate_UpdateBrokerBySelectedDataBulkEquity(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And InvestmentPK in ( select InvestmentPK from BulkOrderEquityDetail where BulkOrderEquityPK in (" + _investment.stringInvestmentFrom + "))";
                        }
                        else
                        {
                            _paramDealingPK = " And InvestmentPK in (0) ";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        if Exists
                        (select * From Investment where  OrderStatus in ('M') and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramDealingPK + @" )   
                        BEGIN 
                        Select 2 Result 
                        END 
                        ELSE IF  Exists
                        (select * From Investment where StatusDealing = 2 and StatusSettlement <> 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramDealingPK + @" )   
                        BEGIN 
                        Select 2 Result 
                        END 
                        ELSE IF  Exists
                        (select * From Investment where  OrderStatus in ('R') and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramDealingPK + @" )   
                        BEGIN 
                        Select 3 Result 
                        END 
                        ELSE IF  Exists
                        (select * From Investment where StatusDealing = 3 and ValueDate between @ValueDateFrom and @ValueDateTo " + _paramDealingPK + @" )   
                        BEGIN 
                        Select 3 Result 
                        END 
                        ELSE 
                        BEGIN     
                        Select 0 Result 
                        END     ";



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@ValueDateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@ValueDateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public FundExposure Validate_CounterpartPercentageBulkEquity(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    string _paramDealingPK = "";

                    if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                    {
                        _paramDealingPK = " And A.InvestmentPK in ( select InvestmentPK from BulkOrderEquityDetail where BulkOrderEquityPK in (" + _investment.stringInvestmentFrom + "))";
                    }
                    else
                    {
                        _paramDealingPK = " And A.DealingPK in (0) ";
                    }
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;

                        cmd.CommandText = @"
                        Declare @PositionForExp TABLE
                        (
	                        ID NVARCHAR(200),
	                        Name NVARCHAR(200),
	                        TotalBrokerFee NUMERIC(22,4),
	                        AllBrokerFee numeric(22,4),
	                        Exposure NUMERIC(18,4)
                        )

                        Declare @PeriodPK int

                        select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

                        DECLARE @TotalInvestmentAllFundForCounterpartExposure numeric(26,6)
                        DECLARE @BrokerFeeSelected numeric(22,2)

                        select @TotalInvestmentAllFundForCounterpartExposure = isnull(Sum(A.DoneAmount),0)
                        FROM dbo.Investment A
                        LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
                        LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
                        WHERE  ValueDate <= @DateFrom  and A.PeriodPK = @PeriodPK and StatusSettlement = 2
                        AND C.GroupType in (1,2)

                        select @BrokerFeeSelected = isnull(Sum(A.DoneAmount),0) from Investment A
                        left join CounterpartCommission B on  B.CounterpartPK = @CounterpartPK  and B.Status = 2
                        where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and InstrumentTypePK = @InstrumentTypePK
                        and valueDate between @DateFrom and @DateTo " + _paramDealingPK + @"


                        INSERT INTO @PositionForExp
	                                (
				                        ID,
				                        Name,
				                        TotalBrokerFee,
				                        AllBrokerFee,
				                        Exposure
	                                )
                        SELECT ISNULL(G.ID,''),ISNULL(G.Name,'')
                        ,SUM(ISNULL(A.DoneAmount,0)) MarketValue
                        ,@TotalInvestmentAllFundForCounterpartExposure
                        , (SUM(ISNULL(A.DoneAmount,0)) + @BrokerFeeSelected) /  (@TotalInvestmentAllFundForCounterpartExposure + @BrokerFeeSelected) * 100 ExposurePercent
                        FROM dbo.Investment A
                        LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
                        LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
                        LEFT JOIN dbo.MasterValue E ON E.Code = 20 AND E.ID = 'ExposureType' AND E.status IN (1,2)
                        LEFT JOIN Counterpart G ON A.CounterpartPK = G.CounterpartPK AND G.status IN (1,2)
                        WHERE  ValueDate <= @DateFrom and PeriodPK = @PeriodPK and StatusSettlement = 2
                        AND C.GroupType in (1,2) and A.CounterpartPK = @CounterpartPK

                        GROUP BY G.ID,G.Name

                        select Name CounterpartName,case when Exposure >= 30 then 1 else 0 end ValidateAmount, Exposure ExposurePercent from @PositionForExp A
                         order by Exposure desc ";

                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new FundExposure()
                                {
                                    CounterpartName = dr["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CounterpartName"]),
                                    ValidateAmount = dr["ValidateAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["ValidateAmount"]),
                                    ExposurePercent = dr["ExposurePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["ExposurePercent"]),


                                };
                            }
                            else
                            {
                                return new FundExposure()
                                {
                                    CounterpartName = "",
                                    ValidateAmount = 0,
                                    ExposurePercent = 0,

                                };
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_UpdateCounterpartBySelectedBulkEquity(Investment _investment)
        {
            try
            {
                string _paramDealing = "";
                string _paramBulkOrderEquityPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramDealing = " And InvestmentPK in ( select InvestmentPK from BulkOrderEquityDetail where BulkOrderEquityPK in (" + _investment.stringInvestmentFrom + "))";
                    _paramBulkOrderEquityPK = " BulkOrderEquityPK in (" + _investment.stringInvestmentFrom + ")";
                }
                else
                {
                    _paramDealing = " And DealingPK in (0) ";
                    _paramBulkOrderEquityPK = " BulkOrderEquityPK in (0)";
                }
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)";
                        }
                        else
                        {
                            _paramInstrumentType = "InstrumentTypePK = @InstrumentTypePK";
                        }

                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType  ";
                        }


                        if (_investment.InstrumentTypePK == 1)
                        {
                            // RVP DAN RFOP hanya untuk BUY
                            if (_investment.SettlementMode == 1 || _investment.SettlementMode == 3)
                            {
                                cmd.CommandText = @"
                                update BulkOrderEquity set CounterpartPK = @CounterpartPK,BoardType=@BoardType, SettlementMode=@SettlementMode, lastupdate = @UpdateDealingTime 
                                where  " + _paramBulkOrderEquityPK + @" and TrxTypeID = 'BUY' 

                                Update Investment set CounterpartPK = @CounterpartPK,BoardType=@BoardType, SettlementMode=@SettlementMode ,OrderStatus = 'O', ApprovedDealingID = @UpdateDealingID, ApprovedDealingTime = @UpdateDealingTime 
                                where " + _paramInstrumentType + _paramDealing + " and ValueDate between @DateFrom and @DateTo and statusDealing  = 1 and TrxType = 1 " + _paramFund +
                                "--Update Investment set selectedDealing  = 0";
                            }
                            else
                            {
                                cmd.CommandText = @"
                                update BulkOrderEquity set CounterpartPK = @CounterpartPK,BoardType=@BoardType, SettlementMode=@SettlementMode, lastupdate = @UpdateDealingTime 
                                where " + _paramBulkOrderEquityPK + @" and TrxTypeID = 'SELL' 

                                Update Investment set CounterpartPK = @CounterpartPK,BoardType=@BoardType, SettlementMode=@SettlementMode ,OrderStatus = 'O', ApprovedDealingID = @UpdateDealingID, ApprovedDealingTime = @UpdateDealingTime 
                                where  " + _paramInstrumentType + _paramDealing + " and ValueDate between @DateFrom and @DateTo and statusDealing  = 1 and TrxType = 2  " + _paramFund +
                                "--Update Investment set selectedDealing  = 0";
                            }

                            cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);


                        }
                        else
                        {
                            cmd.CommandText = @"Update Investment set CounterpartPK = @CounterpartPK, SettlementMode=@SettlementMode ,OrderStatus = 'O', ApprovedDealingID = @UpdateDealingID, ApprovedDealingTime = @UpdateDealingTime 
                            where " + _paramInstrumentType + _paramDealing + " and ValueDate between @DateFrom and @DateTo and statusDealing  = 1 " + _paramFund +
                            "--Update Investment set selectedDealing  = 0";
                        }

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);

                        cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                        cmd.Parameters.AddWithValue("@UpdateDealingID", _investment.UpdateDealingID);
                        cmd.Parameters.AddWithValue("@UpdateDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public List<InvestmentPreviewGrouping> GetSplitBulkOrderEquity(int _BulkOrderEquityPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _now = DateTime.Now;
                    List<InvestmentPreviewGrouping> L_Investment = new List<InvestmentPreviewGrouping>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" 
                        
                        select * from BulkEquitySplit where BulkOrderEquityPK = @BulkOrderEquityPK

                        ";
                        cmd.Parameters.AddWithValue("@BulkOrderEquityPK", _BulkOrderEquityPK);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setSplitOrderBulkEquity(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        private InvestmentPreviewGrouping setSplitOrderBulkEquity(SqlDataReader dr)
        {
            InvestmentPreviewGrouping M_Investment = new InvestmentPreviewGrouping();
            M_Investment.BulkOrderEquityPK = dr["BulkOrderEquityPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BulkOrderEquityPK"]);
            M_Investment.AutoNo = dr["AutoNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AutoNo"]);
            M_Investment.Volume = dr["Volume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Volume"]);
            M_Investment.Price = dr["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Price"]);
            return M_Investment;
        }

        public string DeleteSplitBulkOrderEquity(int _BulkOrderEquityPK, int _AutoNo)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OMSDepositoInstrumentDetailPerFundPerBank> L_model = new List<OMSDepositoInstrumentDetailPerFundPerBank>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        delete BulkEquitySplit where BulkOrderEquityPK = @BulkOrderEquityPK and AutoNo = @AutoNo

                        declare @DoneVolume numeric(32,4)
                        declare @DonePrice numeric(32,8)
                        declare @StatusSplit int

                        select @DoneVolume = sum(Volume), @DonePrice = sum(Volume*Price) from BulkEquitySplit
                        where BulkOrderEquityPK = @BulkOrderEquityPK

                        if exists ( select * from BulkEquitySplit where BulkOrderEquityPK = @BulkOrderEquityPK )
                            set @StatusSplit = 1
                        else 
                            set @StatusSplit = 0

                        update BulkOrderEquity set DoneVolume = isnull(@DoneVolume,0),AvgPrice = case when @DoneVolume is null or @DonePrice is null then 0 else @DonePrice/@DoneVolume end, StatusSplit = @StatusSplit where BulkOrderEquityPK = @BulkOrderEquityPK

                        ";
                        cmd.Parameters.AddWithValue("@BulkOrderEquityPK", _BulkOrderEquityPK);
                        cmd.Parameters.AddWithValue("@AutoNo", _AutoNo);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteReader();

                        return "Delete success";
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string AddSplitBulkOrderEquity(InvestmentPreviewGrouping _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;

                        cmd.CommandText = @"
                            declare @AutoNo int
                            select @AutoNo = max(Autono) from BulkEquitySplit where BulkOrderEquityPK = @BulkOrderEquityPK
                            set @AutoNo = isnull(@AutoNo,0) + 1
            
                            insert into BulkEquitySplit
                            select @BulkOrderEquityPK,@AutoNo,@Price,@Volume

                            declare @DoneVolume numeric(32,4)
                            declare @DonePrice numeric(32,8)
                            declare @StatusSplit int

                            select @DoneVolume = sum(Volume), @DonePrice = sum(Volume*Price) from BulkEquitySplit
                            where BulkOrderEquityPK = @BulkOrderEquityPK

                            if exists ( select * from BulkEquitySplit where BulkOrderEquityPK = @BulkOrderEquityPK )
                                set @StatusSplit = 1
                            else 
                                set @StatusSplit = 0

                            update BulkOrderEquity set DoneVolume = isnull(@DoneVolume,0),AvgPrice = case when @DoneVolume is null or @DonePrice is null then 0 else @DonePrice/@DoneVolume end, StatusSplit = @StatusSplit where BulkOrderEquityPK = @BulkOrderEquityPK
                        ";

                        cmd.Parameters.AddWithValue("@BulkOrderEquityPK", _investment.BulkOrderEquityPK);
                        cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                        cmd.Parameters.AddWithValue("@Price", _investment.Price);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteReader();

                        return "Insert Split success";
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public string ValidateSplitVolumeByBulkOrderEquity(InvestmentPreviewGrouping _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                string _msg;
                _msg = "";
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;

                        cmd.CommandText = @"
                            declare @TotalDoneVolume numeric(32,8)
                            declare @TotalSplitVolume numeric(32,8)

                            select @TotalDoneVolume = TotalVolume from BulkOrderEquity where BulkOrderEquityPK = @BulkOrderEquityPK

                            select @TotalSplitVolume = sum(Volume) from BulkEquitySplit where BulkOrderEquityPK = @BulkOrderEquityPK
                            set @TotalSplitVolume = isnull(@TotalSplitVolume,0)

                            if ((@TotalSplitVolume + @Volume) > @TotalDoneVolume )
                                select 'Split failed, split volume > order Volume' Result
                            else 
                                select '' Result
                        ";

                        cmd.Parameters.AddWithValue("@BulkOrderEquityPK", _investment.BulkOrderEquityPK);
                        cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                        cmd.Parameters.AddWithValue("@Price", _investment.Price);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                _msg = dr["Result"].ToString();
                            }
                        }

                    }
                    return _msg;
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public List<InvestmentPreviewGrouping> GetDataForMatchBulkEquity(int _BulkOrderEquityPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _now = DateTime.Now;
                    List<InvestmentPreviewGrouping> L_Investment = new List<InvestmentPreviewGrouping>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" 
                        
                        select A.BulkOrderEquityPK,C.InvestmentPK,C.DealingPK, isnull(D.ID,'') FundID,C.DoneVolume TotalVolume, A.AvgPrice,C.DoneVolume,C.DoneVolume * A.AvgPrice DoneAmount from BulkOrderEquity A
                        inner join BulkOrderEquityDetail B on A.BulkOrderEquityPK = B.BulkOrderEquityPK
                        inner join Investment C on B.InvestmentPK = C.InvestmentPK and C.StatusInvestment = 2 and C.StatusDealing in (1,2)
                        left join Fund D on C.FundPK = D.FundPK and D.Status = 2
                        where A.Status = 2 and A.BulkOrderEquityPK = @BulkOrderEquityPK

                        ";
                        cmd.Parameters.AddWithValue("@BulkOrderEquityPK", _BulkOrderEquityPK);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setMatchBulkEquity(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        private InvestmentPreviewGrouping setMatchBulkEquity(SqlDataReader dr)
        {
            InvestmentPreviewGrouping M_Investment = new InvestmentPreviewGrouping();
            M_Investment.BulkOrderEquityPK = dr["BulkOrderEquityPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BulkOrderEquityPK"]);
            M_Investment.InvestmentPK = dr["InvestmentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentPK"]);
            M_Investment.DealingPK = dr["DealingPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["DealingPK"]);
            M_Investment.FundID = dr["FundID"].Equals(DBNull.Value) == true ? "" : dr["FundID"].ToString();
            M_Investment.TotalVolume = dr["TotalVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalVolume"]);
            M_Investment.AvgPrice = dr["AvgPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AvgPrice"]);
            M_Investment.DoneVolume = dr["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneVolume"]);
            M_Investment.DoneAmount = dr["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneAmount"]);
            return M_Investment;
        }

        public string Investment_UpdateMatchByBulkOrderEquity(string _UsersID, List<InvestmentPreviewGrouping> _InvestmentAcq)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    foreach (var _obj in _InvestmentAcq)
                    {
                        InvestmentPreviewGrouping _m = new InvestmentPreviewGrouping();
                        _m.BulkOrderEquityPK = _obj.BulkOrderEquityPK;
                        _m.InvestmentPK = _obj.InvestmentPK;
                        _m.AvgPrice = _obj.AvgPrice;
                        _m.DoneVolume = _obj.DoneVolume;
                        _m.DoneAmount = _obj.DoneAmount;

                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"
                                                
                                                update BulkOrderEquityDetail set DoneVolume = @DoneVolume where BulkOrderEquityPK = @BulkOrderEquityPK and InvestmentPK = @InvestmentPK
                                                update BulkOrderEquity set StatusMatch = 1,DoneVolume = (select sum(DoneVolume) from BulkOrderEquityDetail where BulkOrderEquityPK = @BulkOrderEquityPK) where BulkOrderEquityPK = @BulkOrderEquityPK and status = 2
                                                update Investment set DoneVolume = @DoneVolume, DonePrice = @AvgPrice, DoneAmount = @DoneAmount, DoneLot = @DoneVolume / 100 where InvestmentPK = @InvestmentPK and StatusDealing = 1 and StatusInvestment = 2

                                                declare @DealingPK int
                                                declare @HistoryPK INT
                                                DECLARE @ValueDate DATETIME
                                                declare @InstrumentTypePK int
	                                            declare @TrxType int

                                                declare @Comm numeric (19,2)
                                                declare @Levy numeric (19,2)
                                                declare @KPEI numeric (19,2)
                                                declare @VAT numeric (19,2)
                                                declare @WHT numeric (19,2)
                                                declare @OTC numeric (19,2)
                                                declare @TaxInterest numeric (19,2)
                                                declare @TaxGain numeric (19,2)
                                                declare @TaxSell numeric (19,2)
                                                declare @TotalAmount numeric (19,2)

                                                declare @FundCashRefPK int 
                                                declare @SettlementPK int
                                                declare @CommissionPercent numeric (19,12),@RoundingCommission int,@DecimalCommission int,@VATPercent numeric (22,4),@RoundingVAT int,@DecimalVAT int,@LevyPercent numeric (22,4),@RoundingLevy int,@DecimalLevy int,
                                                @KPEIPercent numeric (22,4),@RoundingKPEI int,@DecimalKPEI int,@WHTPercent numeric (22,4),@RoundingWHT int,@DecimalWHT int,@OTCPercent numeric (22,4),@RoundingOTC int,@DecimalOTC int,
                                                @IncomeTaxInterestPercent numeric (22,4),@RoundingTaxInterest int,@DecimalTaxInterest int,@IncomeTaxGainPercent numeric (22,4),@RoundingTaxGain int,@DecimalTaxGain int,@IncomeTaxSellPercent numeric (22,4),@RoundingTaxSell int,@DecimalTaxSell int,@BoardType int,@FundPK int,@CounterpartPK int


	                                            DECLARE @CounterpartCommissionTemp TABLE
                                                (
			                                            [CounterpartCommissionPK] [int] NOT NULL,
			                                            [HistoryPK] [int] NOT NULL,
			                                            [Status] [int] NOT NULL,
			                                            [Notes] [nvarchar](1000) NULL,
			                                            [Date] [datetime] NULL,
			                                            [CounterpartPK] [int] NULL,
			                                            [BitIncludeTax] [bit] NOT NULL,
			                                            [BoardType] [int] NULL,
			                                            [CommissionPercent] [numeric](19, 8) NULL,
			                                            [LevyPercent] [numeric](19, 8) NULL,
			                                            [KPEIPercent] [numeric](19, 8) NULL,
			                                            [VATPercent] [numeric](19, 8) NULL,
			                                            [WHTPercent] [numeric](19, 8) NULL,
			                                            [OTCPercent] [numeric](19, 8) NULL,
			                                            [IncomeTaxSellPercent] [numeric](19, 8) NULL,
			                                            [IncomeTaxInterestPercent] [numeric](19, 8) NULL,
			                                            [IncomeTaxGainPercent] [numeric](19, 8) NULL,
			                                            [EntryUsersID] [nvarchar](70) NULL,
			                                            [EntryTime] [datetime] NULL,
			                                            [UpdateUsersID] [nvarchar](70) NULL,
			                                            [UpdateTime] [datetime] NULL,
			                                            [ApprovedUsersID] [nvarchar](70) NULL,
			                                            [ApprovedTime] [datetime] NULL,
			                                            [VoidUsersID] [nvarchar](70) NULL,
			                                            [VoidTime] [datetime] NULL,
			                                            [DBUserID] [nvarchar](50) NULL,
			                                            [DBTerminalID] [nvarchar](50) NULL,
			                                            [LastUpdate] [datetime] NULL,
			                                            [LastUpdateDB] [datetime] NULL,
			                                            [FundPK] [int] NOT NULL,
			                                            [RoundingCommission] [int] NULL,
			                                            [DecimalCommission] [int] NULL,
			                                            [RoundingLevy] [int] NULL,
			                                            [DecimalLevy] [int] NULL,
			                                            [RoundingKPEI] [int] NULL,
			                                            [DecimalKPEI] [int] NULL,
			                                            [RoundingVAT] [int] NULL,
			                                            [DecimalVAT] [int] NULL,
			                                            [RoundingWHT] [int] NULL,
			                                            [DecimalWHT] [int] NULL,
			                                            [RoundingOTC] [int] NULL,
			                                            [DecimalOTC] [int] NULL,
			                                            [RoundingTaxSell] [int] NULL,
			                                            [DecimalTaxSell] [int] NULL,
			                                            [RoundingTaxInterest] [int] NULL,
			                                            [DecimalTaxInterest] [int] NULL,
			                                            [RoundingTaxGain] [int] NULL,
			                                            [DecimalTaxGain] [int] NULL
	                                            )

	
                            
                                                DECLARE A CURSOR FOR 
	
                                                select InstrumentTypePK,TrxType,FundPK,BoardType,CounterpartPK,ValueDate from Investment 
                                                where statusInvestment = 2 
                                                and statusDealing = 1 and OrderStatus in ('O','P') and InvestmentPK = @InvestmentPK

                                                Open A
                                                Fetch Next From A
                                                Into @InstrumentTypePK,@TrxType,@FundPK,@BoardType,@CounterpartPK,@ValueDate

                                                While @@FETCH_STATUS = 0
                                                BEGIN    

		
	                                            delete  @CounterpartCommissionTemp
		

		
		                                            if EXISTS(
				                                            SELECT * FROM dbo.CounterpartCommission WHERE fundPK = @FundPK AND BoardType = @BoardType
				                                            AND CounterpartPK = @CounterpartPK AND Date <= @ValueDate
				                                            AND status = 2
			                                            )
			                                            BEGIN
	
				                                            INSERT INTO @CounterpartCommissionTemp	
		                                                    ( CounterpartCommissionPK ,
		                                                      HistoryPK ,
		                                                      Status ,
		                                                      Notes ,
		                                                      Date ,
		                                                      CounterpartPK ,
		                                                      BitIncludeTax ,
		                                                      BoardType ,
		                                                      CommissionPercent ,
		                                                      LevyPercent ,
		                                                      KPEIPercent ,
		                                                      VATPercent ,
		                                                      WHTPercent ,
		                                                      OTCPercent ,
		                                                      IncomeTaxSellPercent ,
		                                                      IncomeTaxInterestPercent ,
		                                                      IncomeTaxGainPercent ,
		                                                      EntryUsersID ,
		                                                      EntryTime ,
		                                                      UpdateUsersID ,
		                                                      UpdateTime ,
		                                                      ApprovedUsersID ,
		                                                      ApprovedTime ,
		                                                      VoidUsersID ,
		                                                      VoidTime ,
		                                                      DBUserID ,
		                                                      DBTerminalID ,
		                                                      LastUpdate ,
		                                                      LastUpdateDB ,
		                                                      FundPK ,
		                                                      RoundingCommission ,
		                                                      DecimalCommission ,
		                                                      RoundingLevy ,
		                                                      DecimalLevy ,
		                                                      RoundingKPEI ,
		                                                      DecimalKPEI ,
		                                                      RoundingVAT ,
		                                                      DecimalVAT ,
		                                                      RoundingWHT ,
		                                                      DecimalWHT ,
		                                                      RoundingOTC ,
		                                                      DecimalOTC ,
		                                                      RoundingTaxSell ,
		                                                      DecimalTaxSell ,
		                                                      RoundingTaxInterest ,
		                                                      DecimalTaxInterest ,
		                                                      RoundingTaxGain ,
		                                                      DecimalTaxGain
		                                                    )
				                                            SELECT TOP 1 CounterpartCommissionPK ,
		                                                      HistoryPK ,
		                                                      Status ,
		                                                      Notes ,
		                                                      Date ,
		                                                      CounterpartPK ,
		                                                      BitIncludeTax ,
		                                                      BoardType ,
		                                                      CommissionPercent ,
		                                                      LevyPercent ,
		                                                      KPEIPercent ,
		                                                      VATPercent ,
		                                                      WHTPercent ,
		                                                      OTCPercent ,
		                                                      IncomeTaxSellPercent ,
		                                                      IncomeTaxInterestPercent ,
		                                                      IncomeTaxGainPercent ,
		                                                      EntryUsersID ,
		                                                      EntryTime ,
		                                                      UpdateUsersID ,
		                                                      UpdateTime ,
		                                                      ApprovedUsersID ,
		                                                      ApprovedTime ,
		                                                      VoidUsersID ,
		                                                      VoidTime ,
		                                                      DBUserID ,
		                                                      DBTerminalID ,
		                                                      LastUpdate ,
		                                                      LastUpdateDB ,
		                                                      FundPK ,
		                                                      RoundingCommission ,
		                                                      DecimalCommission ,
		                                                      RoundingLevy ,
		                                                      DecimalLevy ,
		                                                      RoundingKPEI ,
		                                                      DecimalKPEI ,
		                                                      RoundingVAT ,
		                                                      DecimalVAT ,
		                                                      RoundingWHT ,
		                                                      DecimalWHT ,
		                                                      RoundingOTC ,
		                                                      DecimalOTC ,
		                                                      RoundingTaxSell ,
		                                                      DecimalTaxSell ,
		                                                      RoundingTaxInterest ,
		                                                      DecimalTaxInterest ,
		                                                      RoundingTaxGain ,
		                                                      DecimalTaxGain FROM dbo.CounterpartCommission WHERE fundPK = @FundPK AND BoardType = @BoardType
				                                            AND CounterpartPK = @CounterpartPK AND Date = (
					                                            SELECT MAX(Date) FROM dbo.CounterpartCommission WHERE Date <= @ValueDate 
					                                            AND fundPK = @FundPK AND BoardType = @BoardType
					                                            AND CounterpartPK = @CounterpartPK AND Status = 2
				                                            ) AND status = 2
			                                            END
			                                            ELSE
			                                            BEGIN

				                                            INSERT INTO @CounterpartCommissionTemp	
		                                                    ( CounterpartCommissionPK ,
		                                                      HistoryPK ,
		                                                      Status ,
		                                                      Notes ,
		                                                      Date ,
		                                                      CounterpartPK ,
		                                                      BitIncludeTax ,
		                                                      BoardType ,
		                                                      CommissionPercent ,
		                                                      LevyPercent ,
		                                                      KPEIPercent ,
		                                                      VATPercent ,
		                                                      WHTPercent ,
		                                                      OTCPercent ,
		                                                      IncomeTaxSellPercent ,
		                                                      IncomeTaxInterestPercent ,
		                                                      IncomeTaxGainPercent ,
		                                                      EntryUsersID ,
		                                                      EntryTime ,
		                                                      UpdateUsersID ,
		                                                      UpdateTime ,
		                                                      ApprovedUsersID ,
		                                                      ApprovedTime ,
		                                                      VoidUsersID ,
		                                                      VoidTime ,
		                                                      DBUserID ,
		                                                      DBTerminalID ,
		                                                      LastUpdate ,
		                                                      LastUpdateDB ,
		                                                      FundPK ,
		                                                      RoundingCommission ,
		                                                      DecimalCommission ,
		                                                      RoundingLevy ,
		                                                      DecimalLevy ,
		                                                      RoundingKPEI ,
		                                                      DecimalKPEI ,
		                                                      RoundingVAT ,
		                                                      DecimalVAT ,
		                                                      RoundingWHT ,
		                                                      DecimalWHT ,
		                                                      RoundingOTC ,
		                                                      DecimalOTC ,
		                                                      RoundingTaxSell ,
		                                                      DecimalTaxSell ,
		                                                      RoundingTaxInterest ,
		                                                      DecimalTaxInterest ,
		                                                      RoundingTaxGain ,
		                                                      DecimalTaxGain
		                                                    )
				                                            SELECT TOP 1 CounterpartCommissionPK ,
		                                                      HistoryPK ,
		                                                      Status ,
		                                                      Notes ,
		                                                      Date ,
		                                                      CounterpartPK ,
		                                                      BitIncludeTax ,
		                                                      BoardType ,
		                                                      CommissionPercent ,
		                                                      LevyPercent ,
		                                                      KPEIPercent ,
		                                                      VATPercent ,
		                                                      WHTPercent ,
		                                                      OTCPercent ,
		                                                      IncomeTaxSellPercent ,
		                                                      IncomeTaxInterestPercent ,
		                                                      IncomeTaxGainPercent ,
		                                                      EntryUsersID ,
		                                                      EntryTime ,
		                                                      UpdateUsersID ,
		                                                      UpdateTime ,
		                                                      ApprovedUsersID ,
		                                                      ApprovedTime ,
		                                                      VoidUsersID ,
		                                                      VoidTime ,
		                                                      DBUserID ,
		                                                      DBTerminalID ,
		                                                      LastUpdate ,
		                                                      LastUpdateDB ,
		                                                      FundPK ,
		                                                      RoundingCommission ,
		                                                      DecimalCommission ,
		                                                      RoundingLevy ,
		                                                      DecimalLevy ,
		                                                      RoundingKPEI ,
		                                                      DecimalKPEI ,
		                                                      RoundingVAT ,
		                                                      DecimalVAT ,
		                                                      RoundingWHT ,
		                                                      DecimalWHT ,
		                                                      RoundingOTC ,
		                                                      DecimalOTC ,
		                                                      RoundingTaxSell ,
		                                                      DecimalTaxSell ,
		                                                      RoundingTaxInterest ,
		                                                      DecimalTaxInterest ,
		                                                      RoundingTaxGain ,
		                                                      DecimalTaxGain FROM dbo.CounterpartCommission WHERE fundPK = 0 AND BoardType = @BoardType
				                                            AND CounterpartPK = @CounterpartPK  AND Date = (
					                                            SELECT MAX(Date) FROM dbo.CounterpartCommission WHERE Date <= @ValueDate 
					                                            AND fundPK = 0 AND BoardType = @BoardType
					                                            AND CounterpartPK = @CounterpartPK AND Status = 2
				                                            ) AND status = 2
			                                            END

	                                                DECLARE B CURSOR FOR 
	                            
                                                    Select C.FundCashRefPK,InvestmentPK,DealingPK,HistoryPK,CommissionPercent ,LevyPercent,KPEIPercent,VATPercent,
                                                    WHTPercent,OTCPercent,IncomeTaxInterestPercent,IncomeTaxGainPercent,IncomeTaxSellPercent,
                                                    C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,
                                                    case when C.TrxType = 1 then sum(C.DoneAmount + C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT - C.TaxGain - C.WHT) 
                                                    Else sum(C.DoneAmount - (C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT + C.TaxSell - C.TaxGain - C.WHT)) End TotalAmount    
                                                    from (
                                                    select B.RoundingCommission,B.DecimalCommission,A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,
                                                    B.CommissionPercent ,B.LevyPercent,B.KPEIPercent,B.VATPercent,
                                                    B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,
                                                    --Comm
                                                    cast(Sum(isnull(ROUND(A.DoneAmount * (B.CommissionPercent/100),B.DecimalCommission),0)) as numeric(19,2)) Comm,
                                                    cast(Sum(isnull(ROUND(A.DoneAmount * (B.LevyPercent/100),B.DecimalLevy),0)) as numeric(19,2)) Levy,
                                                    cast(Sum(isnull(ROUND(A.DoneAmount * (B.KPEIPercent/100),B.DecimalKPEI),0)) as numeric(19,2)) KPEI,
                                                    cast(Sum(isnull(ROUND(A.DoneAmount * (B.VATPercent/100),B.DecimalVAT),0)) as numeric(19,2)) VAT,
                                                    cast(Sum(isnull(ROUND(A.DoneAmount * (B.WHTPercent/100),B.DecimalWHT),0)) as numeric(19,2)) WHT,
                                                    cast(Sum(isnull(ROUND(A.DoneAmount * (B.OTCPercent/100),B.DecimalOTC),0)) as numeric(19,2)) OTC,
                                                    cast(Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxInterestPercent/100),B.DecimalTaxInterest),0)) as numeric(19,2)) TaxInterest,
                                                    cast(Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxGainPercent/100),B.DecimalTaxGain),0)) as numeric(19,2)) TaxGain,
                                                    case when TrxType = 1 then 0 else cast(Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxSellPercent/100),B.DecimalTaxSell),0)) as numeric(19,2)) End TaxSell
                                                    from Investment A
                                                    left join @CounterpartCommissionTemp B on A.CounterpartPK = B.CounterpartPK and A.BoardType = B.BoardType  and B.Status = 2 
                                                    left join FundCashRef D on D.FundPK = A.FundPK and D.Status = 2
                                                    where statusInvestment = 2 and statusDealing = 1 and OrderStatus  in ('O','P') and InvestmentPK = @InvestmentPK 
                                                    Group By D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.TrxType,A.DoneAmount,
                                                    B.CommissionPercent,B.LevyPercent,B.KPEIPercent,B.VATPercent,
                                                    B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,B.RoundingCommission,B.DecimalCommission,B.RoundingLevy,B.DecimalLevy,B.RoundingKPEI,B.DecimalKPEI,B.RoundingVAT,B.DecimalVAT,
                                                    B.RoundingWHT,B.DecimalWHT,B.RoundingOTC,B.DecimalOTC,B.RoundingTaxInterest,B.DecimalTaxInterest,B.RoundingTaxGain,B.DecimalTaxGain,B.RoundingTaxSell,B.DecimalTaxSell
                                                    ) C
                                                    Group By  C.TrxType,C.FundCashRefPK,C.InvestmentPK,C.DealingPK,C.HistoryPK,C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,C.DoneAmount,
                                                    C.CommissionPercent,C.LevyPercent,C.KPEIPercent,C.VATPercent,
                                                    C.WHTPercent,C.OTCPercent,C.IncomeTaxInterestPercent,C.IncomeTaxGainPercent,C.IncomeTaxSellPercent

	                                                Open B
	                                                Fetch Next From B
	                                                Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@CommissionPercent ,@LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxInterestPercent,@IncomeTaxGainPercent,@IncomeTaxSellPercent,
	                                                @Comm,@Levy,@KPEI,@VAT,@WHT,@OTC,@TaxInterest,@TaxGain,@TaxSell,@TotalAmount

	                                                While @@FETCH_STATUS = 0
	                                                BEGIN          
			                                            Select @SettlementPK = max(SettlementPK) + 1 From investment
			                                            set @SettlementPK = isnull(@SettlementPK,1)
			                                            Update Investment set SettlementPK = @SettlementPK, StatusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',FundCashRefPK = @FundCashRefPK, ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime,CommissionPercent = @CommissionPercent,LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,IncomeTaxGainPercent=@IncomeTaxGainPercent,IncomeTaxSellPercent = @IncomeTaxSellPercent,
			                                            CommissionAmount = @Comm,LevyAmount=@Levy,KPEIAmount = @KPEI, VATAmount=@VAT,WHTAmount = @WHT,OTCAmount=@OTC,IncomeTaxInterestAmount=@TaxInterest,IncomeTaxGainAmount = @TaxGain,IncomeTaxSellAmount = @TaxSell,TotalAmount = @TotalAmount
			                                            where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

	                                                Fetch next From B Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@CommissionPercent ,@LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxInterestPercent,@IncomeTaxGainPercent,@IncomeTaxSellPercent,
	                                                @Comm,@Levy,@KPEI,@VAT,@WHT,@OTC,@TaxInterest,@TaxGain,@TaxSell,@TotalAmount
	                                                END
	                                                Close B
	                                                Deallocate B



                                                Fetch next From A Into @InstrumentTypePK,@TrxType,@FundPK,@BoardType,@CounterpartPK,@ValueDate
	                                            END
                                                Close A
                                                Deallocate A

                                                -- TAMBAHAN UNTUK OTC AMOUNT

                                                declare @TotalTrx table
                                                (
                                                FundPK int,
                                                CounterpartPK int,
                                                InstrumentPK int,
                                                TrxType int,
                                                BoardType int
                                                )


                                                declare @CounterpartCommTemp table
                                                (
                                                FundPK int,
                                                CounterpartPK int,
                                                BoardType int,
                                                OTCAmount numeric(18,2)
                                                )

                                                INSERT INTO @TotalTrx
                                                select distinct FundPK,CounterpartPK,InstrumentPK,TrxType,BoardType from investment 
                                                where valuedate = @valuedate and StatusDealing = 2 and OrderStatus = 'M' and InstrumentTypePK in (1,4,16)


                                                INSERT INTO @CounterpartCommTemp	
                                                SELECT distinct A.FundPK,A.CounterpartPK,A.BoardType,A.OTCAmount 
                                                FROM dbo.CounterpartCommission A
                                                left join @TotalTrx B on A.FundPK = B.FundPK  and A.BoardType = B.BoardType and A.CounterpartPK = B.CounterpartPK
                                                WHERE A.FundPK = B.FundPK AND A.BoardType = B.BoardType AND A.CounterpartPK = B.CounterpartPK
                                                AND Date = (
                                                SELECT MAX(Date) FROM dbo.CounterpartCommission WHERE Date <= @ValueDate 
                                                AND fundPK = B.FundPK AND BoardType = B.BoardType AND CounterpartPK = B.CounterpartPK AND Status = 2
                                                ) AND status = 2

                                                union all

                                                SELECT distinct A.FundPK,A.CounterpartPK,A.BoardType,A.OTCAmount 
                                                FROM dbo.CounterpartCommission A
                                                left join @TotalTrx B on A.BoardType = B.BoardType and A.CounterpartPK = B.CounterpartPK
                                                WHERE A.FundPK = 0 AND A.BoardType = B.BoardType AND A.CounterpartPK = B.CounterpartPK
                                                AND Date = (
                                                SELECT MAX(Date) FROM dbo.CounterpartCommission WHERE Date <= @ValueDate 
                                                AND fundPK = 0 AND BoardType = B.BoardType AND CounterpartPK = B.CounterpartPK AND Status = 2
                                                ) AND status = 2


                                                declare @CInvestmentPK int
                                                declare @CFundPK int
                                                declare @CInstrumentPK int
                                                declare @CTrxType int
                                                declare @CBoardType int
                                                declare @CCounterpartPK int
                                                declare @COTCAmount numeric(18,2)

                                                Declare C Cursor For 
                                                select A.FundPK,A.InstrumentPK,A.TrxType,A.BoardType,
                                                A.CounterpartPK,isnull(OTCAmount,0) OTCAmount from @TotalTrx A
                                                left join @CounterpartCommTemp B on A.CounterpartPK = B.CounterpartPK and A.BoardType = B.BoardType

                                                Open C                  
                                                Fetch Next From C                  
                                                Into @CFundPK,@CInstrumentPK,@CTrxType,@CBoardType,@CCounterpartPK,@COTCAmount
                                                While @@FETCH_STATUS = 0                  
                                                Begin      

		                                            select top 1 @CInvestmentPK = InvestmentPK from Investment 
		                                            where valuedate = @valuedate and StatusDealing = 2 and OrderStatus = 'M' and InstrumentTypePK in (1,4,16)
		                                            and FundPK = @CFundPK and InstrumentPK = @CInstrumentPK and TrxType = @CTrxType and BoardType =  @CBoardType and CounterpartPK = @CCounterpartPK
		                                            order by InvestmentPK asc

		                                            update Investment set OTCAmount = @COTCAmount, TotalAmount = case when TrxType = 1 then TotalAmount + @COTCAmount else TotalAmount - @COTCAmount end 
		                                            where InvestmentPK = @CInvestmentPK

                                                Fetch next From C                   
                                                Into @CFundPK,@CInstrumentPK,@CTrxType,@CBoardType,@CCounterpartPK,@COTCAmount
                                                END        
                                                Close C                  
                                                Deallocate C

                                          ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@InvestmentPK", _m.InvestmentPK);
                            cmd.Parameters.AddWithValue("@BulkOrderEquityPK", _m.BulkOrderEquityPK);
                            cmd.Parameters.AddWithValue("@AvgPrice", _m.AvgPrice);
                            cmd.Parameters.AddWithValue("@DoneVolume", _m.DoneVolume);
                            cmd.Parameters.AddWithValue("@DoneAmount", _m.AvgPrice * _m.DoneVolume);
                            cmd.Parameters.AddWithValue("@ApprovedDealingID", _UsersID);
                            cmd.Parameters.AddWithValue("@ApprovedDealingTime", _dateTimeNow);
                            cmd.ExecuteNonQuery();

                        }
                    }

                    return "Match Success";
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string ValidateMatchByBulkOrderEquity(int _BulkOrderEquityPK)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                string _msg;
                _msg = "";
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;

                        cmd.CommandText = @"
                            declare @StatusSplit int

                            select @StatusSplit = StatusSplit from BulkOrderEquity where BulkOrderEquityPK = @BulkOrderEquityPK

                            if (@StatusSplit = 0 )
                                select 'Please split price first!' Result
                            else 
                                select '' Result
                        ";

                        cmd.Parameters.AddWithValue("@BulkOrderEquityPK", _BulkOrderEquityPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                _msg = dr["Result"].ToString();
                            }
                        }

                    }
                    return _msg;
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public string Validate_CounterpartByFundPK(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    string _paramDealingPK = "";
                    string _paramInstrumentType = "";

                    if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                    {
                        if (_investment.TrxType == 5)
                        {
                            _paramDealingPK = " And InvestmentPK in ( select InvestmentPK from BulkOrderEquityDetail where BulkOrderEquityPK in (" + _investment.stringInvestmentFrom + "))";
                        }
                        else
                        {
                            _paramDealingPK = " And A.DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                    }
                    else
                    {
                        _paramDealingPK = " And A.DealingPK in (0) ";
                    }

                    if (_investment.InstrumentTypePK == 1)
                        _paramInstrumentType = " and A.InstrumentTypePK in (1,4,16) ";
                    else if (_investment.InstrumentTypePK == 2)
                        _paramInstrumentType = " and A.InstrumentTypePK in (2,3,8,9,13,15) ";
                    else
                        _paramInstrumentType = "";


                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;

                        cmd.CommandText = @"
                        
                        --declare @CounterpartPK int
                        --declare @datefrom date
                        --declare @dateto date

                        --set @datefrom = '2020-05-08'
                        --set @dateto = @datefrom
                        --set @CounterpartPK = 17


                        declare @message nvarchar(500)

                        declare @temptable table
                        (
	                        FundPk int,
	                        InstrumentPK int,
	                        CounterpartPK int
                        )

                        declare @table table
                        (
	                        FundPk int,
	                        InstrumentPK int,
	                        CounterpartPK int
                        )

                        set @message = ''

                        DECLARE @XFundPK int
                        DECLARE @XInstrumentPK int
                        DECLARE @XCounterpartPK int
                        DECLARE @CountSelect int
                        DECLARE @Count int

                        select @CountSelect = count(*) from Investment A
	                        where CrossFundFromPK = 0 and ValueDate between @datefrom and @dateto and StatusInvestment = 2 and InstrumentTypePK not in (5,10) and StatusDealing in (1,2) " + _paramDealingPK + @"
	                        --and A.DealingPK in (289,290)

                        DECLARE A CURSOR FOR 
	                        select FundPK,InstrumentPK, CounterpartPK from Investment A
	                        where CrossFundFromPK = 0 and ValueDate between @datefrom and @dateto and StatusInvestment = 2 and InstrumentTypePK not in (5,10) and StatusDealing in (1,2) " + _paramDealingPK + @"
	                        --and A.DealingPK in (289,290)

                        OPEN A

                        FETCH NEXT FROM A INTO @XFundPK, @XInstrumentPK, @XCounterpartPK

                        WHILE @@FETCH_STATUS = 0
	                        BEGIN

                            --select @COUNT= count(*) from Investment where CrossFundFromPK = 0 and ValueDate between @datefrom and @dateto and StatusInvestment = 2 and InstrumentTypePK not in (5,10) 
                            --and StatusDealing in (1,2) and InstrumentPK = @XInstrumentPK and FundPK = @XFundPK --and CounterpartPK <> 0


                            --if ( @COUNT ) > 1 --and @XCounterpartPK = 0 and @CountSelect <> @Count
                            --begin
                            insert into @temptable
                            select distinct A.FundPk,A.InstrumentPK,A.CounterpartPK Result from Investment A
                            where CrossFundFromPK = 0 and ValueDate between @datefrom and @dateto and StatusInvestment = 2 and StatusDealing in (1,2) and InstrumentTypePK not in (5,10)
                            and A.FundPK = @XFundPK and A.InstrumentPK = @XInstrumentPK and A.CounterpartPK <> @CounterpartPK and CounterpartPK != 0
                            --end
								
								
		                        FETCH NEXT FROM A INTO @XFundPK, @XInstrumentPK, @XCounterpartPK
	                        END

                        CLOSE A

                        DEALLOCATE A

                        insert into @table
                        select distinct FundPK,InstrumentPK,CounterpartPK from @temptable

                        if exists (
                            select CounterpartPK from @table where CounterpartPK = @CounterpartPK
                        ) 
	                        set @message = ''
                        else
                        begin
	                        select @message = @message + 'Fund : ' + isnull(C.ID,'') + ', Instrument : ' + isnull(D.ID,'') + ', Broker : ' + isnull(B.ID,'') + '<br>' from @table A
	                        left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
	                        left join Fund C on A.FundPK = C.FundPK and C.Status = 2
	                        left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                        end

                        if @message != ''
	                        set @message = @message + 'Please check the Broker of this Fund again!'

                        select isnull(@message,'') Result
";

                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return dr["Result"].ToString();
                            }
                            else
                            {
                                return "";
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_UnMatchBulkEquity(Investment _investment)
        {
            try
            {
                string _paramDealing = "";
                string _paramBulkOrderEquityPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramDealing = " And InvestmentPK in ( select InvestmentPK from BulkOrderEquityDetail where BulkOrderEquityPK in (" + _investment.stringInvestmentFrom + "))";
                    _paramBulkOrderEquityPK = " BulkOrderEquityPK in (" + _investment.stringInvestmentFrom + ")";
                }
                else
                {
                    _paramDealing = " And DealingPK in (0) ";
                    _paramBulkOrderEquityPK = " BulkOrderEquityPK in (0)";
                }
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                                update BulkOrderEquity set StatusMatch = 0 
                                where " + _paramBulkOrderEquityPK + @"

                                Update Investment set SettlementPK = 0, StatusDealing = 1, StatusSettlement = 0,OrderStatus = 'O',FundCashRefPK = 0, ApprovedDealingID = '',ApprovedDealingTime = '',CommissionPercent = 0,LevyPercent=0,KPEIPercent=0,VATPercent=0,WHTPercent=0,OTCPercent=0,IncomeTaxInterestPercent=0,IncomeTaxGainPercent=0,IncomeTaxSellPercent = 0,
                                CommissionAmount = 0,LevyAmount=0,KPEIAmount = 0, VATAmount=0,WHTAmount = 0,OTCAmount=0,IncomeTaxInterestAmount=0,IncomeTaxGainAmount = 0,IncomeTaxSellAmount = 0,TotalAmount = 0
                                where 1 = 1  " + _paramDealing
                                ;


                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string ImportSInvestDepositoTxt(string _fileSource, string _userID)
        {
            string _msg = "";
            try
            {
                DateTime _now = DateTime.Now;

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table [SIDepositoTemp]";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.[SIDepositoTemp]";
                            bulkCopy.WriteToServer(CreateDataTableFromSIDepositoTxt(_fileSource));
                        }

                        // logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"       
                                    update A set A.SIReference = B.SIReferenceID, A.UpdateUsersID = @UsersID, A.UpdateTime = @LastUpdate--, LastUpdate = @LastUpdate
                                    from Investment A
                                    inner join SIDepositoTemp B on dbo.AlphaRemoveExceptLetter(A.Reference) = B.ReferenceNo and A.TrxType = B.ActionType
                                    where A.StatusDealing = 2
                                        ";

                                cmd1.Parameters.AddWithValue("@UsersID", _userID);
                                cmd1.Parameters.AddWithValue("@LastUpdate", _now);

                                cmd1.ExecuteNonQuery();

                            }
                            _msg = "Import SI Deposito Done";

                        }

                    }
                }



                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromSIDepositoTxt(string _fileSource)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TransactionStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ActionType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InputCancelationDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IMName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CBCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CBName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FundCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FundName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementBankCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementBankName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BranchCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BranchName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementBankCashACName";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementBankCashACNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CCY";
            dc.Unique = false;
            dt.Columns.Add(dc);






            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Principle";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestRatePS";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "PlacementDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "MaturityDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestFrequency";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestDayCountConvention";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ShariaDeposit";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "WithdrawalDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AdjustedInterestRatePS";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "WithdrawalPrinciple";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "WithdrawalInterest";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TotalWithdrawalAmount";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RolloverDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RolloverType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NewPrincipleAmount";
            dc.Unique = false;
            dt.Columns.Add(dc);





            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NewInterestratePS";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NewMaturityDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AmountToBeTransferred";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "StatutoryType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ContactPerson";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TelephoneNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FaxNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ReferenceNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ParentReferenceNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Description";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SIReferenceID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SICreationDateTime";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CutOffStatus";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CancellationReason";
            dc.Unique = false;
            dt.Columns.Add(dc);





            StreamReader sr = new StreamReader(_fileSource);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });
                dr = dt.NewRow();
                dr["TransactionStatus"] = s[0];
                dr["ActionType"] = s[1];
                dr["InputCancelationDate"] = s[2];
                dr["IMCode"] = s[3];
                dr["IMName"] = s[4];
                dr["CBCode"] = s[5];
                dr["CBName"] = s[6];
                dr["FundCode"] = s[7];
                dr["FundName"] = s[8];
                dr["PlacementBankCode"] = s[9];
                dr["PlacementBankName"] = s[10];
                dr["BranchCode"] = s[11];
                dr["BranchName"] = s[12];
                dr["PlacementBankCashACName"] = s[13];
                dr["PlacementBankCashACNo"] = s[14];
                dr["CCY"] = s[15];
                dr["Principle"] = s[16];
                dr["InterestRatePS"] = s[17];
                dr["PlacementDate"] = s[18];
                dr["MaturityDate"] = s[19];
                dr["InterestFrequency"] = s[20];
                dr["InterestDayCountConvention"] = s[21];
                dr["InterestType"] = s[23];
                dr["ShariaDeposit"] = s[22];
                dr["WithdrawalDate"] = s[24];
                dr["AdjustedInterestRatePS"] = s[25];
                dr["WithdrawalPrinciple"] = s[26];
                dr["WithdrawalInterest"] = s[27];
                dr["TotalWithdrawalAmount"] = s[28];
                dr["RolloverDate"] = s[29];
                dr["RolloverType"] = s[30];
                dr["NewPrincipleAmount"] = s[31];
                dr["NewInterestRatePS"] = s[32];
                dr["NewMaturityDate"] = s[33];
                dr["AmountToBeTransferred"] = s[34];
                dr["StatutoryType"] = s[35];
                dr["ContactPerson"] = s[36];
                dr["TelephoneNo"] = s[37];
                dr["FaxNo"] = s[38];
                dr["ReferenceNo"] = s[39];
                dr["ParentReferenceNo"] = s[40];
                dr["Description"] = s[41];
                dr["SIReferenceID"] = s[42];
                dr["SICreationDateTime"] = s[43];
                dr["CutOffStatus"] = s[44];
                dr["CancellationReason"] = s[45];


                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }

        public decimal Get_RecalSplitRemainingAmount(Investment _investment)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                       select RemainingAmount = isnull(@OrderAmount,0) - (isnull(@Amount1,0) + isnull(@Amount2,0) +isnull(@Amount3,0) +isnull (@Amount4,0) +isnull(@Amount5,0))
                        ";
                        cmd.Parameters.AddWithValue("@OrderAMount", _investment.OrderAmount);
                        cmd.Parameters.AddWithValue("@Amount1", _investment.Amount1);
                        cmd.Parameters.AddWithValue("@Amount2", _investment.Amount2);
                        cmd.Parameters.AddWithValue("@Amount3", _investment.Amount3);
                        cmd.Parameters.AddWithValue("@Amount4", _investment.Amount4);
                        cmd.Parameters.AddWithValue("@Amount5", _investment.Amount5);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["RemainingAmount"]);
                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public string PTPBondUSD_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd1 = DbCon.CreateCommand())
                    {
                        cmd1.CommandTimeout = 0;

                        cmd1.CommandText = @"
                        
create table #TextDollar(      
[ResultTextDollar] [nvarchar](1000)  NULL          
)                        
        
truncate table #TextDollar
     
insert into #TextDollar     
select 'Transaction Status|Trade ID|Trade Date|Settlement Date|IM Code|BR Code|BR Name|Counterparty Code|Counterparty Name|CP Safekeeping Acc Number|Place of Settlement|Fund Code|Fund safe keeping account number|Security Type|Security Code Type|Security Code|Security Name|Buy/Sell|CCY|Price|Face Value|Proceeds|Interest Rate|Maturity Date|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Net Proceeds|Instruction Type|Purpose of Transaction|Remarks|CancellationReason'      
        

 
insert into #TextDollar
Select  
'NEWM' --1
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
+ '|' + @CompanyID
+ '|' + isnull(A.BrokerCode,'')
+ '|' + isnull(A.BrokerName,'')
+ '|' + isnull(A.BrokerCode,'')
+ '|' + isnull(A.BrokerName,'')
+ '|' + ''
+ '|' + 'Jakarta'
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Safekeeping,''))))
+ '|' + ''
+ '|' +'2'
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InstrumentName,''))))
+ '|' + cast(isnull(A.TrxType,'') as nvarchar)
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,''))))
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
+ '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end
+ '|' + case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(18,4)),'')as nvarchar) end 
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) 
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,4) as decimal(30,2)),'')as nvarchar) end 
+ '|' + ''
+ '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(isnull(A.TotalAmount,4) as decimal(30,2)),'')as nvarchar) end 
+ '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end                    
+ '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end 
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))
+ '|' 
from (      
select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode,H.BankAccountNo Safekeeping, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType, D.ISIN,
A.TotalAmount TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK in (3,8,9,15) then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
A.DoneAccruedInterest InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,F.BankAccountNo ,case when @ClientCode = '25' then A.PurposeOfTransaction else A.InvestmentTrType end PurposeOfTransaction,A.StatutoryType,
B.Name BrokerName,D.Name InstrumentName,G.ID CurrencyID,A.InterestPercent,A.MaturityDate,D.CurrencyPK,A.InvestmentTrType  from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
left join Currency G on D.CurrencyPK = G.CurrencyPK and G.status = 2
left join BankBranch H on C.BankBranchPK = H.BankBranchPK and H.Status = 2
where    
A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,8,9,13,15) 
" + _paramSettlementPK + @"
and A.statusdealing = 2 and D.CurrencyPK <> 1

)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,A.ISIN,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,
A.BrokerName,A.InstrumentName,A.CurrencyID,A.InterestPercent,A.MaturityDate,A.Safekeeping,A.InvestmentTrType
order by A.ValueDate Asc

select * from #TextDollar
";
                        cmd1.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd1.Parameters.AddWithValue("@ValueDate", _dateFrom);
                        cmd1.Parameters.AddWithValue("@ClientCode", Tools.ClientCode);

                        using (SqlDataReader dr1 = cmd1.ExecuteReader())
                        {
                            if (dr1.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "\\" + "PTP_Bond_Dollar.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr1.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr1["ResultTextDollar"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Bond_Dollar.txt";
                                }
                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        private InvestmentAmmendMature setDataAmmendDeposito(SqlDataReader dr)
        {
            InvestmentAmmendMature M_Investment = new InvestmentAmmendMature();
            M_Investment.SettlementPK = dr["SettlementPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["SettlementPK"]);
            M_Investment.HistoryPK = dr["HistoryPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["HistoryPK"]);
            M_Investment.ValueDate = dr["ValueDate"].Equals(DBNull.Value) == true ? "" : dr["ValueDate"].ToString();
            M_Investment.MaturityDate = dr["MaturityDate"].Equals(DBNull.Value) == true ? "" : dr["MaturityDate"].ToString();
            M_Investment.InstrumentID = dr["InstrumentID"].Equals(DBNull.Value) == true ? "" : dr["InstrumentID"].ToString();
            M_Investment.InstrumentPK = dr["InstrumentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InstrumentPK"]);
            M_Investment.DoneAmount = dr["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneAmount"]);
            M_Investment.InterestPercent = dr["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["InterestPercent"]);
            M_Investment.FundID = dr["FundID"].Equals(DBNull.Value) == true ? "" : dr["FundID"].ToString();
            M_Investment.FundPK = dr["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["FundPK"]);
            M_Investment.PaymentModeOnMaturity = dr["PaymentModeOnMaturity"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["PaymentModeOnMaturity"]);
            M_Investment.PaymentModeOnMaturityDesc = dr["PaymentModeOnMaturityDesc"].Equals(DBNull.Value) == true ? "" : dr["PaymentModeOnMaturityDesc"].ToString();
            return M_Investment;
        }

        public List<InvestmentAmmendMature> GetDataAmmendDeposito(DateTime _dateFrom, DateTime _dateTo)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _now = DateTime.Now;
                    List<InvestmentAmmendMature> L_Investment = new List<InvestmentAmmendMature>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" 
                            declare @Yesterday date
                            select @Yesterday = case when dbo.CheckTodayIsHoliday(dateadd(day,-1,@DateFrom)) = 1 then dbo.FWorkingDay(@DateFrom,-1) else @DateFrom end

                            select A.SettlementPK,A.HistoryPK,A.ValueDate,A.InstrumentPK,B.ID InstrumentID,A.FundPK,C.ID FundID,A.PaymentModeOnMaturity,isnull(D.DescOne,'') PaymentModeOnMaturityDesc,A.MaturityDate,A.DoneAmount,A.InterestPercent from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                            left join Fund C on A.FundPK = C.FundPK and C.Status = 2
                            left join MasterValue D on A.PaymentModeOnMaturity = D.Code and D.Status = 2 and D.ID = 'PaymentModeOnMaturity'
                            where A.MaturityDate between @Yesterday and @DateTo and A.InstrumentTypePK = 5 and A.TrxType = 1 and A.StatusSettlement = 2

                        ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setDataAmmendDeposito(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string Settlement_AmmendDeposito(InvestmentAmmendMature _investment)
        {
            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ")";
                }
                else
                {
                    _paramSettlementPK = "";
                }
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                                update Investment set PaymentModeOnMaturity =  @PaymentModeOnMaturity,UpdateSettlementID = @UsersID, UpdateSettlementTime = @LastUpdate, LastUpdate = @LastUpdate         
                                where 1 = 1 " + _paramSettlementPK + @"
                                ";

                        cmd.Parameters.AddWithValue("@UsersID", _investment.UpdateUsersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                        cmd.ExecuteNonQuery();

                        return "Ammend Deposito Success";

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        //bagian FIFO disini
        public int InvestmentFifoBond_RejectSettlementBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";
                        string _paramCSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramCSettlementPK = " B.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramCSettlementPK = " B.SettlementPK in (0) ";
                        }

                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandText = @"

------------------------------------------ CROSS FUND AUTO REJECT
                                CREATE TABLE #Investment
                                (
	                                SettlementPK int,
	                                HistoryPK int,
	                                FundPK int,
	                                CrossFundFromPK int,
	                                Valuedate datetime,
	                                InstrumentPK int,
	                                InstrumentTypePK int,
	                                OrderPrice numeric(19,4),
	                                Volume numeric(19,4),
	                                Amount numeric(19,4),
	                                SettlementDate datetime
                                )



                                insert into #Investment
                                select SettlementPK,HistoryPK,FundPK, CrossFundFromPK, ValueDate, InstrumentPK, 
                                InstrumentTypePK, OrderPrice, Volume, Amount, SettlementDate
                                from Investment where statusSettlement in (1,2) " + _paramSettlementPK + @" and CrossFundFromPK <> 0


                                Update A set A.statusSettlement  = 3,A.OrderStatus = 'R', A.VoidSettlementID = @VoidSettlementID,A.VoidSettlementTime = @VoidSettlementTime,LastUpdate=@LastUpdate from Investment A
                                left join #Investment B on A.FundPK = B.CrossFundFromPK and A.CrossFundFromPK = B.FundPK 
                                and A.ValueDate = B.Valuedate and A.InstrumentPK = B.InstrumentPK and A.InstrumentTypePK = B.InstrumentTypePK
                                and A.OrderPrice = B.OrderPrice and A.Volume = B.Volume and A.Amount = B.Amount 
                                and A.SettlementDate = B.SettlementDate 
                                where " + _paramCSettlementPK + @"  and A.CrossFundFromPK <> 0 and B.CrossFundFromPK <> 0

----------------------------------------------------------------------


                            declare @InvestmentPK int
                            declare @DealingPK int
                            declare @HistoryPK int
                            declare @AcqPriceInv numeric(22,4)
                            declare @AcqVolumeInv numeric(22,4)
                            declare @AcqDateInv date
                            declare @instrumentpk int
	                        declare @FundPK1 int
	                        declare @Price numeric(22,4)
	                        declare @volume numeric(22,4)
	                        declare @DoneVolume numeric(22,4)
	                        declare @RemainingVolume numeric(22,4)
	                        declare @maxFifoDate date
                            declare @FifobondPositionPK int
	                        declare @Query nvarchar(500)
	                        declare @InvestmentSellPK int
	                        declare @InvestmentBuyPK int
	                        declare @AcqPrice numeric(22,4)
	                        declare @AcqVolume numeric(22,4)
	                        declare @AcqDate date

                            declare @tableInvestment table (
                                InvestmentPK int,
                                DealingPK int,
                                HistoryPK int,
                                InstrumentPK int,
                                FundPK int,
                                DoneVolume numeric(32,4),
                                AcqDate date,
                                AcqPrice numeric(19,8),
                                AcqVolume numeric(32,4)
                            )
 
                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate,AcqPrice,AcqVolume from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate1,AcqPrice1,AcqVolume1 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate1 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate2,AcqPrice2,AcqVolume2 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate2 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate3,AcqPrice3,AcqVolume3 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate3 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate4,AcqPrice4,AcqVolume4 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate4 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate5,AcqPrice5,AcqVolume5 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate5 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate6,AcqPrice6,AcqVolume6 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate6 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate7,AcqPrice7,AcqVolume7 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate7 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate8,AcqPrice8,AcqVolume8 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate8 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate9,AcqPrice9,AcqVolume9 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate9 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate10,AcqPrice10,AcqVolume10 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate10 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate11,AcqPrice11,AcqVolume11 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate11 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate12,AcqPrice12,AcqVolume12 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate12 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate13,AcqPrice13,AcqVolume13 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate13 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate14,AcqPrice14,AcqVolume14 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate14 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate15,AcqPrice15,AcqVolume15 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate15 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate16,AcqPrice16,AcqVolume16 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate16 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate17,AcqPrice17,AcqVolume17 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate17 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate18,AcqPrice18,AcqVolume18 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate18 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate19,AcqPrice19,AcqVolume19 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate19 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate20,AcqPrice20,AcqVolume20 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate20 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate21,AcqPrice21,AcqVolume21 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate21 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate22,AcqPrice22,AcqVolume22 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate22 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate23,AcqPrice23,AcqVolume23 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate23 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate24,AcqPrice24,AcqVolume24 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate24 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate25,AcqPrice25,AcqVolume25 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate25 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate26,AcqPrice26,AcqVolume26 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate26 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate27,AcqPrice27,AcqVolume27 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate27 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate28,AcqPrice28,AcqVolume28 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate28 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate29,AcqPrice29,AcqVolume29 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate29 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            DECLARE A CURSOR FOR 
	                            
                                select InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume from @tableInvestment

                            Open A
                            Fetch Next From A
                            Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv

                            While @@FETCH_STATUS = 0
                            BEGIN              
	                            

	                            if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	                            create table #tableFifoSelect
	                            (
		                            FifoBondPositionPK int,
									InvestmentBuyPK int,
		                            InvestmentPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            RemainingVolume numeric(22,4),
		                            AcqPrice numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	                            if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	                            create table #tableInvest
	                            (
		                            FifoBondPositionPK int,
		                            InvesmentBuyPK int,
		                            InvesmentSellPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            AcqPrice numeric(22,4),
		                            RemainingVolume numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	                            insert into #tableFifoSelect(FifoBondPositionPK,InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
	                            select A.FifoBondPositionPK,InvestmentBuyPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice,RemainingVolume from (
			                            select FifoBondPositionPK,0 InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume DoneVolume,AcqPrice,RemainingVolume from FifoBondPosition 
			                            where FundPK = @FundPK1 and InstrumentPk = @instrumentpk and status in (1,2) and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv
			                            union all
			                            select 0,InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume from FifoBondPositionTemp
			                            where FundPK = @FundPK1 and InstrumentPK = @instrumentpk and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv --and InvestmentSellPK <> 0
	                            )A 
	                            order by A.AcqDate					

	                            --select * from #tableFifoSelect
	                            --order by AcqDate
	                            -- @AcqDateInv,@AcqPriceInv,@AcqVolumeInv
	                            --order by AcqDate
	                            --select @AcqDateInv = AcqDate, @AcqPriceInv = AcqPrice, @AcqVolumeInv = AcqVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 2 and TrxType = 2
	

	                            
								
	                            DECLARE AB CURSOR FOR   
		                            select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate,RemainingVolume,InvestmentBuyPK from #tableFifoSelect where AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv and InvestmentPK = @InvestmentPK order by AcqDate desc
	                            OPEN AB  
	                            FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
  
	                            WHILE @@FETCH_STATUS = 0  
	                            BEGIN  
		                            if @FifobondPositionPK = 0
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv ,@AcqVolume, @RemainingVolume,'101',@InvestmentBuyPK
			                            else
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
											--select @AcqVolume,'102', @RemainingVolume
									end
		                            else
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv + @RemainingVolume,'105'
			                            else
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolume,'109', @RemainingVolume, @DoneVolume, @AcqDate,@AcqPrice, @AcqVolumeInv
		                            end
		
		
		
	                                FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
	                            end
	                            CLOSE AB  
	                            DEALLOCATE AB 

                            Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv
                            END
                            Close A
                            Deallocate A
                            

                            Update Investment set statusSettlement  = 3,OrderStatus = 'R', VoidSettlementID = @VoidSettlementID,VoidSettlementTime = @VoidSettlementTime
                            where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK + " and ValueDate between @DateFrom and @DateTo and statusSettlement in (1,2) " + _paramFund + _paramCounterpart +
                            " --Update Investment set selectedSettlement  = 0";



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidSettlementID);
                        cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int InvestmentFifoBond_RejectDealingBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";
                        string _paramCDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramCDealingPK = " B.DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramCDealingPK = " B.DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandText = @"


                        CREATE TABLE #Investment
                        (
	                        DealingPK int,
	                        HistoryPK int,
	                        FundPK int,
	                        CrossFundFromPK int,
	                        Valuedate datetime,
	                        InstrumentPK int,
	                        InstrumentTypePK int,
	                        OrderPrice numeric(19,4),
	                        Volume numeric(19,4),
	                        Amount numeric(19,4),
	                        SettlementDate datetime
                        )


                        insert into #Investment
                        select DealingPK,HistoryPK,FundPK, CrossFundFromPK, ValueDate, InstrumentPK, 
                        InstrumentTypePK, OrderPrice, Volume, Amount, SettlementDate
                        from Investment where StatusDealing in (1,2) " + _paramDealingPK + @"


                        Update A set StatusDealing  = 3,statusSettlement = 0,OrderStatus = 'R', VoidDealingID = @VoidDealingID,VoidDealingTime = @VoidDealingTime,LastUpdate=@LastUpdate  from Investment A
                        left join #Investment B on A.FundPK = B.CrossFundFromPK and A.CrossFundFromPK = B.FundPK 
                        and A.ValueDate = B.Valuedate and A.InstrumentPK = B.InstrumentPK and A.InstrumentTypePK = B.InstrumentTypePK
                        and A.OrderPrice = B.OrderPrice and A.Volume = B.Volume and A.Amount = B.Amount 
                        and A.SettlementDate = B.SettlementDate 
                        where " + _paramCDealingPK + @" and A.CrossFundFromPK <> 0 and B.CrossFundFromPK <> 0

                        -------------------------------------------------------------------------


                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int
                        declare @AcqPriceInv numeric(22,4)
                        declare @AcqVolumeInv numeric(22,4)
                        declare @AcqDateInv date
						declare @instrumentpk int
	                    declare @FundPK1 int
	                    declare @Price numeric(22,4)
	                    declare @volume numeric(22,4)
	                    declare @DoneVolume numeric(22,4)
	                    declare @RemainingVolume numeric(22,4)
	                    declare @maxFifoDate date
						declare @FifobondPositionPK int
	                    declare @Query nvarchar(500)
	                    declare @InvestmentSellPK int
	                    declare @InvestmentBuyPK int
	                    declare @AcqPrice numeric(22,4)
	                    declare @AcqVolume numeric(22,4)
	                    declare @AcqDate date

                        declare @tableInvestment table (
                            InvestmentPK int,
                            DealingPK int,
                            HistoryPK int,
                            InstrumentPK int,
                            FundPK int,
                            DoneVolume numeric(32,4),
                            AcqDate date,
                            AcqPrice numeric(19,8),
                            AcqVolume numeric(32,4)
                        )
 
                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate,AcqPrice,AcqVolume from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate1,AcqPrice1,AcqVolume1 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate1 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate2,AcqPrice2,AcqVolume2 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate2 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate3,AcqPrice3,AcqVolume3 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate3 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate4,AcqPrice4,AcqVolume4 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate4 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate5,AcqPrice5,AcqVolume5 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate5 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate6,AcqPrice6,AcqVolume6 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate6 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate7,AcqPrice7,AcqVolume7 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate7 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate8,AcqPrice8,AcqVolume8 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate8 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate9,AcqPrice9,AcqVolume9 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate9 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate10,AcqPrice10,AcqVolume10 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate10 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate11,AcqPrice11,AcqVolume11 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate11 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate12,AcqPrice12,AcqVolume12 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate12 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate13,AcqPrice13,AcqVolume13 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate13 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate14,AcqPrice14,AcqVolume14 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate14 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate15,AcqPrice15,AcqVolume15 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate15 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate16,AcqPrice16,AcqVolume16 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate16 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate17,AcqPrice17,AcqVolume17 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate17 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate18,AcqPrice18,AcqVolume18 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate18 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate19,AcqPrice19,AcqVolume19 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate19 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate20,AcqPrice20,AcqVolume20 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate20 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate21,AcqPrice21,AcqVolume21 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate21 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate22,AcqPrice22,AcqVolume22 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate22 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate23,AcqPrice23,AcqVolume23 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate23 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate24,AcqPrice24,AcqVolume24 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate24 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate25,AcqPrice25,AcqVolume25 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate25 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate26,AcqPrice26,AcqVolume26 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate26 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate27,AcqPrice27,AcqVolume27 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate27 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate28,AcqPrice28,AcqVolume28 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate28 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate29,AcqPrice29,AcqVolume29 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate29 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        DECLARE A CURSOR FOR 
	                        
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume from @tableInvestment

                            Open A
                        Fetch Next From A
                        Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv

                        While @@FETCH_STATUS = 0
                            BEGIN              
	                            if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	                            create table #tableFifoSelect
	                            (
		                            FifoBondPositionPK int,
									InvestmentBuyPK int,
		                            InvestmentPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            RemainingVolume numeric(22,4),
		                            AcqPrice numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	                            if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	                            create table #tableInvest
	                            (
		                            FifoBondPositionPK int,
		                            InvesmentBuyPK int,
		                            InvesmentSellPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            AcqPrice numeric(22,4),
		                            RemainingVolume numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	                            insert into #tableFifoSelect(FifoBondPositionPK,InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
	                            select A.FifoBondPositionPK,InvestmentBuyPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice,RemainingVolume from (
			                            select FifoBondPositionPK,0 InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume DoneVolume,AcqPrice,RemainingVolume from FifoBondPosition 
			                            where FundPK = @FundPK1 and InstrumentPk = @instrumentpk and status in (1,2) and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv
			                            union all
			                            select 0,InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume from FifoBondPositionTemp
			                            where FundPK = @FundPK1 and InstrumentPK = @instrumentpk and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv --and InvestmentSellPK <> 0
	                            )A 
	                            order by A.AcqDate					

	                            --select * from #tableFifoSelect
	                            --order by AcqDate
	                            -- @AcqDateInv,@AcqPriceInv,@AcqVolumeInv
	                            --order by AcqDate
	                            --select @AcqDateInv = AcqDate, @AcqPriceInv = AcqPrice, @AcqVolumeInv = AcqVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 2 and TrxType = 2
	

	                            
								
	                            DECLARE AB CURSOR FOR   
		                            select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate,RemainingVolume,InvestmentBuyPK from #tableFifoSelect where AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv and InvestmentPK = @investmentpk order by AcqDate desc
	                            OPEN AB  
	                            FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
  
	                            WHILE @@FETCH_STATUS = 0  
	                            BEGIN  
		                            if @FifobondPositionPK = 0
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv ,@AcqVolume, @RemainingVolume,'101',@InvestmentBuyPK
			                            else
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
											--select @AcqVolume,'102', @RemainingVolume
									end
		                            else
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv + @RemainingVolume,'105'
			                            else
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolume,'109', @RemainingVolume, @DoneVolume, @AcqDate,@AcqPrice, @AcqVolumeInv
		                            end
		
		
		
	                                FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
	                            end
	                            CLOSE AB  
	                            DEALLOCATE AB 

                            Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv
                            END
                            Close A
                            Deallocate A

                        Update Investment set StatusDealing  = 3,statusSettlement = 0,OrderStatus = 'R', VoidDealingID = @VoidDealingID,VoidDealingTime = @VoidDealingTime,LastUpdate=@LastUpdate where "
                        + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1,2) "
                        + _paramFund + _paramCounterpart +
                        "--Update Investment set SelectedDealing  = 0";


                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidDealingID);
                        cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_UpdateCounterpartBySelected(Investment _investment)
        {
            try
            {
                string _paramDealingPK = "";
                string _paramDealing = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramDealingPK = " And A.DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                    _paramDealing = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramDealingPK = " And A.DealingPK in (0) ";
                    _paramDealing = " And DealingPK in (0) ";
                }
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd1 = DbCon.CreateCommand())
                    {
                        if (Tools.ClientCode == "03" || Tools.ClientCode == "20" || Tools.ClientCode == "21" || Tools.ClientCode == "22")
                        {
                            cmd1.CommandText = @"
 
                                Declare @DealingPK int
                                Declare @InvestmentPK int
                                Declare @HistoryPK int
                                Declare @ValueDate datetime
                                Declare @InstrumentPK int
                                Declare @InstrumentTypePK int
                                Declare @SettledDate datetime
                                Declare @NextCouponDate datetime
                                Declare @LastCouponDate datetime
                                Declare @TrxType int
                                Declare @Price numeric(18,4)
                                Declare @Volume numeric(18,4)
                                Declare @AcqPrice numeric(18,4)
                                Declare @AcqDate datetime
                                Declare @AcqVolume numeric(18,4)
                                Declare @TaxCapitaGainPercent numeric(18,4)
                                Declare @IncomeTaxInterestPercent numeric(18,4)
                                Declare @BitIsRounding bit


                                Declare @TaxExpensePercent numeric(8,4)

                                Declare @Days int
                                Declare @DivDays int
                                Declare @InterestDays int

                                Declare @CurrencyID nvarchar(20)
                                Declare @CouponRate numeric(8,4)
                                Declare @InterestType int
                                Declare @InterestDaysType int
                                Declare @InterestPaymentType int



                                Declare @AccuredInterestAmount numeric(22,4)
                                Declare @GrossAmount numeric(22,4)
                                Declare @NetAmount numeric(22,4)
                                Declare @ValuePerUnit int
                                Declare @TotalTax Numeric(22,4)

                                Declare
                                @TotalCapGain			decimal(22,4),
                                @TotalAI				decimal(22,4),
                                @TotalTaxCapGain		decimal(22,4),
                                @TotalTaxAI				decimal(22,4)




                                DECLARE A CURSOR FOR 

									Select A.InvestmentPK,A.DealingPK,A.HistoryPK,A.ValueDate,A.InstrumentPK,A.InstrumentTypePK,
									A.SettlementDate,A.NextCouponDate,A.LastCouponDate,
									A.TrxType,A.OrderPrice,A.Volume,A.AcqPrice,A.AcqDate,
									A.AcqVolume,A.IncomeTaxGainPercent,A.IncomeTaxInterestPercent,
									A.BitIsRounding,
									A.TaxExpensePercent,
									C.ID,A.InterestPercent,B.InterestType, 
									B.InterestDaysType,12/D.Priority
									From Investment A
									left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
									left join Currency C on B.CurrencyPK = C.CurrencyPK and C.status = 2
									left join MasterValue D on B.InterestPaymentType = D.Code and D.Status = 2 and D.ID = 'InterestPaymentType'
									where StatusDealing = 1 and ValueDate between @DateFrom1 and @DateTo1 and TrxType = 2 and A.InstrumentTypePK in (2,3,8,9,13,15) 
									" + _paramDealingPK + @"

                                Open A
                                Fetch Next From A
                                Into @InvestmentPK,@DealingPK,@HistoryPK,@ValueDate,@InstrumentPK,@InstrumentTypePK,
                                @SettledDate,@NextCouponDate,@LastCouponDate,
                                @TrxType, @Price,@Volume,@AcqPrice,@AcqDate,
                                @AcqVolume,@TaxCapitaGainPercent,@IncomeTaxInterestPercent,
                                @BitIsRounding,@TaxExpensePercent,
                                @CurrencyID,@CouponRate,@InterestType, 
                                @InterestDaysType,@InterestPaymentType

                                While @@FETCH_STATUS = 0
                                BEGIN  

                                set @TotalCapGain	 = 0	
                                set @TotalAI		 = 0
                                set @TotalTaxCapGain = 0	
                                set @TotalTaxAI		 = 0	
								set @GrossAmount = @Volume * @price/100

                                if @CurrencyID = 'IDR'
                                begin	
									if @InterestType = 3 --ZERO COUPONT
									BEGIN
										set @AccuredInterestAmount = 0
										set @GrossAmount = @Volume * @price/100

										if @InterestDaysType in (2,3,4) -- [Govt Bond] <-> ACT/ACT , ACT/360 (3), ACT/365
										begin
											set @ValuePerUnit = 1000000
											set @DivDays = 0
											set @Days = 0
											set @InterestDays	= case when @InterestDaysType in (3) 
											then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end -- pembagi hari

										end
	
										if @InterestDaysType in (1,5,6,7,8,9) -- [Corp Bond] <-> 30/360 (US/NASD), 30/360 (EUROPEAN), 30/360, 30/360 NON-EOM, ISMA-30/360, ISMA-30/360 NONEOM
										begin
		
											set @ValuePerUnit = 1
											set @DivDays = 0
											set @Days = 0
											set @InterestDays = case when @InterestDaysType in (6) then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate,@SettledDate)) end -- pembagi hari

										end
	
									END
									ELSE
									BEGIN
										if @InterestDaysType in (2,3,4) -- [Govt Bond] <-> ACT/ACT , ACT/360 (3), ACT/365
										begin

											set @ValuePerUnit = 1000000
											set @DivDays = case when @InterestDaysType in (3) 
											then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @NextCouponDate)) 
												else abs(datediff(day, @NextCouponDate, @LastCouponDate)) end -- pembagi hari

											set @Days = case when @InterestDaysType in (3) 
											then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) 
												else abs(datediff(day, @SettledDate, @LastCouponDate)) end -- pembagi hari

											set @InterestDays	= case when @InterestDaysType in (3) 
											then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end -- pembagi hari


										end
		
										if @InterestDaysType in (1,5,6,7,8,9) -- [Corp Bond] <-> 30/360 (US/NASD), 30/360 (EUROPEAN), 30/360, 30/360 NON-EOM, ISMA-30/360, ISMA-30/360 NONEOM
										begin
		
											set @ValuePerUnit = 1
											set @DivDays = case when @InterestDaysType in (6) 
											then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @NextCouponDate)) else abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @NextCouponDate)) end -- pembagi hari
			
											set @Days = case when @InterestDaysType in (6) 
											then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) end -- pembagi hari
		
											set @InterestDays = case when @InterestDaysType in (6) then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate,@SettledDate)) end -- pembagi hari

										end
									end
                                end

                                if @CurrencyID = 'USD' -- USD
                                begin
									if @InterestType = 3 -- ZERO COUPONT
									BEGIN
										set @AccuredInterestAmount = 0
										set @GrossAmount = @Volume * @price/100
		
									END
									ELSE
									BEGIN
										if @InstrumentTypePK in (2) -- [Govt Bond]
										BEGIN	
											set @ValuePerUnit = 1
											set @DivDays = abs([dbo].[FGetDateDIffGovermentBond](@LastCouponDate, @NextCouponDate))
											set @Days = abs([dbo].[FGetDateDIffGovermentBond](@LastCouponDate, @SettledDate))
											set @InterestDays	= abs([dbo].[FGetDateDIffGovermentBond](@AcqDate, @SettledDate)) -- total hari Interest
			
										END
										Else if @InstrumentTypePK in (3) -- Corp Bond
										BEGIN
											set @ValuePerUnit = 1
											set @DivDays = abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @NextCouponDate)) -- pembagi hari
											set @Days = abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) -- total hari
			
										END
									END
                                end


                                
	                            if @InstrumentTypePK in (3,8,9,15)
	                            BEGIN
		                            set @AccuredInterestAmount = @Volume * (@CouponRate / 100) * @Days / 360
	                            END
	                            ELSE IF @InstrumentTypePK in (2,13)
	                            BEGIN
			                        set @AccuredInterestAmount = @Volume / @ValuePerUnit * (round(@CouponRate / 100 
			                        * @Days / @DivDays / @InterestPaymentType * @ValuePerUnit, 0))
	                            END

								set @TotalCapGain = 0
                                set @TotalAI = 0
								set @GrossAmount = @GrossAmount + @AccuredInterestAmount

                                select @TotalCapGain = case when IncomeTaxGainAmount + IncomeTaxInterestAmount > 0 then @TotalCapGain + isnull(IncomeTaxGainAmount,0) else @TotalCapGain end,
                                @TotalAI = case when IncomeTaxGainAmount + IncomeTaxInterestAmount > 0 then @TotalAI + isnull(IncomeTaxInterestAmount,0) else @TotalAI end from InvestmentTaxDataAcq where investmentpk = @InvestmentPK

                                --set @AccuredInterestAmount = @TotalAI
						        set @TotalTaxCapGain = @TotalCapGain * @TaxCapitaGainPercent/100
						        set @TotalTaxAI = @TotalAI * @TaxExpensePercent/100
						        if (@TotalCapGain + @TotalAI) < 0
                                begin
							        set @TotalTax = 0
							        set @TotalTaxCapGain = 0
							        select @TotalTaxAI = sum(isnull(TaxAmount,0)) from InvestmentTaxDataAcq where investmentpk = @InvestmentPK
						            
                                end
						        else
							        set @TotalTax = (@TotalTaxCapGain + @TotalTaxAI)
						
						        set @NetAmount = isnull(@GrossAmount,0) - isnull(@TotalTax,0)

                                if @TotalTaxCapGain < 0
                                begin
                                    set @TotalTaxAI = @TotalTaxAI + @TotalTaxCapGain
                                    set @TotalTaxCapGain = 0
                                end

                          
                                Update Investment set IncomeTaxInterestAmount = @TotalTaxAI, IncomeTaxGainAmount = @TotalTaxCapGain, TotalAmount = @NetAmount,DoneAccruedInterest = @AccuredInterestAmount
                                where DealingPK = @DealingPK and HistoryPK = @HistoryPK



                                Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@ValueDate,@InstrumentPK,@InstrumentTypePK,
                                @SettledDate,@NextCouponDate,@LastCouponDate,
                                @TrxType, @Price,@Volume,@AcqPrice,@AcqDate,
                                @AcqVolume,@TaxCapitaGainPercent,@IncomeTaxInterestPercent,
                                @BitIsRounding,@TaxExpensePercent,
                                @CurrencyID,@CouponRate,@InterestType, 
                                @InterestDaysType,@InterestPaymentType
                                END
                                Close A
                                Deallocate A

                                Select isnull(@AccuredInterestAmount,0) InterestAmount, isnull(@TotalTaxAI,0) IncomeTaxInterestAmount,isnull(@TotalTaxCapGain,0) IncomeTaxGainAmount,
                                isnull(@GrossAmount,0) GrossAmount, isnull(@NetAmount,0) NetAmount 
";

                            cmd1.Parameters.AddWithValue("@DateFrom1", _investment.DateFrom);
                            cmd1.Parameters.AddWithValue("@DateTo1", _investment.DateTo);
                            cmd1.Parameters.AddWithValue("@ClientCode", Tools.ClientCode);
                            cmd1.ExecuteReader();
                            DbCon.Close();
                            DbCon.Open();
                        }

                    }


                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (2,3,8,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)";
                        }
                        else
                        {
                            _paramInstrumentType = "InstrumentTypePK = @InstrumentTypePK";
                        }

                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType  ";
                        }


                        if (_investment.InstrumentTypePK == 1)
                        {
                            cmd.CommandText = @"Update Investment set CounterpartPK = @CounterpartPK,BoardType=@BoardType, SettlementMode=@SettlementMode ,OrderStatus = 'O', ApprovedDealingID = @UpdateDealingID, ApprovedDealingTime = @UpdateDealingTime 
                            where " + _paramInstrumentType + _paramTrxType + _paramDealing + " and ValueDate between @DateFrom and @DateTo and statusDealing  = 1 " + _paramFund +
                            "--Update Investment set selectedDealing  = 0";

                            cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                        }
                        else
                        {
                            cmd.CommandText = @"Update Investment set CounterpartPK = @CounterpartPK, SettlementMode=@SettlementMode ,OrderStatus = 'O', ApprovedDealingID = @UpdateDealingID, ApprovedDealingTime = @UpdateDealingTime 
                            where " + _paramInstrumentType + _paramTrxType + _paramDealing + " and ValueDate between @DateFrom and @DateTo and statusDealing  = 1 " + _paramFund +
                            "--Update Investment set selectedDealing  = 0";
                        }

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);

                        cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                        cmd.Parameters.AddWithValue("@UpdateDealingID", _investment.UpdateDealingID);
                        cmd.Parameters.AddWithValue("@UpdateDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Dealing_Update(Investment _investment, bool _havePrivillege)
        {
            try
            {
                int _newHisPK;
                int status = _investment.StatusDealing;
                DateTime _dateTimeNow = DateTime.Now;



                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    if (_havePrivillege)
                    {
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            if (_investment.DealingPK != 0)
                            {
                                cmd.CommandText =
                                @" declare @CFundPK int, @CCrossFundFromPK int, @CValueDate datetime, @CInstrumentPK int, @CInstrumentTypePK int, @COrderPrice numeric(19, 8),
                                @CVolume numeric(19,8),@CAmount numeric(19,8), @CSettledDate datetime, @CAcqPrice numeric(19,8), @CAcqVolume numeric(19,4), @CAcqDate datetime


                                select top 1 @CFundPK = FundPK, @CCrossFundFromPK = CrossFundFromPK, @CValueDate = ValueDate, @CInstrumentPK = InstrumentPK, 
                                @CInstrumentTypePK = InstrumentTypePK, @COrderPrice = OrderPrice, @CVolume = Volume, @CAmount = Amount, @CSettledDate = SettlementDate
                                from Investment where DealingPK = @DealingPK and HistoryPK = @HistoryPK  and statusDealing in (1,2)  " +


                                _updateCommand + @"ApprovedDealingID=@ApprovedDealingID, 
                                ApprovedDealingTime=@ApprovedDealingTime,UpdateDealingID=@UpdateDealingID,UpdateDealingTime=@UpdateDealingTime,LastUpdate=@lastUpdate 
                                where DealingPK = @DealingPK and historyPK = @HistoryPK


                                if (@CrossFundFromPK <> 0)
                                BEGIN
                                    Update Investment set Notes='',DealingPK=@DealingPK,StatusDealing=@StatusDealing,SettlementPK=@SettlementPK,StatusSettlement=@StatusSettlement,ValueDate=@ValueDate,PeriodPK=@PeriodPK,InstructionDate=@InstructionDate,Reference=@Reference,InstrumentTypePK=@InstrumentTypePK,
                                    TrxType=1,TrxTypeID='BUY',CounterpartPK=@CounterpartPK,InstrumentPK=@InstrumentPK,FundPK=@CrossFundFromPK,FundCashRefPK=@FundCashRefPK,OrderPrice=@OrderPrice,Lot=@Lot,LotInShare=@LotInShare,RangePrice=@RangePrice,Volume=@Volume,Amount=@Amount,
                                    InterestPercent=@InterestPercent,BreakInterestPercent=@BreakInterestPercent,AccruedInterest=@AccruedInterest,LastCouponDate=@LastCouponDate,NextCouponDate=@NextCouponDate,MaturityDate=@MaturityDate,SettlementDate=@SettlementDate,AcqDate=@AcqDate,AcqPrice=@Acqprice,AcqVolume=@AcqVolume,
                                    DoneLot=@DoneLot,DoneVolume=@DoneVolume,DonePrice=@DonePrice,DoneAmount=@DoneAmount,Tenor=@Tenor,CommissionPercent=@CommissionPercent,
                                    LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxSellPercent=@IncomeTaxSellPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,
                                    IncomeTaxGainPercent=@IncomeTaxGainPercent,CommissionAmount=@CommissionAmount,LevyAmount=@LevyAmount,KPEIAmount=@KPEIAmount,VATAmount=@VATAmount,WHTAmount=@WHTAmount,OTCAmount=@OTCAmount,IncomeTaxSellAmount=@IncomeTaxSellAmount,
                                    IncomeTaxInterestAmount=@IncomeTaxInterestAmount,IncomeTaxGainAmount=@IncomeTaxGainAmount,TotalAmount=@TotalAmount,CurrencyRate=@CurrencyRate,SettlementMode=@SettlementMode,BoardType=@BoardType,AcqPrice1=@AcqPrice1,AcqVolume1=@AcqVolume1,AcqDate1=@AcqDate1,AcqPrice2=@AcqPrice2,AcqVolume2=@AcqVolume2,AcqDate2=@AcqDate2,AcqPrice3=@AcqPrice3,AcqVolume3=@AcqVolume3,AcqDate3=@AcqDate3,AcqPrice4=@AcqPrice4,AcqVolume4=@AcqVolume4,AcqDate4=@AcqDate4,AcqPrice5=@AcqPrice5,AcqVolume5=@AcqVolume5,AcqDate5=@AcqDate5, 
                                    AcqPrice6=@AcqPrice6,AcqVolume6=@AcqVolume6,AcqDate6=@AcqDate6,AcqPrice7=@AcqPrice7,AcqVolume7=@AcqVolume7,AcqDate7=@AcqDate7,AcqPrice8=@AcqPrice8,AcqVolume8=@AcqVolume8,AcqDate8=@AcqDate8,AcqPrice9=@AcqPrice9,AcqVolume9=@AcqVolume9,AcqDate9=@AcqDate9, 
                                    Category = @Category,BankBranchPK = @BankBranchPK,MarketPK = @MarketPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode =@PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest=@DoneAccruedInterest,YieldPercent=@YieldPercent,BitIsRounding=@BitIsRounding,AccruedHoldingAmount=@AccruedHoldingAmount,BitBreakable=@BitBreakable,CrossFundFromPK = @FundPK,PurposeOfTransaction=@PurposeOfTransaction,StatutoryType=@StatutoryType,BitForeignTrx=@BitForeignTrx,
                                    CPSafekeepingAccNumber=@CPSafekeepingAccNumber,PlaceOfSettlement=@PlaceOfSettlement,FundSafekeepingAccountNumber=@FundSafekeepingAccountNumber,SecurityCodeType=@SecurityCodeType,BitHTM=@BitHTM,BitRollOverInterest=@BitRollOverInterest,InvestmentTrType=@InvestmentTrType,AmountToTransfer=@AmountToTransfer,
                                    BIRate=@BIRate,InvestmentStrategy=@InvestmentStrategy,InvestmentStyle=@InvestmentStyle,InvestmentObjective=@InvestmentObjective,Revision=@Revision,OtherInvestmentStyle=@OtherInvestmentStyle,OtherInvestmentObjective=@OtherInvestmentObjective,OtherRevision=@OtherRevision,
                                    AcqDate10=@AcqDate10, AcqPrice10=@AcqPrice10, AcqVolume10=@AcqVolume10, AcqDate11=@AcqDate11, AcqPrice11=@AcqPrice11, AcqVolume11=@AcqVolume11, AcqDate12=@AcqDate12, AcqPrice12=@AcqPrice12, AcqVolume12=@AcqVolume12, 
                                    AcqDate13=@AcqDate13, AcqPrice13=@AcqPrice13, AcqVolume13=@AcqVolume13, AcqDate14=@AcqDate14, AcqPrice14=@AcqPrice14, AcqVolume14=@AcqVolume14, AcqDate15=@AcqDate15, AcqPrice15=@AcqPrice15, AcqVolume15=@AcqVolume15, 
                                    AcqDate16=@AcqDate16, AcqPrice16=@AcqPrice16, AcqVolume16=@AcqVolume16, AcqDate17=@AcqDate17, AcqPrice17=@AcqPrice17, AcqVolume17=@AcqVolume17, AcqDate18=@AcqDate18, AcqPrice18=@AcqPrice18, AcqVolume18=@AcqVolume18, 
                                    AcqDate19=@AcqDate19, AcqPrice19=@AcqPrice19, AcqVolume19=@AcqVolume19, AcqDate20=@AcqDate20, AcqPrice20=@AcqPrice20, AcqVolume20=@AcqVolume20, AcqDate21=@AcqDate21, AcqPrice21=@AcqPrice21, AcqVolume21=@AcqVolume21, 
                                    AcqDate22=@AcqDate22, AcqPrice22=@AcqPrice22, AcqVolume22=@AcqVolume22, AcqDate23=@AcqDate23, AcqPrice23=@AcqPrice23, AcqVolume23=@AcqVolume23, AcqDate24=@AcqDate24, AcqPrice24=@AcqPrice24, AcqVolume24=@AcqVolume24, 
                                    AcqDate25=@AcqDate25, AcqPrice25=@AcqPrice25, AcqVolume25=@AcqVolume25, AcqDate26=@AcqDate26, AcqPrice26=@AcqPrice26, AcqVolume26=@AcqVolume26, AcqDate27=@AcqDate27, AcqPrice27=@AcqPrice27, AcqVolume27=@AcqVolume27, 
                                    AcqDate28=@AcqDate28, AcqPrice28=@AcqPrice28, AcqVolume28=@AcqVolume28, AcqDate29=@AcqDate29, AcqPrice29=@AcqPrice29, AcqVolume29=@AcqVolume29, ApprovedDealingID=@ApprovedDealingID, 
                                    ApprovedDealingTime=@ApprovedDealingTime,UpdateDealingID=@UpdateDealingID,UpdateDealingTime=@UpdateDealingTime,LastUpdate=@lastUpdate  From Investment
                                    where FundPK = @CCrossFundFromPK and CrossFundFromPK = @CFundPK and ValueDate = @CValueDate and InstrumentPK = @CInstrumentPK
                                    and InstrumentTypePK = @CInstrumentTypePK and OrderPrice = @COrderPrice and Volume = @CVolume and Amount = @CAmount and SettlementDate = @CSettledDate
                                    and StatusDealing in (1,2)
                                END "

;
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);

                            }

                            // Approved dari Pending
                            else
                            {
                                cmd.CommandText =
                                @" declare @CFundPK int, @CCrossFundFromPK int, @CValueDate datetime, @CInstrumentPK int, @CInstrumentTypePK int, @COrderPrice numeric(19, 8),
                                @CVolume numeric(19,8),@CAmount numeric(19,8), @CSettledDate datetime, @CAcqPrice numeric(19,8), @CAcqVolume numeric(19,4), @CAcqDate datetime


                                select top 1 @CFundPK = FundPK, @CCrossFundFromPK = CrossFundFromPK, @CValueDate = ValueDate, @CInstrumentPK = InstrumentPK, 
                                @CInstrumentTypePK = InstrumentTypePK, @COrderPrice = OrderPrice, @CVolume = Volume, @CAmount = Amount, @CSettledDate = SettlementDate
                                from Investment where DealingPK = @DealingPK and HistoryPK = @HistoryPK  and statusDealing in (1,2)  " +



                                _updateCommand + @"ApprovedDealingID=@ApprovedDealingID, 
                                ApprovedDealingTime=@ApprovedDealingTime,UpdateDealingID=@UpdateDealingID,UpdateDealingTime=@UpdateDealingTime,LastUpdate=@lastUpdate 
                                where DealingPK = @DealingPK and historyPK = @HistoryPK


                                if (@CrossFundFromPK <> 0)
                                BEGIN
                                    Update Investment set Notes='',DealingPK=@DealingPK,StatusDealing=@StatusDealing,SettlementPK=@SettlementPK,StatusSettlement=@StatusSettlement,ValueDate=@ValueDate,PeriodPK=@PeriodPK,InstructionDate=@InstructionDate,Reference=@Reference,InstrumentTypePK=@InstrumentTypePK,
                                    TrxType=1,TrxTypeID='BUY',CounterpartPK=@CounterpartPK,InstrumentPK=@InstrumentPK,FundPK=@CrossFundFromPK,FundCashRefPK=@FundCashRefPK,OrderPrice=@OrderPrice,Lot=@Lot,LotInShare=@LotInShare,RangePrice=@RangePrice,Volume=@Volume,Amount=@Amount,
                                    InterestPercent=@InterestPercent,BreakInterestPercent=@BreakInterestPercent,AccruedInterest=@AccruedInterest,LastCouponDate=@LastCouponDate,NextCouponDate=@NextCouponDate,MaturityDate=@MaturityDate,SettlementDate=@SettlementDate,AcqDate=@AcqDate,AcqPrice=@AcqPrice,AcqVolume=@AcqVolume,
                                    DoneLot=@DoneLot,DoneVolume=@DoneVolume,DonePrice=@DonePrice,DoneAmount=@DoneAmount,Tenor=@Tenor,CommissionPercent=@CommissionPercent,
                                    LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxSellPercent=@IncomeTaxSellPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,
                                    IncomeTaxGainPercent=@IncomeTaxGainPercent,CommissionAmount=@CommissionAmount,LevyAmount=@LevyAmount,KPEIAmount=@KPEIAmount,VATAmount=@VATAmount,WHTAmount=@WHTAmount,OTCAmount=@OTCAmount,IncomeTaxSellAmount=@IncomeTaxSellAmount,
                                    IncomeTaxInterestAmount=@IncomeTaxInterestAmount,IncomeTaxGainAmount=@IncomeTaxGainAmount,TotalAmount=@TotalAmount,CurrencyRate=@CurrencyRate,SettlementMode=@SettlementMode,BoardType=@BoardType,AcqPrice1=@AcqPrice1,AcqVolume1=@AcqVolume1,AcqDate1=@AcqDate1,AcqPrice2=@AcqPrice2,AcqVolume2=@AcqVolume2,AcqDate2=@AcqDate2,AcqPrice3=@AcqPrice3,AcqVolume3=@AcqVolume3,AcqDate3=@AcqDate3,AcqPrice4=@AcqPrice4,AcqVolume4=@AcqVolume4,AcqDate4=@AcqDate4,AcqPrice5=@AcqPrice5,AcqVolume5=@AcqVolume5,AcqDate5=@AcqDate5, 
                                    AcqPrice6=@AcqPrice6,AcqVolume6=@AcqVolume6,AcqDate6=@AcqDate6,AcqPrice7=@AcqPrice7,AcqVolume7=@AcqVolume7,AcqDate7=@AcqDate7,AcqPrice8=@AcqPrice8,AcqVolume8=@AcqVolume8,AcqDate8=@AcqDate8,AcqPrice9=@AcqPrice9,AcqVolume9=@AcqVolume9,AcqDate9=@AcqDate9, 
                                    Category = @Category,BankBranchPK = @BankBranchPK,MarketPK = @MarketPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode =@PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest=@DoneAccruedInterest,YieldPercent=@YieldPercent,BitIsRounding=@BitIsRounding,AccruedHoldingAmount=@AccruedHoldingAmount,BitBreakable=@BitBreakable,CrossFundFromPK = @FundPK,PurposeOfTransaction=@PurposeOfTransaction,StatutoryType=@StatutoryType,BitForeignTrx=@BitForeignTrx,
                                    CPSafekeepingAccNumber=@CPSafekeepingAccNumber,PlaceOfSettlement=@PlaceOfSettlement,FundSafekeepingAccountNumber=@FundSafekeepingAccountNumber,SecurityCodeType=@SecurityCodeType,BitHTM=@BitHTM,BitRollOverInterest=@BitRollOverInterest,InvestmentTrType=@InvestmentTrType,AmountToTransfer=@AmountToTransfer,
                                    BIRate=@BIRate,InvestmentStrategy=@InvestmentStrategy,InvestmentStyle=@InvestmentStyle,InvestmentObjective=@InvestmentObjective,Revision=@Revision,OtherInvestmentStyle=@OtherInvestmentStyle,OtherInvestmentObjective=@OtherInvestmentObjective,OtherRevision=@OtherRevision,
                                    AcqDate10=@AcqDate10, AcqPrice10=@AcqPrice10, AcqVolume10=@AcqVolume10, AcqDate11=@AcqDate11, AcqPrice11=@AcqPrice11, AcqVolume11=@AcqVolume11, AcqDate12=@AcqDate12, AcqPrice12=@AcqPrice12, AcqVolume12=@AcqVolume12, 
                                    AcqDate13=@AcqDate13, AcqPrice13=@AcqPrice13, AcqVolume13=@AcqVolume13, AcqDate14=@AcqDate14, AcqPrice14=@AcqPrice14, AcqVolume14=@AcqVolume14, AcqDate15=@AcqDate15, AcqPrice15=@AcqPrice15, AcqVolume15=@AcqVolume15, 
                                    AcqDate16=@AcqDate16, AcqPrice16=@AcqPrice16, AcqVolume16=@AcqVolume16, AcqDate17=@AcqDate17, AcqPrice17=@AcqPrice17, AcqVolume17=@AcqVolume17, AcqDate18=@AcqDate18, AcqPrice18=@AcqPrice18, AcqVolume18=@AcqVolume18, 
                                    AcqDate19=@AcqDate19, AcqPrice19=@AcqPrice19, AcqVolume19=@AcqVolume19, AcqDate20=@AcqDate20, AcqPrice20=@AcqPrice20, AcqVolume20=@AcqVolume20, AcqDate21=@AcqDate21, AcqPrice21=@AcqPrice21, AcqVolume21=@AcqVolume21, 
                                    AcqDate22=@AcqDate22, AcqPrice22=@AcqPrice22, AcqVolume22=@AcqVolume22, AcqDate23=@AcqDate23, AcqPrice23=@AcqPrice23, AcqVolume23=@AcqVolume23, AcqDate24=@AcqDate24, AcqPrice24=@AcqPrice24, AcqVolume24=@AcqVolume24, 
                                    AcqDate25=@AcqDate25, AcqPrice25=@AcqPrice25, AcqVolume25=@AcqVolume25, AcqDate26=@AcqDate26, AcqPrice26=@AcqPrice26, AcqVolume26=@AcqVolume26, AcqDate27=@AcqDate27, AcqPrice27=@AcqPrice27, AcqVolume27=@AcqVolume27, 
                                    AcqDate28=@AcqDate28, AcqPrice28=@AcqPrice28, AcqVolume28=@AcqVolume28, AcqDate29=@AcqDate29, AcqPrice29=@AcqPrice29, AcqVolume29=@AcqVolume29, ApprovedDealingID=@ApprovedDealingID, 
                                    ApprovedDealingTime=@ApprovedDealingTime,UpdateDealingID=@UpdateDealingID,UpdateDealingTime=@UpdateDealingTime,LastUpdate=@lastUpdate From Investment
                                    where FundPK = @CCrossFundFromPK and CrossFundFromPK = @CFundPK and ValueDate = @CValueDate and InstrumentPK = @CInstrumentPK
                                    and InstrumentTypePK = @CInstrumentTypePK and OrderPrice = @COrderPrice and Volume = @CVolume and Amount = @CAmount and SettlementDate = @CSettledDate
                                    and StatusDealing in (1,2)
                                END



";
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.InvestmentPK);

                            }


                            cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                            cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@StatusInvestment", 2);
                            cmd.Parameters.AddWithValue("@DealingPK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                            cmd.Parameters.AddWithValue("@StatusDealing", 2);
                            cmd.Parameters.AddWithValue("@statusSettlement", 1);
                            cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                            cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                            cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                            cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                            cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                            cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                            cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                            cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                            cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                            cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                            cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                            cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                            cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                            cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                            cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                            cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                            cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                            cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                            cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                            cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                            if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                            {
                                cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                            }

                            if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                            {
                                cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                            }

                            if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                            {
                                cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                            }
                            if (_investment.InvestmentTrType == 0 || _investment.InvestmentTrType == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentTrType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentTrType", _investment.InvestmentTrType);
                            }

                            if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                            {
                                cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                            }

                            if (_investment.SettledDate == "" || _investment.SettledDate == null)
                            {
                                cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                            }
                            cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                            cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                            cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                            cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                            cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                            cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                            cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                            cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                            cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                            cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                            cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                            cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                            cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                            cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                            cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                            cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                            cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                            cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                            cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                            cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                            cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                            cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                            cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                            cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                            if (_investment.AcqDate == "" || _investment.AcqDate == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                            cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                            if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                            cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                            if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                            cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                            if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                            cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                            if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                            cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                            if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                            cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                            if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                            cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                            if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                            cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                            if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                            cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                            if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice10", _investment.AcqPrice10);
                            cmd.Parameters.AddWithValue("@AcqVolume10", _investment.AcqVolume10);
                            if (_investment.AcqDate10 == "" || _investment.AcqDate10 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate10", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate10", _investment.AcqDate10);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice11", _investment.AcqPrice11);
                            cmd.Parameters.AddWithValue("@AcqVolume11", _investment.AcqVolume11);
                            if (_investment.AcqDate11 == "" || _investment.AcqDate11 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate11", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate11", _investment.AcqDate11);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice12", _investment.AcqPrice12);
                            cmd.Parameters.AddWithValue("@AcqVolume12", _investment.AcqVolume12);
                            if (_investment.AcqDate12 == "" || _investment.AcqDate12 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate12", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate12", _investment.AcqDate12);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice13", _investment.AcqPrice13);
                            cmd.Parameters.AddWithValue("@AcqVolume13", _investment.AcqVolume13);
                            if (_investment.AcqDate13 == "" || _investment.AcqDate13 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate13", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate13", _investment.AcqDate13);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice14", _investment.AcqPrice14);
                            cmd.Parameters.AddWithValue("@AcqVolume14", _investment.AcqVolume14);
                            if (_investment.AcqDate14 == "" || _investment.AcqDate14 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate14", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate14", _investment.AcqDate14);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice15", _investment.AcqPrice15);
                            cmd.Parameters.AddWithValue("@AcqVolume15", _investment.AcqVolume15);
                            if (_investment.AcqDate15 == "" || _investment.AcqDate15 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate15", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate15", _investment.AcqDate15);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice16", _investment.AcqPrice16);
                            cmd.Parameters.AddWithValue("@AcqVolume16", _investment.AcqVolume16);
                            if (_investment.AcqDate16 == "" || _investment.AcqDate16 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate16", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate16", _investment.AcqDate16);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice17", _investment.AcqPrice17);
                            cmd.Parameters.AddWithValue("@AcqVolume17", _investment.AcqVolume17);
                            if (_investment.AcqDate17 == "" || _investment.AcqDate17 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate17", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate17", _investment.AcqDate17);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice18", _investment.AcqPrice18);
                            cmd.Parameters.AddWithValue("@AcqVolume18", _investment.AcqVolume18);
                            if (_investment.AcqDate18 == "" || _investment.AcqDate18 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate18", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate18", _investment.AcqDate18);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice19", _investment.AcqPrice19);
                            cmd.Parameters.AddWithValue("@AcqVolume19", _investment.AcqVolume19);
                            if (_investment.AcqDate19 == "" || _investment.AcqDate19 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate19", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate19", _investment.AcqDate19);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice20", _investment.AcqPrice20);
                            cmd.Parameters.AddWithValue("@AcqVolume20", _investment.AcqVolume20);
                            if (_investment.AcqDate20 == "" || _investment.AcqDate20 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate20", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate20", _investment.AcqDate20);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice21", _investment.AcqPrice21);
                            cmd.Parameters.AddWithValue("@AcqVolume21", _investment.AcqVolume21);
                            if (_investment.AcqDate21 == "" || _investment.AcqDate21 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate21", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate21", _investment.AcqDate21);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice22", _investment.AcqPrice22);
                            cmd.Parameters.AddWithValue("@AcqVolume22", _investment.AcqVolume22);
                            if (_investment.AcqDate22 == "" || _investment.AcqDate22 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate22", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate22", _investment.AcqDate22);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice23", _investment.AcqPrice23);
                            cmd.Parameters.AddWithValue("@AcqVolume23", _investment.AcqVolume23);
                            if (_investment.AcqDate23 == "" || _investment.AcqDate23 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate23", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate23", _investment.AcqDate23);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice24", _investment.AcqPrice24);
                            cmd.Parameters.AddWithValue("@AcqVolume24", _investment.AcqVolume24);
                            if (_investment.AcqDate24 == "" || _investment.AcqDate24 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate24", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate24", _investment.AcqDate24);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice25", _investment.AcqPrice25);
                            cmd.Parameters.AddWithValue("@AcqVolume25", _investment.AcqVolume25);
                            if (_investment.AcqDate25 == "" || _investment.AcqDate25 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate25", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate25", _investment.AcqDate25);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice26", _investment.AcqPrice26);
                            cmd.Parameters.AddWithValue("@AcqVolume26", _investment.AcqVolume26);
                            if (_investment.AcqDate26 == "" || _investment.AcqDate26 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate26", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate26", _investment.AcqDate26);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice27", _investment.AcqPrice27);
                            cmd.Parameters.AddWithValue("@AcqVolume27", _investment.AcqVolume27);
                            if (_investment.AcqDate27 == "" || _investment.AcqDate27 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate27", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate27", _investment.AcqDate27);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice28", _investment.AcqPrice28);
                            cmd.Parameters.AddWithValue("@AcqVolume28", _investment.AcqVolume28);
                            if (_investment.AcqDate28 == "" || _investment.AcqDate28 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate28", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate28", _investment.AcqDate28);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice29", _investment.AcqPrice29);
                            cmd.Parameters.AddWithValue("@AcqVolume29", _investment.AcqVolume29);
                            if (_investment.AcqDate29 == "" || _investment.AcqDate29 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate29", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate29", _investment.AcqDate29);
                            }
                            if (_investment.Category == "" || _investment.Category == null)
                            {
                                cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@Category", _investment.Category);
                            }

                            if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                            {
                                cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                            }

                            if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                            {
                                cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                            }

                            if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                            {
                                cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                            }
                            if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                            {
                                cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                            }
                            if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                            {
                                cmd.Parameters.AddWithValue("@PriceMode", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                            }

                            if (_investment.BitIsAmortized == null)
                            {
                                cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                            }

                            if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                            {
                                cmd.Parameters.AddWithValue("@YieldPercent", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                            }

                            if (_investment.BitIsRounding == null)
                            {
                                cmd.Parameters.AddWithValue("@BitIsRounding", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                            }

                            if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                            {
                                cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                            }
                            if (_investment.BitBreakable == null)
                            {
                                cmd.Parameters.AddWithValue("@BitBreakable", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                            }
                            if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                            {
                                cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                            }
                            if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                            {
                                cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                            }

                            if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                            {
                                cmd.Parameters.AddWithValue("@StatutoryType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                            }

                            cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                            cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);

                            if (_investment.CPSafekeepingAccNumber == null)
                            {
                                cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", "");
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                            }
                            if (_investment.PlaceOfSettlement == null)
                            {
                                cmd.Parameters.AddWithValue("@PlaceOfSettlement", "");
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                            }
                            if (_investment.FundSafekeepingAccountNumber == null)
                            {
                                cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", "");
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                            }

                            if (_investment.SecurityCodeType == 0 || _investment.SecurityCodeType == null)
                            {
                                cmd.Parameters.AddWithValue("@SecurityCodeType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                            }
                            if (_investment.BitHTM == null)
                            {
                                cmd.Parameters.AddWithValue("@BitHTM", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                            }
                            if (_investment.BitRollOverInterest == null)
                            {
                                cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                            }

                            if (_investment.BIRate == 0 || _investment.BIRate == null)
                            {
                                cmd.Parameters.AddWithValue("@BIRate", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                            }

                            if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                            }

                            if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                            }

                            if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                            }

                            if (_investment.Revision == 0 || _investment.Revision == null)
                            {
                                cmd.Parameters.AddWithValue("@Revision", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                            }

                            if (_investment.OtherInvestmentStyle == "" || _investment.OtherInvestmentStyle == null)
                            {
                                cmd.Parameters.AddWithValue("@OtherInvestmentStyle", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                            }

                            if (_investment.OtherInvestmentObjective == "" || _investment.OtherInvestmentObjective == null)
                            {
                                cmd.Parameters.AddWithValue("@OtherInvestmentObjective", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                            }

                            if (_investment.OtherRevision == "" || _investment.OtherRevision == null)
                            {
                                cmd.Parameters.AddWithValue("@OtherRevision", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);
                            }


                            cmd.Parameters.AddWithValue("@UpdateDealingID", _investment.UpdateDealingID);
                            cmd.Parameters.AddWithValue("@UpdatetDealingTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@ApprovedDealingID", _investment.ApprovedDealingID);
                            cmd.Parameters.AddWithValue("@ApprovedDealingTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@lastupdate", _dateTimeNow);
                            cmd.ExecuteNonQuery();
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = "Update Investment set statusDealing= 3,VoidDealingID=@VoidDealingID,VoidDealingTime=@VoidDealingTime,LastUpdate=@LastUpdate where InvestmentPK = @PK and statusDealing = 4";
                            cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidDealingID);
                            cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                            cmd.ExecuteNonQuery();
                        }
                        _newHisPK = 0;
                    }
                    else
                    {
                        if (status == 1)
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                if (_investment.InstrumentTypePK == 1 && _investment.CounterpartPK != 0)
                                {
                                    cmd.CommandText = _updateCommand +
                                    "OrderStatus = 'O',InvestmentNotes =  @InvestmentNotes,UpdateDealingID=@UpdateDealingID,UpdateDealingTime=@UpdateDealingTime,LastUpdate=@LastUpdate " +
                                    "where DealingPK = @PK and historyPK = @HistoryPK";
                                }
                                else
                                {
                                    cmd.CommandText =
                                    @" declare @CFundPK int, @CCrossFundFromPK int, @CValueDate datetime, @CInstrumentPK int, @CInstrumentTypePK int, @COrderPrice numeric(19, 8),
                                    @CVolume numeric(19,8),@CAmount numeric(19,8), @CSettledDate datetime


                                    select top 1 @CFundPK = FundPK, @CCrossFundFromPK = CrossFundFromPK, @CValueDate = ValueDate, @CInstrumentPK = InstrumentPK, 
                                    @CInstrumentTypePK = InstrumentTypePK, @COrderPrice = OrderPrice, @CVolume = Volume, @CAmount = Amount, @CSettledDate = SettlementDate
                                    from Investment where DealingPK = @DealingPK and HistoryPK = @HistoryPK and statusDealing in (1,2) 


                                    if (isnull(@CrossFundFromPK,0) = 0)   
                                    BEGIN
                                    " +

                                    _updateCommand +
                                    @"OrderStatus = 'O',InvestmentNotes = @InvestmentNotes,UpdateDealingID=@UpdateDealingID,UpdateDealingTime=@UpdateDealingTime,LastUpdate=@LastUpdate 
                                    where DealingPK = @PK and historyPK = @HistoryPK
                                    END
                                    ELSE
                                    BEGIN
                                        Update Investment set Notes = '',
                                        TrxType=2,TrxTypeID='SELL',CounterpartPK= @CounterpartPK,SettlementDate = @SettlementDate,AcqDate = @AcqDate,AcqPrice = @AcqPrice,AcqVolume = @AcqVolume,
                                        DoneLot = @DoneLot,DoneVolume = @DoneVolume,DonePrice = @DonePrice,DoneAmount = @DoneAmount,Tenor = @Tenor,CommissionPercent = @CommissionPercent,
                                        LevyPercent = @LevyPercent,KPEIPercent = @KPEIPercent,VATPercent = @VATPercent,WHTPercent = @WHTPercent,OTCPercent = @OTCPercent,IncomeTaxSellPercent = @IncomeTaxSellPercent,IncomeTaxInterestPercent = @IncomeTaxInterestPercent,
                                        IncomeTaxGainPercent = @IncomeTaxGainPercent,CommissionAmount = @CommissionAmount,LevyAmount = @LevyAmount,KPEIAmount = @KPEIAmount,VATAmount = @VATAmount,WHTAmount = @WHTAmount,OTCAmount = @OTCAmount,IncomeTaxSellAmount = @IncomeTaxSellAmount,
                                        IncomeTaxInterestAmount = @IncomeTaxInterestAmount,IncomeTaxGainAmount = @IncomeTaxGainAmount,TotalAmount = @TotalAmount,CurrencyRate = @CurrencyRate,BoardType = @BoardType,AcqPrice1 = @AcqPrice1,AcqVolume1 = @AcqVolume1,AcqDate1 = @AcqDate1,AcqPrice2 = @AcqPrice2,AcqVolume2 = @AcqVolume2,AcqDate2 = @AcqDate2,AcqPrice3 = @AcqPrice3,AcqVolume3 = @AcqVolume3,AcqDate3 = @AcqDate3,AcqPrice4 = @AcqPrice4,AcqVolume4 = @AcqVolume4,AcqDate4 = @AcqDate4,AcqPrice5 = @AcqPrice5,AcqVolume5 = @AcqVolume5,AcqDate5 = @AcqDate5, 
                                        AcqPrice6 = @AcqPrice6,AcqVolume6 = @AcqVolume6,AcqDate6 = @AcqDate6,AcqPrice7 = @AcqPrice7,AcqVolume7 = @AcqVolume7,AcqDate7 = @AcqDate7,AcqPrice8 = @AcqPrice8,AcqVolume8 = @AcqVolume8,AcqDate8 = @AcqDate8,AcqPrice9 = @AcqPrice9,AcqVolume9 = @AcqVolume9,AcqDate9 = @AcqDate9, 
                                        Category = @Category,BankBranchPK = @BankBranchPK,MarketPK = @MarketPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode = @PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest = @DoneAccruedInterest,YieldPercent = @YieldPercent,BitIsRounding = @BitIsRounding,AccruedHoldingAmount = @AccruedHoldingAmount,BitBreakable = @BitBreakable,PurposeOfTransaction = @PurposeOfTransaction,StatutoryType = @StatutoryType,BitForeignTrx = @BitForeignTrx,
                                        CPSafekeepingAccNumber = @CPSafekeepingAccNumber,PlaceOfSettlement = @PlaceOfSettlement,FundSafekeepingAccountNumber = @FundSafekeepingAccountNumber,SecurityCodeType = @SecurityCodeType,BitHTM = @BitHTM,BitRollOverInterest = @BitRollOverInterest,InvestmentTrType = @InvestmentTrType,AmountToTransfer = @AmountToTransfer,
                                        BIRate = @BIRate,InvestmentStrategy = @InvestmentStrategy,InvestmentStyle = @InvestmentStyle,InvestmentObjective = @InvestmentObjective,Revision = @Revision,OtherInvestmentStyle = @OtherInvestmentStyle,OtherInvestmentObjective = @OtherInvestmentObjective,OtherRevision = @OtherRevision,
                                        AcqDate10 = @AcqDate10, AcqPrice10 = @AcqPrice10, AcqVolume10 = @AcqVolume10, AcqDate11 = @AcqDate11, AcqPrice11 = @AcqPrice11, AcqVolume11 = @AcqVolume11, AcqDate12 = @AcqDate12, AcqPrice12 = @AcqPrice12, AcqVolume12 = @AcqVolume12, 
                                        AcqDate13 = @AcqDate13, AcqPrice13 = @AcqPrice13, AcqVolume13 = @AcqVolume13, AcqDate14 = @AcqDate14, AcqPrice14 = @AcqPrice14, AcqVolume14 = @AcqVolume14, AcqDate15 = @AcqDate15, AcqPrice15 = @AcqPrice15, AcqVolume15 = @AcqVolume15, 
                                        AcqDate16 = @AcqDate16, AcqPrice16 = @AcqPrice16, AcqVolume16 = @AcqVolume16, AcqDate17 = @AcqDate17, AcqPrice17 = @AcqPrice17, AcqVolume17 = @AcqVolume17, AcqDate18 = @AcqDate18, AcqPrice18 = @AcqPrice18, AcqVolume18 = @AcqVolume18, 
                                        AcqDate19 = @AcqDate19, AcqPrice19 = @AcqPrice19, AcqVolume19 = @AcqVolume19, AcqDate20 = @AcqDate20, AcqPrice20 = @AcqPrice20, AcqVolume20 = @AcqVolume20, AcqDate21 = @AcqDate21, AcqPrice21 = @AcqPrice21, AcqVolume21 = @AcqVolume21, 
                                        AcqDate22 = @AcqDate22, AcqPrice22 = @AcqPrice22, AcqVolume22 = @AcqVolume22, AcqDate23 = @AcqDate23, AcqPrice23 = @AcqPrice23, AcqVolume23 = @AcqVolume23, AcqDate24 = @AcqDate24, AcqPrice24 = @AcqPrice24, AcqVolume24 = @AcqVolume24, 
                                        AcqDate25 = @AcqDate25, AcqPrice25 = @AcqPrice25, AcqVolume25 = @AcqVolume25, AcqDate26 = @AcqDate26, AcqPrice26 = @AcqPrice26, AcqVolume26 = @AcqVolume26, AcqDate27 = @AcqDate27, AcqPrice27 = @AcqPrice27, AcqVolume27 = @AcqVolume27, 
                                        AcqDate28 = @AcqDate28, AcqPrice28 = @AcqPrice28, AcqVolume28 = @AcqVolume28, AcqDate29 = @AcqDate29, AcqPrice29 = @AcqPrice29, AcqVolume29 = @AcqVolume29, OrderStatus = 'O',InvestmentNotes = @InvestmentNotes,UpdateDealingID=@UpdateDealingID,UpdateDealingTime=@UpdateDealingTime,LastUpdate=@LastUpdate From Investment
                                        where DealingPK = @PK and historyPK = @HistoryPK


                                        Update Investment set Notes = '',
                                        TrxType=1,TrxTypeID='BUY',CounterpartPK= @CounterpartPK,SettlementDate = @SettlementDate,AcqDate = @AcqDate,AcqPrice = @AcqPrice,AcqVolume = @AcqVolume,
                                        DoneLot = @DoneLot,DoneVolume = @DoneVolume,DonePrice = @DonePrice,DoneAmount = @DoneAmount,Tenor = @Tenor,CommissionPercent = @CommissionPercent,
                                        LevyPercent = @LevyPercent,KPEIPercent = @KPEIPercent,VATPercent = @VATPercent,WHTPercent = @WHTPercent,OTCPercent = @OTCPercent,IncomeTaxSellPercent = @IncomeTaxSellPercent,IncomeTaxInterestPercent = @IncomeTaxInterestPercent,
                                        IncomeTaxGainPercent = @IncomeTaxGainPercent,CommissionAmount = @CommissionAmount,LevyAmount = @LevyAmount,KPEIAmount = @KPEIAmount,VATAmount = @VATAmount,WHTAmount = @WHTAmount,OTCAmount = @OTCAmount,IncomeTaxSellAmount = @IncomeTaxSellAmount,
                                        IncomeTaxInterestAmount = @IncomeTaxInterestAmount,IncomeTaxGainAmount = @IncomeTaxGainAmount,TotalAmount = @TotalAmount,CurrencyRate = @CurrencyRate,SettlementMode = case when @SettlementMode = 2 then 1 else 3 end ,BoardType = @BoardType,AcqPrice1 = @AcqPrice1,AcqVolume1 = @AcqVolume1,AcqDate1 = @AcqDate1,AcqPrice2 = @AcqPrice2,AcqVolume2 = @AcqVolume2,AcqDate2 = @AcqDate2,AcqPrice3 = @AcqPrice3,AcqVolume3 = @AcqVolume3,AcqDate3 = @AcqDate3,AcqPrice4 = @AcqPrice4,AcqVolume4 = @AcqVolume4,AcqDate4 = @AcqDate4,AcqPrice5 = @AcqPrice5,AcqVolume5 = @AcqVolume5,AcqDate5 = @AcqDate5, 
                                        AcqPrice6 = @AcqPrice6,AcqVolume6 = @AcqVolume6,AcqDate6 = @AcqDate6,AcqPrice7 = @AcqPrice7,AcqVolume7 = @AcqVolume7,AcqDate7 = @AcqDate7,AcqPrice8 = @AcqPrice8,AcqVolume8 = @AcqVolume8,AcqDate8 = @AcqDate8,AcqPrice9 = @AcqPrice9,AcqVolume9 = @AcqVolume9,AcqDate9 = @AcqDate9, 
                                        Category = @Category,BankBranchPK = @BankBranchPK,MarketPK = @MarketPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode = @PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest = @DoneAccruedInterest,YieldPercent = @YieldPercent,BitIsRounding = @BitIsRounding,AccruedHoldingAmount = @AccruedHoldingAmount,BitBreakable = @BitBreakable,PurposeOfTransaction = @PurposeOfTransaction,StatutoryType = @StatutoryType,BitForeignTrx = @BitForeignTrx,
                                        CPSafekeepingAccNumber = @CPSafekeepingAccNumber,PlaceOfSettlement = @PlaceOfSettlement,FundSafekeepingAccountNumber = @FundSafekeepingAccountNumber,SecurityCodeType = @SecurityCodeType,BitHTM = @BitHTM,BitRollOverInterest = @BitRollOverInterest,InvestmentTrType = @InvestmentTrType,AmountToTransfer = @AmountToTransfer,
                                        BIRate = @BIRate,InvestmentStrategy = @InvestmentStrategy,InvestmentStyle = @InvestmentStyle,InvestmentObjective = @InvestmentObjective,Revision = @Revision,OtherInvestmentStyle = @OtherInvestmentStyle,OtherInvestmentObjective = @OtherInvestmentObjective,OtherRevision = @OtherRevision,
                                        AcqDate10 = @AcqDate10, AcqPrice10 = @AcqPrice10, AcqVolume10 = @AcqVolume10, AcqDate11 = @AcqDate11, AcqPrice11 = @AcqPrice11, AcqVolume11 = @AcqVolume11, AcqDate12 = @AcqDate12, AcqPrice12 = @AcqPrice12, AcqVolume12 = @AcqVolume12, 
                                        AcqDate13 = @AcqDate13, AcqPrice13 = @AcqPrice13, AcqVolume13 = @AcqVolume13, AcqDate14 = @AcqDate14, AcqPrice14 = @AcqPrice14, AcqVolume14 = @AcqVolume14, AcqDate15 = @AcqDate15, AcqPrice15 = @AcqPrice15, AcqVolume15 = @AcqVolume15, 
                                        AcqDate16 = @AcqDate16, AcqPrice16 = @AcqPrice16, AcqVolume16 = @AcqVolume16, AcqDate17 = @AcqDate17, AcqPrice17 = @AcqPrice17, AcqVolume17 = @AcqVolume17, AcqDate18 = @AcqDate18, AcqPrice18 = @AcqPrice18, AcqVolume18 = @AcqVolume18, 
                                        AcqDate19 = @AcqDate19, AcqPrice19 = @AcqPrice19, AcqVolume19 = @AcqVolume19, AcqDate20 = @AcqDate20, AcqPrice20 = @AcqPrice20, AcqVolume20 = @AcqVolume20, AcqDate21 = @AcqDate21, AcqPrice21 = @AcqPrice21, AcqVolume21 = @AcqVolume21, 
                                        AcqDate22 = @AcqDate22, AcqPrice22 = @AcqPrice22, AcqVolume22 = @AcqVolume22, AcqDate23 = @AcqDate23, AcqPrice23 = @AcqPrice23, AcqVolume23 = @AcqVolume23, AcqDate24 = @AcqDate24, AcqPrice24 = @AcqPrice24, AcqVolume24 = @AcqVolume24, 
                                        AcqDate25 = @AcqDate25, AcqPrice25 = @AcqPrice25, AcqVolume25 = @AcqVolume25, AcqDate26 = @AcqDate26, AcqPrice26 = @AcqPrice26, AcqVolume26 = @AcqVolume26, AcqDate27 = @AcqDate27, AcqPrice27 = @AcqPrice27, AcqVolume27 = @AcqVolume27, 
                                        AcqDate28 = @AcqDate28, AcqPrice28 = @AcqPrice28, AcqVolume28 = @AcqVolume28, AcqDate29 = @AcqDate29, AcqPrice29 = @AcqPrice29, AcqVolume29 = @AcqVolume29, OrderStatus = 'O',InvestmentNotes = @InvestmentNotes,UpdateDealingID=@UpdateDealingID,UpdateDealingTime=@UpdateDealingTime,LastUpdate=@LastUpdate From Investment
                                        where FundPK = @CCrossFundFromPK and CrossFundFromPK = @CFundPK and ValueDate = @CValueDate and InstrumentPK = @CInstrumentPK
                                        and InstrumentTypePK = @CInstrumentTypePK and OrderPrice = @COrderPrice and Volume = @CVolume and Amount = @CAmount and SettlementDate = @CSettledDate
                                        and StatusDealing in (1,2)
                                    END "

                                    ;

                                }


                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@PK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@StatusInvestment", _investment.StatusInvestment);
                                cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@StatusDealing", _investment.StatusDealing);
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@StatusSettlement", _investment.StatusSettlement);
                                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                                cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                }

                                if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                }

                                if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }

                                if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                                }
                                if (_investment.InvestmentTrType == 0 || _investment.InvestmentTrType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentTrType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentTrType", _investment.InvestmentTrType);
                                }


                                if (_investment.SettledDate == "" || _investment.SettledDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                }
                                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                                cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                                cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                                cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                                cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                                cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                                cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                                if (_investment.AcqDate == "" || _investment.AcqDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                                cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                                if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                                cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                                if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                                cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                                if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                                cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                                if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                                cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                                if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                                cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                                if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                                cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                                if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                                cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                                if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                                cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                                if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice10", _investment.AcqPrice10);
                                cmd.Parameters.AddWithValue("@AcqVolume10", _investment.AcqVolume10);
                                if (_investment.AcqDate10 == "" || _investment.AcqDate10 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate10", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate10", _investment.AcqDate10);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice11", _investment.AcqPrice11);
                                cmd.Parameters.AddWithValue("@AcqVolume11", _investment.AcqVolume11);
                                if (_investment.AcqDate11 == "" || _investment.AcqDate11 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate11", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate11", _investment.AcqDate11);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice12", _investment.AcqPrice12);
                                cmd.Parameters.AddWithValue("@AcqVolume12", _investment.AcqVolume12);
                                if (_investment.AcqDate12 == "" || _investment.AcqDate12 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate12", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate12", _investment.AcqDate12);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice13", _investment.AcqPrice13);
                                cmd.Parameters.AddWithValue("@AcqVolume13", _investment.AcqVolume13);
                                if (_investment.AcqDate13 == "" || _investment.AcqDate13 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate13", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate13", _investment.AcqDate13);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice14", _investment.AcqPrice14);
                                cmd.Parameters.AddWithValue("@AcqVolume14", _investment.AcqVolume14);
                                if (_investment.AcqDate14 == "" || _investment.AcqDate14 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate14", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate14", _investment.AcqDate14);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice15", _investment.AcqPrice15);
                                cmd.Parameters.AddWithValue("@AcqVolume15", _investment.AcqVolume15);
                                if (_investment.AcqDate15 == "" || _investment.AcqDate15 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate15", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate15", _investment.AcqDate15);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice16", _investment.AcqPrice16);
                                cmd.Parameters.AddWithValue("@AcqVolume16", _investment.AcqVolume16);
                                if (_investment.AcqDate16 == "" || _investment.AcqDate16 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate16", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate16", _investment.AcqDate16);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice17", _investment.AcqPrice17);
                                cmd.Parameters.AddWithValue("@AcqVolume17", _investment.AcqVolume17);
                                if (_investment.AcqDate17 == "" || _investment.AcqDate17 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate17", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate17", _investment.AcqDate17);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice18", _investment.AcqPrice18);
                                cmd.Parameters.AddWithValue("@AcqVolume18", _investment.AcqVolume18);
                                if (_investment.AcqDate18 == "" || _investment.AcqDate18 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate18", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate18", _investment.AcqDate18);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice19", _investment.AcqPrice19);
                                cmd.Parameters.AddWithValue("@AcqVolume19", _investment.AcqVolume19);
                                if (_investment.AcqDate19 == "" || _investment.AcqDate19 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate19", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate19", _investment.AcqDate19);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice20", _investment.AcqPrice20);
                                cmd.Parameters.AddWithValue("@AcqVolume20", _investment.AcqVolume20);
                                if (_investment.AcqDate20 == "" || _investment.AcqDate20 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate20", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate20", _investment.AcqDate20);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice21", _investment.AcqPrice21);
                                cmd.Parameters.AddWithValue("@AcqVolume21", _investment.AcqVolume21);
                                if (_investment.AcqDate21 == "" || _investment.AcqDate21 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate21", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate21", _investment.AcqDate21);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice22", _investment.AcqPrice22);
                                cmd.Parameters.AddWithValue("@AcqVolume22", _investment.AcqVolume22);
                                if (_investment.AcqDate22 == "" || _investment.AcqDate22 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate22", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate22", _investment.AcqDate22);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice23", _investment.AcqPrice23);
                                cmd.Parameters.AddWithValue("@AcqVolume23", _investment.AcqVolume23);
                                if (_investment.AcqDate23 == "" || _investment.AcqDate23 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate23", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate23", _investment.AcqDate23);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice24", _investment.AcqPrice24);
                                cmd.Parameters.AddWithValue("@AcqVolume24", _investment.AcqVolume24);
                                if (_investment.AcqDate24 == "" || _investment.AcqDate24 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate24", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate24", _investment.AcqDate24);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice25", _investment.AcqPrice25);
                                cmd.Parameters.AddWithValue("@AcqVolume25", _investment.AcqVolume25);
                                if (_investment.AcqDate25 == "" || _investment.AcqDate25 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate25", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate25", _investment.AcqDate25);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice26", _investment.AcqPrice26);
                                cmd.Parameters.AddWithValue("@AcqVolume26", _investment.AcqVolume26);
                                if (_investment.AcqDate26 == "" || _investment.AcqDate26 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate26", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate26", _investment.AcqDate26);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice27", _investment.AcqPrice27);
                                cmd.Parameters.AddWithValue("@AcqVolume27", _investment.AcqVolume27);
                                if (_investment.AcqDate27 == "" || _investment.AcqDate27 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate27", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate27", _investment.AcqDate27);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice28", _investment.AcqPrice28);
                                cmd.Parameters.AddWithValue("@AcqVolume28", _investment.AcqVolume28);
                                if (_investment.AcqDate28 == "" || _investment.AcqDate28 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate28", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate28", _investment.AcqDate28);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice29", _investment.AcqPrice29);
                                cmd.Parameters.AddWithValue("@AcqVolume29", _investment.AcqVolume29);
                                if (_investment.AcqDate29 == "" || _investment.AcqDate29 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate29", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate29", _investment.AcqDate29);
                                }
                                if (_investment.Category == "" || _investment.Category == null)
                                {
                                    cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Category", _investment.Category);
                                }
                                if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                                }

                                if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                                }

                                if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                                }
                                if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                                }
                                if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                                }

                                if (_investment.BitIsAmortized == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                                }
                                if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                                }

                                if (_investment.BitIsRounding == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                                }

                                if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                                }
                                if (_investment.BitBreakable == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                                }
                                if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                                }
                                if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                                }

                                if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                                }
                                cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                                cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);

                                if (_investment.CPSafekeepingAccNumber == null)
                                {
                                    cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                                }
                                if (_investment.PlaceOfSettlement == null)
                                {
                                    cmd.Parameters.AddWithValue("@PlaceOfSettlement", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                                }
                                if (_investment.FundSafekeepingAccountNumber == null)
                                {
                                    cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                                }

                                if (_investment.SecurityCodeType == 0 || _investment.SecurityCodeType == null)
                                {
                                    cmd.Parameters.AddWithValue("@SecurityCodeType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                                }
                                if (_investment.BitHTM == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                                }
                                if (_investment.BitRollOverInterest == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                                }

                                if (_investment.BIRate == 0 || _investment.BIRate == null)
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                                }

                                if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                                }

                                if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                                }

                                if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                                }

                                if (_investment.Revision == 0 || _investment.Revision == null)
                                {
                                    cmd.Parameters.AddWithValue("@Revision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                                }

                                if (_investment.OtherInvestmentStyle == "" || _investment.OtherInvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                                }

                                if (_investment.OtherInvestmentObjective == "" || _investment.OtherInvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                                }

                                if (_investment.OtherRevision == "" || _investment.OtherRevision == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherRevision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);
                                }


                                cmd.Parameters.AddWithValue("@UpdateDealingID", _investment.UpdateDealingID);
                                cmd.Parameters.AddWithValue("@UpdateDealingTime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                                cmd.ExecuteNonQuery();
                            }
                            _newHisPK = 0;
                        }
                        else
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                _newHisPK = _host.Get_NewHistoryPK(_investment.DealingPK, "Dealing");
                                cmd.CommandText = _insertCommand + "[EntryDealingID],[EntryDealingTime],[UpdateDealingID],[UpdateDealingTime],[LastUpdate])" +
                                "Select @InvestmentPK,@NewHistoryPK,2,@PK,1,@SettlementPK,0," + _paramaterCommand + "EntryDealingID,EntryDealingTime,@UpdateDealingID,@UpdateDealingTime,@LastUpdate  " +
                                "From Investment where DealingPK =@PK and historyPK = @HistoryPK ";

                                cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@PK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@NewHistoryPK", _newHisPK);
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                                cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                }

                                if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                }

                                if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }

                                if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                                }

                                if (_investment.InvestmentTrType == 0 || _investment.InvestmentTrType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentTrType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentTrType", _investment.InvestmentTrType);
                                }

                                if (_investment.SettledDate == "" || _investment.SettledDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                }
                                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                                cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                                cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                                cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                                cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                                cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                                cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                                if (_investment.AcqDate == "" || _investment.AcqDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                                cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                                if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                                cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                                if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                                cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                                if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                                cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                                if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                                cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                                if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                                cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                                if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                                cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                                if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                                cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                                if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                                cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                                if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice10", _investment.AcqPrice10);
                                cmd.Parameters.AddWithValue("@AcqVolume10", _investment.AcqVolume10);
                                if (_investment.AcqDate10 == "" || _investment.AcqDate10 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate10", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate10", _investment.AcqDate10);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice11", _investment.AcqPrice11);
                                cmd.Parameters.AddWithValue("@AcqVolume11", _investment.AcqVolume11);
                                if (_investment.AcqDate11 == "" || _investment.AcqDate11 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate11", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate11", _investment.AcqDate11);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice12", _investment.AcqPrice12);
                                cmd.Parameters.AddWithValue("@AcqVolume12", _investment.AcqVolume12);
                                if (_investment.AcqDate12 == "" || _investment.AcqDate12 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate12", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate12", _investment.AcqDate12);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice13", _investment.AcqPrice13);
                                cmd.Parameters.AddWithValue("@AcqVolume13", _investment.AcqVolume13);
                                if (_investment.AcqDate13 == "" || _investment.AcqDate13 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate13", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate13", _investment.AcqDate13);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice14", _investment.AcqPrice14);
                                cmd.Parameters.AddWithValue("@AcqVolume14", _investment.AcqVolume14);
                                if (_investment.AcqDate14 == "" || _investment.AcqDate14 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate14", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate14", _investment.AcqDate14);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice15", _investment.AcqPrice15);
                                cmd.Parameters.AddWithValue("@AcqVolume15", _investment.AcqVolume15);
                                if (_investment.AcqDate15 == "" || _investment.AcqDate15 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate15", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate15", _investment.AcqDate15);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice16", _investment.AcqPrice16);
                                cmd.Parameters.AddWithValue("@AcqVolume16", _investment.AcqVolume16);
                                if (_investment.AcqDate16 == "" || _investment.AcqDate16 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate16", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate16", _investment.AcqDate16);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice17", _investment.AcqPrice17);
                                cmd.Parameters.AddWithValue("@AcqVolume17", _investment.AcqVolume17);
                                if (_investment.AcqDate17 == "" || _investment.AcqDate17 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate17", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate17", _investment.AcqDate17);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice18", _investment.AcqPrice18);
                                cmd.Parameters.AddWithValue("@AcqVolume18", _investment.AcqVolume18);
                                if (_investment.AcqDate18 == "" || _investment.AcqDate18 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate18", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate18", _investment.AcqDate18);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice19", _investment.AcqPrice19);
                                cmd.Parameters.AddWithValue("@AcqVolume19", _investment.AcqVolume19);
                                if (_investment.AcqDate19 == "" || _investment.AcqDate19 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate19", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate19", _investment.AcqDate19);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice20", _investment.AcqPrice20);
                                cmd.Parameters.AddWithValue("@AcqVolume20", _investment.AcqVolume20);
                                if (_investment.AcqDate20 == "" || _investment.AcqDate20 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate20", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate20", _investment.AcqDate20);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice21", _investment.AcqPrice21);
                                cmd.Parameters.AddWithValue("@AcqVolume21", _investment.AcqVolume21);
                                if (_investment.AcqDate21 == "" || _investment.AcqDate21 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate21", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate21", _investment.AcqDate21);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice22", _investment.AcqPrice22);
                                cmd.Parameters.AddWithValue("@AcqVolume22", _investment.AcqVolume22);
                                if (_investment.AcqDate22 == "" || _investment.AcqDate22 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate22", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate22", _investment.AcqDate22);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice23", _investment.AcqPrice23);
                                cmd.Parameters.AddWithValue("@AcqVolume23", _investment.AcqVolume23);
                                if (_investment.AcqDate23 == "" || _investment.AcqDate23 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate23", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate23", _investment.AcqDate23);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice24", _investment.AcqPrice24);
                                cmd.Parameters.AddWithValue("@AcqVolume24", _investment.AcqVolume24);
                                if (_investment.AcqDate24 == "" || _investment.AcqDate24 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate24", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate24", _investment.AcqDate24);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice25", _investment.AcqPrice25);
                                cmd.Parameters.AddWithValue("@AcqVolume25", _investment.AcqVolume25);
                                if (_investment.AcqDate25 == "" || _investment.AcqDate25 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate25", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate25", _investment.AcqDate25);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice26", _investment.AcqPrice26);
                                cmd.Parameters.AddWithValue("@AcqVolume26", _investment.AcqVolume26);
                                if (_investment.AcqDate26 == "" || _investment.AcqDate26 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate26", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate26", _investment.AcqDate26);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice27", _investment.AcqPrice27);
                                cmd.Parameters.AddWithValue("@AcqVolume27", _investment.AcqVolume27);
                                if (_investment.AcqDate27 == "" || _investment.AcqDate27 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate27", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate27", _investment.AcqDate27);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice28", _investment.AcqPrice28);
                                cmd.Parameters.AddWithValue("@AcqVolume28", _investment.AcqVolume28);
                                if (_investment.AcqDate28 == "" || _investment.AcqDate28 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate28", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate28", _investment.AcqDate28);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice29", _investment.AcqPrice29);
                                cmd.Parameters.AddWithValue("@AcqVolume29", _investment.AcqVolume29);
                                if (_investment.AcqDate29 == "" || _investment.AcqDate29 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate29", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate29", _investment.AcqDate29);
                                }
                                if (_investment.Category == "" || _investment.Category == null)
                                {
                                    cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Category", _investment.Category);
                                }
                                if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                                }

                                if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                                }

                                if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                                }
                                if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                                }
                                if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                                }

                                if (_investment.BitIsAmortized == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                                }
                                if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                                }

                                if (_investment.BitIsRounding == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                                }

                                if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                                }
                                if (_investment.BitBreakable == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                                }
                                if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                                }
                                if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                                }

                                if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                                }
                                cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);

                                if (_investment.CPSafekeepingAccNumber == null)
                                {
                                    cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                                }
                                if (_investment.PlaceOfSettlement == null)
                                {
                                    cmd.Parameters.AddWithValue("@PlaceOfSettlement", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                                }
                                if (_investment.FundSafekeepingAccountNumber == null)
                                {
                                    cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", "");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                                }

                                if (_investment.SecurityCodeType == 0 || _investment.SecurityCodeType == null)
                                {
                                    cmd.Parameters.AddWithValue("@SecurityCodeType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                                }
                                if (_investment.BitHTM == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                                }
                                if (_investment.BitRollOverInterest == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                                }

                                if (_investment.BIRate == 0 || _investment.BIRate == null)
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                                }

                                if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                                }

                                if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                                }

                                if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                                }

                                if (_investment.Revision == 0 || _investment.Revision == null)
                                {
                                    cmd.Parameters.AddWithValue("@Revision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                                }

                                if (_investment.OtherInvestmentStyle == "" || _investment.OtherInvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                                }

                                if (_investment.OtherInvestmentObjective == "" || _investment.OtherInvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                                }

                                if (_investment.OtherRevision == "" || _investment.OtherRevision == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherRevision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);
                                }


                                cmd.Parameters.AddWithValue("@UpdateDealingID", _investment.UpdateDealingID);
                                cmd.Parameters.AddWithValue("@UpdateDealingTime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                                cmd.ExecuteNonQuery();
                            }

                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = "Update Investment set statusDealing = 4,statusSettlement =0,Notes=@Notes, " +
                                " lastupdate=@lastupdate where DealingPK = @PK and historyPK = @HistoryPK and statusDealing =2 ";
                                cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                                cmd.Parameters.AddWithValue("@PK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                                cmd.ExecuteNonQuery();
                            }
                        }
                    }

                    using (SqlCommand cmd1 = DbCon.CreateCommand())
                    {
                        if (Tools.ClientCode == "03" || Tools.ClientCode == "20" || Tools.ClientCode == "21" || Tools.ClientCode == "22")
                        {
                            DbCon.Close();
                            DbCon.Open();
                            cmd1.CommandText = @"
delete InvestmentTaxDataAcq where investmentpk = @PK

declare @investmentPK int
declare @historyPK int
declare @DealingPK int
declare @Notes nvarchar(500)
declare @OrderPrice numeric(22,8)
declare @Volume numeric(22,2)
declare @Amount numeric(22,0)
declare @AccruedInterest numeric(22,0)
Declare @TaxPercentageBond numeric(8,4)
Declare @TaxPercentageCapitalGain numeric(8,4)                        
Declare @FundPK int
declare @IncomeTaxGainAmount numeric(30,8)
declare @AccruedInterestDays int
declare @AccruedInterestAmount numeric(30,8)
declare @DaysOfHoldingInterest int
declare @DaysOfLastCoupon int
declare @IncomeTaxInterestAmount numeric(30,8)
declare @TotalTaxIncomeAmount numeric(30,8)
declare @TaxAmount numeric(30,8)
declare @LastCouponDate date
declare @SettlementDate date
Declare @TaxInterestPercent numeric(22,4)

DECLARE A CURSOR FOR 
	    Select InvestmentPK,DealingPK,HistoryPK,InvestmentNotes,DonePrice,Volume,Amount,AccruedInterest,FundPK,LastCouponDate,SettlementDate,5 From investment 
	    where statusInvestment = 2 and ValueDate = @ValueDate and InvestmentPK = @PK and  InstrumentTypePK in (2,3,8,9,13,15) and TrxType = @TrxType 

Open A
Fetch Next From A
Into @investmentPK,@DealingPK,@historyPK,@Notes,@OrderPrice,@Volume,@Amount,@AccruedInterest,@FundPK,@LastCouponDate,@SettlementDate,@TaxInterestPercent

While @@FETCH_STATUS = 0
BEGIN

        if @TrxType = 2
            set @AccruedInterest = 0
                                
        -- pecah acq 1
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice)/100 * AcqVolume, @DaysOfHoldingInterest = case when AcqDate >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end, 
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
			@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
                                        
            if @TrxType = 2
            begin
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
            end
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 1)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,1,@TrxType,reference,AcqVolume,AcqDate,AcqPrice,AcqVolume * AcqPrice/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume,A.AcqDate = B.AcqDate,A.AcqPrice = B.AcqPrice,A.AcqAmount = B.AcqVolume * B.AcqPrice/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate is not null and B.AcqVolume != 0 and B.AcqPrice != 0)
		    end
	    end

	    -- pecah acq 2
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice1)/100 * AcqVolume1, @DaysOfHoldingInterest = case when AcqDate1 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate1,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate1,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
			@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume1/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume1 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 2)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,2,@TrxType,reference,AcqVolume1,AcqDate1,AcqPrice1,AcqVolume1 * AcqPrice1/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume1,A.AcqDate = B.AcqDate1,A.AcqPrice = B.AcqPrice1,A.AcqAmount = B.AcqVolume1 * B.AcqPrice1/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate1 is not null and B.AcqVolume1 != 0 and B.AcqPrice1 != 0)
		    end
	    end

	    -- acq 3
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice2)/100 * AcqVolume2,@DaysOfHoldingInterest = case when AcqDate2 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate2,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate2,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,3,@TrxType,reference,AcqVolume2,AcqDate2,AcqPrice2,AcqVolume2 * AcqPrice2/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume2,A.AcqDate = B.AcqDate2,A.AcqPrice = B.AcqPrice2,A.AcqAmount = B.AcqVolume2 * B.AcqPrice2/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate2 is not null and B.AcqVolume2 != 0 and B.AcqPrice2 != 0)
		    end
	    end
	
	    -- acq 4
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice3)/100 * AcqVolume3, @DaysOfHoldingInterest = case when AcqDate3 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate3,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate3,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume3/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume3 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 4)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,4,@TrxType,reference,AcqVolume3,AcqDate3,AcqPrice3,AcqVolume3 * AcqPrice3/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume3,A.AcqDate = B.AcqDate3,A.AcqPrice = B.AcqPrice3,A.AcqAmount = B.AcqVolume3 * B.AcqPrice3/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate3 is not null and B.AcqVolume3 != 0 and B.AcqPrice3 != 0)
		    end
	    end
	
	    --acq 5
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice4)/100 * AcqVolume4, @DaysOfHoldingInterest = case when AcqDate4 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate4,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate4,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume4/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume4 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 5)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,5,@TrxType,reference,AcqVolume4,AcqDate4,AcqPrice4,AcqVolume4 * AcqPrice4/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume4,A.AcqDate = B.AcqDate4,A.AcqPrice = B.AcqPrice4,A.AcqAmount = B.AcqVolume4 * B.AcqPrice4/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate4 is not null and B.AcqVolume4 != 0 and B.AcqPrice4 != 0)
		    end
	    end
	
	    --acq 6
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice5)/100 * AcqVolume5, @DaysOfHoldingInterest = case when AcqDate5 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate5,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate5,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume5/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume5 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 6)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,6,@TrxType,reference,AcqVolume5,AcqDate5,AcqPrice5,AcqVolume5 * AcqPrice5/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume5,A.AcqDate = B.AcqDate5,A.AcqPrice = B.AcqPrice5,A.AcqAmount = B.AcqVolume5 * B.AcqPrice5/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate5 is not null and B.AcqVolume5 != 0 and B.AcqPrice5 != 0)
		    end
	    end
	
	    --acq 7
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice6)/100 * AcqVolume6, @DaysOfHoldingInterest = case when AcqDate6 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate6,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate6,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume6/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume6 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 7)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,7,@TrxType,reference,AcqVolume6,AcqDate6,AcqPrice6,AcqVolume6 * AcqPrice6/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume6,A.AcqDate = B.AcqDate6,A.AcqPrice = B.AcqPrice6,A.AcqAmount = B.AcqVolume6 * B.AcqPrice6/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate6 is not null and B.AcqVolume6 != 0 and B.AcqPrice6 != 0)
		    end
	    end
	
	    -- acq 8
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice7)/100 * AcqVolume7, @DaysOfHoldingInterest = case when AcqDate7 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate7,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate7,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume7/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume7 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 8)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,8,@TrxType,reference,AcqVolume7,AcqDate7,AcqPrice7,AcqVolume7 * AcqPrice7/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume7,A.AcqDate = B.AcqDate7,A.AcqPrice = B.AcqPrice7,A.AcqAmount = B.AcqVolume7 * B.AcqPrice7/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate7 is not null and B.AcqVolume7 != 0 and B.AcqPrice7 != 0)
		    end
	    end

	    -- acq 9
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice8)/100 * AcqVolume8, @DaysOfHoldingInterest = case when AcqDate8 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate8,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate8,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume8/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume8 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 9)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,9,@TrxType,reference,AcqVolume8,AcqDate8,AcqPrice8,AcqVolume8 * AcqPrice8/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume8,A.AcqDate = B.AcqDate8,A.AcqPrice = B.AcqPrice8,A.AcqAmount = B.AcqVolume8 * B.AcqPrice8/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate8 is not null and B.AcqVolume8 != 0 and B.AcqPrice8 != 0)
		    end
	    end

	    -- acq 10
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice9)/100 * AcqVolume9, @DaysOfHoldingInterest = case when AcqDate9 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate9,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate9,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume9/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume9 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 10)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,10,@TrxType,reference,AcqVolume9,AcqDate9,AcqPrice9,AcqVolume9 * AcqPrice9/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume9,A.AcqDate = B.AcqDate9,A.AcqPrice = B.AcqPrice9,A.AcqAmount = B.AcqVolume9 * B.AcqPrice9/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate9 is not null and B.AcqVolume9 != 0 and B.AcqPrice9 != 0)
		    end
	    end

		-- acq 11
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume10 != 0 and AcqPrice10 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice10)/100 * AcqVolume10, @DaysOfHoldingInterest = case when AcqDate10 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate10,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate10,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume10 != 0 and AcqPrice10 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume10/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume10 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume10 != 0 and AcqPrice10 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 11)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,11,@TrxType,reference,AcqVolume10,AcqDate10,AcqPrice10,AcqVolume10 * AcqPrice10/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume10 != 0 and AcqPrice10 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume10,A.AcqDate = B.AcqDate10,A.AcqPrice = B.AcqPrice10,A.AcqAmount = B.AcqVolume10 * B.AcqPrice10/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate10 is not null and B.AcqVolume10 != 0 and B.AcqPrice10 != 0)
		    end
	    end

		-- acq 12
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice11)/100 * AcqVolume11, @DaysOfHoldingInterest = case when AcqDate11 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate11,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate11,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume11/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume11 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 12)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,12,@TrxType,reference,AcqVolume11,AcqDate11,AcqPrice11,AcqVolume11 * AcqPrice11/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume11,A.AcqDate = B.AcqDate11,A.AcqPrice = B.AcqPrice11,A.AcqAmount = B.AcqVolume11 * B.AcqPrice11/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate11 is not null and B.AcqVolume11 != 0 and B.AcqPrice11 != 0)
		    end
	    end

		-- acq 13
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice12)/100 * AcqVolume12, @DaysOfHoldingInterest = case when AcqDate12 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate12,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate12,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume12/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume12 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 13)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,13,@TrxType,reference,AcqVolume12,AcqDate12,AcqPrice12,AcqVolume12 * AcqPrice12/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume12,A.AcqDate = B.AcqDate12,A.AcqPrice = B.AcqPrice12,A.AcqAmount = B.AcqVolume12 * B.AcqPrice12/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate12 is not null and B.AcqVolume12 != 0 and B.AcqPrice12 != 0)
		    end
	    end

		-- acq 14
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice13)/100 * AcqVolume13, @DaysOfHoldingInterest = case when AcqDate13 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate13,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate13,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume13/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume13 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 14)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,14,@TrxType,reference,AcqVolume13,AcqDate13,AcqPrice13,AcqVolume13 * AcqPrice13/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume13,A.AcqDate = B.AcqDate13,A.AcqPrice = B.AcqPrice13,A.AcqAmount = B.AcqVolume13 * B.AcqPrice13/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate13 is not null and B.AcqVolume13 != 0 and B.AcqPrice13 != 0)
		    end
	    end

		-- acq 15
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice14)/100 * AcqVolume14, @DaysOfHoldingInterest = case when AcqDate14 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate14,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate14,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume14/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume14 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 15)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,15,@TrxType,reference,AcqVolume14,AcqDate14,AcqPrice14,AcqVolume14 * AcqPrice14/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume14,A.AcqDate = B.AcqDate14,A.AcqPrice = B.AcqPrice14,A.AcqAmount = B.AcqVolume14 * B.AcqPrice14/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate14 is not null and B.AcqVolume14 != 0 and B.AcqPrice14 != 0)
		    end
	    end

		-- acq 16
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate15 is not null and AcqVolume15 != 0 and AcqPrice15 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice15)/100 * AcqVolume15, @DaysOfHoldingInterest = case when AcqDate15 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate15,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate15,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate15 is not null and AcqVolume15 != 0 and AcqPrice15 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume15/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume15 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate15 is not null and AcqVolume15 != 0 and AcqPrice15 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 16)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,16,@TrxType,reference,AcqVolume15,AcqDate15,AcqPrice15,AcqVolume15 * AcqPrice15/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate15 is not null and AcqVolume15 != 0 and AcqPrice15 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume15,A.AcqDate = B.AcqDate15,A.AcqPrice = B.AcqPrice15,A.AcqAmount = B.AcqVolume15 * B.AcqPrice15/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate15 is not null and B.AcqVolume15 != 0 and B.AcqPrice15 != 0)
		    end
	    end

		-- acq 17
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate16 is not null and AcqVolume16 != 0 and AcqPrice16 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice16)/100 * AcqVolume16, @DaysOfHoldingInterest = case when AcqDate16 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate16,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate16,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate16 is not null and AcqVolume16 != 0 and AcqPrice16 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume16/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume16 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate16 is not null and AcqVolume16 != 0 and AcqPrice16 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 17)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,17,@TrxType,reference,AcqVolume16,AcqDate16,AcqPrice16,AcqVolume16 * AcqPrice16/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate16 is not null and AcqVolume16 != 0 and AcqPrice16 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume16,A.AcqDate = B.AcqDate16,A.AcqPrice = B.AcqPrice16,A.AcqAmount = B.AcqVolume16 * B.AcqPrice16/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate16 is not null and B.AcqVolume16 != 0 and B.AcqPrice16 != 0)
		    end
	    end

		-- acq 18
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate17 is not null and AcqVolume17 != 0 and AcqPrice17 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice17)/100 * AcqVolume17, @DaysOfHoldingInterest = case when AcqDate17 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate17,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate17,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate17 is not null and AcqVolume17 != 0 and AcqPrice17 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume17/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume17 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate17 is not null and AcqVolume17 != 0 and AcqPrice17 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 18)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,18,@TrxType,reference,AcqVolume17,AcqDate17,AcqPrice17,AcqVolume17 * AcqPrice17/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate17 is not null and AcqVolume17 != 0 and AcqPrice17 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume17,A.AcqDate = B.AcqDate17,A.AcqPrice = B.AcqPrice17,A.AcqAmount = B.AcqVolume17 * B.AcqPrice17/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate17 is not null and B.AcqVolume17 != 0 and B.AcqPrice17 != 0)
		    end
	    end

		-- acq 19
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate18 is not null and AcqVolume18 != 0 and AcqPrice18 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice18)/100 * AcqVolume18, @DaysOfHoldingInterest = case when AcqDate18 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate18,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate18,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate18 is not null and AcqVolume18 != 0 and AcqPrice18 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume18/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume18 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate18 is not null and AcqVolume18 != 0 and AcqPrice18 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 19)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,19,@TrxType,reference,AcqVolume18,AcqDate18,AcqPrice18,AcqVolume18 * AcqPrice18/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate18 is not null and AcqVolume18 != 0 and AcqPrice18 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume18,A.AcqDate = B.AcqDate18,A.AcqPrice = B.AcqPrice18,A.AcqAmount = B.AcqVolume18 * B.AcqPrice18/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate18 is not null and B.AcqVolume18 != 0 and B.AcqPrice18 != 0)
		    end
	    end

		-- acq 20
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate19 is not null and AcqVolume19 != 0 and AcqPrice19 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice19)/100 * AcqVolume19, @DaysOfHoldingInterest = case when AcqDate19 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate19,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate19,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate19 is not null and AcqVolume19 != 0 and AcqPrice19 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume19/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume19 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate19 is not null and AcqVolume19 != 0 and AcqPrice19 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 20)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,20,@TrxType,reference,AcqVolume19,AcqDate19,AcqPrice19,AcqVolume19 * AcqPrice19/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate19 is not null and AcqVolume19 != 0 and AcqPrice19 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume19,A.AcqDate = B.AcqDate19,A.AcqPrice = B.AcqPrice19,A.AcqAmount = B.AcqVolume19 * B.AcqPrice19/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate19 is not null and B.AcqVolume19 != 0 and B.AcqPrice19 != 0)
		    end
	    end

		--acq 21
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate20 is not null and AcqVolume20 != 0 and AcqPrice20 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice20)/100 * AcqVolume20, @DaysOfHoldingInterest = case when AcqDate20 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate20,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate20,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3200 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate20 is not null and AcqVolume20 != 0 and AcqPrice20 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume20/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume20 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate20 is not null and AcqVolume20 != 0 and AcqPrice20 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 21)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,21,@TrxType,reference,AcqVolume20,AcqDate20,AcqPrice20,AcqVolume20 * AcqPrice20/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate20 is not null and AcqVolume20 != 0 and AcqPrice20 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume20,A.AcqDate = B.AcqDate20,A.AcqPrice = B.AcqPrice20,A.AcqAmount = B.AcqVolume20 * B.AcqPrice20/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate20 is not null and B.AcqVolume20 != 0 and B.AcqPrice20 != 0)
		    end
	    end

		--acq 22
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate21 is not null and AcqVolume21 != 0 and AcqPrice21 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice21)/100 * AcqVolume21, @DaysOfHoldingInterest = case when AcqDate21 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate21,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate21,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3210 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate21 is not null and AcqVolume21 != 0 and AcqPrice21 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume21/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume21 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate21 is not null and AcqVolume21 != 0 and AcqPrice21 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 22)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,22,@TrxType,reference,AcqVolume21,AcqDate21,AcqPrice21,AcqVolume21 * AcqPrice21/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate21 is not null and AcqVolume21 != 0 and AcqPrice21 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume21,A.AcqDate = B.AcqDate21,A.AcqPrice = B.AcqPrice21,A.AcqAmount = B.AcqVolume21 * B.AcqPrice21/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate21 is not null and B.AcqVolume21 != 0 and B.AcqPrice21 != 0)
		    end
	    end

		--acq 23
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate22 is not null and AcqVolume22 != 0 and AcqPrice22 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice22)/100 * AcqVolume22, @DaysOfHoldingInterest = case when AcqDate22 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate22,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate22,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3220 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate22 is not null and AcqVolume22 != 0 and AcqPrice22 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume22/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume22 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate22 is not null and AcqVolume22 != 0 and AcqPrice22 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 23)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,23,@TrxType,reference,AcqVolume22,AcqDate22,AcqPrice22,AcqVolume22 * AcqPrice22/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate22 is not null and AcqVolume22 != 0 and AcqPrice22 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume22,A.AcqDate = B.AcqDate22,A.AcqPrice = B.AcqPrice22,A.AcqAmount = B.AcqVolume22 * B.AcqPrice22/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate22 is not null and B.AcqVolume22 != 0 and B.AcqPrice22 != 0)
		    end
	    end

		--acq 24
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate23 is not null and AcqVolume23 != 0 and AcqPrice23 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice23)/100 * AcqVolume23, @DaysOfHoldingInterest = case when AcqDate23 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate23,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate23,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3230 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate23 is not null and AcqVolume23 != 0 and AcqPrice23 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume23/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume23 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate23 is not null and AcqVolume23 != 0 and AcqPrice23 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 24)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,24,@TrxType,reference,AcqVolume23,AcqDate23,AcqPrice23,AcqVolume23 * AcqPrice23/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate23 is not null and AcqVolume23 != 0 and AcqPrice23 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume23,A.AcqDate = B.AcqDate23,A.AcqPrice = B.AcqPrice23,A.AcqAmount = B.AcqVolume23 * B.AcqPrice23/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate23 is not null and B.AcqVolume23 != 0 and B.AcqPrice23 != 0)
		    end
	    end

		--acq 25
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate24 is not null and AcqVolume24 != 0 and AcqPrice24 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice24)/100 * AcqVolume24, @DaysOfHoldingInterest = case when AcqDate24 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate24,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate24,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3240 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate24 is not null and AcqVolume24 != 0 and AcqPrice24 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume24/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume24 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate24 is not null and AcqVolume24 != 0 and AcqPrice24 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 25)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,25,@TrxType,reference,AcqVolume24,AcqDate24,AcqPrice24,AcqVolume24 * AcqPrice24/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate24 is not null and AcqVolume24 != 0 and AcqPrice24 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume24,A.AcqDate = B.AcqDate24,A.AcqPrice = B.AcqPrice24,A.AcqAmount = B.AcqVolume24 * B.AcqPrice24/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate24 is not null and B.AcqVolume24 != 0 and B.AcqPrice24 != 0)
		    end
	    end

		--acq 26
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate25 is not null and AcqVolume25 != 0 and AcqPrice25 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice25)/100 * AcqVolume25, @DaysOfHoldingInterest = case when AcqDate25 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate25,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate25,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3250 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate25 is not null and AcqVolume25 != 0 and AcqPrice25 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume25/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume25 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate25 is not null and AcqVolume25 != 0 and AcqPrice25 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 26)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,26,@TrxType,reference,AcqVolume25,AcqDate25,AcqPrice25,AcqVolume25 * AcqPrice25/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate25 is not null and AcqVolume25 != 0 and AcqPrice25 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume25,A.AcqDate = B.AcqDate25,A.AcqPrice = B.AcqPrice25,A.AcqAmount = B.AcqVolume25 * B.AcqPrice25/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate25 is not null and B.AcqVolume25 != 0 and B.AcqPrice25 != 0)
		    end
	    end

		--acq 27
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate26 is not null and AcqVolume26 != 0 and AcqPrice26 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice26)/100 * AcqVolume26, @DaysOfHoldingInterest = case when AcqDate26 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate26,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate26,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3260 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate26 is not null and AcqVolume26 != 0 and AcqPrice26 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume26/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume26 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate26 is not null and AcqVolume26 != 0 and AcqPrice26 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 27)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,27,@TrxType,reference,AcqVolume26,AcqDate26,AcqPrice26,AcqVolume26 * AcqPrice26/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate26 is not null and AcqVolume26 != 0 and AcqPrice26 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume26,A.AcqDate = B.AcqDate26,A.AcqPrice = B.AcqPrice26,A.AcqAmount = B.AcqVolume26 * B.AcqPrice26/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate26 is not null and B.AcqVolume26 != 0 and B.AcqPrice26 != 0)
		    end
	    end

		--acq 28
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate27 is not null and AcqVolume27 != 0 and AcqPrice27 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice27)/100 * AcqVolume27, @DaysOfHoldingInterest = case when AcqDate27 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate27,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate27,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3270 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate27 is not null and AcqVolume27 != 0 and AcqPrice27 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume27/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume27 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate27 is not null and AcqVolume27 != 0 and AcqPrice27 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 28)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,28,@TrxType,reference,AcqVolume27,AcqDate27,AcqPrice27,AcqVolume27 * AcqPrice27/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate27 is not null and AcqVolume27 != 0 and AcqPrice27 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume27,A.AcqDate = B.AcqDate27,A.AcqPrice = B.AcqPrice27,A.AcqAmount = B.AcqVolume27 * B.AcqPrice27/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate27 is not null and B.AcqVolume27 != 0 and B.AcqPrice27 != 0)
		    end
	    end

		--acq 29
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate28 is not null and AcqVolume28 != 0 and AcqPrice28 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice28)/100 * AcqVolume28, @DaysOfHoldingInterest = case when AcqDate28 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate28,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate28,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3280 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate28 is not null and AcqVolume28 != 0 and AcqPrice28 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume28/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume28 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate28 is not null and AcqVolume28 != 0 and AcqPrice28 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 29)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,29,@TrxType,reference,AcqVolume28,AcqDate28,AcqPrice28,AcqVolume28 * AcqPrice28/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate28 is not null and AcqVolume28 != 0 and AcqPrice28 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume28,A.AcqDate = B.AcqDate28,A.AcqPrice = B.AcqPrice28,A.AcqAmount = B.AcqVolume28 * B.AcqPrice28/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate28 is not null and B.AcqVolume28 != 0 and B.AcqPrice28 != 0)
		    end
	    end

		--acq 30
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate29 is not null and AcqVolume29 != 0 and AcqPrice29 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice29)/100 * AcqVolume29, @DaysOfHoldingInterest = case when AcqDate29 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate29,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate29,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3290 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate29 is not null and AcqVolume29 != 0 and AcqPrice29 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume29/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume29 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate29 is not null and AcqVolume29 != 0 and AcqPrice29 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 30)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,30,@TrxType,reference,AcqVolume29,AcqDate29,AcqPrice29,AcqVolume29 * AcqPrice29/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate29 is not null and AcqVolume29 != 0 and AcqPrice29 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume29,A.AcqDate = B.AcqDate29,A.AcqPrice = B.AcqPrice29,A.AcqAmount = B.AcqVolume29 * B.AcqPrice29/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate29 is not null and B.AcqVolume29 != 0 and B.AcqPrice29 != 0)
		    end
	    end


Fetch next From A Into @investmentPK,@DealingPK,@historyPK,@Notes,@OrderPrice,@Volume,@Amount,@AccruedInterest,@FundPK,@LastCouponDate,@SettlementDate,@TaxInterestPercent
END
Close A
Deallocate A 

                                Declare @InstrumentPK int
                                Declare @InstrumentTypePK int
                                Declare @SettledDate datetime
                                Declare @NextCouponDate datetime
                                Declare @Price numeric(18,4)
                                Declare @AcqPrice numeric(18,4)
                                Declare @AcqDate datetime
                                Declare @AcqVolume numeric(18,4)
                                Declare @TaxCapitaGainPercent numeric(18,4)
                                Declare @IncomeTaxInterestPercent numeric(18,4)
                                Declare @BitIsRounding bit


                                Declare @TaxExpensePercent numeric(8,4)

                                Declare @Days int
                                Declare @DivDays int
                                Declare @InterestDays int

                                Declare @CurrencyID nvarchar(20)
                                Declare @CouponRate numeric(8,4)
                                Declare @InterestType int
                                Declare @InterestDaysType int
                                Declare @InterestPaymentType int



                                Declare @AccuredInterestAmount numeric(22,4)
                                Declare @GrossAmount numeric(22,4)
                                Declare @NetAmount numeric(22,4)
                                Declare @ValuePerUnit int
                                Declare @TotalTax Numeric(22,4)

                                Declare
                                @TotalCapGain			decimal(22,4),
                                @TotalAI				decimal(22,4),
                                @TotalTaxCapGain		decimal(22,4),
                                @TotalTaxAI				decimal(22,4)




                                DECLARE A CURSOR FOR 

									Select A.InvestmentPK,A.DealingPK,A.HistoryPK,A.ValueDate,A.InstrumentPK,A.InstrumentTypePK,
									A.SettlementDate,A.NextCouponDate,A.LastCouponDate,
									A.TrxType,A.OrderPrice,A.Volume,A.AcqPrice,A.AcqDate,
									A.AcqVolume,A.IncomeTaxGainPercent,A.IncomeTaxInterestPercent,
									A.BitIsRounding,
									A.TaxExpensePercent,
									C.ID,A.InterestPercent,B.InterestType, 
									B.InterestDaysType,12/D.Priority
									From Investment A
									left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
									left join Currency C on B.CurrencyPK = C.CurrencyPK and C.status = 2
									left join MasterValue D on B.InterestPaymentType = D.Code and D.Status = 2 and D.ID = 'InterestPaymentType'
									where StatusInvestment = 2 and ValueDate = @ValueDate and TrxType = 2 and A.InstrumentTypePK in (2,3,8,9,13,15) 
									and InvestmentPK = @PK

                                Open A
                                Fetch Next From A
                                Into @InvestmentPK,@DealingPK,@HistoryPK,@ValueDate,@InstrumentPK,@InstrumentTypePK,
                                @SettledDate,@NextCouponDate,@LastCouponDate,
                                @TrxType, @Price,@Volume,@AcqPrice,@AcqDate,
                                @AcqVolume,@TaxCapitaGainPercent,@IncomeTaxInterestPercent,
                                @BitIsRounding,@TaxExpensePercent,
                                @CurrencyID,@CouponRate,@InterestType, 
                                @InterestDaysType,@InterestPaymentType

                                While @@FETCH_STATUS = 0
                                BEGIN  

                                set @TotalCapGain	 = 0	
                                set @TotalAI		 = 0
                                set @TotalTaxCapGain = 0	
                                set @TotalTaxAI		 = 0	
								set @GrossAmount = @Volume * @price/100

                                if @CurrencyID = 'IDR'
                                begin	
									if @InterestType = 3 --ZERO COUPONT
									BEGIN
										set @AccuredInterestAmount = 0
										set @GrossAmount = @Volume * @price/100

										if @InterestDaysType in (2,3,4) -- [Govt Bond] <-> ACT/ACT , ACT/360 (3), ACT/365
										begin
											set @ValuePerUnit = 1000000
											set @DivDays = 0
											set @Days = 0
											set @InterestDays	= case when @InterestDaysType in (3) 
											then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end -- pembagi hari

										end
	
										if @InterestDaysType in (1,5,6,7,8,9) -- [Corp Bond] <-> 30/360 (US/NASD), 30/360 (EUROPEAN), 30/360, 30/360 NON-EOM, ISMA-30/360, ISMA-30/360 NONEOM
										begin
		
											set @ValuePerUnit = 1
											set @DivDays = 0
											set @Days = 0
											set @InterestDays = case when @InterestDaysType in (6) then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate,@SettledDate)) end -- pembagi hari

										end
	
									END
									ELSE
									BEGIN
										if @InterestDaysType in (2,3,4) -- [Govt Bond] <-> ACT/ACT , ACT/360 (3), ACT/365
										begin

											set @ValuePerUnit = 1000000
											set @DivDays = case when @InterestDaysType in (3) 
											then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @NextCouponDate)) 
												else abs(datediff(day, @NextCouponDate, @LastCouponDate)) end -- pembagi hari

											set @Days = case when @InterestDaysType in (3) 
											then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) 
												else abs(datediff(day, @SettledDate, @LastCouponDate)) end -- pembagi hari

											set @InterestDays	= case when @InterestDaysType in (3) 
											then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end -- pembagi hari


										end
		
										if @InterestDaysType in (1,5,6,7,8,9) -- [Corp Bond] <-> 30/360 (US/NASD), 30/360 (EUROPEAN), 30/360, 30/360 NON-EOM, ISMA-30/360, ISMA-30/360 NONEOM
										begin
		
											set @ValuePerUnit = 1
											set @DivDays = case when @InterestDaysType in (6) 
											then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @NextCouponDate)) else abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @NextCouponDate)) end -- pembagi hari
			
											set @Days = case when @InterestDaysType in (6) 
											then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) end -- pembagi hari
		
											set @InterestDays = case when @InterestDaysType in (6) then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate,@SettledDate)) end -- pembagi hari

										end
									end
                                end

                                if @CurrencyID = 'USD' -- USD
                                begin
									if @InterestType = 3 -- ZERO COUPONT
									BEGIN
										set @AccuredInterestAmount = 0
										set @GrossAmount = @Volume * @price/100
		
									END
									ELSE
									BEGIN
										if @InstrumentTypePK in (2) -- [Govt Bond]
										BEGIN	
											set @ValuePerUnit = 1
											set @DivDays = abs([dbo].[FGetDateDIffGovermentBond](@LastCouponDate, @NextCouponDate))
											set @Days = abs([dbo].[FGetDateDIffGovermentBond](@LastCouponDate, @SettledDate))
											set @InterestDays	= abs([dbo].[FGetDateDIffGovermentBond](@AcqDate, @SettledDate)) -- total hari Interest
			
										END
										Else if @InstrumentTypePK in (3) -- Corp Bond
										BEGIN
											set @ValuePerUnit = 1
											set @DivDays = abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @NextCouponDate)) -- pembagi hari
											set @Days = abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) -- total hari
			
										END
									END
                                end


                                
	                            if @InstrumentTypePK in (3,8,9,15)
	                            BEGIN
		                            set @AccuredInterestAmount = @Volume * (@CouponRate / 100) * @Days / 360
	                            END
	                            ELSE IF @InstrumentTypePK in (2,13)
	                            BEGIN
			                        set @AccuredInterestAmount = @Volume / @ValuePerUnit * (round(@CouponRate / 100 
			                        * @Days / @DivDays / @InterestPaymentType * @ValuePerUnit, 0))
	                            END

								set @TotalCapGain = 0
                                set @TotalAI = 0
								set @GrossAmount = @GrossAmount + @AccuredInterestAmount

                                select @TotalCapGain = case when IncomeTaxGainAmount + IncomeTaxInterestAmount > 0 then @TotalCapGain + isnull(IncomeTaxGainAmount,0) else @TotalCapGain end,
                                @TotalAI = case when IncomeTaxGainAmount + IncomeTaxInterestAmount > 0 then @TotalAI + isnull(IncomeTaxInterestAmount,0) else @TotalAI end from InvestmentTaxDataAcq where investmentpk = @InvestmentPK

                                --set @AccuredInterestAmount = @TotalAI
						        set @TotalTaxCapGain = @TotalCapGain * @TaxCapitaGainPercent/100
						        set @TotalTaxAI = @TotalAI * @TaxExpensePercent/100
						        if (@TotalCapGain + @TotalAI) < 0
                                begin
							        set @TotalTax = 0
							        set @TotalTaxCapGain = 0
							        select @TotalTaxAI = sum(isnull(TaxAmount,0)) from InvestmentTaxDataAcq where investmentpk = @InvestmentPK
						            
                                end
						        else
							        set @TotalTax = (@TotalTaxCapGain + @TotalTaxAI)
						
						        set @NetAmount = isnull(@GrossAmount,0) - isnull(@TotalTax,0)

                                if @TotalTaxCapGain < 0
                                begin
                                    set @TotalTaxAI = @TotalTaxAI + @TotalTaxCapGain
                                    set @TotalTaxCapGain = 0
                                end

                          
                                Update Investment set IncomeTaxInterestAmount = @TotalTaxAI, IncomeTaxGainAmount = @TotalTaxCapGain, TotalAmount = @NetAmount,DoneAccruedInterest = @AccuredInterestAmount
                                where DealingPK = @DealingPK and HistoryPK = @HistoryPK



                                Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@ValueDate,@InstrumentPK,@InstrumentTypePK,
                                @SettledDate,@NextCouponDate,@LastCouponDate,
                                @TrxType, @Price,@Volume,@AcqPrice,@AcqDate,
                                @AcqVolume,@TaxCapitaGainPercent,@IncomeTaxInterestPercent,
                                @BitIsRounding,@TaxExpensePercent,
                                @CurrencyID,@CouponRate,@InterestType, 
                                @InterestDaysType,@InterestPaymentType
                                END
                                Close A
                                Deallocate A



   ";


                            cmd1.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd1.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                            cmd1.Parameters.AddWithValue("@ClientCode", Tools.ClientCode);
                            cmd1.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                            cmd1.ExecuteReader();

                        }
                    }

                    return _newHisPK;
                }

            }

            catch (Exception err)
            {
                throw err;
            }

        }





        public int Settlement_Update(Investment _investment, bool _havePrivillege)
        {
            try
            {
                int _newHisPK;
                int status = _investment.StatusSettlement;
                DateTime _dateTimeNow = DateTime.Now;

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    if (_havePrivillege)
                    {
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            if (_investment.SettlementPK != 0)
                            {
                                cmd.CommandText =
                                @"declare @CFundPK int, @CCrossFundFromPK int, @CValueDate datetime, @CInstrumentPK int, @CInstrumentTypePK int, @COrderPrice numeric(19, 8),
                                @CVolume numeric(19,8),@CAmount numeric(19,8), @CSettledDate datetime


                                select top 1 @CFundPK = FundPK, @CCrossFundFromPK = CrossFundFromPK, @CValueDate = ValueDate, @CInstrumentPK = InstrumentPK, 
                                @CInstrumentTypePK = InstrumentTypePK, @COrderPrice = OrderPrice, @CVolume = Volume, @CAmount = Amount, @CSettledDate = SettlementDate
                                from Investment where DealingPK = @DealingPK and HistoryPK = @HistoryPK   and statusSettlement in (1,2) " +

                                _updateCommandForSettlement + @"TaxExpensePercent=@TaxExpensePercent,ApprovedSettlementID=@ApprovedSettlementID, 
                                ApprovedSettlementTime=@ApprovedSettlementTime,UpdateSettlementID=@UpdateSettlementID,UpdateSettlementTime=@UpdateSettlementTime,LastUpdate=@lastUpdate 
                                where SettlementPK = @PK and historyPK = @HistoryPK


                                if (@CrossFundFromPK <> 0)
                                BEGIN
                                    Update Investment set Notes='',DealingPK=@DealingPK,StatusDealing=@StatusDealing,SettlementPK=@SettlementPK,StatusSettlement=@StatusSettlement,ValueDate=@ValueDate,PeriodPK=@PeriodPK,InstructionDate=@InstructionDate,Reference=@Reference,InstrumentTypePK=@InstrumentTypePK,
                                    TrxType=1,TrxTypeID='BUY',CounterpartPK=@CounterpartPK,InstrumentPK=@InstrumentPK,FundPK=@FundPK,FundCashRefPK=@FundCashRefPK,OrderPrice=@OrderPrice,Lot=@Lot,LotInShare=@LotInShare,RangePrice=@RangePrice,Volume=@Volume,Amount=@Amount,
                                    InterestPercent=@InterestPercent,BreakInterestPercent=@BreakInterestPercent,AccruedInterest=@AccruedInterest,LastCouponDate=@LastCouponDate,NextCouponDate=@NextCouponDate,MaturityDate=@MaturityDate,SettlementDate=@SettlementDate,AcqDate=@AcqDate,AcqPrice=@AcqPrice,AcqVolume=@AcqVolume,
                                    DoneLot=@DoneLot,DoneVolume=@DoneVolume,DonePrice=@DonePrice,DoneAmount=@DoneAmount,Tenor=@Tenor,CommissionPercent=@CommissionPercent,
                                    LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxSellPercent=@IncomeTaxSellPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,
                                    IncomeTaxGainPercent=@IncomeTaxGainPercent,CommissionAmount=@CommissionAmount,LevyAmount=@LevyAmount,KPEIAmount=@KPEIAmount,VATAmount=@VATAmount,WHTAmount=@WHTAmount,OTCAmount=@OTCAmount,IncomeTaxSellAmount=@IncomeTaxSellAmount,
                                    IncomeTaxInterestAmount=@IncomeTaxInterestAmount,IncomeTaxGainAmount=@IncomeTaxGainAmount,TotalAmount=@TotalAmount,CurrencyRate=@CurrencyRate,SettlementMode=@SettlementMode,BoardType=@BoardType,AcqPrice1=@AcqPrice1,AcqVolume1=@AcqVolume1,AcqDate1=@AcqDate1,AcqPrice2=@AcqPrice2,AcqVolume2=@AcqVolume2,AcqDate2=@AcqDate2,AcqPrice3=@AcqPrice3,AcqVolume3=@AcqVolume3,AcqDate3=@AcqDate3,AcqPrice4=@AcqPrice4,AcqVolume4=@AcqVolume4,AcqDate4=@AcqDate4,AcqPrice5=@AcqPrice5,AcqVolume5=@AcqVolume5,AcqDate5=@AcqDate5, 
                                    AcqPrice6=@AcqPrice6,AcqVolume6=@AcqVolume6,AcqDate6=@AcqDate6,AcqPrice7=@AcqPrice7,AcqVolume7=@AcqVolume7,AcqDate7=@AcqDate7,AcqPrice8=@AcqPrice8,AcqVolume8=@AcqVolume8,AcqDate8=@AcqDate8,AcqPrice9=@AcqPrice9,AcqVolume9=@AcqVolume9,AcqDate9=@AcqDate9, 
                                    Category = @Category,BankBranchPK = @BankBranchPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode =@PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest=@DoneAccruedInterest,BitIsRounding=@BitIsRounding,AccruedHoldingAmount=@AccruedHoldingAmount,BitBreakable=@BitBreakable,CrossFundFromPK = @CrossFundFromPK,PurposeOfTransaction=@PurposeOfTransaction,StatutoryType=@StatutoryType,BitForeignTrx=@BitForeignTrx,
                                    CPSafekeepingAccNumber=@CPSafekeepingAccNumber,PlaceOfSettlement=@PlaceOfSettlement,FundSafekeepingAccountNumber=@FundSafekeepingAccountNumber,SecurityCodeType=@SecurityCodeType,BitHTM=@BitHTM,BitRollOverInterest=@BitRollOverInterest,InvestmentTrType=@InvestmentTrType,AmountToTransfer=@AmountToTransfer,
                                    BIRate=@BIRate,InvestmentStrategy=@InvestmentStrategy,InvestmentStyle=@InvestmentStyle,InvestmentObjective=@InvestmentObjective,Revision=@Revision,OtherInvestmentStyle=@OtherInvestmentStyle,OtherInvestmentObjective=@OtherInvestmentObjective,OtherRevision=@OtherRevision,
                                    AcqDate10=@AcqDate10, AcqPrice10=@AcqPrice10, AcqVolume10=@AcqVolume10, AcqDate11=@AcqDate11, AcqPrice11=@AcqPrice11, AcqVolume11=@AcqVolume11, AcqDate12=@AcqDate12, AcqPrice12=@AcqPrice12, AcqVolume12=@AcqVolume12, 
                                    AcqDate13=@AcqDate13, AcqPrice13=@AcqPrice13, AcqVolume13=@AcqVolume13, AcqDate14=@AcqDate14, AcqPrice14=@AcqPrice14, AcqVolume14=@AcqVolume14, AcqDate15=@AcqDate15, AcqPrice15=@AcqPrice15, AcqVolume15=@AcqVolume15, 
                                    AcqDate16=@AcqDate16, AcqPrice16=@AcqPrice16, AcqVolume16=@AcqVolume16, AcqDate17=@AcqDate17, AcqPrice17=@AcqPrice17, AcqVolume17=@AcqVolume17, AcqDate18=@AcqDate18, AcqPrice18=@AcqPrice18, AcqVolume18=@AcqVolume18, 
                                    AcqDate19=@AcqDate19, AcqPrice19=@AcqPrice19, AcqVolume19=@AcqVolume19, AcqDate20=@AcqDate20, AcqPrice20=@AcqPrice20, AcqVolume20=@AcqVolume20, AcqDate21=@AcqDate21, AcqPrice21=@AcqPrice21, AcqVolume21=@AcqVolume21, 
                                    AcqDate22=@AcqDate22, AcqPrice22=@AcqPrice22, AcqVolume22=@AcqVolume22, AcqDate23=@AcqDate23, AcqPrice23=@AcqPrice23, AcqVolume23=@AcqVolume23, AcqDate24=@AcqDate24, AcqPrice24=@AcqPrice24, AcqVolume24=@AcqVolume24, 
                                    AcqDate25=@AcqDate25, AcqPrice25=@AcqPrice25, AcqVolume25=@AcqVolume25, AcqDate26=@AcqDate26, AcqPrice26=@AcqPrice26, AcqVolume26=@AcqVolume26, AcqDate27=@AcqDate27, AcqPrice27=@AcqPrice27, AcqVolume27=@AcqVolume27, 
                                    AcqDate28=@AcqDate28, AcqPrice28=@AcqPrice28, AcqVolume28=@AcqVolume28, AcqDate29=@AcqDate29, AcqPrice29=@AcqPrice29, AcqVolume29=@AcqVolume29, TaxExpensePercent=@TaxExpensePercent,ApprovedSettlementID=@ApprovedSettlementID, 
                                    ApprovedSettlementTime=@ApprovedSettlementTime,UpdateSettlementID=@UpdateSettlementID,UpdateSettlementTime=@UpdateSettlementTime,LastUpdate=@lastUpdate    From Investment
                                    where FundPK = @CCrossFundFromPK and CrossFundFromPK = @CFundPK and ValueDate = @CValueDate and InstrumentPK = @CInstrumentPK
                                    and InstrumentTypePK = @CInstrumentTypePK and OrderPrice = @COrderPrice and Volume = @CVolume and Amount = @CAmount and SettlementDate = @CSettledDate
                                    and StatusSettlement in (1,2)
                                END





";
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                            }

                            // Approved dari Pending
                            else
                            {
                                cmd.CommandText = @"
                                declare @CFundPK int, @CCrossFundFromPK int, @CValueDate datetime, @CInstrumentPK int, @CInstrumentTypePK int, @COrderPrice numeric(19, 8),
                                @CVolume numeric(19,8),@CAmount numeric(19,8), @CSettledDate datetime


                                select top 1 @CFundPK = FundPK, @CCrossFundFromPK = CrossFundFromPK, @CValueDate = ValueDate, @CInstrumentPK = InstrumentPK, 
                                @CInstrumentTypePK = InstrumentTypePK, @COrderPrice = OrderPrice, @CVolume = Volume, @CAmount = Amount, @CSettledDate = SettlementDate
                                from Investment where DealingPK = @DealingPK and HistoryPK = @HistoryPK  and statusSettlement in (1,2)  " +

                                _updateCommandForSettlement + @"TaxExpensePercent =@TaxExpensePercent,ApprovedSettlementID=@ApprovedSettlementID, 
                                ApprovedSettlementTime=@ApprovedSettlementTime,UpdateSettlementID=@UpdateSettlementID,UpdateSettlementTime=@UpdateSettlementTime,LastUpdate=@lastUpdate 
                                where SettlementPK = @PK and historyPK = @HistoryPK

                                if (@CrossFundFromPK <> 0)
                                BEGIN
                                    Update Investment set Notes='',DealingPK=@DealingPK,StatusDealing=@StatusDealing,SettlementPK=@SettlementPK,StatusSettlement=@StatusSettlement,ValueDate=@ValueDate,PeriodPK=@PeriodPK,InstructionDate=@InstructionDate,Reference=@Reference,InstrumentTypePK=@InstrumentTypePK,
                                    TrxType=1,TrxTypeID='BUY',CounterpartPK=@CounterpartPK,InstrumentPK=@InstrumentPK,FundPK=@FundPK,FundCashRefPK=@FundCashRefPK,OrderPrice=@OrderPrice,Lot=@Lot,LotInShare=@LotInShare,RangePrice=@RangePrice,Volume=@Volume,Amount=@Amount,
                                    InterestPercent=@InterestPercent,BreakInterestPercent=@BreakInterestPercent,AccruedInterest=@AccruedInterest,LastCouponDate=@LastCouponDate,NextCouponDate=@NextCouponDate,MaturityDate=@MaturityDate,SettlementDate=@SettlementDate,AcqDate=@AcqDate,AcqPrice=@AcqPrice,AcqVolume=@AcqVolume,
                                    DoneLot=@DoneLot,DoneVolume=@DoneVolume,DonePrice=@DonePrice,DoneAmount=@DoneAmount,Tenor=@Tenor,CommissionPercent=@CommissionPercent,
                                    LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxSellPercent=@IncomeTaxSellPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,
                                    IncomeTaxGainPercent=@IncomeTaxGainPercent,CommissionAmount=@CommissionAmount,LevyAmount=@LevyAmount,KPEIAmount=@KPEIAmount,VATAmount=@VATAmount,WHTAmount=@WHTAmount,OTCAmount=@OTCAmount,IncomeTaxSellAmount=@IncomeTaxSellAmount,
                                    IncomeTaxInterestAmount=@IncomeTaxInterestAmount,IncomeTaxGainAmount=@IncomeTaxGainAmount,TotalAmount=@TotalAmount,CurrencyRate=@CurrencyRate,SettlementMode=@SettlementMode,BoardType=@BoardType,AcqPrice1=@AcqPrice1,AcqVolume1=@AcqVolume1,AcqDate1=@AcqDate1,AcqPrice2=@AcqPrice2,AcqVolume2=@AcqVolume2,AcqDate2=@AcqDate2,AcqPrice3=@AcqPrice3,AcqVolume3=@AcqVolume3,AcqDate3=@AcqDate3,AcqPrice4=@AcqPrice4,AcqVolume4=@AcqVolume4,AcqDate4=@AcqDate4,AcqPrice5=@AcqPrice5,AcqVolume5=@AcqVolume5,AcqDate5=@AcqDate5, 
                                    AcqPrice6=@AcqPrice6,AcqVolume6=@AcqVolume6,AcqDate6=@AcqDate6,AcqPrice7=@AcqPrice7,AcqVolume7=@AcqVolume7,AcqDate7=@AcqDate7,AcqPrice8=@AcqPrice8,AcqVolume8=@AcqVolume8,AcqDate8=@AcqDate8,AcqPrice9=@AcqPrice9,AcqVolume9=@AcqVolume9,AcqDate9=@AcqDate9, 
                                    Category = @Category,BankBranchPK = @BankBranchPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode =@PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest=@DoneAccruedInterest,BitIsRounding=@BitIsRounding,AccruedHoldingAmount=@AccruedHoldingAmount,BitBreakable=@BitBreakable,CrossFundFromPK = @CrossFundFromPK,PurposeOfTransaction=@PurposeOfTransaction,StatutoryType=@StatutoryType,BitForeignTrx=@BitForeignTrx,
                                    CPSafekeepingAccNumber=@CPSafekeepingAccNumber,PlaceOfSettlement=@PlaceOfSettlement,FundSafekeepingAccountNumber=@FundSafekeepingAccountNumber,SecurityCodeType=@SecurityCodeType,BitHTM=@BitHTM,BitRollOverInterest=@BitRollOverInterest,InvestmentTrType=@InvestmentTrType,AmountToTransfer=@AmountToTransfer,
                                    BIRate=@BIRate,InvestmentStrategy=@InvestmentStrategy,InvestmentStyle=@InvestmentStyle,InvestmentObjective=@InvestmentObjective,Revision=@Revision,OtherInvestmentStyle=@OtherInvestmentStyle,OtherInvestmentObjective=@OtherInvestmentObjective,OtherRevision=@OtherRevision,
                                    AcqDate10=@AcqDate10, AcqPrice10=@AcqPrice10, AcqVolume10=@AcqVolume10, AcqDate11=@AcqDate11, AcqPrice11=@AcqPrice11, AcqVolume11=@AcqVolume11, AcqDate12=@AcqDate12, AcqPrice12=@AcqPrice12, AcqVolume12=@AcqVolume12, 
                                    AcqDate13=@AcqDate13, AcqPrice13=@AcqPrice13, AcqVolume13=@AcqVolume13, AcqDate14=@AcqDate14, AcqPrice14=@AcqPrice14, AcqVolume14=@AcqVolume14, AcqDate15=@AcqDate15, AcqPrice15=@AcqPrice15, AcqVolume15=@AcqVolume15, 
                                    AcqDate16=@AcqDate16, AcqPrice16=@AcqPrice16, AcqVolume16=@AcqVolume16, AcqDate17=@AcqDate17, AcqPrice17=@AcqPrice17, AcqVolume17=@AcqVolume17, AcqDate18=@AcqDate18, AcqPrice18=@AcqPrice18, AcqVolume18=@AcqVolume18, 
                                    AcqDate19=@AcqDate19, AcqPrice19=@AcqPrice19, AcqVolume19=@AcqVolume19, AcqDate20=@AcqDate20, AcqPrice20=@AcqPrice20, AcqVolume20=@AcqVolume20, AcqDate21=@AcqDate21, AcqPrice21=@AcqPrice21, AcqVolume21=@AcqVolume21, 
                                    AcqDate22=@AcqDate22, AcqPrice22=@AcqPrice22, AcqVolume22=@AcqVolume22, AcqDate23=@AcqDate23, AcqPrice23=@AcqPrice23, AcqVolume23=@AcqVolume23, AcqDate24=@AcqDate24, AcqPrice24=@AcqPrice24, AcqVolume24=@AcqVolume24, 
                                    AcqDate25=@AcqDate25, AcqPrice25=@AcqPrice25, AcqVolume25=@AcqVolume25, AcqDate26=@AcqDate26, AcqPrice26=@AcqPrice26, AcqVolume26=@AcqVolume26, AcqDate27=@AcqDate27, AcqPrice27=@AcqPrice27, AcqVolume27=@AcqVolume27, 
                                    AcqDate28=@AcqDate28, AcqPrice28=@AcqPrice28, AcqVolume28=@AcqVolume28, AcqDate29=@AcqDate29, AcqPrice29=@AcqPrice29, AcqVolume29=@AcqVolume29, TaxExpensePercent=@TaxExpensePercent,ApprovedSettlementID=@ApprovedSettlementID, 
                                    ApprovedSettlementTime=@ApprovedSettlementTime,UpdateSettlementID=@UpdateSettlementID,UpdateSettlementTime=@UpdateSettlementTime,LastUpdate=@lastUpdate    From Investment
                                    where FundPK = @CCrossFundFromPK and CrossFundFromPK = @CFundPK and ValueDate = @CValueDate and InstrumentPK = @CInstrumentPK
                                    and InstrumentTypePK = @CInstrumentTypePK and OrderPrice = @COrderPrice and Volume = @CVolume and Amount = @CAmount and SettlementDate = @CSettledDate
                                    and StatusSettlement in (1,2)
                                END




";
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                            }


                            cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                            cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                            cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                            cmd.Parameters.AddWithValue("@StatusDealing", 2);
                            cmd.Parameters.AddWithValue("@StatusSettlement", 2);
                            cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                            cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                            cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                            cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                            cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                            cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                            //cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                            cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                            cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                            cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                            cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                            cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                            cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                            cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                            cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                            cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                            cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                            cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                            cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                            if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                            {
                                cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                            }

                            if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                            {
                                cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                            }
                            if (_investment.InvestmentTrType == 0 || _investment.InvestmentTrType == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentTrType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentTrType", _investment.InvestmentTrType);
                            }

                            if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                            {
                                cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                            }

                            if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                            {
                                cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                            }


                            if (_investment.SettledDate == "" || _investment.SettledDate == null)
                            {
                                cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                            }
                            cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                            cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                            cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                            cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                            cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                            cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                            cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                            cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                            cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                            cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                            cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                            cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                            cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                            cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                            cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                            cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                            cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                            cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                            cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                            cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                            cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                            cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                            cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                            cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                            cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                            if (_investment.AcqDate == "" || _investment.AcqDate == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                            cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                            if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                            cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                            if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                            cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                            if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                            cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                            if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                            cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                            if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                            cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                            if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                            cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                            if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                            cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                            if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                            cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                            if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                            }
                            cmd.Parameters.AddWithValue("@AcqPrice10", _investment.AcqPrice10);
                            cmd.Parameters.AddWithValue("@AcqVolume10", _investment.AcqVolume10);
                            if (_investment.AcqDate10 == "" || _investment.AcqDate10 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate10", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate10", _investment.AcqDate10);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice11", _investment.AcqPrice11);
                            cmd.Parameters.AddWithValue("@AcqVolume11", _investment.AcqVolume11);
                            if (_investment.AcqDate11 == "" || _investment.AcqDate11 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate11", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate11", _investment.AcqDate11);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice12", _investment.AcqPrice12);
                            cmd.Parameters.AddWithValue("@AcqVolume12", _investment.AcqVolume12);
                            if (_investment.AcqDate12 == "" || _investment.AcqDate12 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate12", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate12", _investment.AcqDate12);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice13", _investment.AcqPrice13);
                            cmd.Parameters.AddWithValue("@AcqVolume13", _investment.AcqVolume13);
                            if (_investment.AcqDate13 == "" || _investment.AcqDate13 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate13", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate13", _investment.AcqDate13);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice14", _investment.AcqPrice14);
                            cmd.Parameters.AddWithValue("@AcqVolume14", _investment.AcqVolume14);
                            if (_investment.AcqDate14 == "" || _investment.AcqDate14 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate14", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate14", _investment.AcqDate14);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice15", _investment.AcqPrice15);
                            cmd.Parameters.AddWithValue("@AcqVolume15", _investment.AcqVolume15);
                            if (_investment.AcqDate15 == "" || _investment.AcqDate15 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate15", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate15", _investment.AcqDate15);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice16", _investment.AcqPrice16);
                            cmd.Parameters.AddWithValue("@AcqVolume16", _investment.AcqVolume16);
                            if (_investment.AcqDate16 == "" || _investment.AcqDate16 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate16", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate16", _investment.AcqDate16);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice17", _investment.AcqPrice17);
                            cmd.Parameters.AddWithValue("@AcqVolume17", _investment.AcqVolume17);
                            if (_investment.AcqDate17 == "" || _investment.AcqDate17 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate17", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate17", _investment.AcqDate17);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice18", _investment.AcqPrice18);
                            cmd.Parameters.AddWithValue("@AcqVolume18", _investment.AcqVolume18);
                            if (_investment.AcqDate18 == "" || _investment.AcqDate18 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate18", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate18", _investment.AcqDate18);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice19", _investment.AcqPrice19);
                            cmd.Parameters.AddWithValue("@AcqVolume19", _investment.AcqVolume19);
                            if (_investment.AcqDate19 == "" || _investment.AcqDate19 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate19", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate19", _investment.AcqDate19);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice20", _investment.AcqPrice20);
                            cmd.Parameters.AddWithValue("@AcqVolume20", _investment.AcqVolume20);
                            if (_investment.AcqDate20 == "" || _investment.AcqDate20 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate20", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate20", _investment.AcqDate20);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice21", _investment.AcqPrice21);
                            cmd.Parameters.AddWithValue("@AcqVolume21", _investment.AcqVolume21);
                            if (_investment.AcqDate21 == "" || _investment.AcqDate21 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate21", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate21", _investment.AcqDate21);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice22", _investment.AcqPrice22);
                            cmd.Parameters.AddWithValue("@AcqVolume22", _investment.AcqVolume22);
                            if (_investment.AcqDate22 == "" || _investment.AcqDate22 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate22", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate22", _investment.AcqDate22);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice23", _investment.AcqPrice23);
                            cmd.Parameters.AddWithValue("@AcqVolume23", _investment.AcqVolume23);
                            if (_investment.AcqDate23 == "" || _investment.AcqDate23 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate23", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate23", _investment.AcqDate23);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice24", _investment.AcqPrice24);
                            cmd.Parameters.AddWithValue("@AcqVolume24", _investment.AcqVolume24);
                            if (_investment.AcqDate24 == "" || _investment.AcqDate24 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate24", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate24", _investment.AcqDate24);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice25", _investment.AcqPrice25);
                            cmd.Parameters.AddWithValue("@AcqVolume25", _investment.AcqVolume25);
                            if (_investment.AcqDate25 == "" || _investment.AcqDate25 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate25", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate25", _investment.AcqDate25);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice26", _investment.AcqPrice26);
                            cmd.Parameters.AddWithValue("@AcqVolume26", _investment.AcqVolume26);
                            if (_investment.AcqDate26 == "" || _investment.AcqDate26 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate26", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate26", _investment.AcqDate26);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice27", _investment.AcqPrice27);
                            cmd.Parameters.AddWithValue("@AcqVolume27", _investment.AcqVolume27);
                            if (_investment.AcqDate27 == "" || _investment.AcqDate27 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate27", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate27", _investment.AcqDate27);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice28", _investment.AcqPrice28);
                            cmd.Parameters.AddWithValue("@AcqVolume28", _investment.AcqVolume28);
                            if (_investment.AcqDate28 == "" || _investment.AcqDate28 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate28", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate28", _investment.AcqDate28);
                            }

                            cmd.Parameters.AddWithValue("@AcqPrice29", _investment.AcqPrice29);
                            cmd.Parameters.AddWithValue("@AcqVolume29", _investment.AcqVolume29);
                            if (_investment.AcqDate29 == "" || _investment.AcqDate29 == null)
                            {
                                cmd.Parameters.AddWithValue("@AcqDate29", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AcqDate29", _investment.AcqDate29);
                            }
                            if (_investment.Category == "" || _investment.Category == null)
                            {
                                cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@Category", _investment.Category);
                            }
                            if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                            {
                                cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                            }

                            if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                            {
                                cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                            }

                            if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                            {
                                cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                            }
                            if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                            {
                                cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                            }
                            if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                            {
                                cmd.Parameters.AddWithValue("@PriceMode", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                            }

                            if (_investment.BitIsAmortized == null)
                            {
                                cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                            }
                            //if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                            //{
                            //    cmd.Parameters.AddWithValue("@YieldPercent", 0);
                            //}
                            //else
                            //{
                            //    cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                            //}

                            if (_investment.BitIsRounding == null)
                            {
                                cmd.Parameters.AddWithValue("@BitIsRounding", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                            }

                            if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                            {
                                cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                            }
                            if (_investment.BitBreakable == null)
                            {
                                cmd.Parameters.AddWithValue("@BitBreakable", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                            }
                            if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                            {
                                cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                            }
                            if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                            {
                                cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                            }

                            if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                            {
                                cmd.Parameters.AddWithValue("@StatutoryType", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                            }
                            cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);
                            cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                            cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                            cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                            cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                            cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                            cmd.Parameters.AddWithValue("@TaxExpensePercent", _investment.TaxExpensePercent);
                            if (_investment.BitHTM == null)
                            {
                                cmd.Parameters.AddWithValue("@BitHTM", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                            }
                            if (_investment.BitRollOverInterest == null)
                            {
                                cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                            }

                            if (_investment.BIRate == 0 || _investment.BIRate == null)
                            {
                                cmd.Parameters.AddWithValue("@BIRate", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                            }

                            if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                            }

                            if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                            }

                            if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                            {
                                cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                            }

                            if (_investment.Revision == 0 || _investment.Revision == null)
                            {
                                cmd.Parameters.AddWithValue("@Revision", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                            }

                            if (_investment.OtherInvestmentStyle == "" || _investment.OtherInvestmentStyle == null)
                            {
                                cmd.Parameters.AddWithValue("@OtherInvestmentStyle", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                            }

                            if (_investment.OtherInvestmentObjective == "" || _investment.OtherInvestmentObjective == null)
                            {
                                cmd.Parameters.AddWithValue("@OtherInvestmentObjective", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                            }

                            if (_investment.OtherRevision == "" || _investment.OtherRevision == null)
                            {
                                cmd.Parameters.AddWithValue("@OtherRevision", 0);
                            }
                            else
                            {
                                cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);
                            }


                            cmd.Parameters.AddWithValue("@UpdateSettlementID", _investment.UpdateSettlementID);
                            cmd.Parameters.AddWithValue("@UpdateSettlementTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@ApprovedSettlementID", _investment.ApprovedSettlementID);
                            cmd.Parameters.AddWithValue("@ApprovedSettlementTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@lastupdate", _dateTimeNow);
                            cmd.ExecuteNonQuery();
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = "Update Investment set statusSettlement= 3,VoidSettlementID=@VoidSettlementID,VoidSettlementTime=@VoidSettlementTime,LastUpdate=@LastUpdate where InvestmentPK = @PK and statusSettlement = 4";
                            cmd.Parameters.AddWithValue("@PK", _investment.InvestmentPK);
                            cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidSettlementID);
                            cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                            cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                            cmd.ExecuteNonQuery();
                        }
                        return 0;
                    }
                    else
                    {
                        if (status == 1)
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText =
                                    @"declare @CFundPK int, @CCrossFundFromPK int, @CValueDate datetime, @CInstrumentPK int, @CInstrumentTypePK int, @COrderPrice numeric(19, 8),
                                    @CVolume numeric(19,8),@CAmount numeric(19,8), @CSettledDate datetime


                                    select top 1 @CFundPK = FundPK, @CCrossFundFromPK = CrossFundFromPK, @CValueDate = ValueDate, @CInstrumentPK = InstrumentPK, 
                                    @CInstrumentTypePK = InstrumentTypePK, @COrderPrice = OrderPrice, @CVolume = Volume, @CAmount = Amount, @CSettledDate = SettlementDate
                                    from Investment where DealingPK = @DealingPK and HistoryPK = @HistoryPK 

                                    if (isnull(@CrossFundFromPK, 0) = 0)
                                    BEGIN

                                    " +

                                    _updateCommandForSettlement +
                                    @"InvestmentNotes = @InvestmentNotes,TaxExpensePercent=@TaxExpensePercent, UpdateSettlementID=@UpdateSettlementID,UpdateSettlementTime=@UpdateSettlementTime,LastUpdate=@LastUpdate
                                    where SettlementPK = @PK and historyPK = @HistoryPK

                                    END


                                    ELSE
                                    BEGIN
                                        Update Investment set Notes = '',
                                        TrxType=2,TrxTypeID='SELL',CounterpartPK= @CounterpartPK,SettlementDate = @SettlementDate,AcqDate = @AcqDate,AcqPrice = @AcqPrice,AcqVolume = @AcqVolume,
                                        DoneLot = @DoneLot,DoneVolume = @DoneVolume,DonePrice = @DonePrice,DoneAmount = @DoneAmount,Tenor = @Tenor,CommissionPercent = @CommissionPercent,
                                        LevyPercent = @LevyPercent,KPEIPercent = @KPEIPercent,VATPercent = @VATPercent,WHTPercent = @WHTPercent,OTCPercent = @OTCPercent,IncomeTaxSellPercent = @IncomeTaxSellPercent,IncomeTaxInterestPercent = @IncomeTaxInterestPercent,
                                        IncomeTaxGainPercent = @IncomeTaxGainPercent,CommissionAmount = @CommissionAmount,LevyAmount = @LevyAmount,KPEIAmount = @KPEIAmount,VATAmount = @VATAmount,WHTAmount = @WHTAmount,OTCAmount = @OTCAmount,IncomeTaxSellAmount = @IncomeTaxSellAmount,
                                        IncomeTaxInterestAmount = @IncomeTaxInterestAmount,IncomeTaxGainAmount = @IncomeTaxGainAmount,TotalAmount = @TotalAmount,CurrencyRate = @CurrencyRate,BoardType = @BoardType,AcqPrice1 = @AcqPrice1,AcqVolume1 = @AcqVolume1,AcqDate1 = @AcqDate1,AcqPrice2 = @AcqPrice2,AcqVolume2 = @AcqVolume2,AcqDate2 = @AcqDate2,AcqPrice3 = @AcqPrice3,AcqVolume3 = @AcqVolume3,AcqDate3 = @AcqDate3,AcqPrice4 = @AcqPrice4,AcqVolume4 = @AcqVolume4,AcqDate4 = @AcqDate4,AcqPrice5 = @AcqPrice5,AcqVolume5 = @AcqVolume5,AcqDate5 = @AcqDate5, 
                                        AcqPrice6 = @AcqPrice6,AcqVolume6 = @AcqVolume6,AcqDate6 = @AcqDate6,AcqPrice7 = @AcqPrice7,AcqVolume7 = @AcqVolume7,AcqDate7 = @AcqDate7,AcqPrice8 = @AcqPrice8,AcqVolume8 = @AcqVolume8,AcqDate8 = @AcqDate8,AcqPrice9 = @AcqPrice9,AcqVolume9 = @AcqVolume9,AcqDate9 = @AcqDate9, 
                                        Category = @Category,BankBranchPK = @BankBranchPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode = @PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest = @DoneAccruedInterest,BitIsRounding = @BitIsRounding,AccruedHoldingAmount = @AccruedHoldingAmount,BitBreakable = @BitBreakable,PurposeOfTransaction = @PurposeOfTransaction,StatutoryType = @StatutoryType,BitForeignTrx = @BitForeignTrx,
                                        CPSafekeepingAccNumber = @CPSafekeepingAccNumber,PlaceOfSettlement = @PlaceOfSettlement,FundSafekeepingAccountNumber = @FundSafekeepingAccountNumber,SecurityCodeType = @SecurityCodeType,BitHTM = @BitHTM,BitRollOverInterest = @BitRollOverInterest,InvestmentTrType = @InvestmentTrType,AmountToTransfer = @AmountToTransfer,
                                        BIRate = @BIRate,InvestmentStrategy = @InvestmentStrategy,InvestmentStyle = @InvestmentStyle,InvestmentObjective = @InvestmentObjective,Revision = @Revision,OtherInvestmentStyle = @OtherInvestmentStyle,OtherInvestmentObjective = @OtherInvestmentObjective,OtherRevision = @OtherRevision,
                                        AcqDate10 = @AcqDate10, AcqPrice10 = @AcqPrice10, AcqVolume10 = @AcqVolume10, AcqDate11 = @AcqDate11, AcqPrice11 = @AcqPrice11, AcqVolume11 = @AcqVolume11, AcqDate12 = @AcqDate12, AcqPrice12 = @AcqPrice12, AcqVolume12 = @AcqVolume12, 
                                        AcqDate13 = @AcqDate13, AcqPrice13 = @AcqPrice13, AcqVolume13 = @AcqVolume13, AcqDate14 = @AcqDate14, AcqPrice14 = @AcqPrice14, AcqVolume14 = @AcqVolume14, AcqDate15 = @AcqDate15, AcqPrice15 = @AcqPrice15, AcqVolume15 = @AcqVolume15, 
                                        AcqDate16 = @AcqDate16, AcqPrice16 = @AcqPrice16, AcqVolume16 = @AcqVolume16, AcqDate17 = @AcqDate17, AcqPrice17 = @AcqPrice17, AcqVolume17 = @AcqVolume17, AcqDate18 = @AcqDate18, AcqPrice18 = @AcqPrice18, AcqVolume18 = @AcqVolume18, 
                                        AcqDate19 = @AcqDate19, AcqPrice19 = @AcqPrice19, AcqVolume19 = @AcqVolume19, AcqDate20 = @AcqDate20, AcqPrice20 = @AcqPrice20, AcqVolume20 = @AcqVolume20, AcqDate21 = @AcqDate21, AcqPrice21 = @AcqPrice21, AcqVolume21 = @AcqVolume21, 
                                        AcqDate22 = @AcqDate22, AcqPrice22 = @AcqPrice22, AcqVolume22 = @AcqVolume22, AcqDate23 = @AcqDate23, AcqPrice23 = @AcqPrice23, AcqVolume23 = @AcqVolume23, AcqDate24 = @AcqDate24, AcqPrice24 = @AcqPrice24, AcqVolume24 = @AcqVolume24, 
                                        AcqDate25 = @AcqDate25, AcqPrice25 = @AcqPrice25, AcqVolume25 = @AcqVolume25, AcqDate26 = @AcqDate26, AcqPrice26 = @AcqPrice26, AcqVolume26 = @AcqVolume26, AcqDate27 = @AcqDate27, AcqPrice27 = @AcqPrice27, AcqVolume27 = @AcqVolume27, 
                                        AcqDate28 = @AcqDate28, AcqPrice28 = @AcqPrice28, AcqVolume28 = @AcqVolume28, AcqDate29 = @AcqDate29, AcqPrice29 = @AcqPrice29, AcqVolume29 = @AcqVolume29, InvestmentNotes = @InvestmentNotes, UpdateSettlementID=@UpdateSettlementID,UpdateSettlementTime=@UpdateSettlementTime,LastUpdate=@LastUpdate From Investment
                                        where DealingPK = @PK and historyPK = @HistoryPK


                                        Update Investment set Notes = '',
                                        TrxType=1,TrxTypeID='BUY',CounterpartPK= @CounterpartPK,SettlementDate = @SettlementDate,AcqDate = @AcqDate,AcqPrice = @AcqPrice,AcqVolume = @AcqVolume,
                                        DoneLot = @DoneLot,DoneVolume = @DoneVolume,DonePrice = @DonePrice,DoneAmount = @DoneAmount,Tenor = @Tenor,CommissionPercent = @CommissionPercent,
                                        LevyPercent = @LevyPercent,KPEIPercent = @KPEIPercent,VATPercent = @VATPercent,WHTPercent = @WHTPercent,OTCPercent = @OTCPercent,IncomeTaxSellPercent = @IncomeTaxSellPercent,IncomeTaxInterestPercent = @IncomeTaxInterestPercent,
                                        IncomeTaxGainPercent = @IncomeTaxGainPercent,CommissionAmount = @CommissionAmount,LevyAmount = @LevyAmount,KPEIAmount = @KPEIAmount,VATAmount = @VATAmount,WHTAmount = @WHTAmount,OTCAmount = @OTCAmount,IncomeTaxSellAmount = @IncomeTaxSellAmount,
                                        IncomeTaxInterestAmount = @IncomeTaxInterestAmount,IncomeTaxGainAmount = @IncomeTaxGainAmount,TotalAmount = @TotalAmount,CurrencyRate = @CurrencyRate,SettlementMode = case when @SettlementMode = 2 then 1 else 3 end ,BoardType = @BoardType,AcqPrice1 = @AcqPrice1,AcqVolume1 = @AcqVolume1,AcqDate1 = @AcqDate1,AcqPrice2 = @AcqPrice2,AcqVolume2 = @AcqVolume2,AcqDate2 = @AcqDate2,AcqPrice3 = @AcqPrice3,AcqVolume3 = @AcqVolume3,AcqDate3 = @AcqDate3,AcqPrice4 = @AcqPrice4,AcqVolume4 = @AcqVolume4,AcqDate4 = @AcqDate4,AcqPrice5 = @AcqPrice5,AcqVolume5 = @AcqVolume5,AcqDate5 = @AcqDate5, 
                                        AcqPrice6 = @AcqPrice6,AcqVolume6 = @AcqVolume6,AcqDate6 = @AcqDate6,AcqPrice7 = @AcqPrice7,AcqVolume7 = @AcqVolume7,AcqDate7 = @AcqDate7,AcqPrice8 = @AcqPrice8,AcqVolume8 = @AcqVolume8,AcqDate8 = @AcqDate8,AcqPrice9 = @AcqPrice9,AcqVolume9 = @AcqVolume9,AcqDate9 = @AcqDate9, 
                                        Category = @Category,BankBranchPK = @BankBranchPK,InterestDaysType = @InterestDaysType,InterestPaymentType = @InterestPaymentType,PaymentModeOnMaturity = @PaymentModeOnMaturity,PaymentInterestSpecificDate = @PaymentInterestSpecificDate,PriceMode = @PriceMode,BitIsAmortized = @BitIsAmortized, DoneAccruedInterest = @DoneAccruedInterest,BitIsRounding = @BitIsRounding,AccruedHoldingAmount = @AccruedHoldingAmount,BitBreakable = @BitBreakable,PurposeOfTransaction = @PurposeOfTransaction,StatutoryType = @StatutoryType,BitForeignTrx = @BitForeignTrx,
                                        CPSafekeepingAccNumber = @CPSafekeepingAccNumber,PlaceOfSettlement = @PlaceOfSettlement,FundSafekeepingAccountNumber = @FundSafekeepingAccountNumber,SecurityCodeType = @SecurityCodeType,BitHTM = @BitHTM,BitRollOverInterest = @BitRollOverInterest,InvestmentTrType = @InvestmentTrType,AmountToTransfer = @AmountToTransfer,
                                        BIRate = @BIRate,InvestmentStrategy = @InvestmentStrategy,InvestmentStyle = @InvestmentStyle,InvestmentObjective = @InvestmentObjective,Revision = @Revision,OtherInvestmentStyle = @OtherInvestmentStyle,OtherInvestmentObjective = @OtherInvestmentObjective,OtherRevision = @OtherRevision,
                                        AcqDate10 = @AcqDate10, AcqPrice10 = @AcqPrice10, AcqVolume10 = @AcqVolume10, AcqDate11 = @AcqDate11, AcqPrice11 = @AcqPrice11, AcqVolume11 = @AcqVolume11, AcqDate12 = @AcqDate12, AcqPrice12 = @AcqPrice12, AcqVolume12 = @AcqVolume12, 
                                        AcqDate13 = @AcqDate13, AcqPrice13 = @AcqPrice13, AcqVolume13 = @AcqVolume13, AcqDate14 = @AcqDate14, AcqPrice14 = @AcqPrice14, AcqVolume14 = @AcqVolume14, AcqDate15 = @AcqDate15, AcqPrice15 = @AcqPrice15, AcqVolume15 = @AcqVolume15, 
                                        AcqDate16 = @AcqDate16, AcqPrice16 = @AcqPrice16, AcqVolume16 = @AcqVolume16, AcqDate17 = @AcqDate17, AcqPrice17 = @AcqPrice17, AcqVolume17 = @AcqVolume17, AcqDate18 = @AcqDate18, AcqPrice18 = @AcqPrice18, AcqVolume18 = @AcqVolume18, 
                                        AcqDate19 = @AcqDate19, AcqPrice19 = @AcqPrice19, AcqVolume19 = @AcqVolume19, AcqDate20 = @AcqDate20, AcqPrice20 = @AcqPrice20, AcqVolume20 = @AcqVolume20, AcqDate21 = @AcqDate21, AcqPrice21 = @AcqPrice21, AcqVolume21 = @AcqVolume21, 
                                        AcqDate22 = @AcqDate22, AcqPrice22 = @AcqPrice22, AcqVolume22 = @AcqVolume22, AcqDate23 = @AcqDate23, AcqPrice23 = @AcqPrice23, AcqVolume23 = @AcqVolume23, AcqDate24 = @AcqDate24, AcqPrice24 = @AcqPrice24, AcqVolume24 = @AcqVolume24, 
                                        AcqDate25 = @AcqDate25, AcqPrice25 = @AcqPrice25, AcqVolume25 = @AcqVolume25, AcqDate26 = @AcqDate26, AcqPrice26 = @AcqPrice26, AcqVolume26 = @AcqVolume26, AcqDate27 = @AcqDate27, AcqPrice27 = @AcqPrice27, AcqVolume27 = @AcqVolume27, 
                                        AcqDate28 = @AcqDate28, AcqPrice28 = @AcqPrice28, AcqVolume28 = @AcqVolume28, AcqDate29 = @AcqDate29, AcqPrice29 = @AcqPrice29, AcqVolume29 = @AcqVolume29, InvestmentNotes = @InvestmentNotes, UpdateSettlementID=@UpdateSettlementID,UpdateSettlementTime=@UpdateSettlementTime,LastUpdate=@LastUpdate From Investment
                                        where FundPK = @CCrossFundFromPK and CrossFundFromPK = @CFundPK and ValueDate = @CValueDate and InstrumentPK = @CInstrumentPK
                                        and InstrumentTypePK = @CInstrumentTypePK and OrderPrice = @COrderPrice and Volume = @CVolume and Amount = @CAmount and SettlementDate = @CSettledDate
                                        and StatusSettlement in (1,2)
                                    END


                                ";
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@PK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@StatusInvestment", 2);
                                cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@StatusDealing", 2);
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@StatusSettlement", 1);
                                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                                //cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                                cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                }

                                if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                }

                                if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }

                                if (_investment.InvestmentTrType == 0 || _investment.InvestmentTrType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentTrType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentTrType", _investment.InvestmentTrType);
                                }

                                if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                                }

                                if (_investment.SettledDate == "" || _investment.SettledDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                }
                                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                                cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                                cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                                cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                                cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                                cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                                cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                                if (_investment.AcqDate == "" || _investment.AcqDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                                cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                                if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                                cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                                if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                                cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                                if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                                cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                                if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                                cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                                if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                                cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                                if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                                cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                                if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                                cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                                if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                                cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                                if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice10", _investment.AcqPrice10);
                                cmd.Parameters.AddWithValue("@AcqVolume10", _investment.AcqVolume10);
                                if (_investment.AcqDate10 == "" || _investment.AcqDate10 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate10", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate10", _investment.AcqDate10);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice11", _investment.AcqPrice11);
                                cmd.Parameters.AddWithValue("@AcqVolume11", _investment.AcqVolume11);
                                if (_investment.AcqDate11 == "" || _investment.AcqDate11 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate11", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate11", _investment.AcqDate11);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice12", _investment.AcqPrice12);
                                cmd.Parameters.AddWithValue("@AcqVolume12", _investment.AcqVolume12);
                                if (_investment.AcqDate12 == "" || _investment.AcqDate12 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate12", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate12", _investment.AcqDate12);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice13", _investment.AcqPrice13);
                                cmd.Parameters.AddWithValue("@AcqVolume13", _investment.AcqVolume13);
                                if (_investment.AcqDate13 == "" || _investment.AcqDate13 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate13", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate13", _investment.AcqDate13);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice14", _investment.AcqPrice14);
                                cmd.Parameters.AddWithValue("@AcqVolume14", _investment.AcqVolume14);
                                if (_investment.AcqDate14 == "" || _investment.AcqDate14 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate14", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate14", _investment.AcqDate14);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice15", _investment.AcqPrice15);
                                cmd.Parameters.AddWithValue("@AcqVolume15", _investment.AcqVolume15);
                                if (_investment.AcqDate15 == "" || _investment.AcqDate15 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate15", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate15", _investment.AcqDate15);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice16", _investment.AcqPrice16);
                                cmd.Parameters.AddWithValue("@AcqVolume16", _investment.AcqVolume16);
                                if (_investment.AcqDate16 == "" || _investment.AcqDate16 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate16", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate16", _investment.AcqDate16);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice17", _investment.AcqPrice17);
                                cmd.Parameters.AddWithValue("@AcqVolume17", _investment.AcqVolume17);
                                if (_investment.AcqDate17 == "" || _investment.AcqDate17 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate17", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate17", _investment.AcqDate17);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice18", _investment.AcqPrice18);
                                cmd.Parameters.AddWithValue("@AcqVolume18", _investment.AcqVolume18);
                                if (_investment.AcqDate18 == "" || _investment.AcqDate18 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate18", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate18", _investment.AcqDate18);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice19", _investment.AcqPrice19);
                                cmd.Parameters.AddWithValue("@AcqVolume19", _investment.AcqVolume19);
                                if (_investment.AcqDate19 == "" || _investment.AcqDate19 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate19", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate19", _investment.AcqDate19);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice20", _investment.AcqPrice20);
                                cmd.Parameters.AddWithValue("@AcqVolume20", _investment.AcqVolume20);
                                if (_investment.AcqDate20 == "" || _investment.AcqDate20 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate20", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate20", _investment.AcqDate20);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice21", _investment.AcqPrice21);
                                cmd.Parameters.AddWithValue("@AcqVolume21", _investment.AcqVolume21);
                                if (_investment.AcqDate21 == "" || _investment.AcqDate21 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate21", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate21", _investment.AcqDate21);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice22", _investment.AcqPrice22);
                                cmd.Parameters.AddWithValue("@AcqVolume22", _investment.AcqVolume22);
                                if (_investment.AcqDate22 == "" || _investment.AcqDate22 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate22", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate22", _investment.AcqDate22);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice23", _investment.AcqPrice23);
                                cmd.Parameters.AddWithValue("@AcqVolume23", _investment.AcqVolume23);
                                if (_investment.AcqDate23 == "" || _investment.AcqDate23 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate23", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate23", _investment.AcqDate23);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice24", _investment.AcqPrice24);
                                cmd.Parameters.AddWithValue("@AcqVolume24", _investment.AcqVolume24);
                                if (_investment.AcqDate24 == "" || _investment.AcqDate24 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate24", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate24", _investment.AcqDate24);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice25", _investment.AcqPrice25);
                                cmd.Parameters.AddWithValue("@AcqVolume25", _investment.AcqVolume25);
                                if (_investment.AcqDate25 == "" || _investment.AcqDate25 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate25", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate25", _investment.AcqDate25);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice26", _investment.AcqPrice26);
                                cmd.Parameters.AddWithValue("@AcqVolume26", _investment.AcqVolume26);
                                if (_investment.AcqDate26 == "" || _investment.AcqDate26 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate26", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate26", _investment.AcqDate26);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice27", _investment.AcqPrice27);
                                cmd.Parameters.AddWithValue("@AcqVolume27", _investment.AcqVolume27);
                                if (_investment.AcqDate27 == "" || _investment.AcqDate27 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate27", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate27", _investment.AcqDate27);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice28", _investment.AcqPrice28);
                                cmd.Parameters.AddWithValue("@AcqVolume28", _investment.AcqVolume28);
                                if (_investment.AcqDate28 == "" || _investment.AcqDate28 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate28", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate28", _investment.AcqDate28);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice29", _investment.AcqPrice29);
                                cmd.Parameters.AddWithValue("@AcqVolume29", _investment.AcqVolume29);
                                if (_investment.AcqDate29 == "" || _investment.AcqDate29 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate29", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate29", _investment.AcqDate29);
                                }
                                if (_investment.Category == "" || _investment.Category == null)
                                {
                                    cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Category", _investment.Category);
                                }
                                if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                                }

                                if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                                }

                                if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                                }
                                if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                                }
                                if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                                }

                                if (_investment.BitIsAmortized == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                                }
                                //if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                                //{
                                //    cmd.Parameters.AddWithValue("@YieldPercent", 0);
                                //}
                                //else
                                //{
                                //    cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                                //}

                                if (_investment.BitIsRounding == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                                }

                                if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                                }
                                if (_investment.BitBreakable == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                                }
                                if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                                }
                                if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                                }

                                if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                                }

                                if (_investment.BIRate == 0 || _investment.BIRate == null)
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                                }

                                if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                                }

                                if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                                }

                                if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                                }

                                if (_investment.Revision == 0 || _investment.Revision == null)
                                {
                                    cmd.Parameters.AddWithValue("@Revision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                                }

                                if (_investment.OtherInvestmentStyle == "" || _investment.OtherInvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                                }

                                if (_investment.OtherInvestmentObjective == "" || _investment.OtherInvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                                }

                                if (_investment.OtherRevision == "" || _investment.OtherRevision == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherRevision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);
                                }


                                cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);
                                cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                                cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                                cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                                cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                                cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                                cmd.Parameters.AddWithValue("@TaxExpensePercent", _investment.TaxExpensePercent);
                                if (_investment.BitHTM == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                                }
                                if (_investment.BitRollOverInterest == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                                }
                                cmd.Parameters.AddWithValue("@UpdateSettlementID", _investment.UpdateSettlementID);
                                cmd.Parameters.AddWithValue("@UpdateSettlementTime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                                cmd.ExecuteNonQuery();
                            }
                            return 0;
                        }
                        else
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                _newHisPK = _host.Get_NewHistoryPK(_investment.SettlementPK, "Settlement");
                                cmd.CommandText = _insertCommand + "[TaxExpensePercent],[EntrySettlementID],[EntrySettlementTime],[UpdateSettlementID],[UpdateSettlementTime],[LastUpdate])" +
                                "Select @InvestmentPK,@NewHistoryPK,2,@DealingPK,2,@SettlementPK,1," + _paramaterCommand + "@TaxExpensePercent,EntrySettlementID,EntrySettlementTime,@UpdateSettlementID,@UpdateSettlementTime,@LastUpdate  " +
                                "From Investment where SettlementPK = @SettlementPK and historyPK = @HistoryPK ";

                                cmd.Parameters.AddWithValue("@InvestmentPK", _investment.InvestmentPK);
                                cmd.Parameters.AddWithValue("@DealingPK", _investment.DealingPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@NewHistoryPK", _newHisPK);
                                cmd.Parameters.AddWithValue("@SettlementPK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@ValueDate", _investment.ValueDate);
                                cmd.Parameters.AddWithValue("@PeriodPK", _investment.PeriodPK);
                                cmd.Parameters.AddWithValue("@InstructionDate", _investment.InstructionDate);
                                cmd.Parameters.AddWithValue("@Reference", _investment.Reference);
                                cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                                cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                                cmd.Parameters.AddWithValue("@TrxTypeID", _investment.TrxTypeID);
                                cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartPK);
                                cmd.Parameters.AddWithValue("@MarketPK", _investment.MarketPK);
                                cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                                cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                                cmd.Parameters.AddWithValue("@FundCashRefPK", _investment.FundCashRefPK);
                                cmd.Parameters.AddWithValue("@OrderPrice", _investment.OrderPrice);
                                cmd.Parameters.AddWithValue("@Lot", _investment.Lot);
                                cmd.Parameters.AddWithValue("@LotInShare", _investment.LotInShare);
                                cmd.Parameters.AddWithValue("@RangePrice", _investment.RangePrice);
                                cmd.Parameters.AddWithValue("@Volume", _investment.Volume);
                                cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                                cmd.Parameters.AddWithValue("@InterestPercent", _investment.InterestPercent);
                                cmd.Parameters.AddWithValue("@BreakInterestPercent", _investment.BreakInterestPercent);
                                cmd.Parameters.AddWithValue("@AccruedInterest", _investment.AccruedInterest);
                                cmd.Parameters.AddWithValue("@DoneAccruedInterest", _investment.DoneAccruedInterest);
                                if (_investment.LastCouponDate == "" || _investment.LastCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LastCouponDate", _investment.LastCouponDate);
                                }

                                if (_investment.NextCouponDate == "" || _investment.NextCouponDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@NextCouponDate", _investment.NextCouponDate);
                                }

                                if (_investment.MaturityDate == "" || _investment.MaturityDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@MaturityDate", _investment.MaturityDate);
                                }

                                if (_investment.InvestmentTrType == 0 || _investment.InvestmentTrType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentTrType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentTrType", _investment.InvestmentTrType);
                                }

                                if (_investment.AmountToTransfer == 0 || _investment.AmountToTransfer == null)
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AmountToTransfer", _investment.AmountToTransfer);
                                }

                                if (_investment.SettledDate == "" || _investment.SettledDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@SettlementDate", _investment.SettledDate);
                                }
                                cmd.Parameters.AddWithValue("@InvestmentNotes", _investment.InvestmentNotes);
                                cmd.Parameters.AddWithValue("@DoneLot", _investment.DoneLot);
                                cmd.Parameters.AddWithValue("@DoneVolume", _investment.DoneVolume);
                                cmd.Parameters.AddWithValue("@DonePrice", _investment.DonePrice);
                                cmd.Parameters.AddWithValue("@DoneAmount", _investment.DoneAmount);
                                cmd.Parameters.AddWithValue("@Tenor", _investment.Tenor);
                                cmd.Parameters.AddWithValue("@CommissionPercent", _investment.CommissionPercent);
                                cmd.Parameters.AddWithValue("@LevyPercent", _investment.LevyPercent);
                                cmd.Parameters.AddWithValue("@KPEIPercent", _investment.KPEIPercent);
                                cmd.Parameters.AddWithValue("@VATPercent", _investment.VATPercent);
                                cmd.Parameters.AddWithValue("@WHTPercent", _investment.WHTPercent);
                                cmd.Parameters.AddWithValue("@OTCPercent", _investment.OTCPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellPercent", _investment.IncomeTaxSellPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", _investment.IncomeTaxInterestPercent);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainPercent", _investment.IncomeTaxGainPercent);
                                cmd.Parameters.AddWithValue("@CommissionAmount", _investment.CommissionAmount);
                                cmd.Parameters.AddWithValue("@LevyAmount", _investment.LevyAmount);
                                cmd.Parameters.AddWithValue("@KPEIAmount", _investment.KPEIAmount);
                                cmd.Parameters.AddWithValue("@VATAmount", _investment.VATAmount);
                                cmd.Parameters.AddWithValue("@WHTAmount", _investment.WHTAmount);
                                cmd.Parameters.AddWithValue("@OTCAmount", _investment.OTCAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxSellAmount", _investment.IncomeTaxSellAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxInterestAmount", _investment.IncomeTaxInterestAmount);
                                cmd.Parameters.AddWithValue("@IncomeTaxGainAmount", _investment.IncomeTaxGainAmount);
                                cmd.Parameters.AddWithValue("@TotalAmount", _investment.TotalAmount);
                                cmd.Parameters.AddWithValue("@CurrencyRate", _investment.CurrencyRate);
                                cmd.Parameters.AddWithValue("@SettlementMode", _investment.SettlementMode);
                                cmd.Parameters.AddWithValue("@BoardType", _investment.BoardType);
                                cmd.Parameters.AddWithValue("@AcqPrice", _investment.AcqPrice);
                                cmd.Parameters.AddWithValue("@AcqVolume", _investment.AcqVolume);
                                if (_investment.AcqDate == "" || _investment.AcqDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate", _investment.AcqDate);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice1", _investment.AcqPrice1);
                                cmd.Parameters.AddWithValue("@AcqVolume1", _investment.AcqVolume1);
                                if (_investment.AcqDate1 == "" || _investment.AcqDate1 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate1", _investment.AcqDate1);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice2", _investment.AcqPrice2);
                                cmd.Parameters.AddWithValue("@AcqVolume2", _investment.AcqVolume2);
                                if (_investment.AcqDate2 == "" || _investment.AcqDate2 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate2", _investment.AcqDate2);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice3", _investment.AcqPrice3);
                                cmd.Parameters.AddWithValue("@AcqVolume3", _investment.AcqVolume3);
                                if (_investment.AcqDate3 == "" || _investment.AcqDate3 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate3", _investment.AcqDate3);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice4", _investment.AcqPrice4);
                                cmd.Parameters.AddWithValue("@AcqVolume4", _investment.AcqVolume4);
                                if (_investment.AcqDate4 == "" || _investment.AcqDate4 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate4", _investment.AcqDate4);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice5", _investment.AcqPrice5);
                                cmd.Parameters.AddWithValue("@AcqVolume5", _investment.AcqVolume5);
                                if (_investment.AcqDate5 == "" || _investment.AcqDate5 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate5", _investment.AcqDate5);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice6", _investment.AcqPrice6);
                                cmd.Parameters.AddWithValue("@AcqVolume6", _investment.AcqVolume6);
                                if (_investment.AcqDate6 == "" || _investment.AcqDate6 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate6", _investment.AcqDate6);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice7", _investment.AcqPrice7);
                                cmd.Parameters.AddWithValue("@AcqVolume7", _investment.AcqVolume7);
                                if (_investment.AcqDate7 == "" || _investment.AcqDate7 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate7", _investment.AcqDate7);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice8", _investment.AcqPrice8);
                                cmd.Parameters.AddWithValue("@AcqVolume8", _investment.AcqVolume8);
                                if (_investment.AcqDate8 == "" || _investment.AcqDate8 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate8", _investment.AcqDate8);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice9", _investment.AcqPrice9);
                                cmd.Parameters.AddWithValue("@AcqVolume9", _investment.AcqVolume9);
                                if (_investment.AcqDate9 == "" || _investment.AcqDate9 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate9", _investment.AcqDate9);
                                }
                                cmd.Parameters.AddWithValue("@AcqPrice10", _investment.AcqPrice10);
                                cmd.Parameters.AddWithValue("@AcqVolume10", _investment.AcqVolume10);
                                if (_investment.AcqDate10 == "" || _investment.AcqDate10 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate10", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate10", _investment.AcqDate10);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice11", _investment.AcqPrice11);
                                cmd.Parameters.AddWithValue("@AcqVolume11", _investment.AcqVolume11);
                                if (_investment.AcqDate11 == "" || _investment.AcqDate11 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate11", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate11", _investment.AcqDate11);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice12", _investment.AcqPrice12);
                                cmd.Parameters.AddWithValue("@AcqVolume12", _investment.AcqVolume12);
                                if (_investment.AcqDate12 == "" || _investment.AcqDate12 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate12", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate12", _investment.AcqDate12);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice13", _investment.AcqPrice13);
                                cmd.Parameters.AddWithValue("@AcqVolume13", _investment.AcqVolume13);
                                if (_investment.AcqDate13 == "" || _investment.AcqDate13 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate13", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate13", _investment.AcqDate13);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice14", _investment.AcqPrice14);
                                cmd.Parameters.AddWithValue("@AcqVolume14", _investment.AcqVolume14);
                                if (_investment.AcqDate14 == "" || _investment.AcqDate14 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate14", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate14", _investment.AcqDate14);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice15", _investment.AcqPrice15);
                                cmd.Parameters.AddWithValue("@AcqVolume15", _investment.AcqVolume15);
                                if (_investment.AcqDate15 == "" || _investment.AcqDate15 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate15", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate15", _investment.AcqDate15);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice16", _investment.AcqPrice16);
                                cmd.Parameters.AddWithValue("@AcqVolume16", _investment.AcqVolume16);
                                if (_investment.AcqDate16 == "" || _investment.AcqDate16 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate16", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate16", _investment.AcqDate16);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice17", _investment.AcqPrice17);
                                cmd.Parameters.AddWithValue("@AcqVolume17", _investment.AcqVolume17);
                                if (_investment.AcqDate17 == "" || _investment.AcqDate17 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate17", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate17", _investment.AcqDate17);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice18", _investment.AcqPrice18);
                                cmd.Parameters.AddWithValue("@AcqVolume18", _investment.AcqVolume18);
                                if (_investment.AcqDate18 == "" || _investment.AcqDate18 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate18", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate18", _investment.AcqDate18);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice19", _investment.AcqPrice19);
                                cmd.Parameters.AddWithValue("@AcqVolume19", _investment.AcqVolume19);
                                if (_investment.AcqDate19 == "" || _investment.AcqDate19 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate19", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate19", _investment.AcqDate19);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice20", _investment.AcqPrice20);
                                cmd.Parameters.AddWithValue("@AcqVolume20", _investment.AcqVolume20);
                                if (_investment.AcqDate20 == "" || _investment.AcqDate20 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate20", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate20", _investment.AcqDate20);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice21", _investment.AcqPrice21);
                                cmd.Parameters.AddWithValue("@AcqVolume21", _investment.AcqVolume21);
                                if (_investment.AcqDate21 == "" || _investment.AcqDate21 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate21", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate21", _investment.AcqDate21);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice22", _investment.AcqPrice22);
                                cmd.Parameters.AddWithValue("@AcqVolume22", _investment.AcqVolume22);
                                if (_investment.AcqDate22 == "" || _investment.AcqDate22 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate22", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate22", _investment.AcqDate22);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice23", _investment.AcqPrice23);
                                cmd.Parameters.AddWithValue("@AcqVolume23", _investment.AcqVolume23);
                                if (_investment.AcqDate23 == "" || _investment.AcqDate23 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate23", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate23", _investment.AcqDate23);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice24", _investment.AcqPrice24);
                                cmd.Parameters.AddWithValue("@AcqVolume24", _investment.AcqVolume24);
                                if (_investment.AcqDate24 == "" || _investment.AcqDate24 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate24", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate24", _investment.AcqDate24);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice25", _investment.AcqPrice25);
                                cmd.Parameters.AddWithValue("@AcqVolume25", _investment.AcqVolume25);
                                if (_investment.AcqDate25 == "" || _investment.AcqDate25 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate25", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate25", _investment.AcqDate25);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice26", _investment.AcqPrice26);
                                cmd.Parameters.AddWithValue("@AcqVolume26", _investment.AcqVolume26);
                                if (_investment.AcqDate26 == "" || _investment.AcqDate26 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate26", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate26", _investment.AcqDate26);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice27", _investment.AcqPrice27);
                                cmd.Parameters.AddWithValue("@AcqVolume27", _investment.AcqVolume27);
                                if (_investment.AcqDate27 == "" || _investment.AcqDate27 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate27", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate27", _investment.AcqDate27);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice28", _investment.AcqPrice28);
                                cmd.Parameters.AddWithValue("@AcqVolume28", _investment.AcqVolume28);
                                if (_investment.AcqDate28 == "" || _investment.AcqDate28 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate28", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate28", _investment.AcqDate28);
                                }

                                cmd.Parameters.AddWithValue("@AcqPrice29", _investment.AcqPrice29);
                                cmd.Parameters.AddWithValue("@AcqVolume29", _investment.AcqVolume29);
                                if (_investment.AcqDate29 == "" || _investment.AcqDate29 == null)
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate29", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AcqDate29", _investment.AcqDate29);
                                }
                                if (_investment.Category == "" || _investment.Category == null)
                                {
                                    cmd.Parameters.AddWithValue("@Category", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Category", _investment.Category);
                                }
                                if (_investment.InterestDaysType == 0 || _investment.InterestDaysType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestDaysType", _investment.InterestDaysType);
                                }

                                if (_investment.InterestPaymentType == 0 || _investment.InterestPaymentType == null)
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InterestPaymentType", _investment.InterestPaymentType);
                                }

                                if (_investment.PaymentModeOnMaturity == 0 || _investment.PaymentModeOnMaturity == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentModeOnMaturity", _investment.PaymentModeOnMaturity);
                                }
                                if (_investment.PaymentInterestSpecificDate == "" || _investment.PaymentInterestSpecificDate == null)
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", DBNull.Value);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PaymentInterestSpecificDate", _investment.PaymentInterestSpecificDate);
                                }
                                if (_investment.PriceMode == 0 || _investment.PriceMode == null)
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PriceMode", _investment.PriceMode);
                                }

                                if (_investment.BitIsAmortized == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsAmortized", _investment.BitIsAmortized);
                                }
                                if (_investment.YieldPercent == 0 || _investment.YieldPercent == null)
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@YieldPercent", _investment.YieldPercent);
                                }

                                if (_investment.BitIsRounding == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitIsRounding", _investment.BitIsRounding);
                                }

                                if (_investment.AccruedHoldingAmount == 0 || _investment.AccruedHoldingAmount == null)
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@AccruedHoldingAmount", _investment.AccruedHoldingAmount);
                                }
                                if (_investment.BitBreakable == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitBreakable", _investment.BitBreakable);
                                }
                                if (_investment.CrossFundFromPK == 0 || _investment.CrossFundFromPK == null)
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@CrossFundFromPK", _investment.CrossFundFromPK);
                                }
                                if (_investment.PurposeOfTransaction == 0 || _investment.PurposeOfTransaction == null)
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PurposeOfTransaction", _investment.PurposeOfTransaction);
                                }

                                if (_investment.StatutoryType == 0 || _investment.StatutoryType == null)
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@StatutoryType", _investment.StatutoryType);
                                }

                                if (_investment.BIRate == 0 || _investment.BIRate == null)
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BIRate", _investment.BIRate);
                                }

                                if (_investment.InvestmentStrategy == 0 || _investment.InvestmentStrategy == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStrategy", _investment.InvestmentStrategy);
                                }

                                if (_investment.InvestmentStyle == 0 || _investment.InvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentStyle", _investment.InvestmentStyle);
                                }

                                if (_investment.InvestmentObjective == 0 || _investment.InvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@InvestmentObjective", _investment.InvestmentObjective);
                                }

                                if (_investment.Revision == 0 || _investment.Revision == null)
                                {
                                    cmd.Parameters.AddWithValue("@Revision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Revision", _investment.Revision);
                                }

                                if (_investment.OtherInvestmentStyle == "" || _investment.OtherInvestmentStyle == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentStyle", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentStyle", _investment.OtherInvestmentStyle);
                                }

                                if (_investment.OtherInvestmentObjective == "" || _investment.OtherInvestmentObjective == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentObjective", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherInvestmentObjective", _investment.OtherInvestmentObjective);
                                }

                                if (_investment.OtherRevision == "" || _investment.OtherRevision == null)
                                {
                                    cmd.Parameters.AddWithValue("@OtherRevision", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@OtherRevision", _investment.OtherRevision);
                                }

                                cmd.Parameters.AddWithValue("@BitForeignTrx", _investment.BitForeignTrx);
                                //cmd.Parameters.AddWithValue("@BankBranchPK", _investment.BankBranchPK);
                                cmd.Parameters.AddWithValue("@CPSafekeepingAccNumber", _investment.CPSafekeepingAccNumber);
                                cmd.Parameters.AddWithValue("@PlaceOfSettlement", _investment.PlaceOfSettlement);
                                cmd.Parameters.AddWithValue("@FundSafekeepingAccountNumber", _investment.FundSafekeepingAccountNumber);
                                cmd.Parameters.AddWithValue("@SecurityCodeType", _investment.SecurityCodeType);
                                cmd.Parameters.AddWithValue("@TaxExpensePercent", _investment.TaxExpensePercent);
                                if (_investment.BitHTM == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitHTM", _investment.BitHTM);
                                }
                                if (_investment.BitRollOverInterest == null)
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", false);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@BitRollOverInterest", _investment.BitRollOverInterest);
                                }
                                cmd.Parameters.AddWithValue("@UpdateSettlementID", _investment.UpdateSettlementID);
                                cmd.Parameters.AddWithValue("@UpdateSettlementTime", _dateTimeNow);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                                cmd.ExecuteNonQuery();
                            }

                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = "Update Investment set statusSettlement = 4,Notes=@Notes, " +
                                " lastupdate=@lastupdate where SettlementPK = @PK and historyPK = @HistoryPK and statusSettlement =2 ";
                                cmd.Parameters.AddWithValue("@Notes", _investment.Notes);
                                cmd.Parameters.AddWithValue("@PK", _investment.SettlementPK);
                                cmd.Parameters.AddWithValue("@HistoryPK", _investment.HistoryPK);
                                cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                                cmd.ExecuteNonQuery();
                            }
                            return _newHisPK;
                        }
                    }


                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string PTPEBAFifoBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

BEGIN  
SET NOCOUNT ON         
DROP TABLE IF EXISTS dbo.#Text
DROP TABLE IF EXISTS dbo.#TaxAmount

create table #TaxAmount(      
InvestmentPK int,
TaxAmount [nvarchar](1000)  NULL,
TotalAmount [nvarchar](1000)  NULL          
)                        
        
truncate table #TaxAmount      


create table #Text(      
InvestmentPK int,
[ResultText] [nvarchar](max)  NULL          
)                        
        
truncate table #Text      
insert into #Text(InvestmentPK,ResultText)     
select 0,'Transaction Status|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Type|Security Code Type|Security Code|Security Name|Buy/Sell|CCY|Price|Face Value|Proceeds|Interest Rate|Maturity Date|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Instruction Type|SellerTaxID|Purpose of Transaction|Remarks|CancelReason|Data Type|Trade ID|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'     
        
insert into #Text(InvestmentPK,ResultText) 
Select  A.InvestmentPK,
'NEWM' -- 1.Transaction Status
+ '|' + '1' -- 2.Data Type
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 3.TA Reference No.
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) -- 4.Trade Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),'')))) -- 5.Settlement Date
+ '|' + @CompanyID -- 6.IM Code
+ '|' + isnull(A.BrokerCode,'') -- 7.BR Code
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 8.Fund Code
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull('83','')))) -- 9.Security Type
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull('2','')))) -- 10.Security Code Type
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ISIN,'')))) -- 11.Security Code
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,'')))) -- 12.Security Name
+ '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 13.Buy/Sell
+ '|' + cast(isnull(A.CCY,'') as nvarchar) -- 14.Buy/Sell
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end  -- 15.Price
+ '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end -- 16.Face Value
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end -- 17.Proceeds
+ '|' + case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(30,2)), '')as nvarchar) end -- 18.Interest Rate
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) -- 19.Maturity Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),'')))) -- 20.Last Coupon Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),'')))) -- 21.Last Coupon Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) -- 22.Accrued Days
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end -- 23.Accrued Interest Amount
+ '|' + '' -- 24.Other Fee
+ '|' + case when A.CapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end -- 25.Capital Gain Tax
+ '|' + case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end -- 26.Interest Income Tax
+ '|' + case when A.TrxType = 1 then cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,0)) as nvarchar) else 'Tax Amount' end -- 27.Witholding Tax
+ '|' + case when A.TrxType = 1 then case when A.TotalAmount = 0 then '' else cast(isnull(cast(isnull(sum(A.DonePrice * A.Quantity)/100,0)  + isnull(A.InterestAmount,0) - isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal(30,0)),'') as nvarchar) end else 'Total Amount' end  -- 28.Net Proceeds
+ '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end  -- 29.Instruction Type
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.NPWP,'')))) end 
+ '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end -- 30.Purpose of Transaction
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 31.Remarks
+ '|'
from (      
select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.Name Instrument, A.DonePrice, A.DoneVolume Quantity, D.ISIN, H.ID CCY,
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType, A.InterestPercent, A.MaturityDate,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK = 3 then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,F.BankAccountNo ,A.PurposeOfTransaction,A.StatutoryType,D.CurrencyPK,A.InvestmentPK,A.InvestmentTrType,C.NPWP from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
left join InvestmentTaxDataAcq G on A.InvestmentPK = G.InvestmentPK and G.AcqNo = 1
left join Currency H on D.CurrencyPK = H.CurrencyPK and H.Status = 2
where    
A.ValueDate = @valuedate and A.InstrumentTypePK in (8)
" + _paramSettlementPK + @" 
and A.statusdealing = 2 

)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentPK,A.InvestmentTrType,A.ISIN,A.CCY,A.MaturityDate,A.InterestPercent,A.NPWP
order by A.ValueDate Asc


								
						

declare @counter int
set @counter = 1
while (@counter <= 30)
begin
	update A set A.ResultText = A.ResultText
	+ case when B.TrxType = 1 then '' else 
	+ '|' + case when B.TrxType = 1 then '' else '2' end  
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(B.Reference,'')))) end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.DoneAmount = 0 then '' else cast(isnull(cast(B.DoneAmount as decimal(30,0)), '')as nvarchar) end end 
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.AcqDate, 112),'')))) end    
	+ '|' + case when B.TrxType = 1 then '' else case when B.AcqPrice = 0 then '' else cast(isnull(cast(B.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
	+ '|' + case when B.TrxType = 1 then '' else case when B.AcqAmount = 0 then '' else cast(isnull(B.AcqAmount, '') as nvarchar) end end     
	+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxGainAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxGainAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.DaysOfHoldingInterest , 112),'')))) end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxInterestAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxInterestAmount,0) as decimal(30,0)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TotalTaxIncomeAmount = 0 then cast(0 as nvarchar) when (B.IncomeTaxGainAmount + B.IncomeTaxInterestAmount) < 0 then cast(0 as nvarchar) else cast(isnull(cast(B.TotalTaxIncomeAmount as decimal(30,0)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TaxExpensePercent = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TaxAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(ceiling(B.TaxAmount) as decimal(30,0)),'')as nvarchar) end  end 
	End  
	from #Text A
	left join InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
	where A.InvestmentPK != 0 and B.AcqNo = @counter

	set @counter = @counter + 1
end	

insert into #TaxAmount
select A.InvestmentPK,cast(sum(CEILING(B.TaxAmount)) as numeric(30,2)), cast(round(A.DoneAmount,0) + round(A.DoneAccruedInterest,0) - sum(CEILING(B.TaxAmount))  as numeric(30,2)) from Investment A
left join InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 and A.ValueDate = @valuedate and A.InstrumentTypePK in (8)
" + _paramSettlementPK + @" 
and A.statusdealing = 2 
group by A.InvestmentPK,A.DoneAmount,A.DoneAccruedInterest

update A set ResultText = REPLACE(ResultText,'Tax Amount',isnull(B.TaxAmount,0)) from #Text A 
left join #TaxAmount B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 

update A set ResultText = REPLACE(ResultText,'Total Amount',isnull(B.TotalAmount,0)) from #Text A 
left join #TaxAmount B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0

select ResultText from #text 
END
";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "\\" + "PTP_EBA.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_EBA.txt";
                                }
                            }
                            return null;
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        //end bagian fifo

        public string PTPEBA_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {



                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

create table #Text(      
[ResultText] [nvarchar](1000)  NULL  ,
InvestmentPK int,
ValueDate date        
)                        
        
truncate table #Text

insert into #Text     
select 'Transaction Status|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Type|Security Code Type|Security Code|Security Name|Buy/Sell|CCY|Price|Face Value|Proceeds|Interest Rate|Maturity Date|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Instruction Type|Purpose of Transaction|Remarks|Data Type|Trade ID|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'   ,0,null   
        

insert into #Text
Select  
'NEWM' -- 1.Transaction Status
+ '|' + '1' -- 2.Data Type
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 3.TA Reference No.
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) -- 4.Trade Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),'')))) -- 5.Settlement Date
+ '|' + @CompanyID -- 6.IM Code
+ '|' + isnull(A.BrokerCode,'') -- 7.BR Code
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 8.Fund Code
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull('83','')))) -- 9.Security Type
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull('2','')))) -- 10.Security Code Type
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ISIN,'')))) -- 11.Security Code
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,'')))) -- 12.Security Name
+ '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 13.Buy/Sell
+ '|' + cast(isnull(A.CCY,'') as nvarchar) -- 14.Buy/Sell
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end  -- 15.Price
+ '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end -- 16.Face Value
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end -- 17.Proceeds
+ '|' + case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(30,2)), '')as nvarchar) end -- 18.Interest Rate
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) -- 19.Maturity Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),'')))) -- 20.Last Coupon Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),'')))) -- 21.Last Coupon Date
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) -- 22.Accrued Days
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end -- 23.Accrued Interest Amount
+ '|' + '' -- 24.Other Fee
+ '|' + case when A.CapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end -- 25.Capital Gain Tax
+ '|' + case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end -- 26.Interest Income Tax
+ '|' +  cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,2)) as nvarchar) -- 27.Witholding Tax
+ '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(isnull(A.TotalAmount,0) as decimal(30,2)),'')as nvarchar) end  -- 28.Net Proceeds
+ '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end  -- 29.Instruction Type
+ '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end -- 30.Purpose of Transaction
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 31.Remarks
+ case when A.TrxType = 1 then '' else 
+ '|' + case when A.TrxType = 1 then '' else '2' end  
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) end 
+ '|' + case when A.TrxType = 1 then '' else case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end end  
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), AcqDate, 112),'')))) end    
+ '|' + case when A.TrxType = 1 then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(A.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
+ '|' + case when A.TrxType = 1 then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(sum(A.AcqPrice * A.AcqVolume)/100 as decimal(30,2)), '')as nvarchar) end end     
+ '|' + case when A.TrxType = 1 then '' else case when A.CapitalGainAmount = 0 then '' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,@valuedate) , 112),'')))) end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(sum(A.CapitalGainAmount + A.TaxInterestAmount) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxExpensePercent = 0 then '' else cast(isnull(cast(isnull(A.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(sum(A.CapitalGainAmount + A.TaxInterestAmount) as decimal(30,2)),'')as nvarchar) end  end 
End
,A.InvestmentPK, A.ValueDate
from (      
select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.Name Instrument, A.DonePrice, A.DoneVolume Quantity, D.ISIN, G.ID CCY,
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType, A.InterestPercent, A.MaturityDate,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK = 3 then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,F.BankAccountNo ,A.PurposeOfTransaction,A.StatutoryType,D.CurrencyPK,A.InvestmentPK,A.InvestmentTrType from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
left join Currency G on D.CurrencyPK = G.CurrencyPK and G.Status = 2
where    
A.ValueDate = @valuedate and A.InstrumentTypePK in (8) " + _paramSettlementPK + @" 
and A.statusdealing = 2 

)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,A.InterestPercent,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentPK,A.InvestmentTrType,A.ISIN,A.CCY,A.MaturityDate
order by A.ValueDate Asc

select ResultText From #Text
";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "\\" + "PTP_EBA.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_EBA.txt";
                                }


                            }
                            return null;
                        }


                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public InvestmentCrossFund Get_InvestmentPKFromCrossFund(int _investmentPK, int _historyPK)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                            
                        declare @FundPK int,@CrossFundFromPK int,@ValueDate datetime, @InstrumentPK int, @InstrumentTypePK int, @OrderPrice numeric(19,8),
                        @Volume numeric(19,8),@Amount numeric(19,8), @SettledDate datetime


                        select top 1 @FundPK = FundPK, @CrossFundFromPK = CrossFundFromPK, @ValueDate = ValueDate, @InstrumentPK = InstrumentPK, 
                        @InstrumentTypePK = InstrumentTypePK, @OrderPrice = OrderPrice, @Volume = Volume, @Amount = Amount, @SettledDate = SettlementDate
                        from Investment where InvestmentPK = @InvestmentPK and HistoryPK = @HistoryPK

                        select InvestmentPK, HistoryPK, DealingPK, Reference, StatusInvestment, FundPK, CrossFundFromPK  from Investment
                        where FundPK = @CrossFundFromPK and CrossFundFromPK = @FundPK and ValueDate = @ValueDate and InstrumentPK = @InstrumentPK 
                        and InstrumentTypePK = @InstrumentTypePK and OrderPrice = @OrderPrice and Volume = @Volume and Amount = @Amount and SettlementDate = @SettledDate


                           ";

                        cmd.Parameters.AddWithValue("@InvestmentPK", _investmentPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _historyPK);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new InvestmentCrossFund()
                                {
                                    InvestmentPK = dr["InvestmentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentPK"]),
                                    HistoryPK = dr["HistoryPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["HistoryPK"]),
                                    DealingPK = dr["DealingPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["DealingPK"]),
                                    Reference = dr["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Reference"]),
                                    StatusInvestment = dr["StatusInvestment"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatusInvestment"]),
                                    FundPK = dr["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["FundPK"]),
                                    CrossFundFromPK = dr["CrossFundFromPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["CrossFundFromPK"]),
                                };
                            }
                            else
                            {
                                return new InvestmentCrossFund()
                                {
                                    InvestmentPK = 0,
                                    HistoryPK = 0,
                                    DealingPK = 0,
                                    Reference = "",
                                    StatusInvestment = 0,
                                    FundPK = 0,
                                    CrossFundFromPK = 0,

                                };
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public DateTime Get_AcqDateBeforeForRollover(int _investmentPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        select J.AcqDate from Investment A left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                        left join Investment J on case when A.TrxType = 3 then I.InstrumentPK  else A.InstrumentPK end = J.InstrumentPK
                        and case when A.TrxType = 3 then I.FundPK  else A.FundPK end = J.FundPK
                        and case when A.TrxType = 3 then I.AcqDate  else A.AcqDate end = J.ValueDate
                        where A.InvestmentPK = @InvestmentPK

                        ";
                        cmd.Parameters.AddWithValue("@InvestmentPK", _investmentPK);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDateTime(dr["AcqDate"]);
                            }

                            return Convert.ToDateTime(dr["AcqDate"]);


                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }



    }
}

