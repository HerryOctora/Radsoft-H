using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Text;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;
using RFSRepository;
using OfficeOpenXml.Drawing.Chart;
using System.Xml;
using System.Globalization;

namespace RFSRepositoryTwo
{
    public class CustomClient20Reps
    {
        Host _host = new Host();


        public class ReportKYCRiskProfile
        {
            public string NamaNasabah { get; set; }
            public string NegaraKelahiranNasabah { get; set; }
            public string NegaraPadaID { get; set; }
            public string PekerjaanNasabah { get; set; }
            public string PekerjaanterkaitAPUPPT { get; set; }
            public string LokasiPekerja { get; set; }
            public string IndustriBisnis { get; set; }
            public string Jabatan { get; set; }
            public string FaktorKerentananNegara1 { get; set; }
            public string FaktorKerentananNegara2 { get; set; }
            public string FaktorKerentananNegara3 { get; set; }
            public string FaktorKerentananNegara4 { get; set; }

            public int TotalNilaiKerentananYuridiksi { get; set; }
            public string LevelKerentananYuridiksi { get; set; }

            public string FaktorKerentananNamaNasabah1 { get; set; }
            public string FaktorKerentananNamaNasabah2 { get; set; }
            public string FaktorKerentananNamaNasabah3 { get; set; }
            public string FaktorKerentananNamaNasabah4 { get; set; }
            public string FaktorKerentananNamaNasabah5 { get; set; }

            public int TotalNilaiKerentananNamaNasabah { get; set; }
            public string LevelKerentananNamaNasabah { get; set; }



            public string FaktorKerentananBisnisNasabah1 { get; set; }
            public string FaktorKerentananBisnisNasabah2 { get; set; }
            public string FaktorKerentananBisnisNasabah3 { get; set; }
            public string FaktorKerentananBisnisNasabah4 { get; set; }
            public int TotalNilaiKerentananNasabah { get; set; }
            public string LevelKerentananNasabah { get; set; }
            public string TotalNilaiKeseluruhan { get; set; }
            public string TotalLevelKerentanan { get; set; }
            
        }

        public class ReportBloomberg
        {
            public int FundPK { get; set; }
            public int InstrumentTypePK { get; set; }
            public int CountFundPosition { get; set; }
            public string BloombergCodeFund { get; set; }
            public string BloombergIsin { get; set; }
            public string BloombergCodeInstrument { get; set; }
            public string InstrumentName { get; set; }
            public decimal Balance { get; set; }
            public decimal ClosePrice { get; set; }
            public DateTime Date { get; set; }
            public decimal MarketValue { get; set; }
            public decimal AvgPrice { get; set; }
        }

        public class FifoBondPosition
        {
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string Instrument { get; set; }
            public decimal Volume { get; set; }
            public decimal AcqPrice { get; set; }
            public DateTime AcqDate { get; set; }
        }

        public class PVRRpt
        {
            public int Row { get; set; }
            public decimal Balance { get; set; }
            public string FundName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string Name { get; set; }
            public string HariBursa { get; set; }
            public string Issuer { get; set; }
            public string EffectiveDate { get; set; }
            public int Type { get; set; }
            public decimal UnitQuantity { get; set; }
            public decimal AverageCost { get; set; }
            public decimal BookValue { get; set; }
            public decimal MarketPrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal UnrealizedProfitLoss { get; set; }
            public decimal PercentProfilLoss { get; set; }
            public decimal PercentJCI { get; set; }
            public decimal Lot { get; set; }
            public string MarketCap { get; set; }
            public string Sector { get; set; }
            public string MaturityDate { get; set; }
            public string BondType { get; set; }
            public string TimeDeposit { get; set; }
            public string BICode { get; set; }
            public string Branch { get; set; }
            public string TradeDate { get; set; }
            public decimal Nominal { get; set; }
            public decimal Rate { get; set; }
            public decimal CouponRate { get; set; }
            public decimal AccTD { get; set; }
            public decimal Beta { get; set; }
            public string BondRating { get; set; }


        }

        public class InvestorRiskProfile
        {
            public string NamaInvestor { get; set; }
            public string TempatTanggalLahir { get; set; }
            public string Alamat { get; set; }
            public string TanggalRencanaInvestasi { get; set; }
            public string ScoreProfilRisikoInvestor { get; set; }
            public string ProfilRisikoInvestor { get; set; }
            public string ReksadanaPilihanInvestor { get; set; }
            public string ProfilRisikoReksadanaPilihan { get; set; }
            public string Rekomendasi { get; set; }

            public string Score { get; set; }
            public string FundRiskProfile { get; set; }
            public string FundName { get; set; }


        }

        public class ClientSwitchingBatchForm
        {

            public string NamaFund { get; set; }
            public DateTime Date { get; set; }
            public string ToNamaBank { get; set; }
            public string ToAlamat { get; set; }
            public string ToAttention { get; set; }
            public string FaxNumber { get; set; }
            public DateTime TradeDate { get; set; }
            public DateTime SettlementDate { get; set; }
            public string RefNo { get; set; }
            public string CustomerID { get; set; }
            public string CustomerSIDNumber { get; set; }
            public string Name { get; set; }
            public string SwitchInProduct { get; set; }
            public string SwitchOutProduct { get; set; }
            public decimal SwitchedNominalAmount { get; set; }
            public decimal SwitchedNoOfUnits { get; set; }
            public decimal NominalAmount { get; set; }
            public decimal FeePercent { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal NAV { get; set; }
            public decimal NetAmount { get; set; }
            public string Type { get; set; }

        }

        public class CSRFeeReport
        {
            public int FeeType { get; set; }
            public int AgentPK { get; set; }
            public int FundPK { get; set; }
            public string FundName { get; set; }
            public string CSRName { get; set; }
            public decimal ManagementFeeRate { get; set; }
            public decimal CSRFee { get; set; }
            public string ManagementFeeType { get; set; }
            public string SharingFeeType { get; set; }
            public string Currency { get; set; }
            public string Date { get; set; }
            public decimal NAV { get; set; }
            public decimal unit { get; set; }
            public decimal AUM { get; set; }
            public decimal MFee { get; set; }
            public decimal GrossShare { get; set; }
            public decimal Pph23 { get; set; }

        }

        public class BlackListReport
        {
            public string NoDoc { get; set; }
            public string SID { get; set; }
            public string Name { get; set; }
        }

        public class DailyDealBoard
        {
            public string FundPK { get; set; }
            public string BankName { get; set; }
            public string Attn { get; set; }
            public string Fax { get; set; }
            public string Phone { get; set; }
            public DateTime Date { get; set; }
            public string FundName { get; set; }
            public int Baris { get; set; }
            public int TotalSent { get; set; }
            public string Reference { get; set; }
        }

        public class TradingPortfolioBloomberg
        {
            public string SecurityCode { get; set; }
            public string SecurityDescription { get; set; }
            public string TimeDeposit { get; set; }
            public string BICode { get; set; }
            public string Branch { get; set; }
            public string ISIN { get; set; }
            public string ISINCode { get; set; }
            public string InstrumentTypeName { get; set; }
            public decimal QtyOfUnit { get; set; }
            public decimal Lot { get; set; }
            public decimal AverageCost { get; set; }
            public decimal BookValue { get; set; }
            public decimal MarketPrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal UnrealizedProfitLoss { get; set; }
            public decimal PercentFR { get; set; }
            public decimal Nominal { get; set; }
            public decimal RateGross { get; set; }
            public decimal AccIntTD { get; set; }
            public string TradeDate { get; set; }
            public string MaturityDate { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public int InstrumentTypePK { get; set; }
            public string Date { get; set; }
            public string Fund { get; set; }
            public decimal TaxExpensePercent { get; set; }
            public decimal AccInterestBond { get; set; }
            public decimal TaxAccInterestBond { get; set; }
            public decimal AccrualInterestDeposito { get; set; }
            public decimal PercentOfAUM { get; set; }
            public decimal PercentPorto { get; set; }
            public decimal DailyAccInterestBond { get; set; }
            public int DaysType { get; set; }
            public int HoldingDays { get; set; }
            public string LastCouponDate { get; set; }
            public string NextCouponDate { get; set; }
            public decimal NetInterest { get; set; }
            public decimal HoldingAccrual { get; set; }
            public decimal AvgPrice { get; set; }
            public int DaysCoupon { get; set; }
            public decimal PercentOfNav { get; set; }

            public DateTime MarketPlaceDate { get; set; }
            public DateTime PXLastDate1 { get; set; }
            public DateTime PXLastDate2 { get; set; }
        }
        public int Investment_ApproveOMSBondBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInvestmentPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramInvestmentPK = " And InvestmentPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramInvestmentPK = " And InvestmentPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        declare @investmentPK int
                        declare @historyPK int
                        declare @DealingPK int
                        declare @Notes nvarchar(500)
                        declare @OrderPrice numeric(22,8)
                        declare @Volume numeric(22,2)
                        declare @Amount numeric(22,0)
                        declare @AccruedInterest numeric(22,0)
                        Declare @TaxPercentageBond numeric(8,4)
		                Declare @TaxPercentageCapitalGain numeric(8,4)                        
                        Declare @FundPK int
                        declare @IncomeTaxGainAmount numeric(30,8)
                        declare @AccruedInterestDays int
                        declare @AccruedInterestAmount numeric(30,8)
                        declare @DaysOfHoldingInterest int
                        declare @DaysOfLastCoupon int
                        declare @IncomeTaxInterestAmount numeric(30,8)
                        declare @TotalTaxIncomeAmount numeric(30,8)
                        declare @TaxAmount numeric(30,8)
                        declare @LastCouponDate date
                        declare @SettlementDate date
                        Declare @TaxInterestPercent numeric(22,4)

                        Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = '' and Status = 2   
                            Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate)   
                        Select @Time,'InvestmentInstruction_RejectOMSBondBySelected','Investment',InvestmentPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and SelectedInvestment  = 1  and  InstrumentTypePK = @InstrumentTypePK and TrxType = @TrxType

                         DECLARE A CURSOR FOR 
	                            Select InvestmentPK From investment 
	                            where statusInvestment = 1 and ValueDate between @datefrom and @datefrom " + _paramInvestmentPK + @" and  InstrumentTypePK in (2,3,9,13,15) and TrxType = @TrxType 

                        Open A
                        Fetch Next From A
                        Into @InvestmentPK

                        While @@FETCH_STATUS = 0
                        BEGIN              
							declare @instrumentpk int
							declare @Price numeric(22,4)
							declare @DoneVolume numeric(22,4)
							declare @Counter int
							declare @maxFifoDate date

							if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
							create table #tableFifoSelect
							(
								FifoBondPositionPK int,
								InvestmentPK int,
								AcqDate date,
								AcqVolume numeric(22,4),
								AcqPrice numeric(22,4)
							)
							CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


							if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
							create table #tableInvest
							(
								FifoBondPositionPK int,
								InvesmentBuyPK int,
								InvesmentSellPK int,
								AcqDate date,
								AcqVolume numeric(22,4),
								AcqPrice numeric(22,4),
								RemainingVolume numeric(22,4)
							)
							CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

							select @instrumentpk = InstrumentPK, @FundPK = FundPK, @volume = DoneVolume, @DoneVolume = DoneVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 1 and TrxType = 2

                            select @maxFifoDate = isnull(max(CutOffDate),'2020-06-19') from FiFoBondPosition where status in (1,2) and FundPK = @fundpk and InstrumentPK = @instrumentpk

							if exists (select * from FiFoBondPosition where status in (1,2) and FundPK = @fundpk and InstrumentPK = @instrumentpk )
							begin

								insert into #tableFifoSelect(FifoBondPositionPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice)
								select A.FifoBondPositionPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice from (
								select FifoBondPositionPK,0 InvestmentPK,AcqDate,RemainingVolume DoneVolume,AcqPrice from FifoBondPosition 
										where FundPK = @fundpk and InstrumentPk = @instrumentpk and (RemainingVolume is null or RemainingVolume != 0) and status in (1,2)
										union all
										select 0,InvestmentBuyPK,AcqDate,RemainingVolume,AcqPrice from FifoBondPositionTemp
										where FundPK = @fundpk and InstrumentPK = @instrumentpk and (RemainingVolume is null or RemainingVolume != 0)
										union all
										select 0,InvestmentPK,SettlementDate,DoneVolume,DonePrice from Investment where TrxType = 1 and StatusSettlement = 2 and ValueDate > @maxFifoDate and InvestmentPK not in 
										(select InvestmentBuyPK from FifoBondPositionTemp where FundPK = @fundpk and InstrumentPK = @instrumentpk) and FundPk = @fundpk and InstrumentPK = @instrumentpk
								)A 
								order by A.AcqDate,A.InvestmentPK
							end
							else
							begin
								insert into #tableFifoSelect(FifoBondPositionPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice)
								select A.A,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice from (
								select 0 A,InvestmentBuyPK InvestmentPK,AcqDate,RemainingVolume DoneVolume,AcqPrice from FifoBondPositionTemp
										where FundPK = @fundpk and InstrumentPK = @instrumentpk and (RemainingVolume is null or RemainingVolume != 0)
										union all
										select 0 A,InvestmentPK,SettlementDate,DoneVolume,DonePrice from Investment where TrxType = 1 and StatusSettlement = 2 and InvestmentPK not in 
										(select InvestmentBuyPK from FifoBondPositionTemp where FundPK = @fundpk and InstrumentPK = @instrumentpk) and FundPk = @fundpk and InstrumentPK = @instrumentpk and ValueDate > @maxFifoDate
								)A 
								order by A.AcqDate,A.InvestmentPK
							end
								

							--select * from #tableFifoSelect
							--order by AcqDate

							set @Counter = 0

							declare @FifobondPositionPK int
							declare @AcqDate date
							declare @AcqVolume numeric(22,4)
							declare @AcqPrice numeric(22,4)
							declare @Query nvarchar(500)
							declare @InvestmentBuyPK int 

							DECLARE AB CURSOR FOR   
								select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate from #tableFifoSelect order by AcqDate
							OPEN AB  
							FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentBuyPK,@AcqVolume,@AcqPrice,@AcqDate
  
							WHILE @@FETCH_STATUS = 0  
							BEGIN  
								if @DoneVolume  - @AcqVolume > 0
								begin
									insert into #tableInvest(FifoBondPositionPK,InvesmentBuyPK,InvesmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
									select @FifobondPositionPK,@InvestmentBuyPK,@investmentpk,@AcqDate,@AcqVolume,@AcqPrice,0
		
									if @Counter = 0
										set @Query = 'update Investment set AcqDate = ''' + Cast(@AcqDate as nvarchar) +''', AcqPrice = ' + cast(@AcqPrice as nvarchar) + ', AcqVolume = ' + cast(@AcqVolume as nvarchar) + ' where StatusInvestment = 1 and InvestmentPK = ' + cast(@InvestmentPK as nvarchar)
									else
										set @Query = 'update Investment set AcqDate' + Cast(@Counter as nvarchar) + ' = ''' + Cast(@AcqDate as nvarchar) +''', AcqPrice' + Cast(@Counter as nvarchar) + ' = ' + cast(@AcqPrice as nvarchar) + ', AcqVolume' + Cast(@Counter as nvarchar) + ' = ' + cast(@AcqVolume as nvarchar) + ' where StatusInvestment = 1 and InvestmentPK = ' + cast(@InvestmentPK as nvarchar)
									exec(@Query)

									if @FifobondPositionPK != 0
									update FiFoBondPosition set RemainingVolume = 0, investmentpk = @investmentpk where FiFoBondPositionPK = @FifobondPositionPK and status in (1,2)

									if @InvestmentBuyPK !=0
									begin
										if exists(select * from FiFoBondPositionTemp where InvestmentBuyPK = @InvestmentBuyPK and RemainingVolume != 0)
											update FifoBondPositionTemp set RemainingVolume = 0, InvestmentSellPK = @investmentpk where InvestmentBuyPK = @InvestmentBuyPK 
										else
											insert into FifoBondPositionTemp(InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume,FundPK,InstrumentPK)
											select @InvestmentBuyPK,@investmentpk,@AcqDate,@AcqVolume,@AcqPrice,0,@FundPK,@instrumentpk
									end

									set @DoneVolume = @DoneVolume - @AcqVolume
									set @Counter = @Counter + 1
								end
								else
								begin
									insert into #tableInvest(FifoBondPositionPK,InvesmentBuyPK,InvesmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
									select @FifobondPositionPK,@InvestmentBuyPK,@investmentpk,@AcqDate,@AcqVolume,@AcqPrice,@AcqVolume - @DoneVolume
		
									if @Counter = 0
										set @Query = 'update Investment set AcqDate = ''' + Cast(@AcqDate as nvarchar) +''', AcqPrice = ' + cast(@AcqPrice as nvarchar) + ', AcqVolume = ' + cast((@DoneVolume) as nvarchar) + ' where StatusInvestment = 1 and InvestmentPK = ' + cast(@InvestmentPK as nvarchar)
									else
										set @Query = 'update Investment set AcqDate' + Cast(@Counter as nvarchar) + ' = ''' + Cast(@AcqDate as nvarchar) +''', AcqPrice' + Cast(@Counter as nvarchar) + ' = ' + cast(@AcqPrice as nvarchar) + ', AcqVolume' + Cast(@Counter as nvarchar) + ' = ' + cast((@DoneVolume) as nvarchar) + ' where StatusInvestment = 1 and InvestmentPK = ' + cast(@InvestmentPK as nvarchar)
									exec(@Query)

									if @FifobondPositionPK != 0
									update FiFoBondPosition set RemainingVolume = @AcqVolume - @DoneVolume, investmentpk = @investmentpk where FiFoBondPositionPK = @FifobondPositionPK and status in (1,2)

									if @InvestmentBuyPK !=0
									begin
										if exists(select * from FiFoBondPositionTemp where InvestmentBuyPK = @InvestmentBuyPK and RemainingVolume != 0)
											update FifoBondPositionTemp set RemainingVolume = @AcqVolume - @DoneVolume, InvestmentSellPK = @investmentpk where InvestmentBuyPK = @InvestmentBuyPK
										else
											insert into FifoBondPositionTemp(InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume,FundPK,InstrumentPK)
											select @InvestmentBuyPK,@investmentpk,@AcqDate,@AcqVolume,@AcqPrice,@AcqVolume - @DoneVolume,@FundPK,@instrumentpk
									end


									break
								end
		
							FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentBuyPK,@AcqVolume,@AcqPrice,@AcqDate
							END  
  
							CLOSE AB  
							DEALLOCATE AB 

                        Fetch next From A Into @InvestmentPK
                        END
                        Close A
                        Deallocate A

                        
                        DECLARE A CURSOR FOR 
	                            Select InvestmentPK,DealingPK,HistoryPK,InvestmentNotes,OrderPrice,Volume,Amount,AccruedInterest,FundPK,LastCouponDate,SettlementDate,5 From investment 
	                            where statusInvestment = 1 and ValueDate between @datefrom and @datefrom " + _paramInvestmentPK + @" and  InstrumentTypePK in (2,3,9,13,15) and TrxType = @TrxType 

                        Open A
                        Fetch Next From A
                        Into @investmentPK,@DealingPK,@historyPK,@Notes,@OrderPrice,@Volume,@Amount,@AccruedInterest,@FundPK,@LastCouponDate,@SettlementDate,@TaxInterestPercent

                        While @@FETCH_STATUS = 0
                        BEGIN
                                if @TrxType = 2
                                    set @AccruedInterest = 0
                                -- pecah acq 1
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 1)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice)/100 * AcqVolume, @DaysOfHoldingInterest = case when AcqDate >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end, 
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
                                        
                                        if @TrxType = 2
                                        begin
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
                                        end
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount
				                            

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,1,@TrxType,reference,AcqVolume,AcqDate,AcqPrice,AcqVolume * AcqPrice/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice)/100 * AcqVolume, @DaysOfHoldingInterest = case when AcqDate >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume,A.AcqDate = B.AcqDate,A.AcqPrice = B.AcqPrice,A.AcqAmount = B.AcqVolume * B.AcqPrice/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate is not null and B.AcqVolume != 0 and B.AcqPrice != 0)
		                            end
	                            end

	                            -- pecah acq 2
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 2)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice1)/100 * AcqVolume1, @DaysOfHoldingInterest = case when AcqDate1 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate1,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate1,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume1/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume1 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,2,@TrxType,reference,AcqVolume1,AcqDate1,AcqPrice1,AcqVolume1 * AcqPrice1/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice1)/100 * AcqVolume1,@DaysOfHoldingInterest = case when AcqDate1 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate1,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate1,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume1/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume1 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end , 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume1,A.AcqDate = B.AcqDate1,A.AcqPrice = B.AcqPrice1,A.AcqAmount = B.AcqVolume1 * B.AcqPrice1/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate1 is not null and B.AcqVolume1 != 0 and B.AcqPrice1 != 0)
		                            end
	                            end

	                            -- acq 3
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice2)/100 * AcqVolume2,@DaysOfHoldingInterest = case when AcqDate2 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate2,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate2,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,3,@TrxType,reference,AcqVolume2,AcqDate2,AcqPrice2,AcqVolume2 * AcqPrice2/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice2)/100 * AcqVolume2,@DaysOfHoldingInterest = case when AcqDate2 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate2,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate2,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume2,A.AcqDate = B.AcqDate2,A.AcqPrice = B.AcqPrice2,A.AcqAmount = B.AcqVolume2 * B.AcqPrice2/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate2 is not null and B.AcqVolume2 != 0 and B.AcqPrice2 != 0)
		                            end
	                            end
	
	                            -- acq 4
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 4)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice3)/100 * AcqVolume3, @DaysOfHoldingInterest = case when AcqDate3 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate3,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate3,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume3/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume3 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,4,@TrxType,reference,AcqVolume3,AcqDate3,AcqPrice3,AcqVolume3 * AcqPrice3/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice3)/100 * AcqVolume3, @DaysOfHoldingInterest = case when AcqDate3 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate3,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate3,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume3/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume3 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume3,A.AcqDate = B.AcqDate3,A.AcqPrice = B.AcqPrice3,A.AcqAmount = B.AcqVolume3 * B.AcqPrice3/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate3 is not null and B.AcqVolume3 != 0 and B.AcqPrice3 != 0)
		                            end
	                            end
	
	                            --acq 5
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 5)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice4)/100 * AcqVolume4, @DaysOfHoldingInterest = case when AcqDate4 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate4,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate4,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume4/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume4 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,5,@TrxType,reference,AcqVolume4,AcqDate4,AcqPrice4,AcqVolume4 * AcqPrice4/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice4)/100 * AcqVolume4, @DaysOfHoldingInterest = case when AcqDate4 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate4,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate4,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume4/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume4 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                           
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume4,A.AcqDate = B.AcqDate4,A.AcqPrice = B.AcqPrice4,A.AcqAmount = B.AcqVolume4 * B.AcqPrice4/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate4 is not null and B.AcqVolume4 != 0 and B.AcqPrice4 != 0)
		                            end
	                            end
	
	                            --acq 6
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 6)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice5)/100 * AcqVolume5, @DaysOfHoldingInterest = case when AcqDate5 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate5,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate5,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume5/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume5 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,6,@TrxType,reference,AcqVolume5,AcqDate5,AcqPrice5,AcqVolume5 * AcqPrice5/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice5)/100 * AcqVolume5, @DaysOfHoldingInterest = case when AcqDate5 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate5,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate5,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume5/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume5 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                           
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume5,A.AcqDate = B.AcqDate5,A.AcqPrice = B.AcqPrice5,A.AcqAmount = B.AcqVolume5 * B.AcqPrice5/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate5 is not null and B.AcqVolume5 != 0 and B.AcqPrice5 != 0)
		                            end
	                            end
	
	                            --acq 7
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 7)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice6)/100 * AcqVolume6, @DaysOfHoldingInterest = case when AcqDate6 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate6,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate6,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume6/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume6 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,7,@TrxType,reference,AcqVolume6,AcqDate6,AcqPrice6,AcqVolume6 * AcqPrice6/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice6)/100 * AcqVolume6, @DaysOfHoldingInterest = case when AcqDate6 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate6,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate6,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume6/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume6 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end , 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume6,A.AcqDate = B.AcqDate6,A.AcqPrice = B.AcqPrice6,A.AcqAmount = B.AcqVolume6 * B.AcqPrice6/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate6 is not null and B.AcqVolume6 != 0 and B.AcqPrice6 != 0)
		                            end
	                            end
	
	                            -- acq 8
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 8)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice7)/100 * AcqVolume7, @DaysOfHoldingInterest = case when AcqDate7 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate7,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate7,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume7/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume7 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,8,@TrxType,reference,AcqVolume7,AcqDate7,AcqPrice7,AcqVolume7 * AcqPrice7/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice7)/100 * AcqVolume7, @DaysOfHoldingInterest = case when AcqDate7 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate7,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate7,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume7/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume7 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume7,A.AcqDate = B.AcqDate7,A.AcqPrice = B.AcqPrice7,A.AcqAmount = B.AcqVolume7 * B.AcqPrice7/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate7 is not null and B.AcqVolume7 != 0 and B.AcqPrice7 != 0)
		                            end
	                            end

	                            -- acq 9
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 9)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice8)/100 * AcqVolume8, @DaysOfHoldingInterest = case when AcqDate8 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate8,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate8,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume8/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume8 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,9,@TrxType,reference,AcqVolume8,AcqDate8,AcqPrice8,AcqVolume8 * AcqPrice8/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice8)/100 * AcqVolume8, @DaysOfHoldingInterest = case when AcqDate8 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate8,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate8,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume8/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume8 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume8,A.AcqDate = B.AcqDate8,A.AcqPrice = B.AcqPrice8,A.AcqAmount = B.AcqVolume8 * B.AcqPrice8/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate8 is not null and B.AcqVolume8 != 0 and B.AcqPrice8 != 0)
		                            end
	                            end

	                            -- acq 10
	                            if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0))
	                            begin
		                            if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 10)
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice9)/100 * AcqVolume9, @DaysOfHoldingInterest = case when AcqDate9 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate9,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate9,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume9/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume9 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0


			                            insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			                            select @investmentPK,10,@TrxType,reference,AcqVolume9,AcqDate9,AcqPrice9,AcqVolume9 * AcqPrice9/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
		                            end
		                            else
		                            begin
			                            select @IncomeTaxGainAmount = (DonePrice - AcqPrice9)/100 * AcqVolume9, @DaysOfHoldingInterest = case when AcqDate9 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate9,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate9,SettlementDate) end else
										case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
                                        @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
										 @DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
                                        from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
                                        select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume9/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume9 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
                                        @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)

                                        if @TrxType = 2
                                            set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			                            
			                            set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			                            set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
                                        if @TaxAmount < 0
                                            set @TaxAmount = 0

			                            update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume9,A.AcqDate = B.AcqDate9,A.AcqPrice = B.AcqPrice9,A.AcqAmount = B.AcqVolume9 * B.AcqPrice9/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate9 is not null and B.AcqVolume9 != 0 and B.AcqPrice9 != 0)
		                            end
	                            end

                            if @TrxType = 1
                            begin
	                            Select @TaxPercentageBond = isnull(TaxPercentageBond,0),@TaxPercentageCapitalGain =  isnull(TaxPercentageCapitalGain,0) 
	                            from FundAccountingSetup where status = 2 and FundPK = @FundPK
                            end
                            else
                            begin
                                Select @TaxPercentageBond = isnull(TaxPercentageBond,0),@TaxPercentageCapitalGain =  isnull(TaxPercentageCapitalGainSell,0)
	                            from FundAccountingSetup where status = 2 and FundPK = @FundPK
                            end

	                        Select @DealingPK = max(DealingPK) + 1 From investment
	                        if isnull(@DealingPK,0) = 0 BEGIN  Select @DealingPK = isnull(max(DealingPK),0) + 1 From investment END  
	                        update Investment set DealingPK = @DealingPK, statusInvestment = 2, statusDealing = 1,InvestmentNotes=@Notes,DonePrice=@OrderPrice,DoneVolume=@Volume,AccruedInterest=@AccruedInterest,DoneAccruedInterest=@AccruedInterest,BoardType = 1 ,ApprovedUsersID = @ApprovedUsersID,ApprovedTime = @ApprovedTime ,EntryDealingID = @ApprovedUsersID,EntryDealingTime = @ApprovedTime ,LastUpdate=@LastUpdate
	                        ,IncomeTaxInterestPercent = @TaxPercentageBond , IncomeTaxGainPercent = @TaxPercentageCapitalGain, TaxExpensePercent = @TaxPercentageBond
	                        where InvestmentPK = @InvestmentPK
                      
                        Fetch next From A Into @investmentPK,@DealingPK,@historyPK,@Notes,@OrderPrice,@Volume,@Amount,@AccruedInterest,@FundPK,@LastCouponDate,@SettlementDate,@TaxInterestPercent
                        END
                        Close A
                        Deallocate A 

                        Update Investment set SelectedInvestment  = 0";



                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@UsersID", _investment.ApprovedUsersID);
                        cmd.Parameters.AddWithValue("@ApprovedUsersID", _investment.ApprovedUsersID);
                        cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@Time", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int Investment_RejectDealingBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (2,3,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandText = @"
                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int
                        declare @AcqPriceInv numeric(22,4)
                        declare @AcqVolumeInv numeric(22,4)
                        declare @AcqDateInv date
						declare @instrumentpk int
	                    declare @FundPK1 int
	                    declare @Price numeric(22,4)
	                    declare @volume numeric(22,4)
	                    declare @DoneVolume numeric(22,4)
	                    declare @RemainingVolume numeric(22,4)
	                    declare @maxFifoDate date
						declare @FifobondPositionPK int
	                    declare @Query nvarchar(500)
	                    declare @InvestmentSellPK int
	                    declare @InvestmentBuyPK int
	                    declare @AcqPrice numeric(22,4)
	                    declare @AcqVolume numeric(22,4)
	                    declare @AcqDate date

                        DECLARE A CURSOR FOR 
	                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate,AcqPrice,AcqVolume from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate1,AcqPrice1,AcqVolume1 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate1 is not null "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate2,AcqPrice2,AcqVolume2 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate2 is not null "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate3,AcqPrice3,AcqVolume3 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate3 is not null "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate4,AcqPrice4,AcqVolume4 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate4 is not null "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate5,AcqPrice5,AcqVolume5 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate5 is not null "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate6,AcqPrice6,AcqVolume6 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate6 is not null "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate7,AcqPrice7,AcqVolume7 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate7 is not null "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate8,AcqPrice8,AcqVolume8 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate8 is not null "
                             + _paramFund + _paramCounterpart +
                             @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate9,AcqPrice9,AcqVolume9 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate9 is not null "
                             + _paramFund + _paramCounterpart +
                             @"


                            Open A
                        Fetch Next From A
                        Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv

                        While @@FETCH_STATUS = 0
                            BEGIN              
	                            if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	                            create table #tableFifoSelect
	                            (
		                            FifoBondPositionPK int,
									InvestmentBuyPK int,
		                            InvestmentPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            RemainingVolume numeric(22,4),
		                            AcqPrice numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	                            if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	                            create table #tableInvest
	                            (
		                            FifoBondPositionPK int,
		                            InvesmentBuyPK int,
		                            InvesmentSellPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            AcqPrice numeric(22,4),
		                            RemainingVolume numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	                            insert into #tableFifoSelect(FifoBondPositionPK,InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
	                            select A.FifoBondPositionPK,InvestmentBuyPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice,RemainingVolume from (
			                            select FifoBondPositionPK,0 InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume DoneVolume,AcqPrice,RemainingVolume from FifoBondPosition 
			                            where FundPK = @FundPK1 and InstrumentPk = @instrumentpk and status in (1,2) and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv
			                            union all
			                            select 0,InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume from FifoBondPositionTemp
			                            where FundPK = @FundPK1 and InstrumentPK = @instrumentpk and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv --and InvestmentSellPK <> 0
	                            )A 
	                            order by A.AcqDate					

	                            --select * from #tableFifoSelect
	                            --order by AcqDate
	                            -- @AcqDateInv,@AcqPriceInv,@AcqVolumeInv
	                            --order by AcqDate
	                            --select @AcqDateInv = AcqDate, @AcqPriceInv = AcqPrice, @AcqVolumeInv = AcqVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 2 and TrxType = 2
	

	                            
								
	                            DECLARE AB CURSOR FOR   
		                            select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate,RemainingVolume,InvestmentBuyPK from #tableFifoSelect where AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv order by AcqDate desc
	                            OPEN AB  
	                            FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
  
	                            WHILE @@FETCH_STATUS = 0  
	                            BEGIN  
		                            if @FifobondPositionPK = 0
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv ,@AcqVolume, @RemainingVolume,'101',@InvestmentBuyPK
			                            else
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
											--select @AcqVolume,'102', @RemainingVolume
									end
		                            else
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv + @RemainingVolume,'105'
			                            else
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolume,'109', @RemainingVolume, @DoneVolume, @AcqDate,@AcqPrice, @AcqVolumeInv
		                            end
		
		
		
	                                FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
	                            end
	                            CLOSE AB  
	                            DEALLOCATE AB 

                            Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv
                            END
                            Close A
                            Deallocate A

                        Update Investment set StatusDealing  = 3,statusSettlement = 0,OrderStatus = 'R', VoidDealingID = @VoidDealingID,VoidDealingTime = @VoidDealingTime,LastUpdate=@LastUpdate where "
                        + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1,2) "
                        + _paramFund + _paramCounterpart +
                        "--Update Investment set SelectedDealing  = 0";


                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidDealingID);
                        cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_RejectOMSBondBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInvestmentPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramInvestmentPK = " And InvestmentPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramInvestmentPK = "  And InvestmentPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                            declare @InvestmentPK int
                            declare @DealingPK int
                            declare @HistoryPK int
                            declare @AcqPriceInv numeric(22,4)
                            declare @AcqVolumeInv numeric(22,4)
                            declare @AcqDateInv date
							declare @instrumentpk int
	                        declare @FundPK1 int
	                        declare @Price numeric(22,4)
	                        declare @volume numeric(22,4)
	                        declare @DoneVolume numeric(22,4)
	                        declare @RemainingVolume numeric(22,4)
	                        declare @maxFifoDate date
							declare @FifobondPositionPK int
	                        declare @Query nvarchar(500)
	                        declare @InvestmentSellPK int
	                        declare @InvestmentBuyPK int
	                        declare @AcqPrice numeric(22,4)
	                        declare @AcqVolume numeric(22,4)
	                        declare @AcqDate date

                            DECLARE A CURSOR FOR 
	                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate,AcqPrice,AcqVolume from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) 
								" + _paramFund +
                                @"

								union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate1,AcqPrice1,AcqVolume1 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate1 is not null
								" + _paramFund +
                                @"

								union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate2,AcqPrice2,AcqVolume2 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate2 is not null
								" + _paramFund +
                                @"

								union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate3,AcqPrice3,AcqVolume3 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate3 is not null
								" + _paramFund +
                                @"

								union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate4,AcqPrice4,AcqVolume4 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate4 is not null
								" + _paramFund +
                                @"							

								union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate5,AcqPrice5,AcqVolume5 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate5 is not null
								" + _paramFund +
                                @"

								union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate6,AcqPrice6,AcqVolume6 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate6 is not null
								" + _paramFund +
                                @"

								union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate7,AcqPrice7,AcqVolume7 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate7 is not null
								" + _paramFund +
                                @"
							
								union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate8,AcqPrice8,AcqVolume8 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate8 is not null
								" + _paramFund +
                                @"

                                union  all 
								select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate9,AcqPrice9,AcqVolume9 from Investment 
	                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
								and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate9 is not null
								" + _paramFund +
                                @"
							
                                Open A
                            Fetch Next From A
                            Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv

                            While @@FETCH_STATUS = 0
                            BEGIN              
	                            

	                            if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	                            create table #tableFifoSelect
	                            (
		                            FifoBondPositionPK int,
									InvestmentBuyPK int,
		                            InvestmentPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            RemainingVolume numeric(22,4),
		                            AcqPrice numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	                            if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	                            create table #tableInvest
	                            (
		                            FifoBondPositionPK int,
		                            InvesmentBuyPK int,
		                            InvesmentSellPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            AcqPrice numeric(22,4),
		                            RemainingVolume numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	                            insert into #tableFifoSelect(FifoBondPositionPK,InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
	                            select A.FifoBondPositionPK,InvestmentBuyPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice,RemainingVolume from (
			                            select FifoBondPositionPK,0 InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume DoneVolume,AcqPrice,RemainingVolume from FifoBondPosition 
			                            where FundPK = @FundPK1 and InstrumentPk = @instrumentpk and status in (1,2) and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv
			                            union all
			                            select 0,InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume from FifoBondPositionTemp
			                            where FundPK = @FundPK1 and InstrumentPK = @instrumentpk and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv --and InvestmentSellPK <> 0
	                            )A 
	                            order by A.AcqDate					

	                            --select * from #tableFifoSelect
	                            --order by AcqDate
	                            -- @AcqDateInv,@AcqPriceInv,@AcqVolumeInv
	                            --order by AcqDate
	                            --select @AcqDateInv = AcqDate, @AcqPriceInv = AcqPrice, @AcqVolumeInv = AcqVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 2 and TrxType = 2
	

	                            
								
	                            DECLARE AB CURSOR FOR   
		                            select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate,RemainingVolume,InvestmentBuyPK from #tableFifoSelect where AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv order by AcqDate desc
	                            OPEN AB  
	                            FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
  
	                            WHILE @@FETCH_STATUS = 0  
	                            BEGIN  
		                            if @FifobondPositionPK = 0
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv ,@AcqVolume, @RemainingVolume,'101',@InvestmentBuyPK
			                            else
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
											--select @AcqVolume,'102', @RemainingVolume
									end
		                            else
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv + @RemainingVolume,'105'
			                            else
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolume,'109', @RemainingVolume, @DoneVolume, @AcqDate,@AcqPrice, @AcqVolumeInv
		                            end
		
		
		
	                                FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
	                            end
	                            CLOSE AB  
	                            DEALLOCATE AB 

                            Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv
                            END
                            Close A
                            Deallocate A

                            Update Investment set StatusInvestment  = 3,statusDealing = 0,statusSettlement = 0,OrderStatus = 'R', VoidUsersID = @VoidUsersID,VoidTime = @VoidTime
                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) 
                            " + _paramFund +
                            " Update Investment set SelectedInvestment  = 0";

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@VoidUsersID", _investment.VoidUsersID);
                        cmd.Parameters.AddWithValue("@VoidTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_RejectSettlementBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " InstrumentTypePK in (2,3,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandText = @"
                            declare @InvestmentPK int
                            declare @DealingPK int
                            declare @HistoryPK int
                            declare @AcqPriceInv numeric(22,4)
                            declare @AcqVolumeInv numeric(22,4)
                            declare @AcqDateInv date
                            declare @instrumentpk int
	                        declare @FundPK1 int
	                        declare @Price numeric(22,4)
	                        declare @volume numeric(22,4)
	                        declare @DoneVolume numeric(22,4)
	                        declare @RemainingVolume numeric(22,4)
	                        declare @maxFifoDate date
                            declare @FifobondPositionPK int
	                        declare @Query nvarchar(500)
	                        declare @InvestmentSellPK int
	                        declare @InvestmentBuyPK int
	                        declare @AcqPrice numeric(22,4)
	                        declare @AcqVolume numeric(22,4)
	                        declare @AcqDate date

                            declare @tableInvestment table (
                                InvestmentPK int,
                                DealingPK int,
                                HistoryPK int,
                                InstrumentPK int,
                                FundPK int,
                                DoneVolume numeric(32,4),
                                AcqDate date,
                                AcqPrice numeric(19,8),
                                AcqVolume numeric(32,4)
                            )
 
                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate,AcqPrice,AcqVolume from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate1,AcqPrice1,AcqVolume1 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate1 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate2,AcqPrice2,AcqVolume2 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate2 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate3,AcqPrice3,AcqVolume3 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate3 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate4,AcqPrice4,AcqVolume4 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate4 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate5,AcqPrice5,AcqVolume5 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate5 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate6,AcqPrice6,AcqVolume6 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate6 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate7,AcqPrice7,AcqVolume7 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate7 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate8,AcqPrice8,AcqVolume8 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate8 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate9,AcqPrice9,AcqVolume9 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate9 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate10,AcqPrice10,AcqVolume10 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate10 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate11,AcqPrice11,AcqVolume11 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate11 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate12,AcqPrice12,AcqVolume12 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate12 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate13,AcqPrice13,AcqVolume13 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate13 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate14,AcqPrice14,AcqVolume14 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate14 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate15,AcqPrice15,AcqVolume15 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate15 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate16,AcqPrice16,AcqVolume16 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate16 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate17,AcqPrice17,AcqVolume17 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate17 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate18,AcqPrice18,AcqVolume18 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate18 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate19,AcqPrice19,AcqVolume19 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate19 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate20,AcqPrice20,AcqVolume20 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate20 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate21,AcqPrice21,AcqVolume21 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate21 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate22,AcqPrice22,AcqVolume22 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate22 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate23,AcqPrice23,AcqVolume23 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate23 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate24,AcqPrice24,AcqVolume24 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate24 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate25,AcqPrice25,AcqVolume25 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate25 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate26,AcqPrice26,AcqVolume26 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate26 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate27,AcqPrice27,AcqVolume27 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate27 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate28,AcqPrice28,AcqVolume28 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate28 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate29,AcqPrice29,AcqVolume29 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate29 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            DECLARE A CURSOR FOR 
	                            
                                select InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume from @tableInvestment

                            Open A
                            Fetch Next From A
                            Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv

                            While @@FETCH_STATUS = 0
                            BEGIN              
	                            

	                            if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	                            create table #tableFifoSelect
	                            (
		                            FifoBondPositionPK int,
									InvestmentBuyPK int,
		                            InvestmentPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            RemainingVolume numeric(22,4),
		                            AcqPrice numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	                            if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	                            create table #tableInvest
	                            (
		                            FifoBondPositionPK int,
		                            InvesmentBuyPK int,
		                            InvesmentSellPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            AcqPrice numeric(22,4),
		                            RemainingVolume numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	                            insert into #tableFifoSelect(FifoBondPositionPK,InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
	                            select A.FifoBondPositionPK,InvestmentBuyPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice,RemainingVolume from (
			                            select FifoBondPositionPK,0 InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume DoneVolume,AcqPrice,RemainingVolume from FifoBondPosition 
			                            where FundPK = @FundPK1 and InstrumentPk = @instrumentpk and status in (1,2) and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv
			                            union all
			                            select 0,InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume from FifoBondPositionTemp
			                            where FundPK = @FundPK1 and InstrumentPK = @instrumentpk and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv --and InvestmentSellPK <> 0
	                            )A 
	                            order by A.AcqDate					

	                            --select * from #tableFifoSelect
	                            --order by AcqDate
	                            -- @AcqDateInv,@AcqPriceInv,@AcqVolumeInv
	                            --order by AcqDate
	                            --select @AcqDateInv = AcqDate, @AcqPriceInv = AcqPrice, @AcqVolumeInv = AcqVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 2 and TrxType = 2
	

	                            
								
	                            DECLARE AB CURSOR FOR   
		                            select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate,RemainingVolume,InvestmentBuyPK from #tableFifoSelect where AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv order by AcqDate desc
	                            OPEN AB  
	                            FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
  
	                            WHILE @@FETCH_STATUS = 0  
	                            BEGIN  
		                            if @FifobondPositionPK = 0
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv ,@AcqVolume, @RemainingVolume,'101',@InvestmentBuyPK
			                            else
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
											--select @AcqVolume,'102', @RemainingVolume
									end
		                            else
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv + @RemainingVolume,'105'
			                            else
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolume,'109', @RemainingVolume, @DoneVolume, @AcqDate,@AcqPrice, @AcqVolumeInv
		                            end
		
		
		
	                                FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
	                            end
	                            CLOSE AB  
	                            DEALLOCATE AB 

                            Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv
                            END
                            Close A
                            Deallocate A
                            

                            Update Investment set statusSettlement  = 3,OrderStatus = 'R', VoidSettlementID = @VoidSettlementID,VoidSettlementTime = @VoidSettlementTime
                            where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK + " and ValueDate between @DateFrom and @DateTo and statusSettlement in (1,2) " + _paramFund + _paramCounterpart +
                            " --Update Investment set selectedSettlement  = 0";



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidSettlementID);
                        cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int EndDayTrailsFundPortfolio_GenerateWithParamFund(string _usersID, DateTime _valueDate, EndDayTrailsFundPortfolio _edt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";

                        if (!_host.findString(_edt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_edt.FundFrom))
                        {
                            _paramFund = "And FundPK in ( " + _edt.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
Declare @CFundPK int
declare @EndDayTrailsFundPortfolioPK int

if object_id('tempdb..#ZFundPosition', 'u') is not null drop table #ZFundPosition 
Create Table #ZFundPosition                  
(                  
InstrumentPK int,     
InstrumentTypePK int,                  
InstrumentID nvarchar(100) COLLATE DATABASE_DEFAULT,                  
FundPK int,                  
FundID nvarchar(100) COLLATE DATABASE_DEFAULT,                  
AvgPrice numeric(38,12),                  
LastVolume numeric(38,4),                  
ClosePrice numeric(38,12),                  
TrxAmount numeric(38,6),              
AcqDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) COLLATE DATABASE_DEFAULT,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
BitBreakable bit
)                  
CREATE CLUSTERED INDEX indx_ZFundPosition ON #ZFundPosition (FundPK,InstrumentPK,InstrumentTypePK,BankPK,BankBranchPK);
    

if object_id('tempdb..#ZLogicFundPosition', 'u') is not null drop table #ZLogicFundPosition 
Create Table #ZLogicFundPosition              
(              
BuyVolume numeric(38,4),              
SellVolume numeric(38,4),              
BuyAmount numeric(38,4),       
SellAmount numeric(38,4),            
FundPK int,              
InstrumentPK int,              
SettlementDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) COLLATE DATABASE_DEFAULT,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
AcqDate datetime,
BitBreakable bit
)      

CREATE CLUSTERED INDEX indx_ZLogicFundPosition ON #ZLogicFundPosition (FundPK,InstrumentPK,BankPK,BankBranchPK);


if object_id('tempdb..#ZDividenSaham', 'u') is not null drop table #ZDividenSaham
Create Table #ZDividenSaham                  
(                  
InstrumentPK int,     
FundPK int,                  
LastVolume numeric(18,4)     
)      

CREATE CLUSTERED INDEX indx_ZDividenSaham ON #ZDividenSaham (FundPK,InstrumentPK);


if object_id('tempdb..#StaticClosePrice', 'u') is not null drop table #StaticClosePrice
Create table #StaticClosePrice
(
	FundPK int,
	InstrumentPK int,
	maxDate datetime
)

CREATE CLUSTERED INDEX indx_StaticClosePrice ON #StaticClosePrice (FundPK,InstrumentPK);

if object_id('tempdb..#ZFundFrom', 'u') is not null drop table #ZFundFrom
Create Table #ZFundFrom                  
(                   
	FundPK int,
	EndDayTrailsFundPortfolioPK int
)      

CREATE CLUSTERED INDEX indx_ZFundFrom  ON #ZFundFrom (FundPK,EndDayTrailsFundPortfolioPK);

if object_id('tempdb..#ZInstrument', 'u') is not null drop table #ZInstrument
Create Table #ZInstrument                  
(                   
	InstrumentPK int,
	FundPK int
)      

CREATE CLUSTERED INDEX indx_ZInstrument  ON #ZInstrument (InstrumentPK,FundPK);

if object_id('tempdb..#ZInstrumentFIFO', 'u') is not null drop table #ZInstrumentFIFO
Create Table #ZInstrumentFIFO                  
(                   
	InstrumentPK int,
	FundPK int
)      

CREATE CLUSTERED INDEX indx_ZInstrumentFIFO  ON #ZInstrumentFIFO (InstrumentPK,FundPK);

if object_id('tempdb..#FifoBondTrx', 'u') is not null drop table #FifoBondTrx 
create table #FifoBondTrx
(
	BuyVolume numeric(38,4),              
	SellVolume numeric(38,4),              
	BuyAmount numeric(38,4),       
	SellAmount numeric(38,4),            
	FundPK int,              
	InstrumentPK int,             
	ValueDate datetime,       
	SettlementDate datetime,              
	MaturityDate datetime,              
	InterestPercent numeric(38,8),
	CurrencyPK int,
	Category nvarchar(200) COLLATE DATABASE_DEFAULT,
	TaxExpensePercent numeric(19, 8),
	MarketPK int,
	InterestDaysType int,
	InterestPaymentType int,
	PaymentModeOnMaturity   int,
	PaymentInterestSpecificDate datetime,
	BankPK int,
	BankBranchPK int,
	PriceMode int,
	BitIsAmortized bit,
	AcqDate datetime,
	BitBreakable BIT
)
CREATE CLUSTERED INDEX indx_FifoBondTrx ON #FifoBondTrx (InstrumentPK,FundPK,AcqDate);

Declare @PeriodPK    int                  
Declare @maxEndDayTrailsFundPortfolioPK int       

                
Select @EndDayTrailsFundPortfolioPK = max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio    
set @EndDayTrailsFundPortfolioPK = isnull(@EndDayTrailsFundPortfolioPK,1)     


insert into #ZFundFrom(FundPK,EndDayTrailsFundPortfolioPK)
--select FundPK from Fund where status in (1,2)  " + _paramFund + @" and MaturityDate >= @ValueDate
--select FundPK,row_number() over (order by FundPK desc) + @EndDayTrailsFundPortfolioPK from Fund where status in (1,2) and MaturityDate >= @ValueDate
select FundPK,row_number() over (order by FundPK desc) + @EndDayTrailsFundPortfolioPK from Fund where status in (1,2) 
" + _paramFund + @" 
--and FundPk = 72
and MaturityDate >= @ValueDate
--PARAM FUND

--update fifobond ketika mature

declare @maxDate date
set @maxDate = dbo.FWorkingDay(@ValueDate,-1)

-- CEK MATURITY FIFO BOND
declare @maxFifoDate date
set @maxFifoDate = '2020-06-19'

insert into #ZInstrument
select distinct A.InstrumentPK,A.FundPK from FundPosition A
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
where date = @maxDate and A.MaturityDate <= @ValueDate and InstrumentTypePK in (2,3,8,9,13,15)
and FundPk in (select FundPK from #ZFundFrom)

insert into #ZInstrumentFIFO
select distinct A.InstrumentPK,A.FundPK from FundPosition A
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
where date = @maxDate and A.MaturityDate > @ValueDate and InstrumentTypePK in (2,3,8,9,13,15) and A.status = 2
and FundPk in (select FundPK from #ZFundFrom)

--INSERT DATA INVESTMENT BARU
declare @FifoInvestmentBuyPK int
declare @FifoInvestmentSellPK int
declare @FifoAcqDate date
declare @FifoAcqVolume numeric(32,8)
declare @FifoAcqPrice numeric(18,8)
declare @FifoDoneVolume numeric(32,8)
declare @FifoFundPk int
declare @FifoInstrumentPK int
declare @FifoFundPositionAdjustmentPK int
declare @FifoVol numeric(32,8)
declare @FifoTempVol numeric(32,8)

DECLARE A CURSOR
FOR 

	select InvestmentPK InvestmentBuyPK,0 InvestmentSellPK,SettlementDate AcqDate,DoneVolume AcqVolume,DonePrice AcqPrice, DoneVolume, A.FundPK, A.InstrumentPK, 0 FundPositionAdjustmentPK from Investment A
	inner join #ZInstrumentFIFO B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
	where TrxType = 1 and StatusSettlement = 2 and ValueDate > @maxFifoDate and InvestmentPK not in (select InvestmentBuyPK from FifoBondPositionTemp )
 
OPEN A;
 
FETCH NEXT FROM A INTO @FifoInvestmentBuyPK,@FifoInvestmentSellPK,@FifoAcqDate,@FifoAcqVolume,@FifoAcqPrice,@FifoDoneVolume,@FifoFundPk,@FifoInstrumentPK,@FifoFundPositionAdjustmentPK
 
WHILE @@FETCH_STATUS = 0
    BEGIN
		
		select @FifoVol =  sum(DoneVolume) from Investment where TrxType = 1 and StatusSettlement = 2 and StatusInvestment = 2 and StatusDealing = 2 and 
		SettlementDate = @FifoAcqDate and DonePrice = @FifoAcqPrice and fundpk = @FifoFundPk and InstrumentPK = @FifoInstrumentPK

		select @FifoTempVol = sum(AcqVolume) from FifoBondPositionTemp where AcqDate = @FifoAcqDate and AcqPrice = @FifoAcqPrice and fundpk = @FifoFundPk and InstrumentPK = @FifoInstrumentPK

		if @FifoTempVol is null
		begin
			insert into FifoBondPositionTemp
			select @FifoInvestmentBuyPK,@FifoInvestmentSellPK,@FifoAcqDate,@FifoAcqVolume,@FifoAcqPrice,@FifoDoneVolume,@FifoFundPk,@FifoInstrumentPK,@FifoFundPositionAdjustmentPK
			--select 'insert'
		end
		else 
		begin
			if @FifoVol <> @FifoTempVol 
			begin
				update FifoBondPositionTemp set AcqVolume = AcqVolume + @FifoAcqVolume, RemainingVolume = RemainingVolume + @FifoAcqVolume, InvestmentBuyPK = @FifoInvestmentBuyPK
				where AcqDate = @FifoAcqDate and AcqPrice = @FifoAcqPrice and fundpk = @FifoFundPk and InstrumentPK = @FifoInstrumentPK
				--select @FifoAcqVolume
			end
		end

        FETCH NEXT FROM A INTO @FifoInvestmentBuyPK,@FifoInvestmentSellPK,@FifoAcqDate,@FifoAcqVolume,@FifoAcqPrice,@FifoDoneVolume,@FifoFundPk,@FifoInstrumentPK,@FifoFundPositionAdjustmentPK
    END;
 
CLOSE A;
 
DEALLOCATE A;

--UPDATE BOND MATURE

update A set RemainingVolume = 0 from FiFoBondPosition A
inner join (
select FiFoBondPositionPK from FiFoBondPosition A
inner join #ZInstrument B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK
where A.status in (1,2) and RemainingVolume is null or RemainingVolume != 0
) B on A.FiFoBondPositionPK = B.FiFoBondPositionPK

update A set RemainingVolume = 0 from FifoBondPositionTemp A
inner join (
select InvestmentBuyPK from FifoBondPositionTemp A
inner join #ZInstrument B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK
where RemainingVolume is null or RemainingVolume != 0
) B on A.InvestmentBuyPK = B.InvestmentBuyPK

update FundPosition set status = 3,LastUpdate=@lastUpdate where Date = @ValueDate and status = 2 and FundPK in (select FundPK from #ZFundFrom)
update EndDayTrailsFundPortfolio set status = 3,VoidUsersID = @UsersID,VoidTime = @lastUpdate,LastUpdate=@lastUpdate
where ValueDate = @ValueDate and status = 2 and FundPK in (select FundPK from #ZFundFrom)          

UPDATE Investment set PriceMode = 1 where InstrumentTypePK  in (1,4,16)  and ValueDate = @ValueDate
update Investment set MarketPK = 1  where ValueDate = @ValueDate
update Investment set Category = null where InstrumentTypePK  <> 5  and ValueDate = @ValueDate
        
Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  

Insert into EndDayTrailsFundPortfolio  (EndDayTrailsFundPortfolioPK,HistoryPK,Status,ValueDate,FundPK,BitValidate
,LogMessages,EntryUsersID,EntryTime,LastUpdate)                    
Select EndDayTrailsFundPortfolioPK,1,2,@ValueDate,FundPK,0
,'',@UsersID,@LastUpdate,@LastUpdate  
from #ZFundFrom A     

-- SETUP DATA SELL FIFO DARI INVESTMENT

Insert into #FifoBondTrx(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,CurrencyPK,Category,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable,ValueDate)   

Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,
isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.MarketPK,0) MarketPK,
isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
A.AcqDate,A.BitBreakable,A.ValueDate
from (                 
	
		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,
		CASE when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable,
		A.AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate IS NOT NULL AND A.AcqVolume > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice
		
		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume1) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate1 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate1 end AcqDate,
		CASE when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice1 AcqPrice

		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate1 IS NOT NULL AND A.AcqVolume1 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate1,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice1
			
		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume2) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate2 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate2 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice2 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate2 IS NOT NULL AND A.AcqVolume2 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate2,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice2


		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume3) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate3 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate3 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice3 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate3 IS NOT NULL AND A.AcqVolume3 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate3,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice3

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume4) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate4 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate4 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice4 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate4 IS NOT NULL AND A.AcqVolume4 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate4,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice4

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume5) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate5 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate5 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice5 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16) and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate5 IS NOT NULL AND A.AcqVolume5 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate5,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice5


		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume6) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate6 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate6 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice6 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate6 IS NOT NULL AND A.AcqVolume6 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate6,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice6

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume7) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate7 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate7 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice7 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate7 IS NOT NULL AND A.AcqVolume7 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate7,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice7

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume8) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate8 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate8 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice8 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate8 IS NOT NULL AND A.AcqVolume8 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate8,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice8

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume9) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate9 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate9 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice9 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate9 IS NOT NULL AND A.AcqVolume9 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate9,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice9

		)A                
Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate
,A.ValueDate,A.CurrencyPK ,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable,A.AcqPrice       
                             

-- TARIK JUAL BELI DARI INVESTMENT              
Insert into #ZLogicFundPosition	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,CurrencyPK,Category,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable)               

Select SUM(BuyVolume) BuyVolume,SUM(SellVolume) SellVolume,SUM(BuyAmount) BuyAmount,SUM(SellAmount) SellAmount,B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.CurrencyPK,B.Category,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate
,B.BankPK,B.BankBranchPK,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable
From               
(               
	Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
	,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
	isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,isnull(A.InterestPercent,0) InterestPercent,
	isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.MarketPK,0) MarketPK,
	isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
	,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
	A.AcqDate,A.BitBreakable
	from (                 
	
		select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.SettlementDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
		from Investment A 
		Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
		where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK <> 6 and A.FundPK in (select FundPK from #ZFundFrom)         
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
		,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
  
		UNION ALL                  

		select InstrumentPK,BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,SettlementDate,MaturityDate,InterestPercent,ValueDate,CurrencyPK,Category,
		MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable from #FifoBondTrx


        UNION ALL                  

        select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
        Case when C.Type = 1 then null else AcqDate end SettlementDate,              
        Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
        Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
        B.CurrencyPK,A.Category,A.MarketPK
        ,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
        ,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
        ,A.PaymentModeOnMaturity
        ,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
        ,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
        from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
        left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
        where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK in (1,4,5,16)  and A.FundPK in (select FundPK from #ZFundFrom)                     
        Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
        ,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
        ,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		

		UNION ALL

		select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
		Case when C.Type = 1 then null else SettlementDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
		B.CurrencyPK,A.Category,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK
		,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                       
		where ValueDate <= @ValueDate and trxType = 3 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.FundPK in (select FundPK from #ZFundFrom)              
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
		,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK

		-- REKSDANA--
		UNION ALL
		select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
		Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
		Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
		Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
		from Investment A 
		Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
		where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK = 6   and A.FundPK in (select FundPK from #ZFundFrom)           
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
		,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
  
		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
		Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
		Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK = 6   and A.FundPK in (select FundPK from #ZFundFrom)                
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
	

	)A                
	Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent
	,A.ValueDate,A.CurrencyPK ,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
	,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable
)B     
Group By B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.CurrencyPK
,B.Category,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate,B.BankPK,B.BankBranchPK
,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable

update A set TaxExpensePercent = B.TaxExpensePercent from #ZLogicFundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)



--INSERT INVESTMENT + BEG BALANCE SELAIN DEPOSITO ( INVESTMENT + BEG BALANCE )
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType
,PriceMode,BitIsAmortized)                  
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,             
isnull(A.BuyAmount,0) - (isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) 
* isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0)	TrxAmount
,A.AcqDate,A.MaturityDate,D.CurrencyPK, A.Category,D.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
,A.PriceMode,A.BitIsAmortized
From #ZLogicFundPosition A              
Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
--and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (1,2,4,5,14,9)



-- INSERT INVESTMENT + BEG BALANCE DEPOSITO ONLY ( INVESTMENT + BEG BALANCE )              
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
select InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,avg(AvgPrice)
,sum(LastVolume),avg(ClosePrice),TrxAmount,AcqDate,MaturityDate
,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable
from (
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID InstrumentID,A.FundPK,C.ID FundID, 
1 AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
1 ClosePrice,                  
isnull(A.BuyAmount,0) - (1 * isnull(A.SellVolume,0))  + isnull		(B.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,D.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when D.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From #ZLogicFundPosition A              
LEft join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2     
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK 
and isnull(A.Maturitydate,'01/01/1900') = isnull(B.MaturityDate,'01/01/1900')    
--and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (3)
)A  
group by InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,TrxAmount,AcqDate
,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable




-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT SELAIN DEPOSITO
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK,PriceMode,BitIsAmortized
,InterestDaysType,InterestPaymentType,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
isnull(A.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,                  
isnull(A.TrxAmount,0) TrxAmount,              
isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),C.CurrencyPK, A.Category,isnull(C.TaxExpensePercent,0),A.MarketPK
,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')              
where A.PeriodPK = @PeriodPK              
) and E.Type in (1,2,4,5,14,9) and A.periodPK = @PeriodPK   and A.FundPK in (select FundPK from #ZFundFrom)          

-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT DEPOSITO ONLY             
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 1 AvgPrice,isnull(A.Volume,0) LastVolume,                  
1 ClosePrice, isnull(A.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,C.CurrencyPK, A.Category,C.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.paymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2     
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2             
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZLogicFundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK  and A.MaturityDate = B.MaturityDate         
where A.PeriodPK = @PeriodPK             
) and E.Type in (3) and A.periodPK = @PeriodPK   and A.FundPK in (select FundPK from #ZFundFrom)          


-- CORPORATE ACTION DIVIDEN SAHAM

-- CORPORATE ACTION STOCK SPLIT / REVERSE STOCK SPLIT
	                    
delete CorporateActionResult where Date = @ValueDate and FundPK in (select FundPK from #ZFundFrom)  


-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.ExDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.ExDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null and C.FundPK in (select FundPK from #ZFundFrom) 
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.ExDate,B.FundPK,A.InstrumentPK,isnull((B.LastVolume/A.Hold * A.Earn) - B.LastVolume,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 



-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null and B.FundPK in (select FundPK from #ZFundFrom) 
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.ValueDate,B.FundPK,A.InstrumentPK,B.LastVolume / A.Hold * A.Earn DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION DIVIDEN RIGHTS
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-R' and D.status = 2
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION DIVIDEN WARRANT
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-W' and D.status = 2
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- PROSES EXERCISE YANG DAH DI DISTRIBUTION DATE
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select ExercisePK,2,@ValueDate,FundPK,InstrumentPK,BalanceExercise,Price,0 from Exercise 
where DistributionDate  = @ValueDate and status = 2  and FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION BOND AMORTIZEN
TRUNCATE TABLE #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance
--B.Balance + C.BalanceFromInv LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK  in (2,3,9,15)
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
--and C.ValueDate >= A.ValueDate
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

--Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
--Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
--from CorporateAction A
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK = 1 
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
--and B.ValueDate >= A.ValueDate
--left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
--where A.Type = 2 and A.Status = 2 and A.PaymentDate = @ValueDate
--and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,B.FundPK,A.InstrumentPK,B.LastVolume * A.Earn / A.Hold * -1,0,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- UPDATE POSISI ZFUNDPOSITION + CORPORATE ACTION	
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
select FundPK,A.InstrumentPK,Price, sum(Balance) Balance,A.status
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
and B.ID not like '%-W' and B.ID not like '%-R'
WHERE A.Date <= @ValueDate and PeriodPK = @PeriodPK  and A.FundPK in (select FundPK from #ZFundFrom) 

Group By FundPK,A.InstrumentPK,Price,A.status
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
left join instrumentType C on A.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
where C.Type in (1,9,2,5,14)
--AND A.LastVolume > 0  
and A.FundPK = B.FundPK


                
-- EXERCISE BELUM ADA DI FUNDPOSITION, UNTUK RIGHTS/WARRANT
IF NOT EXISTS
(
Select * from #ZFundPosition A 
left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
where Date >= @ValueDate and DistributionDate > @valuedate and status = 2
)
BEGIN
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice,
TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PriceMode,BitIsAmortized)
Select A.InstrumentRightsPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,A.Price,BalanceExercise,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
A.Price * BalanceExercise,null,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK,0,0,1,0 from Exercise A
left join Instrument B on A.InstrumentRightsPK = B.InstrumentPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
where Date >= @ValueDate and DistributionDate > @valuedate and A.status = 2  and A.FundPK in (select FundPK from #ZFundFrom) 
END




---- EXERCISE BELUM ADA DI FUNDPOSITION, UNTUK DISTRIBUTED DATE
--IF NOT EXISTS
--(
--Select * from #ZFundPosition A 
--left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
--where DistributionDate  = @ValueDate and status = 2
--)
--BEGIN
--Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice,
--TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PriceMode,BitIsAmortized)
--Select A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,A.Price,BalanceExercise,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
--A.Price * BalanceExercise,null,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK,0,0,1,0 from Exercise A
--left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
--left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
--where DistributionDate  <= @ValueDate and A.status = 2
--END


--INSERT INSTRUMENT YANG ADA DI CORPORATE ACTION RESULT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2

where A.status = 2 and B.ID like '%-W' and PeriodPK = @PeriodPK  and A.FundPK in (select FundPK from #ZFundFrom) 



Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,4,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
 
where A.status = 2 and B.ID like '%-R' and PeriodPK = @PeriodPK  and A.FundPK in (select FundPK from #ZFundFrom) 


                       
-- UPDATE POSISI ZFUNDPOSITION + FUND POSITION ADJUSTMENT
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
SELECT FundPK,A.InstrumentPK,case when sum(balance) = 0 then 0 else sum(Price*Balance) / SUM(balance) end Price, sum(Balance) Balance,A.status,
case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  THEN A.AcqDate ELSE NULL END AcqDate
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
WHERE A.status = 2 AND A.Date <= @ValueDate and PeriodPK = @PeriodPK and A.FundPK in (select FundPK from #ZFundFrom) 
Group By FundPK,A.InstrumentPK,A.status,B.InstrumentTypePK,A.AcqDate
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
AND isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900') and A.FundPK = B.FundPK




--INSERT INSTRUMENT YANG ADA DI FUND POSITION ADJUSTMENT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  

SELECT A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
SUM(A.Balance),dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
SUM(Balance*Price),
case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  then  A.AcqDate else null End ,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,NULL,B.TaxExpensePercent,B.MarketPK
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
where A.status = 2 AND A.AcqDate <= @ValueDate and PeriodPK = @PeriodPK and A.FundPK in (select FundPK from #ZFundFrom) 
and NOT EXISTS 
(SELECT * FROM #ZFundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(C.AcqDate,'01/01/1900'))
GROUP BY A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,B.TaxExpensePercent,B.MarketPK,A.AcqDate



-- DELETE RIGHTS AND WARRANT YANG EXPIRED
Delete A From #ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-R' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 3
)B on A.InstrumentPK = B.InstrumentPK

Delete A From #ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-W' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 5
)B on A.InstrumentPK = B.InstrumentPK

-- KURANGIN BALANCE WARRANT AND RIGHTS YANG ADA DI EXERCISE


IF  EXISTS
(
Select * from #ZFundPosition A 
left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
where Date >= @ValueDate and DistributionDate > @valuedate and status = 2 and A.FundPK in (select FundPK from #ZFundFrom) 
)
BEGIN
Update A set A.LastVolume = A.LastVolume - isnull(B.BalanceExercise,0) from #ZFundPosition A
left join Exercise B on A.InstrumentPK = B.InstrumentRightsPK and B.status = 2
where Date = @ValueDate and A.FundPK in (select FundPK from #ZFundFrom) 
END


Insert into FundPosition(FundPositionPK,TrailsPK,HistoryPK,Status,Notes,Date,FundPK,FundID,                  
InstrumentPK,InstrumentID,AvgPrice,Balance,CostValue,ClosePrice,TrxAmount,MarketValue
,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK
,EntryUsersID,EntryTime,LastUpdate,PriceMode,BitIsAmortized,BitBreakable)                  
Select C.EndDayTrailsFundPortfolioPK,C.EndDayTrailsFundPortfolioPK,1,2,'',@ValueDate,A.FundPK, FundID,                  
A.InstrumentPK,InstrumentID,CONVERT(decimal(18,12),AvgPrice),LastVolume
,case when A.InstrumentTypePK in (2,3,8,14,13,9,15)  then CONVERT(decimal(18,12),AvgPrice)/100 else CONVERT(decimal(18,12),AvgPrice) End * LastVolume CostValue
, ClosePrice,TrxAmount
,case when A.InstrumentTypePK in (2,3,8,14,13,9,15)  then ClosePrice/100 else ClosePrice End * LastVolume MarketValue,                  
AcqDate,A.MaturityDate,D.InterestPercent,A.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,isnull(A.InterestDaysType,0),isnull(A.InterestPaymentType,0),isnull(PaymentModeOnMaturity,0),PaymentInterestSpecificDate,isnull(A.BankPK,0),isnull(A.BankBranchPK,0)
,@UsersID,@LastUpdate,@LastUpdate,isnull(PriceMode,0),isnull(BitIsAmortized,0),isnull(BitBreakable,0)
From #ZFundPosition  A WITH (NOLOCK)
left join Fund B on A.FundPK = B.FundPK
left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.status in (1,2) 
inner join #ZFundFrom C on A.FundPK = C.FundPK
where A.LastVolume > 0 and B.status in (1,2)  and A.FundPK in (select FundPK from #ZFundFrom)

IF NOT EXISTS(
select InvestmentPK from Investment 
where ValueDate > @ValueDate and InstrumentTypePK in (2,3,8,9,11,13,14,15) and TrxType = 2 and StatusInvestment = 2 and statusDealing <> 3 and StatusSettlement <> 3 and FundPK in (select FundPK from #ZFundFrom) 
)
BEGIN
	delete FifoBondHistorical where date = @ValueDate and FundPK in (select FundPK from #ZFundFrom) 

	insert into FifoBondHistorical (Date,FundPK,FundID,InstrumentID,AcqDate,AcqPrice,AcqVolume,LastUpdate)
	select @ValueDate Date,A.FundPK,B.ID FundID,C.ID InstrumentID,AcqDate,AcqPrice,sum(A.RemaningVolume) Volume, @LastUpdate from (
	select FundPK,InstrumentPK,AcqDate,AcqPrice,case when Remainingvolume is null then AcqVolume else RemainingVolume end RemaningVolume from FiFoBondPosition where (RemainingVolume is null and InvestmentPK = 0) or RemainingVolume != 0
	union all
	select FundPK,InstrumentPK,AcqDate,AcqPrice,RemainingVolume from FifoBondPositionTemp where RemainingVolume != 0
	union all
	select FundPK,InstrumentPK,SettlementDate,DonePrice,DoneVolume from Investment where ValueDate > '2019-10-18' and TrxType = 1 and statussettlement = 2 and statusdealing = 2 and statusinvestment = 2 and InstrumentTypePK in (2,3,8,9,13,15) and InvestmentPK not in ( 
	select InvestmentBuyPK from FifoBondPositionTemp
	)
	) A 
	left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2) 
	where A.FundPK in  (select FundPK from #ZFundFrom) 
	group by A.FundPK,B.ID,C.ID,AcqDate,AcqPrice
END




Delete FP From FundPosition FP Left Join Instrument I on FP.InstrumentPK = I.InstrumentPK
left join #ZFundFrom B on FP.FundPK = B.FundPK 
Where FundPositionPK = B.EndDayTrailsFundPortfolioPK and I.InstrumentTypePK not in (1,4,6,16)
and FP.MaturityDate <= @ValueDate and FP.MaturityDate Is Not Null  and FP.FundPK in (select FundPK from #ZFundFrom)  


---------PROSES AMORTIZED DAN PRICE MODE------------------------------
update A set A.ClosePrice =  Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
			when A.PriceMode = 2 then LowPriceValue
				when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
		else  
			dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			 
		end 
, A.MarketValue = A.Balance * Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
			when A.PriceMode = 2 then LowPriceValue
				when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
		else  
			dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			  
		end / Case when D.InstrumentTypePK in (2,3,8,14,13,9,15)  then 100 else 1 end
from FundPosition A 
left join 
(
	select InstrumentPK,LowPriceValue,ClosePriceValue,HighPriceValue From ClosePrice where Date =
	(
		Select max(Date) From ClosePrice where date <= @ValueDate and status = 2
	) and status = 2
)B on A.InstrumentPK = B.InstrumentPK 
left join instrument C on A.InstrumentPK = C.instrumentPK and C.Status = 2
left join InstrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
where A.FundPK in (select FundPK from #ZFundFrom)  and Date = @ValueDate and A.status = 2

-- STATIC CLOSEPRICE

insert into #StaticClosePrice
select distinct FundPK,instrumentPK,max(Date) maxDate from UpdateClosePrice 
where Date <= @ValueDate and status = 2 
and fundPK in
(
	Select FundPK from #ZFundFrom
)
group by FundPK,InstrumentPK
order by FundPK,InstrumentPK asc

--select * from #StaticClosePrice order by FundPK,instrumentPK,maxDate asc

	
--Select A.FundPK,A.InstrumentPK,B.ClosePriceValue ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
--left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
--left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
--where A.maxDate = @ValueDate

--order by fundPK,InstrumentPK

		--select A.FundPK,A.InstrumentPK,B.ClosePrice, A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		--INNER join (
		--	Select A.FundPK,A.InstrumentPK,case when (B.ClosePriceValue is not null ) then B.ClosePriceValue else D.ClosePriceValue end ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
		--	left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
		--	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
		--	left join ClosePrice D on A.InstrumentPK = D.InstrumentPK and D.status in (1,2)

		--)B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
		--inner join #ZFundFrom C on A.FundPK = C.FundPK 
		--where A.Date = @ValueDate and A.TrailsPK = C.EndDayTrailsFundPortfolioPK
		--and A.Status = 2
		--order by A.FundPK,A.InstrumentPK


		Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) 
		then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		INNER join (
				
Select A.FundPK,A.InstrumentPK,B.ClosePriceValue ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
where isnull(B.ClosePriceValue,0) > 0 and A.maxDate = @ValueDate

		)B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK 
		inner join #ZFundFrom C on A.FundPK = C.FundPK
		where A.Date = @ValueDate and A.TrailsPK = C.EndDayTrailsFundPortfolioPK
		and A.Status = 2

		--Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		--left join #StaticClosePrice B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
		--where A.Date = @ValueDate and A.TrailsPK = @maxEndDayTrailsFundPortfolioPK
		--and A.InstrumentPK in(
		--	select instrumentPK From #StaticClosePrice where FundPK = @CFundPK
		--) and A.FundPK = @CFundPK and A.status = 2

-- update TrxBuy di Investment untuk Sell / Rollover

declare @DTrxBuy int
declare @DInvestmentPK int
declare @DInstrumentPK int
declare @DFundPK int
declare @DDate datetime
declare @DNewIdentity bigint

DECLARE C CURSOR FOR 
select TrxBuy,InvestmentPK,B.InstrumentPK,B.FundPK,B.Date from Investment A
left join FundPosition B on A.TrxBuy = B.[Identity]
where B.Date = @valuedate and InstrumentTypePK not in (1,4,16) and StatusInvestment in (1,2) and TrxType in (2,3)
Open C
Fetch Next From C
Into @DTrxBuy,@DInvestmentPK,@DInstrumentPK,@DFundPK,@DDate     
While @@FETCH_STATUS = 0
BEGIN   

set @DNewIdentity = 0
select @DNewIdentity = [Identity] from FundPosition where InstrumentPK = @DInstrumentPK and FundPK = @DFundPK and Date = @DDate and status in (1,2)

update Investment set TrxBuy = @DNewIdentity where InvestmentPK = @DInvestmentPK and StatusInvestment in (1,2)

Fetch next From C Into @DTrxBuy,@DInvestmentPK,@DInstrumentPK,@DFundPK,@DDate                  
END
Close C
Deallocate C  

	
Update A set BitValidate = 1, LogMessages = B.ID + ' - ' + B.Name from EndDayTrailsFundPortfolio A  
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
where A.FundPK in (select FundPK from #ZFundFrom)  and A.Status = 2 and ValueDate = @ValueDate       

--Fetch next From A Into @CFundPK
--END
--Close A
--Deallocate A


                        Select (select max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio) LastPK
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public string PTPBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
 BEGIN  
SET NOCOUNT ON         
DROP TABLE IF EXISTS dbo.#Text
DROP TABLE IF EXISTS dbo.#TaxAmount

create table #TaxAmount(      
InvestmentPK int,
TaxAmount [nvarchar](1000)  NULL,
TotalAmount [nvarchar](1000)  NULL          
)                        
        
truncate table #TaxAmount      


create table #Text(      
InvestmentPK int,
[ResultText] [nvarchar](max)  NULL          
)                        
        
truncate table #Text      
insert into #Text(InvestmentPK,ResultText)     
select 0,'Transaction Status|TA Reference ID|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|TA Reference No.|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'      
        
insert into #Text(InvestmentPK,ResultText) 
Select  A.InvestmentPK,
'NEWM' --1
+ '|' + ''
+ '|' + '1'
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
+ '|' + @CompanyID
+ '|' + isnull(A.BrokerCode,'')
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
+ '|' + cast(isnull(A.TrxType,'') as nvarchar)
+ '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
+ '|' + case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
+ '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) 
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + '0'
+ '|' + case when A.CapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,0)),'')as nvarchar) end 
+ '|' + case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,0)),'')as nvarchar) end 
+ '|' + case when A.TrxType = 1 then cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,0)) as nvarchar) else 'Tax Amount' end
+ '|' + case when A.TrxType = 1 then case when A.TotalAmount = 0 then '' else cast(isnull(cast(isnull(sum(A.DonePrice * A.Quantity)/100,0)  + isnull(A.InterestAmount,0) - isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal(30,0)),'') as nvarchar) end else 'Total Amount' end
+ '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end             
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankAccountNo,'')))) end              
+ '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end 
+ '|' + case when A.StatutoryType = 0 then '2' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.StatutoryType,'2')))) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))
+ '|' + '' 
from (      
select A.InvestmentPK,A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK in (3,8,9,15) then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,C.NPWP BankAccountNo ,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentTrType from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
left join InvestmentTaxDataAcq G on A.InvestmentPK = G.InvestmentPK and G.AcqNo = 1
where    
A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15) 
" + _paramSettlementPK + @" 
and A.statusdealing = 2 

)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentPK,A.InvestmentTrType
order by A.ValueDate Asc

								
						

declare @counter int
set @counter = 1
while (@counter <= 30)
begin
	update A set A.ResultText = A.ResultText
	+ case when B.TrxType = 1 then '' else 
	+ '|' + case when B.TrxType = 1 then '' else '2' end  
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(B.Reference,'')))) end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.DoneAmount = 0 then '' else cast(isnull(cast(B.DoneAmount as decimal(30,0)), '')as nvarchar) end end 
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.AcqDate, 112),'')))) end    
	+ '|' + case when B.TrxType = 1 then '' else case when B.AcqPrice = 0 then '' else cast(isnull(cast(B.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
	+ '|' + case when B.TrxType = 1 then '' else case when B.AcqAmount = 0 then '' else cast(isnull(B.AcqAmount, '') as nvarchar) end end     
	+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxGainAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxGainAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.DaysOfHoldingInterest , 112),'')))) end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxInterestAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxInterestAmount,0) as decimal(30,0)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TotalTaxIncomeAmount = 0 then cast(0 as nvarchar) when (B.IncomeTaxGainAmount + B.IncomeTaxInterestAmount) < 0 then cast(0 as nvarchar) else cast(isnull(cast(B.TotalTaxIncomeAmount as decimal(30,0)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TaxExpensePercent = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TaxAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(ceiling(B.TaxAmount) as decimal(30,0)),'')as nvarchar) end  end 
	End  
	from #Text A
	left join InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
	where A.InvestmentPK != 0 and B.AcqNo = @counter

	set @counter = @counter + 1
end	


insert into #TaxAmount
select A.InvestmentPK,cast(sum(CEILING(B.TaxAmount)) as numeric(30,2)), cast(round(A.DoneAmount,0) + round(A.DoneAccruedInterest,0) - sum(CEILING(B.TaxAmount))  as numeric(30,2)) from Investment A
left join InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 and A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15)
" + _paramSettlementPK + @" 
and A.statusdealing = 2 
group by A.InvestmentPK,A.DoneAmount,A.DoneAccruedInterest

update A set ResultText = REPLACE(ResultText,'Tax Amount',B.TaxAmount) from #Text A 
left join #TaxAmount B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 

update A set ResultText = REPLACE(ResultText,'Total Amount',B.TotalAmount) from #Text A 
left join #TaxAmount B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 

select ResultText from #text 
END                                

";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Bond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Bond.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean GenerateReportFundAccounting(string _userID, FundAccountingRpt _FundAccountingRpt)
        {
            #region Fifo Bond Position
            if (_FundAccountingRpt.ReportName.Equals("Fifo Bond Position"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = "where A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }



                            cmd.CommandText = @"
                            select B.ID FundName,C.ID Instrument,AcqDate,AcqPrice,sum(A.RemaningVolume) Volume from (
                            select FundPK,InstrumentPK,AcqDate,AcqPrice,case when Remainingvolume is null then AcqVolume else RemainingVolume end RemaningVolume from FiFoBondPosition where (RemainingVolume is null and InvestmentPK = 0) or RemainingVolume != 0
                            union all
                            select FundPK,InstrumentPK,AcqDate,AcqPrice,RemainingVolume from FifoBondPositionTemp where RemainingVolume != 0
                            union all
                            select FundPK,InstrumentPK,SettlementDate,DonePrice,DoneVolume from Investment where ValueDate > '2020-06-19' and TrxType = 1 and statussettlement = 2 and statusdealing = 2 and statusinvestment = 2 and InstrumentTypePK in (2,3,8,9,13,15) and InvestmentPK not in ( 
                            select InvestmentBuyPK from FifoBondPositionTemp
                            )
                            ) A 
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2) " + _paramFundFrom + @"
                            group by B.ID,C.ID,AcqDate,AcqPrice
                            ";

                            cmd.CommandTimeout = 0;

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FifoBondPosition" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FifoBondPosition" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fifo Bond Position");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FifoBondPosition> rList = new List<FifoBondPosition>();
                                        while (dr0.Read())
                                        {

                                            FifoBondPosition rSingle = new FifoBondPosition();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Instrument = Convert.ToString(dr0["Instrument"]);
                                            rSingle.Volume = Convert.ToDecimal(dr0["Volume"]);
                                            rSingle.AcqPrice = Convert.ToDecimal(dr0["AcqPrice"]);
                                            rSingle.AcqDate = Convert.ToDateTime(dr0["AcqDate"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.FundName } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;











                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);



                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;

                                            incRowExcel = incRowExcel + 2; ;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 2].Value = "Instrument";
                                            worksheet.Cells[incRowExcel, 3].Value = "Volume";
                                            worksheet.Cells[incRowExcel, 4].Value = "Acq Price";
                                            worksheet.Cells[incRowExcel, 5].Value = "Acq Date";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Instrument;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Volume;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AcqPrice;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.AcqDate).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;



                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }



                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 26;
                                        worksheet.Column(3).Width = 26;
                                        worksheet.Column(4).Width = 26;
                                        worksheet.Column(5).Width = 26;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Fifo Bond Position";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Fund Portfolio
            if (_FundAccountingRpt.ReportName.Equals("Fund Portfolio"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                   @"
                                declare @InterestDays int

                                SELECT  
                                @InterestDays = DATEDIFF(DAY, valuedate, @valuedate)  
                                FROM enddaytrails  
                                WHERE enddaytrailspk = (SELECT  
                                MAX(enddaytrailspk)  
                                FROM enddaytrails  
                                WHERE valuedate < @valuedate  
                                AND status = 2)  

                                select FP.FundPK , FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
                                F.ID FundID,F.Name FundName,case when I.InstrumentTypePK in (1,4,16) then isnull(I.BloombergISIN,'') else I.ID end InstrumentID,I.Name InstrumentName,FP.MaturityDate MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
                                FP.ClosePrice ClosePrice
                                ,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) / case when @InterestDays = 0 then 1 else  @InterestDays end 
                                else 0 end AccrualHarian
                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) / case when @InterestDays = 0 then 1 else  @InterestDays end 
                                * datediff(day,FP.AcqDate,@ValueDate )
                                else FP.InterestPercent end Accrual
                                ,FP.InterestPercent 
                                ,FP.MarketValue MarketValue,
                                sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
                                case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav , sum(FP.Balance/100) Lot ,case when I.InstrumentTypePK not in (5,6) then case when FP.CostValue = 0 then 0 else sum((FP.MarketValue - FP.CostValue))/FP.CostValue * 100 end else 0 end PercentFR 

                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) * I.TaxExpensePercent/100
                                else 0 end TaxAccInterest
                                ,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance)
                                else 0 end AccInterestBond
                                ,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) * I.TaxExpensePercent/100
                                else 0 end TaxAccInterestBond

								,case when isnull(C.AUM,0) = 0 then 0 else case when I.InstrumentTypePK in (5,10) then isnull(sum(FP.Balance / C.AUM),0) * 100 else isnull(sum(FP.MarketValue / C.AUM),0) * 100 end end PercentPorto
                                ,O.SInvestID,O.Name BankName,N.ID BranchID,FP.AcqDate,case when I.InstrumentTypePK in (1,4,16) then I.BloombergCode when I.InstrumentTypePK in (2,3,8,9,11,13,14,15) then I.ISIN else '' end ISINCode
                                from fundposition FP   
                                left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
                                left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
                                left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
                                left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status in (1,2)  
                                left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType' and M.status in (1,2)  
                                left join BankBranch N on FP.BankBranchPK = N.BankBranchPK and N.status in (1,2)
                                left join Bank O on N.BankPK = O.BankPK and O.status in (1,2)
								left join CloseNAV C on FP.FundPK = C.FundPK and C.Status in (1,2) and C.Date = 
								( select max(date) from CloseNAV where FundPK = Fp.FundPK and date <= @Valuedate and status in (1,2))
                                where FP.status in (1,2)  and FP.Date = @ValueDate  
								" + _paramFund + @"
                                group by FP.FundPK,Fp.AvgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
                                FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne,O.SInvestID,O.Name,N.ID,FP.AcqDate,I.TaxExpensePercent,
	                            I.BloombergCode,I.ISIN,I.BloombergISIN,C.AUM
                                order by I.ID
                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundPortfolio" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundPortfolio" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "PortfolioValuationReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Portfolio Valuation Report");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PortfolioValuationReport> rList = new List<PortfolioValuationReport>();
                                        while (dr0.Read())
                                        {
                                            PortfolioValuationReport rSingle = new PortfolioValuationReport();
                                            rSingle.SecurityCode = Convert.ToString(dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]));
                                            rSingle.SecurityDescription = Convert.ToString(dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]));
                                            rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentTypeName"]));
                                            rSingle.QtyOfUnit = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.Lot = Convert.ToDecimal(dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]));
                                            rSingle.AverageCost = Convert.ToDecimal(dr0["AvgPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AvgPrice"]));
                                            rSingle.BookValue = Convert.ToDecimal(dr0["CostValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CostValue"]));
                                            rSingle.MarketPrice = Convert.ToDecimal(dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]));
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]));
                                            rSingle.UnrealizedProfitLoss = Convert.ToDecimal(dr0["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealised"]));
                                            rSingle.PercentFR = Convert.ToDecimal(dr0["PercentFR"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentFR"]));
                                            rSingle.BICode = Convert.ToString(dr0["SInvestID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SInvestID"]));
                                            rSingle.Branch = Convert.ToString(dr0["BranchID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BranchID"]));
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.TradeDate = Convert.ToString(dr0["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AcqDate"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.RateGross = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.AccIntTD = Convert.ToDecimal(dr0["AccrualHarian"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccrualHarian"]));
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]));
                                            rSingle.Fund = Convert.ToString(dr0["FundPK"]);
                                            rSingle.ISINCode = Convert.ToString(dr0["ISINCode"]);
                                            rSingle.TaxExpensePercent = Convert.ToDecimal(dr0["TaxAccInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAccInterest"]));
                                            rSingle.AccInterestBond = Convert.ToDecimal(dr0["AccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccInterestBond"]));
                                            rSingle.TaxAccInterestBond = Convert.ToDecimal(dr0["TaxAccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAccInterestBond"]));
                                            rSingle.PercentOfNav = Convert.ToDecimal(dr0["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentOfNav"]));
                                            rSingle.PercentPorto = Convert.ToDecimal(dr0["PercentPorto"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         orderby r.FundName, r.InstrumentTypePK, r.Date ascending
                                         group r by new { r.Fund, r.FundName, r.InstrumentTypeName, r.Date, r.InstrumentTypePK } into rGroup
                                         select rGroup;


                                        int incRowExcel = 0;

                                        incRowExcel = incRowExcel + 3;


                                        int _cash = 0;
                                        int _endCash = 0;



                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundName(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


                                            _cash = incRowExcel;
                                            worksheet.Cells[incRowExcel, 5].Value = "CASH AT BANK :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_TotalAccountBalanceByFundPK(rsHeader.Key.Fund, 2, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "SINVEST CODE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundSinvestCode(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING PAYMENT :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_OutstandingPaymentByFundPKByDate(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND TYPE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundType(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            _endCash = incRowExcel;
                                            worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING RECEIVABLE :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_OutstandingReceivableByFundPKByDate(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;



                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy");
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "CASH PROJECTION :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _cash + ":F" + _endCash + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;




                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT TYPE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentTypeName;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastNav(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 5].Value = "AUM :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastAUMFromCloseNav(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 2;

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16) //Equity
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 3].Value = "Bloomberg Name";
                                                worksheet.Cells[incRowExcel, 4].Value = "Securities Description";
                                                worksheet.Cells[incRowExcel, 5].Value = "Qty Of Unit";
                                                worksheet.Cells[incRowExcel, 6].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 7].Value = "Lot";
                                                worksheet.Cells[incRowExcel, 8].Value = "Average Cost";
                                                worksheet.Cells[incRowExcel, 9].Value = "Book Value";
                                                worksheet.Cells[incRowExcel, 10].Value = "Market Price";
                                                worksheet.Cells[incRowExcel, 11].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 12].Value = "Market Value";
                                                worksheet.Cells[incRowExcel, 13].Value = "Unrealized Profit/(Loss)";
                                                worksheet.Cells[incRowExcel, 14].Value = "%fr P/L";
                                                worksheet.Cells[incRowExcel, 15].Value = "%fr Portofolio";


                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            }

                                            else if (rsHeader.Key.InstrumentTypePK == 5) //Deposito
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                worksheet.Cells[incRowExcel, 2].Value = "TIME DEPOSIT";
                                                worksheet.Cells[incRowExcel, 3].Value = "BI CODE";
                                                worksheet.Cells[incRowExcel, 4].Value = "BRANCH";
                                                worksheet.Cells[incRowExcel, 5].Value = "Nominal";
                                                worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 8].Value = "Tax Accrued Interest";
                                                worksheet.Cells[incRowExcel, 9].Value = "Rate (Gross)";
                                                worksheet.Cells[incRowExcel, 10].Value = "Acc Int.TD";
                                                worksheet.Cells[incRowExcel, 11].Value = "% fr TA";
                                                worksheet.Cells[incRowExcel, 12].Value = "%fr Portofolio";

                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            }

                                            else
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 3].Value = "ISIN";
                                                worksheet.Cells[incRowExcel, 4].Value = "Securities Description";
                                                worksheet.Cells[incRowExcel, 5].Value = "Qty Of Unit";
                                                worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Tax Accrued Interest";
                                                worksheet.Cells[incRowExcel, 8].Value = "Accrued Interest";
                                                worksheet.Cells[incRowExcel, 9].Value = "Average Cost";
                                                worksheet.Cells[incRowExcel, 10].Value = "Book Value";
                                                worksheet.Cells[incRowExcel, 11].Value = "Market Price";
                                                worksheet.Cells[incRowExcel, 12].Value = "Market Value";
                                                worksheet.Cells[incRowExcel, 13].Value = "Unrealized Profit/(Loss)";
                                                worksheet.Cells[incRowExcel, 14].Value = "%fr P/L";
                                                worksheet.Cells[incRowExcel, 15].Value = "%fr Portofolio";


                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                            }

                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.ISINCode;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.SecurityDescription;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.QtyOfUnit;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Lot;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.AverageCost;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketPrice;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.UnrealizedProfitLoss;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.PercentPorto;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";


                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                }

                                                else if (rsHeader.Key.InstrumentTypePK == 5)
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BICode;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Branch;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Nominal;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.TradeDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.TaxExpensePercent;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.RateGross;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.AccIntTD;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.PercentPorto;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.ISINCode;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.SecurityDescription;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.QtyOfUnit;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.TaxAccInterestBond;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.AccInterestBond;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.AverageCost;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.MarketPrice;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.UnrealizedProfitLoss;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.PercentPorto;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";


                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 14].Formula = "M" + incRowExcel + "/I" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Calculate();


                                            }
                                            else if (rsHeader.Key.InstrumentTypePK == 5)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();

                                            }
                                            else
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 14].Formula = "M" + incRowExcel + "/J" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Calculate();
                                            }

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 15];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 50;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 22;
                                        worksheet.Column(11).Width = 22;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 25;
                                        worksheet.Column(15).Width = 25;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 PORTFOLIO VALUATION REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Report Bloomberg
            if (_FundAccountingRpt.ReportName.Equals("Report Bloomberg"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            cmd.CommandText = @"
                            declare @CashAmountJOurnal table
                            (
                            FundPK int,
                            date datetime,
                            Amount numeric(22,6)
                            )


                            insert into @CashAmountJOurnal 
                            select FundPK,@Date,isnull(dbo.FGetGroupFundJournalAccountBalanceByFundPKNew(@Date,2,FundPK),0) from Fund where Status in (1,2) --and FundPK = @FundPK


                            select * from (                            


                            select A.FundPK,100 InstrumentTypePK,C.BloombergCode BloombergCodeFund,'IDR Currency' BloombergIsin,'' BloombergCodeInstrument,'IDR Currency' InstrumentName,
                            isnull(sum(B.Balance ),0) + isnull(sum(A.Amount),0) Balance,0 ClosePrice,A.Date,isnull(sum(B.MarketValue),0) + isnull(sum(A.Amount),0) MarketValue,0 AvgPrice,
							isnull(CountFundPosition,0) CountFundPosition from @CashAmountJOurnal A
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
							left join (
								select A.FundPK,isnull(sum(A.Balance ),0) Balance,isnull(sum(A.MarketValue),0) MarketValue from FundPosition A 
								left join instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
								where A.Status = 2 and A.Date = @date and C.InstrumentTypePK = 5 " + _paramFund + @"
								--and A.FundPK = @FundPK
								group by A.FundPK,C.InstrumentTypePK,A.Date
							) B on A.FundPK = B.FundPK
							left join (
								select count(*) CountFundPosition, A.FundPK from FundPosition A
								left join instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
								where date = @Date and C.InstrumentTypePK not in (4,5,16) and A.status = 2 
								group by A.FundPK
							) D on A.FundPK = D.FundPK
							where 1 = 1 " + _paramFund + @"
							--and A.FundPK = @FundPK
							group by A.FundPK,A.date,D.CountFundPosition,C.BloombergCode

                            Union All

                            select A.FundPK,C.InstrumentTypePK,B.BloombergCode BloombergCodeFund,C.BloombergIsin,C.BloombergCode BloombergCodeInstrument,C.Name InstrumentName,
                            isnull(A.Balance,0) Balance,isnull(A.ClosePrice,0),A.Date,isnull(A.MarketValue,0),isnull(A.AvgPrice,0),1 CountFundPosition from FundPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            where date = @Date and C.InstrumentTypePK not in (4,5,16) and A.status = 2 
                            " + _paramFund + @"
                            --and A.FundPK = @FundPK

                            )A
                            order by FundPK,InstrumentTypePK


                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                            //cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportBloomberg" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportBloomberg" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Bloomberg");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportBloomberg> rList = new List<ReportBloomberg>();
                                        while (dr0.Read())
                                        {

                                            ReportBloomberg rSingle = new ReportBloomberg();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            rSingle.CountFundPosition = Convert.ToInt32(dr0["CountFundPosition"]);
                                            rSingle.BloombergCodeFund = Convert.ToString(dr0["BloombergCodeFund"]);
                                            rSingle.BloombergIsin = Convert.ToString(dr0["BloombergIsin"]);
                                            rSingle.BloombergCodeInstrument = Convert.ToString(dr0["BloombergCodeInstrument"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"]);
                                            rSingle.AvgPrice = Convert.ToDecimal(dr0["AvgPrice"]);
                                            rList.Add(rSingle);

                                        }

                                        int incRowExcel = 0;


                                        incRowExcel++;


                                        worksheet.Cells[incRowExcel, 1].Value = "PORTFOLIO NAME";
                                        worksheet.Cells[incRowExcel, 2].Value = "SECURITY_ID";
                                        worksheet.Cells[incRowExcel, 3].Value = "BBGID";
                                        worksheet.Cells[incRowExcel, 4].Value = "SECURITY NAME";
                                        worksheet.Cells[incRowExcel, 5].Value = "QUANTITY";
                                        worksheet.Cells[incRowExcel, 6].Value = "WEIGHT";
                                        worksheet.Cells[incRowExcel, 7].Value = "MKT PX";
                                        worksheet.Cells[incRowExcel, 8].Value = "DATE";
                                        worksheet.Cells[incRowExcel, 9].Value = "MARKET VALUE";
                                        worksheet.Cells[incRowExcel, 10].Value = "COST PRICE";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Size = 12;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 5].Value = "POSITION";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Size = 12;


                                        var GroupByReference =
                                                from r in rList
                                                orderby r.FundPK ascending
                                                group r by new { r.FundPK } into rGroup
                                                select rGroup;


                                        incRowExcel = incRowExcel + 1;


                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            int first = incRowExcel;

                                            //int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsDetail.CountFundPosition != 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.BloombergCodeFund;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.BloombergIsin;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BloombergCodeInstrument;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Balance;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    //worksheet.Cells[incRowExcel, 6].Value = rsDetail.CostValue;
                                                    //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;



                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Date;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "m/d/yy;@";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.AvgPrice;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    _endRowDetail = incRowExcel;
                                                    //no++;
                                                    incRowExcel++;
                                                }



                                            }

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 10, 10];
                                        worksheet.Column(1).Width = 28;
                                        worksheet.Column(2).Width = 36;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 56;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 10;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 15;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Unrealized Detail";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Portfolio Valuation Report
            else if (_FundAccountingRpt.ReportName.Equals("Portfolio Valuation Report"))
            {
                try
                {

                    string filePath = Tools.ReportsPath + "PortfolioValuationReport" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "PortfolioValuationReport" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "03\\" + "Comprehensive_PVR.xlsx", filePath, true);

                    FileInfo excelFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(excelFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["RD"];
                        ExcelWorksheet worksheet1 = package.Workbook.Worksheets["CM"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from FundPosition A
                                left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                where  A.FundPK  = @FundPK and A.status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.FundPosition WHERE Date <= @ValueDate 
                                AND fundPK = @FundPK and status  = 2) and B.MaturityDate >= @ValueDate
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        int _EndAssetRow = 0;
                                        int _StartLiabilitiesRow = 0;
                                        int _EndLiabilitiesRow = 0;
                                        int _startAsset = 0;
                                        int _RowNominal = 0;
                                        int _rowMarketValue1 = 0;
                                        int _rowMarketValue2 = 0;
                                        int _this = 0;
                                        int _StartEquity = 0;
                                        int _StartBond = 0;
                                        int _StartDeposito = 0;
                                        int _EndEquity = 0;
                                        int _EndBond = 0;
                                        int _EndDeposito = 0;
                                        bool _row1 = false;
                                        bool _row2 = false;
                                        bool _row3 = false;
                                        bool _row4 = false;
                                        int _no = 0;
                                        int _counter = 1;
                                        int _rowEquity = 0;
                                        int _rowBond = 0;
                                        int _rowDeposito = 0;
                                        int _rowTotalCash = 0;
                                        //ATUR DATA GROUPINGNYA DULU
                                        int incRowExcel = 1;
                                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                                        {
                                            DbCon.Open();
                                            using (SqlCommand cmd = DbCon.CreateCommand())
                                            {

                                                cmd.CommandText =
                                                    @"
                                Declare @BeginDate datetime
                                Declare @PeriodPK int

                                select @BeginDate = [dbo].[FgetMaxDatePeriodClosingByFundPK](@ValueDate,@FundPK)
                                select @PeriodPK = PeriodPK from period Where status = 2 and @ValueDate Between Datefrom and DateTo

                                SELECT A.Name, SUM(B.Balance) AS Balance,B.EffectiveDate,DATEADD(d,150,B.EffectiveDate) HariBursa,A.Type FROM FundJournalAccount A, (    
                                SELECT A.FundJournalAccountPK, B.Posted, B.Reversed, SUM(CASE when C.[Type] = 1 THEN A.BaseDebit-A.BaseCredit    
                                ELSE A.BaseDebit-A.BaseCredit END) AS Balance,     
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,    
                                C.ParentPK7, C.ParentPK8, C.ParentPK9,F.EffectiveDate   
                                FROM [FundJournalDetail] A     
                                INNER JOIN [FundJournal] B ON A.FundJournalPK = B.FundJournalPK    
                                INNER JOIN FundJournalAccount C ON A.FundJournalAccountPK = C.FundJournalAccountPK and C.status in (1,2)   
                                INNER JOIN Fund F ON A.FundPK = F.FundPK  and F.status in (1,2)  
                                WHERE B.ValueDate between @BeginDate and @ValueDate
                                And A.FundPK = @FundPK
                                and B.Status = 2 and B.Posted = 1 and B.Reversed = 0
                                and A.FundJournalAccountPK not in (6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,204,205,203,109,110,111,112,114)
                                    GROUP BY A.FundJournalAccountPK, B.Posted, B.Reversed,C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4,   
                                    C.ParentPK5, C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9 ,EffectiveDate
                                    ) AS B 
                                    WHERE A.[Type] <= 2 AND A.Show = 1 AND (B.FundJournalAccountPK = A.FundJournalAccountPK    
                                    OR B.ParentPK1 = A.FundJournalAccountPK OR B.ParentPK2 = A.FundJournalAccountPK     
                                    OR B.ParentPK3 = A.FundJournalAccountPK OR B.ParentPK4 = A.FundJournalAccountPK     
                                    OR B.ParentPK5 = A.FundJournalAccountPK OR B.ParentPK6 = A.FundJournalAccountPK    
                                    OR B.ParentPK7 = A.FundJournalAccountPK OR B.ParentPK8 = A.FundJournalAccountPK      
                                    OR B.ParentPK9 = A.FundJournalAccountPK) and A.status = 2
                                     and A.Groups in (0)
                                GROUP BY A.ID, A.Name,B.EffectiveDate,A.Type
                                    
                                union all
                                select top 1 'ADJUSTMENT' Name, 0 Balance, EffectiveDate,DATEADD(d,150,EffectiveDate),3
                                from Fund 
                                where FundPK = @FundPK and status = 2

                                 ";
                                                cmd.CommandTimeout = 0;
                                                cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);
                                                cmd.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                                {

                                                    //Equity
                                                    //-----------------------------------
                                                    using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                                    {
                                                        DbCon1.Open();
                                                        using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                        {
                                                            //                                              
                                                            cmd1.CommandText =
                                                            @"
                                                select isnull(B.Name,'') FundName,isnull(C.ID,'') SecuritiesCode,isnull(C.Name,'') SecuritiesDescription, 
                                                isnull(A.Balance,0) QtyOfUnit, isnull(A.Balance,0) / 100 Lot, 
                                                isnull(A.AvgPrice,0) AvgCost,
                                                isnull(A.Balance,0) * isnull(A.AvgPrice,0) BookValue,
                                                isnull(A.ClosePrice,0) MarketPrice,
                                                isnull(A.Balance,0) * isnull(A.ClosePrice,0) MarketValue,
                                                (isnull(A.Balance,0) * isnull(A.ClosePrice,0)) - (isnull(A.Balance,0) * isnull(A.AvgPrice,0))  Unrealised,
                                                case when (isnull(A.Balance,0) * isnull(A.AvgPrice,0)) > 0 then
                                                ((isnull(A.Balance,0) * isnull(A.ClosePrice,0)) - (isnull(A.Balance,0) * isnull(A.AvgPrice,0))) /  (isnull(A.Balance,0) * isnull(A.AvgPrice,0)) * 100 
                                                else 0 end UnrealisedPercent,
                                                '' ByMarketCap,
                                                isnull(D.ID,'') SubSector,
                                                isnull(G.IndustryGroupIndex,'') Sector,
												isnull(F.Name,'') Issuer,
												isnull(G.Weight,0) PercentJCI,
												isnull(G.Y1,0) Beta
                                                from fundPosition A
                                                left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                                                left join SubSector D on C.SectorPK = D.SubSectorPK and D.status in (1,2)
                                                left join Sector E on D.SectorPK = E.SectorPK and E.status in (1,2)
												left join Issuer F on C.IssuerPK = F.IssuerPK and F.Status in (1,2)
												left join BloombergEquity G on C.ID = G.TickerCode and A.Date = G.Date and G.status in (1,2)
                                                where A.status = 2 and A.Date = @Date
                                                and A.FundPK= @FundPK
                                                and C.InstrumentTypePK in (1,4,16)
                                                order by C.ID
                                                ";
                                                            cmd1.CommandTimeout = 0;

                                                            cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                            cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                            cmd1.ExecuteNonQuery();


                                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                            {
                                                                if (dr1.HasRows)
                                                                    _row2 = dr1.HasRows;
                                                                {
                                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                                    {
                                                                        _this = incRowExcel;
                                                                        worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd-MMM-yy");
                                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Size = 14;

                                                                        incRowExcel++;
                                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_FundName(_FundAccountingRpt.FundFrom); //rsHeader1.Key.FundName;
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        //ATUR DATA GROUPINGNYA DULU
                                                                        List<PVRRpt> rList1 = new List<PVRRpt>();
                                                                        while (dr1.Read())
                                                                        {
                                                                            PVRRpt rSingle1 = new PVRRpt();
                                                                            rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                                            rSingle1.InstrumentID = Convert.ToString(dr1["SecuritiesCode"]);
                                                                            rSingle1.InstrumentName = dr1["SecuritiesDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["SecuritiesDescription"]);
                                                                            rSingle1.UnitQuantity = dr1["QtyOfUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["QtyOfUnit"]);
                                                                            rSingle1.AverageCost = dr1["AvgCost"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AvgCost"]);
                                                                            rSingle1.BookValue = dr1["BookValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["BookValue"]);
                                                                            rSingle1.MarketPrice = Convert.ToDecimal(dr1["MarketPrice"]);
                                                                            rSingle1.MarketValue = Convert.ToDecimal(dr1["MarketValue"]);
                                                                            rSingle1.UnrealizedProfitLoss = Convert.ToDecimal(dr1["Unrealised"]);
                                                                            rSingle1.PercentProfilLoss = Convert.ToDecimal(dr1["UnrealisedPercent"]);
                                                                            rSingle1.Lot = Convert.ToDecimal(dr1["Lot"]);
                                                                            rSingle1.MarketCap = Convert.ToString(dr1["ByMarketCap"]);
                                                                            rSingle1.Sector = Convert.ToString(dr1["Sector"]);
                                                                            rSingle1.Issuer = Convert.ToString(dr1["Issuer"]);
                                                                            rSingle1.PercentJCI = Convert.ToDecimal(dr1["PercentJCI"]);
                                                                            rSingle1.Beta = Convert.ToDecimal(dr1["Beta"]);

                                                                            rList1.Add(rSingle1);

                                                                        }


                                                                        var QueryByFundID1 =
                                                                            from r1 in rList1
                                                                            group r1 by new { r1.FundName } into rGroup1
                                                                            select rGroup1;
                                                                        incRowExcel = 1;
                                                                        int _StartRow = incRowExcel + 1;
                                                                        foreach (var rsHeader1 in QueryByFundID1)
                                                                        {


                                                                            incRowExcel = incRowExcel + 2;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                            worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                                            worksheet.Cells[incRowExcel, 3].Value = "Securities Description";
                                                                            worksheet.Cells[incRowExcel, 4].Value = "Qty Of Unit";
                                                                            worksheet.Cells[incRowExcel, 5].Value = "Lot";
                                                                            worksheet.Cells[incRowExcel, 6].Value = "Average Cost";
                                                                            worksheet.Cells[incRowExcel, 7].Value = "Book Value";
                                                                            worksheet.Cells[incRowExcel, 8].Value = "Market Price";
                                                                            worksheet.Cells[incRowExcel, 9].Value = "Market Value";
                                                                            worksheet.Cells[incRowExcel, 10].Value = "Unrealized Profit/(Loss)";
                                                                            worksheet.Cells[incRowExcel, 11].Value = "% fr P/L";
                                                                            worksheet.Cells[incRowExcel, 12].Value = "BY MARKET CAP";
                                                                            worksheet.Cells[incRowExcel, 13].Value = "ISSUER";
                                                                            worksheet.Cells[incRowExcel, 14].Value = "BY SECTOR";
                                                                            worksheet.Cells[incRowExcel, 15].Value = "% fr NAV";
                                                                            worksheet.Cells[incRowExcel, 16].Value = "% JCI";
                                                                            worksheet.Cells[incRowExcel, 17].Value = "Beta";
                                                                            worksheet.Cells[incRowExcel, 18].Value = "% Segment";
                                                                            worksheet.Cells[incRowExcel, 19].Value = "Compliance";
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Font.Bold = true;

                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                            incRowExcel++;
                                                                            //area header

                                                                            _no = 1;
                                                                            int _startRowDetail = incRowExcel;
                                                                            int _endRowDetail = 0;
                                                                            _StartEquity = incRowExcel;
                                                                            foreach (var rsDetail1 in rsHeader1)
                                                                            {

                                                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells["D" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["N" + incRowExcel + ":R" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail1.InstrumentID;
                                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.InstrumentName;
                                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                                                worksheet.Cells[incRowExcel, 4].Formula = "E" + incRowExcel + "*100" + "";
                                                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Lot;
                                                                                worksheet.Cells[incRowExcel, 6].Formula = "G" + incRowExcel + "/D" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail1.BookValue;
                                                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail1.MarketPrice;
                                                                                worksheet.Cells[incRowExcel, 9].Formula = "H" + incRowExcel + "*D" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 10].Formula = "I" + incRowExcel + "-G" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 11].Formula = "J" + incRowExcel + "/G" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.00 %";

                                                                                worksheet.Cells[incRowExcel, 12].Formula = "IF(P" + incRowExcel + ">= 1.5%, " + '"' + "BIG CAP" + '"' + ",IF(AND(P" + incRowExcel + "< 0.5%," + "P" + incRowExcel + ">= 0%)," + '"' + "SMALL CAP" + '"' + ',' + '"' + "MID CAP" + '"' + "))";
                                                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail1.Issuer;
                                                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail1.Sector;
                                                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                                worksheet.Cells[incRowExcel, 15].Formula = "I" + incRowExcel + "/G2" + "";
                                                                                worksheet.Cells[incRowExcel, 15].Calculate();
                                                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "0.00 %";

                                                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail1.PercentJCI / 100;
                                                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail1.Beta;
                                                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "0.00";
                                                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Numberformat.Format = "#,##";
                                                                                worksheet.Cells[incRowExcel, 19].Formula = "IF(O" + incRowExcel + "> 10%, " + '"' + "Uncomply" + '"' + "," + '"' + '"' + ")";
                                                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["S" + incRowExcel + ":S" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                                                worksheet.Cells[incRowExcel, 19].Calculate();
                                                                                //ThickBox Border
                                                                                _endRowDetail = incRowExcel;
                                                                                incRowExcel++;
                                                                                _no++;
                                                                            }

                                                                            incRowExcel++;
                                                                            _EndEquity = incRowExcel;

                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL EQUITY";

                                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                                                            _rowMarketValue1 = incRowExcel;
                                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 9].Calculate();

                                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(J" + incRowExcel + "/G" + incRowExcel + ")";
                                                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 11].Calculate();

                                                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 16].Calculate();

                                                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 17].Calculate();

                                                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 18].Calculate();
                                                                            _rowEquity = incRowExcel;

                                                                            //worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Font.Bold = true;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;


                                                                            worksheet.Cells["A" + _EndEquity + ":S" + _EndEquity].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _EndEquity].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _EndEquity].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _EndEquity + ":S" + _EndEquity].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                        }


                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //incRowExcel = incRowExcel + 2;

                                                    //Bond
                                                    //-----------------------------------
                                                    using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                    {
                                                        DbCon2.Open();
                                                        using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                        {
                                                            //                                              
                                                            cmd2.CommandText =
                                                            @"
                                               
                                                            
                                                            select isnull(C.ID,'') SecuritiesCode,isnull(C.Name,'') SecuritiesDescription, 
                                                            sum(isnull(A.Balance,0)) QtyOfUnit, C.MaturityDate, 
                                                            isnull(A.AvgPrice,0) AvgCost,
                                                            sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0) BookValue,
                                                            isnull(A.ClosePrice,0) MarketPrice,
                                                            sum(isnull(A.Balance,0)) * isnull(A.ClosePrice,0) MarketValue,
                                                            (sum(isnull(A.Balance,0)) * isnull(A.ClosePrice,0)) - (sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0))  Unrealised,
                                                            case when (sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0)) > 0 then
                                                            ((sum(isnull(A.Balance,0)) * isnull(A.ClosePrice,0)) - (sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0))) /  (sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0)) * 100 else 0 end UnrealisedPercent,
                                                            isnull(D.Name,'') BondType,
                                                            isnull(F.Name,'') Issuer,
                                                            C.InterestPercent CouponRate,
                                                            case when C.InstrumentTypePK = 2 then 'Government Bond' else isnull(C.AnotherRating,'') end BondRating
                                                            from fundPosition A
                                                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                                                            left join instrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status in (1,2)
                                                            left join Issuer F on C.IssuerPK = F.IssuerPK and F.Status in (1,2)
                                                            where A.status = 2 
                                                            and A.Date = @Date
                                                            and A.FundPK= @FundPK
                                                            and C.InstrumentTypePK in (2,3,8,9,11,12,13,14,15)
                                                            group by C.ID,C.Name,C.MaturityDate,A.AvgPrice,A.ClosePrice,D.Name,F.Name,C.InterestPercent,C.AnotherRating,C.InstrumentTypePK
                                                            order by C.ID
                                                            ";
                                                            cmd2.CommandTimeout = 0;

                                                            cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                            cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                            cmd2.ExecuteNonQuery();


                                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                            {
                                                                if (dr2.HasRows)
                                                                {
                                                                    _row3 = dr2.HasRows;
                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                                    {

                                                                        //ATUR DATA GROUPINGNYA DULU
                                                                        List<PVRRpt> rList1 = new List<PVRRpt>();
                                                                        while (dr2.Read())
                                                                        {
                                                                            PVRRpt rSingle1 = new PVRRpt();
                                                                            rSingle1.InstrumentID = Convert.ToString(dr2["SecuritiesCode"]);
                                                                            rSingle1.InstrumentName = dr2["SecuritiesDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["SecuritiesDescription"]);
                                                                            rSingle1.UnitQuantity = dr2["QtyOfUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["QtyOfUnit"]);
                                                                            rSingle1.MaturityDate = Convert.ToString(dr2["MaturityDate"]);
                                                                            rSingle1.AverageCost = dr2["AvgCost"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["AvgCost"]);
                                                                            rSingle1.BookValue = dr2["BookValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["BookValue"]);
                                                                            rSingle1.MarketPrice = Convert.ToDecimal(dr2["MarketPrice"]);
                                                                            rSingle1.MarketValue = Convert.ToDecimal(dr2["MarketValue"]);
                                                                            rSingle1.UnrealizedProfitLoss = Convert.ToDecimal(dr2["Unrealised"]);
                                                                            rSingle1.PercentProfilLoss = Convert.ToDecimal(dr2["UnrealisedPercent"]);
                                                                            rSingle1.Issuer = Convert.ToString(dr2["Issuer"]);
                                                                            rSingle1.BondRating = Convert.ToString(dr2["BondRating"]);
                                                                            //rSingle1.PercentTA = Convert.ToDecimal(dr1["PercentTA"]);
                                                                            //rSingle1.PercentYTM = Convert.ToDecimal(dr0["PercentYTM"]);
                                                                            //rSingle1.MDur = Convert.ToDecimal(dr0["MDur"]);
                                                                            rSingle1.CouponRate = Convert.ToDecimal(dr2["CouponRate"]);
                                                                            //rSingle1.Compliance = Convert.ToDecimal(dr1["Compliance"]);
                                                                            //rSingle1.RatingObligasi = Convert.ToDecimal(dr0["RatingObligasi"]);
                                                                            //rSingle1.ComplianceIBPA = Convert.ToDecimal(dr0["ComplianceIBPA"]);
                                                                            rSingle1.BondType = Convert.ToString(dr2["BondType"]);

                                                                            rList1.Add(rSingle1);

                                                                        }


                                                                        var QueryByFundID1 =
                                                                            from r1 in rList1
                                                                            group r1 by new { } into rGroup1
                                                                            select rGroup1;

                                                                        incRowExcel = incRowExcel + 3;
                                                                        int _StartRow = incRowExcel + 1;
                                                                        foreach (var rsHeader1 in QueryByFundID1)
                                                                        {

                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                            worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                                            worksheet.Cells[incRowExcel, 3].Value = "Securities Description";
                                                                            worksheet.Cells[incRowExcel, 4].Value = "Qty Of Unit";
                                                                            worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                                            worksheet.Cells[incRowExcel, 6].Value = "Average Cost";
                                                                            worksheet.Cells[incRowExcel, 7].Value = "Book Value";
                                                                            worksheet.Cells[incRowExcel, 8].Value = "Market Price";
                                                                            worksheet.Cells[incRowExcel, 9].Value = "Market Value";
                                                                            worksheet.Cells[incRowExcel, 10].Value = "Unrealized Profit/(Loss)";
                                                                            worksheet.Cells[incRowExcel, 11].Value = "% fr P/L";
                                                                            worksheet.Cells[incRowExcel, 12].Value = "% fr NAV";
                                                                            worksheet.Cells[incRowExcel, 13].Value = "Issuer";
                                                                            worksheet.Cells[incRowExcel, 14].Value = "% YTM";
                                                                            worksheet.Cells[incRowExcel, 15].Value = "Coupon Rate";
                                                                            worksheet.Cells[incRowExcel, 16].Value = "Mdur";
                                                                            worksheet.Cells[incRowExcel, 17].Value = "Compliance Max. 10%";
                                                                            worksheet.Cells[incRowExcel, 18].Value = "Rating Obligasi";
                                                                            worksheet.Cells[incRowExcel, 19].Value = "Compliance IBPA";
                                                                            worksheet.Cells[incRowExcel, 20].Value = "Bonds Type";

                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Font.Bold = true;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                                            // Row C = 4

                                                                            incRowExcel = incRowExcel + 1;
                                                                            //area header
                                                                            _no = 1;
                                                                            int _startRowDetail1 = incRowExcel;
                                                                            int _endRowDetail1 = 0;
                                                                            _StartBond = incRowExcel;
                                                                            foreach (var rsDetail1 in rsHeader1)
                                                                            {
                                                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells["E" + incRowExcel + ":S" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["F" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail1.InstrumentID;
                                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.InstrumentName;
                                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.UnitQuantity;
                                                                                worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail1.MaturityDate);
                                                                                worksheet.Cells[incRowExcel, 6].Formula = "(G" + incRowExcel + "/D" + incRowExcel + ")" + "*100";
                                                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail1.BookValue / 100;
                                                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail1.MarketPrice;
                                                                                worksheet.Cells[incRowExcel, 9].Formula = "H" + incRowExcel + "*D" + incRowExcel + "/100";
                                                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                                                worksheet.Cells[incRowExcel, 10].Formula = "I" + incRowExcel + "-G" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                                                worksheet.Cells[incRowExcel, 11].Formula = "J" + incRowExcel + "/G" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 12].Formula = "I" + incRowExcel + "/C31";
                                                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail1.Issuer;
                                                                                worksheet.Cells[incRowExcel, 14].Formula = "IF(T" + incRowExcel + "= " + '"' + "Government Bond" + '"' + ",YIELD($A$1,E" + incRowExcel + ",O" + incRowExcel + ",H" + incRowExcel + ",100,2,1),YIELD($A$1,E" + incRowExcel + ",O" + incRowExcel + ",H" + incRowExcel + ",100,4,0))";
                                                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail1.CouponRate / 100;
                                                                                worksheet.Cells[incRowExcel, 16].Formula = "IF(T" + incRowExcel + "= " + '"' + "Government Bond" + '"' + ",MDURATION($A$1,E" + incRowExcel + ",O" + incRowExcel + ",N" + incRowExcel + ",2,1),MDURATION($A$1,E" + incRowExcel + ",O" + incRowExcel + ",N" + incRowExcel + ",4,0))";
                                                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["P" + incRowExcel + ":P" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                                                worksheet.Cells[incRowExcel, 16].Calculate();
                                                                                worksheet.Cells[incRowExcel, 17].Formula = "IF(L" + incRowExcel + "> 10%, " + '"' + "Uncomply" + '"' + "," + '"' + '"' + ")";
                                                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["P" + incRowExcel + ":P" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                                                worksheet.Cells[incRowExcel, 17].Calculate();
                                                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail1.BondRating;
                                                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 19].Value = "-";
                                                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail1.BondType;
                                                                                worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Numberformat.Format = "#,##";
                                                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "m/d/yyyy";
                                                                                worksheet.Cells["M" + incRowExcel + ":T" + incRowExcel].Style.Numberformat.Format = "#,##";

                                                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                                                _endRowDetail1 = incRowExcel;
                                                                                incRowExcel++;
                                                                                _no++;
                                                                            }

                                                                            int _EndRow = incRowExcel;
                                                                            _EndBond = incRowExcel;
                                                                            incRowExcel++;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                                            //worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Font.Bold = true;
                                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL BOND";


                                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail1 + ":D" + _endRowDetail1 + ")";
                                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail1 + ":G" + _endRowDetail1 + ")";
                                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                                                            _rowMarketValue2 = incRowExcel;
                                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail1 + ":I" + _endRowDetail1 + ")";
                                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 9].Calculate();

                                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail1 + ":J" + _endRowDetail1 + ")";
                                                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(J" + incRowExcel + "/G" + incRowExcel + ")";
                                                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                                                            _rowBond = incRowExcel;

                                                                            //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                                            //worksheet.Cells[incRowExcel, 12].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                                            //worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            //worksheet.Cells[incRowExcel, 12].Calculate();

                                                                            //worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                                            //worksheet.Cells[incRowExcel, 13].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                                            //worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            //worksheet.Cells[incRowExcel, 13].Calculate();

                                                                            int _endBondA = _EndBond + 1;
                                                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 14].Formula = "SUMPRODUCT(N" + _StartBond + ":N" + _EndBond + ",I" + _StartBond + ":I" + _EndBond + ")/I" + _endBondA;

                                                                            //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 14].Calculate();


                                                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 16].Formula = "SUMPRODUCT(P" + _StartBond + ":P" + _EndBond + ",I" + _StartBond + ":I" + _EndBond + ")/I" + _endBondA;

                                                                            //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 16].Calculate();


                                                                            worksheet.Cells["A" + _startRowDetail1 + ":T" + _EndRow].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _StartRow + ":T" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _StartRow + ":T" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRowDetail1 + ":T" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _StartRow + ":T" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _StartRow + ":T" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                        }


                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //incRowExcel = incRowExcel + 2;

                                                    //Deposito
                                                    //-----------------------------------
                                                    using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                    {
                                                        DbCon2.Open();
                                                        using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                        {
                                                            //                                              
                                                            cmd2.CommandText =
                                                            @"
                                                select 
                                                isnull(F.Name,'') SecuritiesCode,
                                                isnull(F.SInvestID,'') BiCode,
                                                isnull(E.ID,'') Branch,
                                                isnull(A.Balance,0) Nominal,
                                                A.AcqDate TradeDate,
                                                A.MaturityDate,
                                                A.InterestPercent Rate,
                                                [dbo].[Fgetdepositointerestaccrued] (@date,A.InstrumentPK,A.Balance,A.InterestDaysType,A.InterestPercent,A.AcqDate) AccruedInterest
                                                from fundPosition A
                                                left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                                                left join instrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status in (1,2)
                                                left join BankBranch E on A.BankBranchPK = E.BankBranchPK and E.status in (1,2)
                                                left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)
                                                where A.status = 2 and A.Date = @Date
                                                and A.FundPK= @FundPK and C.InstrumentTypePK in (5)
                                                order by F.Name
                                                ";
                                                            cmd2.CommandTimeout = 0;

                                                            cmd2.Parameters.AddWithValue("@date", _FundAccountingRpt.ValueDateFrom);
                                                            cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                            cmd2.ExecuteNonQuery();


                                                            using (SqlDataReader dr3 = cmd2.ExecuteReader())
                                                            {
                                                                if (dr3.HasRows)
                                                                {
                                                                    _row4 = dr3.HasRows;
                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                                    {

                                                                        //ATUR DATA GROUPINGNYA DULU
                                                                        List<PVRRpt> rList2 = new List<PVRRpt>();
                                                                        while (dr3.Read())
                                                                        {
                                                                            PVRRpt rSingle2 = new PVRRpt();
                                                                            rSingle2.TimeDeposit = Convert.ToString(dr3["SecuritiesCode"]);
                                                                            rSingle2.BICode = Convert.ToString(dr3["BICode"]);
                                                                            rSingle2.Branch = Convert.ToString(dr3["Branch"]);
                                                                            rSingle2.Nominal = Convert.ToDecimal(dr3["Nominal"]);
                                                                            rSingle2.TradeDate = Convert.ToString(dr3["TradeDate"]);
                                                                            rSingle2.MaturityDate = Convert.ToString(dr3["MaturityDate"]);
                                                                            rSingle2.Rate = Convert.ToDecimal(dr3["Rate"]);
                                                                            rSingle2.AccTD = Convert.ToDecimal(dr3["AccruedInterest"]);
                                                                            //rSingle2.PercentTA = Convert.ToDecimal(dr2["PercentTA"]);
                                                                            //rSingle2.MaturityAlert = Convert.ToString(dr2["MaturityAlert"]);
                                                                            rList2.Add(rSingle2);

                                                                        }


                                                                        var QueryByFundID2 =
                                                                            from r2 in rList2
                                                                            group r2 by new { } into rGroup2
                                                                            select rGroup2;

                                                                        incRowExcel = incRowExcel + 3;

                                                                        int _startRow = incRowExcel;
                                                                        foreach (var rsHeader2 in QueryByFundID2)
                                                                        {
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                                                            worksheet.Cells[incRowExcel, 2].Value = "TIME DEPOSITS";
                                                                            worksheet.Cells[incRowExcel, 3].Value = "BI CODE";
                                                                            worksheet.Cells[incRowExcel, 4].Value = "BRANCH";
                                                                            worksheet.Cells[incRowExcel, 5].Value = "Nominal";
                                                                            worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
                                                                            worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
                                                                            worksheet.Cells[incRowExcel, 8].Value = "Rate(Gross)";
                                                                            worksheet.Cells[incRowExcel, 9].Value = "Acc Int. TD(Net)";
                                                                            worksheet.Cells[incRowExcel, 10].Value = "%fr TA";
                                                                            worksheet.Cells[incRowExcel, 11].Value = "Mature Alert";
                                                                            incRowExcel++;

                                                                            // Row C = 4
                                                                            int RowCZ = incRowExcel;

                                                                            //area header
                                                                            _no = 1;
                                                                            int _startRowDetail = incRowExcel;
                                                                            int _endRowDetail = 0;
                                                                            _StartDeposito = incRowExcel;
                                                                            foreach (var rsDetail2 in rsHeader2)
                                                                            {
                                                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells["J" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.TimeDeposit;
                                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.BICode;
                                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail2.Branch;
                                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail2.Nominal;
                                                                                worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail2.TradeDate).ToString("dd-MMM-yy");
                                                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail2.MaturityDate).ToString("dd-MMM-yy");
                                                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 8].Value = Convert.ToDecimal(rsDetail2.Rate / 100).ToString("0.00 %");
                                                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 9].Formula = "((E" + incRowExcel + "*H" + incRowExcel + "*(A" + _this + "-F" + incRowExcel + "))/365)*0.8/100";
                                                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                                                worksheet.Cells[incRowExcel, 10].Formula = "E" + incRowExcel + "/G2";
                                                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 11].Formula = "IF(G" + incRowExcel + "-$A$1 <= 2, " + '"' + "MATURITY ALERT" + '"' + "," + '"' + '"' + ")";
                                                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.Font.Color.SetColor(Color.Red);

                                                                                _endRowDetail = incRowExcel;
                                                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Numberformat.Format = "#,##";
                                                                                worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.Numberformat.Format = "#,##";
                                                                                incRowExcel++;
                                                                                _no++;

                                                                            }
                                                                            _EndDeposito = incRowExcel;

                                                                            incRowExcel++;
                                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL DEPOSITO";

                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRow + ":K" + _startRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRow + ":K" + _startRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);

                                                                            _rowDeposito = incRowExcel;
                                                                            _RowNominal = incRowExcel;



                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 9].Calculate();

                                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                                                            //worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;

                                                                            incRowExcel++;
                                                                        }


                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //hitungan total
                                                    //---------------------------------
                                                    if (dr0.HasRows)
                                                    {
                                                        _row1 = dr0.HasRows;
                                                        List<PVRRpt> rList = new List<PVRRpt>();
                                                        while (dr0.Read())
                                                        {
                                                            PVRRpt rSingle = new PVRRpt();
                                                            rSingle.Balance = dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]);
                                                            rSingle.Name = dr0["Name"].ToString();
                                                            rSingle.EffectiveDate = dr0["EffectiveDate"].ToString();
                                                            rSingle.HariBursa = dr0["HariBursa"].ToString();
                                                            rSingle.Type = Convert.ToInt32(dr0["Type"]);


                                                            rList.Add(rSingle);

                                                        }

                                                        var QueryByFundID =
                                                                from r in rList
                                                                    //orderby r.Type,R.Name
                                                                group r by new { r.EffectiveDate, r.HariBursa } into rGroup
                                                                select rGroup;

                                                        incRowExcel = incRowExcel + 2;

                                                        foreach (var rsHeader in QueryByFundID)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = "ASSET";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Size = 13;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Gray);
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            worksheet.Cells[incRowExcel, 6].Value = "KEBIJAKAN INVESTASI";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 13;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Navy);
                                                            //worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Color.SetColor(Color.White);
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            incRowExcel++;

                                                            _startAsset = incRowExcel;

                                                            worksheet.Cells[incRowExcel, 6].Value = "ASSET ALLOCATION";
                                                            worksheet.Cells[incRowExcel, 7].Value = "BATASAN INVESTASI";
                                                            worksheet.Cells[incRowExcel, 8].Value = "ACTUAL";
                                                            worksheet.Cells[incRowExcel, 9].Value = "COMPLIANCE";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            incRowExcel++;

                                                            worksheet.Cells[incRowExcel, 6].Value = "EQUITY";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 7].Value = "80% - 100%";
                                                            worksheet.Cells[incRowExcel, 8].Formula = "=O" + _EndEquity;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 9].Value = "OK";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                            incRowExcel++;
                                                            int _EndBondZZ = _EndBond + 1;
                                                            worksheet.Cells[incRowExcel, 6].Value = "BONDS";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 7].Value = "0 - 20%";
                                                            worksheet.Cells[incRowExcel, 8].Formula = "=L" + _EndBondZZ;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 9].Value = "OK";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                            incRowExcel++;
                                                            int _EndDepositoZZ = _EndDeposito + 1;
                                                            worksheet.Cells[incRowExcel, 6].Value = "MONEY MARKETS";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 7].Value = "0 - 20%";
                                                            worksheet.Cells[incRowExcel, 8].Formula = "=J" + _EndDepositoZZ;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 9].Value = "OK";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                            incRowExcel++;

                                                            int _rowEquivalent;
                                                            _rowEquivalent = incRowExcel;
                                                            worksheet.Cells[incRowExcel, 6].Value = "CASH & EQUIVALENT";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                            //worksheet.Cells[incRowExcel, 7].Value = "";
                                                            //worksheet.Cells[incRowExcel, 8].Formula = "=sum(C" + _EndAssetRow + ")";
                                                            //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00%";
                                                            //worksheet.Cells[incRowExcel, 9].Value = "";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                            incRowExcel++;

                                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 6].Value = "TOTAL";
                                                            worksheet.Cells[incRowExcel, 8].Value = "100%";
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            //worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            incRowExcel++;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Sesuai dengan KIK Reksa Dana XXX No. 1, tgl 2 Juni 2017";
                                                            worksheet.Cells[incRowExcel, 6].Style.Font.Size = 10;

                                                            incRowExcel++;
                                                            incRowExcel++;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Efektif Ijin OJK";
                                                            worksheet.Cells[incRowExcel, 6].Style.Font.Size = 10;

                                                            incRowExcel++;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Batas akhir penyesuaian kebijakan investasi";
                                                            worksheet.Cells[incRowExcel, 6].Style.Font.Size = 10;

                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 6].Value = "Pernyataan Efektif";
                                                            worksheet.Cells[incRowExcel, 7].Value = "150 Hari Bursa";
                                                            worksheet.Cells[incRowExcel, 8].Value = "Days to Go";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.EffectiveDate;
                                                            worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsHeader.Key.EffectiveDate).ToString("dd-MMM-yy");
                                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.HariBursa;
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsHeader.Key.HariBursa).ToString("dd-MMM-yy");
                                                            worksheet.Cells[incRowExcel, 8].Value = "0";

                                                            _no = 1;
                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = 0;
                                                            incRowExcel = _startAsset;
                                                            foreach (var rsDetail in rsHeader)
                                                            {
                                                                if (rsDetail.Type == 2 && _counter == 1)
                                                                {
                                                                    _EndAssetRow = incRowExcel - 1;
                                                                    _no = 1;
                                                                    _counter = 2;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "LIABILITIES";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Size = 13;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    incRowExcel++;
                                                                    _StartLiabilitiesRow = incRowExcel;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Size = 11;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                }
                                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Name;
                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Balance;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                _endRowDetail = incRowExcel;
                                                                _EndLiabilitiesRow = incRowExcel;
                                                                _no++;
                                                                incRowExcel++;

                                                            }




                                                            int d = incRowExcel - 1;
                                                            worksheet.Cells[d, 4].Value = "Liquid";
                                                            worksheet.Cells[d, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 1].Value = "Total Cash & Equivalent";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startAsset + ":C" + _EndLiabilitiesRow + ")";
                                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            int x = incRowExcel + 2;
                                                            worksheet.Cells[incRowExcel, 4].Formula = "C" + incRowExcel + "/C" + x;
                                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                            // KEBIJAKAN INVESTASI CASH & EQUIVALENT
                                                            worksheet.Cells[_rowEquivalent, 8].Formula = "C" + incRowExcel + "/C" + x;
                                                            worksheet.Cells[_rowEquivalent, 8].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[_rowEquivalent, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            string _posisiEquity = "";
                                                            string _posisiBond = "";
                                                            string _posisiDeposito = "";
                                                            int _xrow1 = incRowExcel;
                                                            incRowExcel = incRowExcel + 2;
                                                            _rowTotalCash = incRowExcel;
                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL NET ASSET VALUE";
                                                            if (_rowEquity != 0)
                                                                _posisiEquity = "+I" + _rowEquity;
                                                            if (_rowBond != 0)
                                                                _posisiBond = "+I" + _rowBond;
                                                            if (_rowDeposito != 0)
                                                                _posisiDeposito = "+E" + _rowDeposito;
                                                            worksheet.Cells[incRowExcel, 3].Formula = "=C" + _xrow1 + _posisiEquity + _posisiBond + _posisiDeposito;
                                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = "(Last Day NAV)";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL OUTSTANDING UNIT";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundUnitPosition(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateFrom);
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 4].Value = _host.Get_LastNavYesterday(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateFrom);
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);
                                                            _startRowDetail = incRowExcel;

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "NET ASSET VALUE PER UNIT";
                                                            worksheet.Cells[incRowExcel, 3].Formula = "C" + _rowTotalCash + "/" + _host.Get_FundUnitPosition(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateFrom);
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                            _endRowDetail = incRowExcel;

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "CHANGE / DAY";
                                                            worksheet.Cells[incRowExcel, 3].Formula = "((C" + _endRowDetail + "-D" + _startRowDetail + ") / " + "D" + _startRowDetail + ")";
                                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000%";
                                                            worksheet.Cells[incRowExcel, 4].Value = "(Last Year NAV)";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "YIELD IN THE LAST 30 DAYS";
                                                            worksheet.Cells[incRowExcel, 4].Value = _host.Get_NavLastYear(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateFrom);
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "YIELD IN THE LAST 1 YEARS";
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "YIELD YEAR to DATE";
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                                                            worksheet.Cells["C" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Font.Color.SetColor(Color.Red);
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Left.Style = ExcelBorderStyle.Dotted;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Right.Style = ExcelBorderStyle.Dotted;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _StartLiabilitiesRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + _EndLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            int i = _StartEquity;
                                                            //%FR TA equity
                                                            if (_StartEquity != 0)
                                                            {
                                                                while (i < _EndEquity)
                                                                {
                                                                    worksheet.Cells[i, 15].Formula = "I" + i + "/$C$" + _rowTotalCash;
                                                                    worksheet.Cells[i, 15].Calculate();
                                                                    worksheet.Cells[i, 18].Formula = "I" + i + "/$I$" + _EndEquity;
                                                                    worksheet.Cells[i, 18].Calculate();
                                                                    worksheet.Cells[i, 18].Style.Numberformat.Format = "0.00%";
                                                                    i++;
                                                                }
                                                                worksheet.Cells[_rowEquity, 15].Style.Numberformat.Format = "0.00%";
                                                                worksheet.Cells[_rowEquity, 15].Formula = "I" + _rowEquity + "/C" + _rowTotalCash;
                                                                worksheet.Cells[_rowEquity, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[_rowEquity, 15].Calculate();

                                                                worksheet.Cells[_rowEquity, 18].Style.Numberformat.Format = "0.00%";
                                                                worksheet.Cells[_rowEquity, 18].Formula = "sum(R" + _StartEquity + ":R" + (i - 1) + ")";
                                                                worksheet.Cells[_rowEquity, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[_rowEquity, 18].Calculate();
                                                            }


                                                            //%FR TA Bond
                                                            int j = _StartBond;
                                                            if (_StartBond != 0)
                                                            {
                                                                while (j < _EndBond)
                                                                {
                                                                    worksheet.Cells[j, 12].Formula = "I" + j + "/$C$" + _rowTotalCash;
                                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "0.00 %";
                                                                    worksheet.Cells[j, 12].Calculate();
                                                                    j++;
                                                                }
                                                                worksheet.Cells[_rowBond, 12].Style.Numberformat.Format = "0.00 %";
                                                                worksheet.Cells[_rowBond, 12].Formula = "I" + _rowBond + "/C" + _rowTotalCash;
                                                                worksheet.Cells[_rowBond, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[_rowBond, 12].Calculate();
                                                            }

                                                            //%FR TA DEPOSITO
                                                            int k = _StartDeposito;
                                                            if (_StartBond != 0)
                                                            {
                                                                while (k < _EndDeposito)
                                                                {
                                                                    worksheet.Cells[k, 10].Formula = "E" + k + "/C" + _rowTotalCash;
                                                                    worksheet.Cells[k, 10].Calculate();
                                                                    worksheet.Cells[k, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    k++;
                                                                }
                                                            }


                                                        }


                                                    }



                                                    int _lastRow = incRowExcel;

                                                    worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 19];
                                                    worksheet.Column(1).Width = 5;
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).Width = 25;
                                                    worksheet.Column(4).Width = 25;
                                                    worksheet.Column(5).Width = 25;
                                                    worksheet.Column(6).Width = 25;
                                                    worksheet.Column(7).Width = 25;
                                                    worksheet.Column(8).Width = 25;
                                                    worksheet.Column(9).Width = 25;
                                                    worksheet.Column(10).Width = 25;
                                                    worksheet.Column(11).AutoFit();
                                                    worksheet.Column(12).Width = 25;
                                                    worksheet.Column(13).Width = 55;
                                                    if (_rowDeposito == 0)
                                                        worksheet.Column(14).AutoFit();
                                                    else
                                                        worksheet.Column(14).Width = 25;
                                                    worksheet.Column(15).Width = 25;
                                                    worksheet.Column(16).Width = 25;
                                                    worksheet.Column(17).Width = 20;
                                                    worksheet.Column(18).Width = 20;
                                                    worksheet.Column(19).Width = 20;
                                                    worksheet.Column(20).Width = 20;


                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                                    //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Portfolio Valuation Report";



                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    Image img = Image.FromFile(Tools.ReportImage);
                                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();






                                                }

                                            }
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                        // disini
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"
-- PVR
--drop table #TableResultPVR03Sheet2
--drop table #JournalPVR03

Declare @BDateFrom datetime
Declare @BTotalDays int
Declare @DateMinOne datetime
Declare @BeginDate datetime

select @BDateFrom = DateFrom from Period where @Datefrom between DateFrom and DateTo and status = 2
select @BTotalDays = datediff(Day,@BDateFrom,dateadd(year,1,@BDateFrom))

select @DateMinOne = dbo.FWorkingDay(@datefrom,-1) 
select @BeginDate = [dbo].[FgetMaxDatePeriodClosingByFundPK](@datefrom,@FundPK)

CREATE table #TableResultPVR03Sheet2 
(
	Date DATETIME,
	Item NVARCHAR(200),
	Amount NUMERIC(22,4),
	Baris INT
)

CREATE CLUSTERED INDEX indx_ZFundPosition ON #TableResultPVR03Sheet2 (Date,Baris);

DECLARE @BankInterestPercent NUMERIC(18,8)
DECLARE @BankInterestDays INT

SELECT @BankInterestPercent = B.InterestPercent 
,@BankInterestDays = B.InterestDays
FROM Fund A
LEFT JOIN 
(
	SELECT MAX(Date) Date, BankBranchPK,InterestPercent, InterestDays FROM dbo.BankInterestSetup WHERE status = 2
	AND Date <= @Datefrom
	GROUP BY BankBranchPK,InterestPercent, InterestDays
)B ON A.BankBranchPK = B.BankBranchPK
WHERE A.Status = 2 AND A.FundPK = @FundPK

SET @BankInterestDays = ISNULL(@BankInterestDays,0)
SET @BankInterestPercent = ISNULL(@BankInterestPercent,0)

--INSERT INTO #TableResultPVR03Sheet2
--        ( Date, Item, Amount, Baris )
--SELECT Date,'Saldo Last Day' Item
--,dbo.[FGetAccountFundJournalBalanceByFundPK](DTM1,3,@FundPK) Amount
--,7 Baris
--FROM dbo.ZDT_WorkingDays
--WHERE Date = @Datefrom

INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Pencairan DOC' Item
,SUM(ISNULL(B.DoneVolume,0)) Amount
,8 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
select case when IsHoliday = 1 then DT1 else Date end Date,Item,sum(Amount) Amount,Baris
From (
SELECT IsHoliday,DT1,Date,'Bunga DOC' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1

UNION ALL


SELECT IsHoliday,DT1,A.Date,'Bunga DOC' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.MaturityDate  and B.ValueDate between @datefrom and @dateto
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 1
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

UNION ALL
-- INTEREST TD MATURE
SELECT IsHoliday,DT1,A.Date,'Bunga DOC' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8  * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance,A.AcqDate,A.InterestDaysType,A.InterestPercent FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.Date = C.Date
	WHERE A.status = 2 AND A.Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= C.Date AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.Date between @DateMinOne and @dateto 

	and A.InstrumentPK not in
	(
	select A.InstrumentPK  FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.MaturityDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.SelectedSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto and A.FundPK = @FundPK
	) 

)B ON A.Date = B.MaturityDate

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,B.AcqDate,B.MaturityDate,B.InterestDaysType,B.InterestPercent,IsHoliday,DT1
) C
GROUP BY Date,Item,Baris,IsHoliday,DT1


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Bunga Jasa Giro' Item
,0 Amount
,10 Baris
FROM dbo.ZDT_WorkingDays
WHERE Date BETWEEN @Datefrom AND @Dateto

INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Pencairan TD' Item
,SUM(ISNULL(B.DoneVolume,0)) Amount
,11 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
select case when IsHoliday = 1 then DT1 else Date end Date,Item,sum(Amount) Amount,Baris
From (
SELECT IsHoliday,DT1,Date,'Bunga TD' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1

UNION ALL
-- INTEREST TD MATURE
SELECT IsHoliday,DT1,Date,'Bunga TD' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate)  Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance,A.InterestPercent,A.InterestDaysType,A.AcqDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 AND B.Category = 'Deposit Normal'  and A.InterestPaymentType <> 7
	
)B ON A.Date = B.MaturityDate

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

UNION ALL
-- INTEREST TD MATURE MONTHLY
SELECT IsHoliday,DT1,A.Date,'Bunga TD' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,dateadd(month,-1,A.Date),A.Date)  Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.Date,A.MaturityDate,A.Balance,A.InterestPercent,A.InterestDaysType,A.AcqDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 AND B.Category = 'Deposit Normal'  and A.InterestPaymentType = 7
	
)B ON A.Date = dateadd(month, month(B.Date) + 1 - month(B.MaturityDate), B.MaturityDate)
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

) C
GROUP BY Date,Item,Baris,IsHoliday,DT1




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Penjualan Saham' Item
,SUM(ISNULL(B.TotalAmount,0)) Amount
,13 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 1
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Dividen Saham' Item
,SUM(ISNULL(C.Balance / B.Hold * B.Earn,0)) * 0.85 Amount
,14 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN CorporateAction B ON A.Date = B.PaymentDate and B.status = 2 AND B.Type = 1
LEFT JOIN
(
	SELECT Date,A.InstrumentPK,A.Balance FROM dbo.FundPosition A
	WHERE A.Status = 2 AND A.FundPK = @FundPK
	AND A.InstrumentPK IN
	(
		SELECT DISTINCT InstrumentPK FROM dbo.CorporateAction WHERE type = 1 AND status = 2
		AND PaymentDate BETWEEN @Datefrom AND @Dateto
	)
	AND A.Date IN
	(
		SELECT DISTINCT ExDate FROM dbo.CorporateAction WHERE type = 1 AND status = 2
		AND PaymentDate BETWEEN @Datefrom AND @Dateto
	)
)C ON B.ExDate = C.Date AND B.InstrumentPK = C.InstrumentPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
select Z.Date,Z.Item,sum(Z.GrossAmount - Z.TaxAmount) Amount,Z.Baris from 
(
SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Coupon Obligasi' Item,
case when datediff(day,B.NextCouponDate,B.MaturityDate) < 20 then
	isnull(SUM(ISNULL(dbo.FGetDailyBondInterestAccrued(B.Date,B.InstrumentPK,B.FundPK),0) 
	* case when B.InterestDaysType = 360 then B.InterestDaysType/B.InterestPaymentType else 
		case when B.AcqDate <= B.MaturityDate then datediff(day,B.LastCouponDate,B.MaturityDate) else 
			datediff(day,B.LastCouponDate,B.MaturityDate) end end),0) 
else
isnull(SUM(ISNULL(dbo.FGetDailyBondInterestAccrued(B.Date,B.InstrumentPK,B.FundPK),0) 
* case when B.InterestDaysType = 360 then B.InterestDaysType/B.InterestPaymentType else 
	case when B.AcqDate <= B.NextCouponDate then datediff(day,B.LastCouponDate,B.NextCouponDate) else 
		datediff(day,B.LastCouponDate,B.NextCouponDate) end end),0)  
end GrossAmount,

case when datediff(day,B.NextCouponDate,B.MaturityDate) < 20 then
	isnull(SUM(ISNULL(dbo.FGetDailyBondInterestAccrued(B.Date,B.InstrumentPK,B.FundPK),0) 
	* case when B.InterestDaysType = 360 then B.InterestDaysType/B.InterestPaymentType else 
		case when B.AcqDate <= B.MaturityDate then datediff(day,B.LastCouponDate,B.MaturityDate) else 
			datediff(day,B.LastCouponDate,B.MaturityDate) end end),0)  * 0.05
else
isnull(SUM(ISNULL(dbo.FGetDailyBondInterestAccrued(B.Date,B.InstrumentPK,B.FundPK),0) 
* case when B.InterestDaysType = 360 then B.InterestDaysType/B.InterestPaymentType else 
	case when B.AcqDate <= B.NextCouponDate then datediff(day,B.LastCouponDate,B.NextCouponDate) else 
		datediff(day,B.LastCouponDate,B.NextCouponDate) end end),0)  * 0.05
end	TaxAmount
,15 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.FundPK,A.Date,A.InstrumentPK,dbo.FgetLastCouponDate(A.Date,A.InstrumentPK) LastCouponDate,dbo.Fgetnextcoupondate(A.Date,A.InstrumentPK) NextCouponDate,A.Balance,A.AcqDate,
	case when A.InterestDaysType in (1,3,5,6,7) then 360 else 1 end InterestDaysType,		
	case when A.InterestPaymentType in (1,4,7) then 12 
				when A.InterestPaymentType in (13) then 4 
					when A.InterestPaymentType in (16) then 2 else 1 end InterestPaymentType,A.MaturityDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date < case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK not in (1,4,5,6,16)

	---- Terima Kupon saat ada jual habis tapi SettleDate = CouponDate
	union all
	select A.FundPK,SettlementDate,A.InstrumentPK,dbo.FgetLastcoupondate(ValueDate,A.InstrumentPK),dbo.Fgetnextcoupondate(ValueDate,A.InstrumentPK),DoneVolume,AcqDate,
	case when B.InterestDaysType in (1,3,5,6,7) then 360 else 1 end InterestDaysType,		
	case when B.InterestPaymentType in (1,4,7) then 12 
				when B.InterestPaymentType in (13) then 4 
					when B.InterestPaymentType in (16) then 2 else 1 end InterestPaymentType,B.MaturityDate
	from Investment A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
	where TrxType = 2 and StatusInvestment <> 3 and StatusDealing <> 3 and SelectedSettlement <> 3 and A.InstrumentTypePK  not in (1,4,5,6,16)
	and dbo.Fgetnextcoupondate(ValueDate,A.InstrumentPK) > dbo.FWorkingDay(SettlementDate,-1) and dbo.Fgetnextcoupondate(ValueDate,A.InstrumentPK) <= SettlementDate
	and SettlementDate between @datefrom and @dateto and FundPK = @FundPK
	and A.InstrumentPK not in 
	(
		SELECT A.InstrumentPK FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		WHERE A.status = 2 AND Date =
		(
			SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date < case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
		) AND FundPK = @FundPK
		AND B.InstrumentTypePK not in (1,4,5,6,16)
	)
	
)B ON A.Date = case when datediff(day,B.NextCouponDate,B.MaturityDate) < 20 then B.MaturityDate else B.NextCouponDate end and B.AcqDate < case when datediff(day,B.NextCouponDate,B.MaturityDate) < 20 then B.MaturityDate else B.NextCouponDate end

WHERE  A.Date BETWEEN case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND @Dateto
GROUP BY A.Date,B.AcqDate,B.NextCouponDate,B.LastCouponDate,IsHoliday,DT1,B.MaturityDate
)Z
where Z.Date between @datefrom and @dateto
group by Z.Date,Z.Item,Z.Baris



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )

SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Maturity Deposit' Item
,SUM(ISNULL(B.Balance,0)) Amount
,16 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= @DateMinOne AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit Normal'
	union all
	SELECT A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.Date = C.Date
	WHERE A.status = 2 AND A.Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= C.Date AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.Date between @DateMinOne and @dateto 
	and A.InstrumentPK not in
	(
	select A.InstrumentPK  FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.SelectedSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto and A.FundPK = @FundPK
	) 

	union all
	SELECT A.MaturityDate,A.DoneAmount FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.SelectedSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto and A.FundPK = @FundPK
	
)B ON A.Date = B.MaturityDate

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1






INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Penjualan Bond' Item
,SUM(ISNULL(B.TotalAmount,0)) Amount
,17 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate 
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK NOT IN (1,5,6,4,16)
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
select Z.Date,Z.Item,Z.Amount,Z.Baris
from (
SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Maturity Bond' Item
,SUM(ISNULL(B.Balance,0)) Amount
,18 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date < case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK NOT in (1,4,5,6,16)
)B ON A.Date = B.MaturityDate
WHERE  A.Date BETWEEN case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND @Dateto
GROUP BY A.Date,IsHoliday,DT1
) Z
where Z.Date between @DateFrom and @Dateto




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Subscription Account' Item
,case when dbo.CheckTodayIsHoliday(A.Date) = 1 then 0 
	else  sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,60,@FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,60,@FundPK)) 	end 
,19 Baris
FROM dbo.ZDT_WorkingDays A
WHERE A.Date between @datefrom and @dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Penempatan DOC' Item
,SUM(ISNULL(B.DoneVolume,0) * -1) Amount
,21 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType in (1,3)
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Penempatan TD' Item
,SUM(ISNULL(B.DoneVolume,0) * -1) Amount
,22 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType in (1,3)
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Pembelian Saham' Item
,SUM(ISNULL(B.TotalAmount,0))  * -1 Amount
,23 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 1
AND B.TrxType = 1
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Pembelian Bond' Item
,SUM(ISNULL(B.TotalAmount,0) * -1) Amount
,24 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate 
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3 
AND B.InstrumentTypePK NOT IN (1,5,6,4,16)
AND B.TrxType = 1
AND B.FundPK = @FundPK
LEFT JOIN Instrument C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)
WHERE  A.Date BETWEEN @Datefrom AND @Dateto and C.FirstCouponDate <= A.Date
GROUP BY A.Date




CREATE TABLE #JournalPVR03
(
	ValueDate DATETIME,
	Movement NUMERIC(22,4),
	FundJournalAccountPK int
)

CREATE CLUSTERED INDEX indx_JournalPVR03 ON #JournalPVR03 (ValueDate,FundJournalAccountPK);

INSERT INTO #JournalPVR03
        ( ValueDate ,
          Movement ,
          FundJournalAccountPK
        )
	SELECT ValueDate,case when B.FundJournalAccountPK = 195 then SUM(ISNULL(B.BaseCredit,0)) else SUM(ISNULL(B.BaseDebit,0)) end Movement,B.FundJournalAccountPK FROM FundJournal A
	LEFT JOIN FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK 
	WHERE A.ValueDate BETWEEN @Datefrom AND @Dateto
	AND A.Posted = 1 AND A.Status = 2 AND A.Reversed = 0
	AND B.FundPK = @FundPK  AND B.FundJournalAccountPK in (147,78,79,80,200,189,81)
	GROUP BY A.ValueDate,B.FundJournalAccountPK




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'IPO' Item
,case when dbo.CheckTodayIsHoliday(A.Date) = 1 then 0 
	else case when sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,195,@FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,195,@FundPK)) < 0 then 0 
		else sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,195,@FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,195,@FundPK)) end end * -1
,25 Baris
FROM dbo.ZDT_WorkingDays A
WHERE A.Date between @datefrom and @dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Bank Charge' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,26 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 147
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Biaya Transaksi' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,27 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 78
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'MGT Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,28 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 79
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date

INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'CSD Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,29 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 80
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'S-Invest Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,30 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 200
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Tax Expense' Item
--,SUM(ISNULL(B.Movement,0) * -1) Amount
,0 Amount
,31 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 189
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Audit Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,32 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 81
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Subscription' Item
,SUM(ISNULL(B.Amount,0)) Amount
,36 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end NAVDate,SUM(ISNULL(CashAmount,0)) Amount FROM dbo.ClientSubscription A
	left join FundFee B on A.FundPK = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end BETWEEN @Datefrom AND @Dateto
	AND A.fundPK = @FundPK
	GROUP BY case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end,B.BitPendingSubscription
)B ON A.Date = B.NAVDate
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Redemption' Item
,SUM(ISNULL(B.Amount,0) * -1) Amount
,37 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT PaymentDate,SUM(ISNULL(CashAmount,0)) Amount FROM dbo.ClientRedemption A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	AND A.fundPK = @FundPK
	GROUP BY A.PaymentDate
)B ON A.Date = B.PaymentDate
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Switching' Item
,SUM(ISNULL(B.Amount,0)) Amount
,38 Baris FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
SELECT A.Date,SUM(ISNULL(amount,0)) Amount FROM (
	SELECT case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end  Date,ISNULL(CashAmount,0) Amount FROM dbo.ClientSwitching A
    left join FundFee B on A.fundPKTo = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end  BETWEEN @Datefrom AND @Dateto
	AND fundPKTo = @FundPK

	UNION ALL

	SELECT A.PaymentDate Date,ISNULL(CashAmount,0) * -1 Amount FROM dbo.ClientSwitching A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	AND fundPKFrom = @FundPK
	)A

	GROUP BY A.Date

)B ON A.Date = B.Date
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Subs Fee' Item
,SUM(ISNULL(B.Amount,0)) Amount
,39 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end NAVDate,SUM(ISNULL(SubscriptionFeeAmount,0)) Amount FROM dbo.ClientSubscription A
	left join FundFee B on A.FundPK = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end BETWEEN @Datefrom AND @Dateto
	AND A.fundPK = @FundPK
	GROUP BY case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end,B.BitPendingSubscription
)B ON A.Date = B.NAVDate
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Redeem Fee' Item
,SUM(ISNULL(B.Amount,0) * -1) Amount
,40 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT  PaymentDate,SUM(ISNULL(RedemptionFeeAmount,0)) Amount FROM dbo.ClientRedemption A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	AND A.fundPK = @FundPK
	GROUP BY A.PaymentDate
)B ON A.Date = B.PaymentDate
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date




DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(Date) +',0) ' + QUOTENAME(Date) 
                    from (SELECT DISTINCT Date FROM #TableResultPVR03Sheet2) A
					order by A.Date
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


select @cols = STUFF((SELECT distinct ',' + QUOTENAME(Date) 
                    from #TableResultPVR03Sheet2
				
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


set @query = 'SELECT baris,item,' + @colsForQuery + ' from 
                (
                SELECT Date,baris,item,Amount FROM #TableResultPVR03Sheet2 
            ) x
            pivot 
            (
                SUM(Amount)
                for Date in (' + @cols + ')
            ) p 
			order by baris
			'
exec(@query)	




--SELECT ExDate,PaymentDate,InstrumentPK,earn,Hold FROM dbo.CorporateAction WHERE type = 1 AND status = 2
--AND PaymentDate BETWEEN @Datefrom AND @Dateto


--SELECT * FROM dbo.MasterValue WHERE id LIKE '%Corporate%'

--SELECT * FROM dbo.InstrumentType WHERE status = 2 ORDER BY InstrumentTypePK asc
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    worksheet1.Cells[1, 1].Style.Font.Size = 16;
                                                    worksheet1.Cells[1, 1].Value = _host.Get_FundName(_FundAccountingRpt.FundFrom); //rsHeader1.Key.FundName;
                                                    int incRowExcelZ = 8;
                                                    int incColExcelZ = 2;
                                                    int incColExcelHeader = 2;
                                                    worksheet1.Cells[7, 2].Value = _host.Get_TotalAccountBalanceByFundPK(_FundAccountingRpt.FundFrom, 3, _host.GetWorkingDay(_FundAccountingRpt.ValueDateFrom, -1)); //rsHeader1.Key.FundName;

                                                    //ini buat header
                                                    for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                    {
                                                        if (inc1 > 1)
                                                        {

                                                            worksheet1.Cells[5, incColExcelHeader].Value = Convert.ToDateTime(dr1.GetName(inc1)).ToString("dd-MMM-yyyy");
                                                            incColExcelHeader++;
                                                        }


                                                    }
                                                    while (dr1.Read())
                                                    {
                                                        incColExcelZ = 1;
                                                        for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                        {


                                                            if (dr1.GetName(inc1).ToString() != "baris")
                                                            {


                                                                // buat baris 
                                                                if (dr1.GetValue(inc1).ToString() == "Penempatan DOC")
                                                                {
                                                                    incRowExcelZ = incRowExcelZ + 2;
                                                                    if (incColExcelZ >= 2)
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = Convert.ToDecimal(dr1[inc1]);
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = dr1.GetValue(inc1).ToString();
                                                                    }
                                                                }

                                                                else if (dr1.GetValue(inc1).ToString() == "Subscription")
                                                                {
                                                                    incRowExcelZ = incRowExcelZ + 2;
                                                                    if (incColExcelZ >= 2)
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = Convert.ToDecimal(dr1[inc1]);
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = dr1.GetValue(inc1).ToString();
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (incColExcelZ >= 2)
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = Convert.ToDecimal(dr1[inc1]);
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = dr1.GetValue(inc1).ToString();
                                                                    }

                                                                }
                                                                incColExcelZ++;

                                                            }


                                                        }
                                                        incRowExcelZ++;

                                                    }




                                                }

                                                //worksheet1.Calculate();
                                            }
                                        }

                                    }


                                }

                            }
                        }

                        //package.Workbook.Calculate();

                        package.Save();
                        if (_FundAccountingRpt.DownloadMode == "PDF")
                        {
                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                        }
                        return true;
                    }



                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Portfolio Summary Cash
            if (_FundAccountingRpt.ReportName.Equals("Portfolio Summary Cash"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"

Declare @BDateFrom datetime
Declare @BTotalDays int

select @BDateFrom = DateFrom from Period where @Datefrom between DateFrom and DateTo and status = 2
select @BTotalDays = datediff(Day,@BDateFrom,dateadd(year,1,@BDateFrom))

Declare @DateMinOne datetime
select @DateMinOne = dbo.FWorkingDay(@datefrom,-1)
----------------------------------------------------------
CREATE TABLE #TD
(
FundID nvarchar(50) COLLATE DATABASE_DEFAULT,
AmountTD numeric(19,2),
AmountTDonCall numeric(19,2)
)

insert into #TD
select A.FundID,sum(A.Balance),sum(BalanceOnCall)
from (
SELECT A.Date,D.ID FundID,A.Balance,0 BalanceOnCall FROM dbo.FundPosition A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.Fund D on A.FundPK = D.FundPK and D.status in (1,2)
WHERE A.status = 2 AND Date =
(
SELECT MAX(Date) FROM dbo.FundPosition C WHERE A.FundPK = C.FundPK AND date <= @DateFrom AND status = 2
) 
AND B.InstrumentTypePK = 5 and A.Category = 'Deposit Normal'


union all
SELECT A.ValueDate,D.ID,A.DoneAmount,0 FROM dbo.Investment A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
LEFT JOIN dbo.Fund D on A.FundPK = D.FundPK and D.status in (1,2)
WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5 and A.TrxType in (1,2) and A.ValueDate between dateadd(day,1,@Datefrom) and @dateto and A.Category = 'Deposit Normal'

union all
SELECT A.Date,D.ID,0,A.Balance FROM dbo.FundPosition A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.Fund D on A.FundPK = D.FundPK and D.status in (1,2)
WHERE A.status = 2 AND Date =
(
SELECT MAX(Date) FROM dbo.FundPosition C WHERE A.fundPK = C.FundPK AND date <= @DateFrom AND status = 2
) 
AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.MaturityDate > @dateto

union all
SELECT A.ValueDate,D.ID,0,A.DoneAmount FROM dbo.Investment A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
LEFT JOIN dbo.Fund D on A.FundPK = D.FundPK and D.status in (1,2)
WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.SelectedSettlement <> 3 
AND B.InstrumentTypePK = 5 and A.TrxType in (1,2) and A.ValueDate between dateadd(day,1,@Datefrom) and @dateto  and A.Category = 'Deposit On Call' and A.MaturityDate > @dateto
)A
group by FundID

----------------------------------------------------


CREATE table #TableResultSummaryCash03 
(
	FundID NVARCHAR(100) COLLATE DATABASE_DEFAULT,
	Date DATETIME,
	Item NVARCHAR(200) COLLATE DATABASE_DEFAULT,
	Amount NUMERIC(22,4),
	Baris INT
)

CREATE CLUSTERED INDEX indx_ZFundPosition ON #TableResultSummaryCash03 (Date,Baris);

DECLARE @TableBeginDate table
(
	FundPK int,
	BeginDate datetime
)

INSERT INTO @TableBeginDate 
        ( FundPK, BeginDate )

SELECT B.FundPK,ISNULL(ValueDate,'01/01/1900') BeginDate from FundJournal A

left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK and B.Status = 2

where Description = 'Period Closing' and A.Status = 2 and A.Posted = 1 and A.Reversed = 0

and ValueDate < @Datefrom  


CREATE table #TableBegCash 
(
	FundID NVARCHAR(100) COLLATE DATABASE_DEFAULT,
	BegCash NUMERIC(22,4)
)

INSERT INTO #TableBegCash
        ( FundID, BegCash )
SELECT B.ID,
ISNULL(C.Balance,0)
FROM Fund B 
LEFT JOIN (
	 SELECT B.FundPK,
	 CASE WHEN C.Type in (1,4) then sum(B.BaseDebit-B.BaseCredit) else  sum(B.BaseCredit-B.BaseDebit) END  Balance
	 from FundJournal A 
	 LEFT join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK and B.Status = 2  
	 left join FundJournalAccount C on B.FundJournalAccountPK = C.FundJournalAccountPK and C.Status = 2  
	 LEFT JOIN @TableBeginDate D ON B.FundPK = D.FundPK 
	 where A.Posted = 1 and A.Reversed = 0 and A.Status = 2  
	 and B.FundJournalAccountPK = 3 and A.ValueDate between isnull(D.BeginDate,'01/01/1900') and @DateMinOne
	 group By B.FundPK,C.Type  
)C ON B.FundPK = C.FundPK
WHERE B.status = 2

--SELECT * FROM @TableBegCash



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,Date,'Pencairan DOC' Item
,SUM(ISNULL(B.DoneVolume,0)) Amount
,8 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 2

WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )

select D.ID,case when IsHoliday = 1 then DT1 else Date end Date,Item,sum(Amount) Amount,Baris
From (
SELECT C.FundPK,IsHoliday,DT1,Date,'Bunga DOC' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 2
AND B.FundPK = C.FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,IsHoliday,DT1

UNION ALL

SELECT C.FundPK,IsHoliday,DT1,Date,'Bunga DOC' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.MaturityDate  and B.ValueDate between @datefrom and @dateto
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 1
AND B.FundPK = C.FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

UNION ALL
-- INTEREST TD MATURE
SELECT C.FundPK,IsHoliday,DT1,A.Date,'Bunga DOC' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
left join Fund C on C.status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,A.MaturityDate,A.Balance,A.AcqDate,A.InterestDaysType,A.InterestPercent FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.Date = C.Date
	left join Fund D on D.status = 2
	WHERE A.status = 2 AND A.Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = A.FundPK AND date <= C.Date AND status = 2
	) AND A.FundPK = D.FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.Date between @DateMinOne and @dateto 
	and A.InstrumentPK not in
	(
	select A.InstrumentPK  FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.MaturityDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.SelectedSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto
	) 



)B ON A.Date = B.MaturityDate  AND C.FundPK = B.FundPK



WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,B.AcqDate,B.MaturityDate,B.InterestDaysType,B.InterestPercent,IsHoliday,DT1
) C
left join Fund D on D.status = 2 and C.FundPK = D.FundPK 
GROUP BY D.ID,Date,Item,Baris,IsHoliday,DT1

DECLARE @TableBankInterest TABLE
(
	Date DATETIME,
	BankBranchPK INT,
	InterestPercent NUMERIC(18,8),
	InterestDays int
)

INSERT INTO @TableBankInterest
        ( Date ,
          BankBranchPK ,
          InterestPercent ,
          InterestDays
        )
SELECT MAX(Date) Date, BankBranchPK,InterestPercent, InterestDays 
FROM dbo.BankInterestSetup WHERE status = 2
AND Date <= @Datefrom
GROUP BY BankBranchPK,InterestPercent, InterestDays


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Bunga Jasa Giro' Item
, 0 Amount
,10 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
WHERE A.Date BETWEEN @Datefrom AND @Dateto



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,Date,'Pencairan TD' Item
,SUM(ISNULL(B.DoneVolume,0)) Amount
,11 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType = 2
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )

select D.ID,case when IsHoliday = 1 then DT1 else Date end Date,Item,sum(Amount) Amount,Baris
From (
SELECT C.FundPK,IsHoliday,DT1,Date,'Bunga TD' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType = 2
AND B.FundPK = C.FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,IsHoliday,DT1

UNION ALL
-- INTEREST TD MATURE
SELECT C.FundPK,IsHoliday,DT1,A.Date,'Bunga TD' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
left join Fund C on C.status = 2 
LEFT JOIN 
(
	SELECT C.FundPK,A.MaturityDate,A.Balance,A.InterestPercent,A.InterestDaysType,A.AcqDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	left join Fund C on C.status = 2 AND A.FundPK = C.FundPK
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition A
		left join Fund C on C.status = 2 WHERE A.fundPK = C.FundPK AND date <= case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND A.status = 2
	) AND A.FundPK = C.FundPK
	AND B.InstrumentTypePK = 5 AND B.Category = 'Deposit Normal' and A.InterestPaymentType <> 7
	
)B ON A.Date = B.MaturityDate and B.FundPK = C.FundPK

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1


UNION ALL
-- INTEREST TD MATURE MONTHLY
SELECT C.FundPK,IsHoliday,DT1,A.Date,'Bunga TD' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,dateadd(month,-1,A.Date),A.Date) Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
left join Fund C on C.status = 2 
LEFT JOIN 
(
	SELECT A.Date,C.FundPK,A.MaturityDate,A.Balance,A.InterestPercent,A.InterestDaysType,A.AcqDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	left join Fund C on C.status = 2 AND A.FundPK = C.FundPK
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition A
		left join Fund C on C.status = 2 WHERE A.fundPK = C.FundPK AND date <= case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND A.status = 2
	) AND A.FundPK = C.FundPK
	AND B.InstrumentTypePK = 5 AND B.Category = 'Deposit Normal' and A.InterestPaymentType = 7
	
)B ON A.Date = dateadd(month, month(B.Date) + 1 - month(B.MaturityDate), B.MaturityDate) and B.FundPK = C.FundPK

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

) C
left join Fund D on D.status = 2 and C.FundPK = D.FundPK 
GROUP BY D.ID,Date,Item,Baris,IsHoliday,DT1


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,Date,'Penjualan Saham' Item
,SUM(ISNULL(B.TotalAmount,0)) Amount
,13 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 1
AND B.TrxType = 2
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Dividen Saham' Item
,SUM(ISNULL(D.Balance / B.Hold * B.Earn,0)) * 0.85 Amount
,14 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN CorporateAction B ON A.Date = B.PaymentDate and B.status = 2 AND B.Type = 1
LEFT JOIN
(
	SELECT A.FundPK,Date,A.InstrumentPK,A.Balance FROM dbo.FundPosition A
	WHERE A.Status = 2 
	AND A.InstrumentPK IN
	(
		SELECT DISTINCT InstrumentPK FROM dbo.CorporateAction WHERE type = 1 AND status = 2
		AND PaymentDate BETWEEN @Datefrom AND @Dateto
	)
	AND A.Date IN
	(
		SELECT DISTINCT ExDate FROM dbo.CorporateAction WHERE type = 1 AND status = 2
		AND PaymentDate BETWEEN @Datefrom AND @Dateto
	)
)D ON B.ExDate = D.Date AND B.InstrumentPK = D.InstrumentPK AND C.FundPK = D.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
select Z.FundID,Z.Date,Z.Item,sum(Z.GrossAmount - Z.TaxAmount) Amount,Z.Baris from 
(
SELECT C.ID FundID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Coupon Obligasi' Item,
case when datediff(day,B.NextCouponDate,B.MaturityDate) < 20 then
	isnull(SUM(ISNULL(dbo.FGetDailyBondInterestAccrued(B.Date,B.InstrumentPK,B.FundPK),0) 
	* case when B.InterestDaysType = 360 then B.InterestDaysType/B.InterestPaymentType else 
		case when B.AcqDate <= B.MaturityDate then datediff(day,B.LastCouponDate,B.MaturityDate) else 
			datediff(day,B.LastCouponDate,B.MaturityDate) end end),0) 
else
isnull(SUM(ISNULL(dbo.FGetDailyBondInterestAccrued(B.Date,B.InstrumentPK,B.FundPK),0) 
* case when B.InterestDaysType = 360 then B.InterestDaysType/B.InterestPaymentType else 
	case when B.AcqDate <= B.NextCouponDate then datediff(day,B.LastCouponDate,B.NextCouponDate) else 
		datediff(day,B.LastCouponDate,B.NextCouponDate) end end),0)  
end GrossAmount,

case when datediff(day,B.NextCouponDate,B.MaturityDate) < 20 then
	isnull(SUM(ISNULL(dbo.FGetDailyBondInterestAccrued(B.Date,B.InstrumentPK,B.FundPK),0) 
	* case when B.InterestDaysType = 360 then B.InterestDaysType/B.InterestPaymentType else 
		case when B.AcqDate <= B.MaturityDate then datediff(day,B.LastCouponDate,B.MaturityDate) else 
			datediff(day,B.LastCouponDate,B.MaturityDate) end end),0)  * 0.05
else
isnull(SUM(ISNULL(dbo.FGetDailyBondInterestAccrued(B.Date,B.InstrumentPK,B.FundPK),0) 
* case when B.InterestDaysType = 360 then B.InterestDaysType/B.InterestPaymentType else 
	case when B.AcqDate <= B.NextCouponDate then datediff(day,B.LastCouponDate,B.NextCouponDate) else 
		datediff(day,B.LastCouponDate,B.NextCouponDate) end end),0)  * 0.05
end	TaxAmount
,15 Baris
FROM dbo.ZDT_WorkingDays A
left join Fund C on C.status = 2
LEFT JOIN 
(
	SELECT A.FundPK,A.Date,A.InstrumentPK,dbo.FgetLastCouponDate(A.Date,A.InstrumentPK) LastCouponDate,dbo.Fgetnextcoupondate(A.Date,A.InstrumentPK) NextCouponDate,A.Balance,A.AcqDate,
	case when A.InterestDaysType in (1,3,5,6,7) then 360 else 1 end InterestDaysType,		
		case when A.InterestPaymentType in (1,4,7) then 12 
					when A.InterestPaymentType in (13) then 4 
						when A.InterestPaymentType in (16) then 2 else 1 end InterestPaymentType,A.MaturityDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN Fund C on C.status = 2
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = A.FundPK AND date < case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) AND A.FundPK = C.FundPK
	AND B.InstrumentTypePK not in (1,4,5,6,16)


	---- Terima Kupon saat ada jual habis tapi SettleDate = CouponDate
	union all
	select  A.FundPK,SettlementDate,A.InstrumentPK,dbo.FgetLastcoupondate(ValueDate,A.InstrumentPK),dbo.Fgetnextcoupondate(ValueDate,A.InstrumentPK),DoneVolume,AcqDate,
	case when B.InterestDaysType in (1,3,5,6,7) then 360 else 1 end InterestDaysType,		
	case when B.InterestPaymentType in (1,4,7) then 12 
				when B.InterestPaymentType in (13) then 4 
					when B.InterestPaymentType in (16) then 2 else 1 end InterestPaymentType,B.MaturityDate
	from Investment A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
	LEFT JOIN Fund C on C.status = 2
	where TrxType = 2 and StatusInvestment <> 3 and StatusDealing <> 3 and SelectedSettlement <> 3 and A.InstrumentTypePK  not in (1,4,5,6,16)
	and dbo.Fgetnextcoupondate(ValueDate,A.InstrumentPK) > dbo.FWorkingDay(SettlementDate,-1) and dbo.Fgetnextcoupondate(ValueDate,A.InstrumentPK) <= SettlementDate
	and SettlementDate between @datefrom and @dateto AND A.FundPK = C.FundPK
	and A.InstrumentPK not in 
	(
		SELECT A.InstrumentPK FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		WHERE A.status = 2 AND Date =
		(
			SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = A.FundPK AND date < case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
		) AND A.FundPK = C.FundPK
		AND B.InstrumentTypePK not in (1,4,5,6,16)
	)


	
)B ON A.Date = case when datediff(day,B.NextCouponDate,B.MaturityDate) < 20 then B.MaturityDate else B.NextCouponDate end  
AND B.AcqDate < case when datediff(day,B.NextCouponDate,B.MaturityDate) < 20 then B.MaturityDate else B.NextCouponDate end
AND C.FundPK = B.FundPK

WHERE  A.Date BETWEEN case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND @Dateto
GROUP BY A.Date,C.ID,B.AcqDate,B.NextCouponDate,B.LastCouponDate,IsHoliday,DT1,B.MaturityDate
)Z
where Z.Date between @datefrom and @dateto
GROUP BY Z.FundID,Z.Date,Z.Item,Z.Baris



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )

SELECT C.ID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Maturity Deposit' Item
,SUM(ISNULL(B.Balance,0)) Amount
,16 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN 
(
	SELECT A.FundPK,A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN Fund C on C.status = 2
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = A.FundPK AND date <= @DateMinOne AND status = 2
	) AND A.FundPK = C.FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit Normal'
	union all
	SELECT A.FundPK,A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.Date = C.Date
	LEFT JOIN Fund D on D.status = 2
	WHERE A.status = 2 AND A.Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = A.FundPK AND date <= C.Date AND status = 2
	) AND A.FundPK = D.FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.Date between @DateMinOne and @dateto 
	and A.InstrumentPK not in
	(
	select A.InstrumentPK  FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.SelectedSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto
	) 

	union all
	SELECT A.FundPK,A.MaturityDate,A.DoneAmount FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.SelectedSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto
	
)B ON A.Date = B.MaturityDate  AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID,IsHoliday,DT1


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Penjualan Bond' Item
,SUM(ISNULL(B.TotalAmount,0)) Amount
,17 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate  AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK NOT IN (1,5,6,4,16)
AND B.TrxType = 2
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
select Z.FundID,Z.Date,Z.Item,Z.Amount,Z.Baris
from (
SELECT C.ID FundID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Maturity Bond' Item
,SUM(ISNULL(B.Balance,0)) Amount
,18 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance,A.FundPK FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE date < case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) 
	AND B.InstrumentTypePK NOT in (1,4,5,6,16)
)B ON A.Date = B.MaturityDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND @Dateto
GROUP BY A.Date,C.ID,IsHoliday,DT1
) Z
where Z.Date between @DateFrom and @Dateto



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT B.ID,A.Date,'Subscription Account' Item
,case when dbo.CheckTodayIsHoliday(A.Date) = 1 then 0 
	else  sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,60,B.FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,60,B.FundPK)) 	end   Amount
,19 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund B on B.status = 2
 WHERE A.Date between @datefrom and @dateto
GROUP BY B.ID,A.Date,B.FundPK


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Penempatan DOC' Item
,SUM(ISNULL(B.DoneVolume,0) * -1) Amount
,21 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType in (1,3)
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID,IsHoliday,DT1


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Penempatan TD' Item
,SUM(ISNULL(B.DoneVolume,0) * -1) Amount
,22 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType in (1,3)
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID,IsHoliday,DT1


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,Date,'Pembelian Saham' Item
,SUM(ISNULL(B.TotalAmount,0))  * -1 Amount
,23 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK = 1
AND B.TrxType = 1
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Pembelian Bond' Item
,SUM(ISNULL(B.TotalAmount,0) * -1) Amount
,24 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.SelectedSettlement <> 3
AND B.InstrumentTypePK NOT IN (1,5,6,4,16)
AND B.TrxType = 1
LEFT JOIN Instrument D on B.InstrumentPK = D.InstrumentPK and D.status in (1,2)
WHERE  A.Date BETWEEN @Datefrom AND @Dateto and D.FirstCouponDate <= A.Date
GROUP BY A.Date,C.ID



---------------------------------------------------------------------------------------------
CREATE TABLE #JournalPVR03
(
	FundPK INT,
	ValueDate DATETIME,
	Movement NUMERIC(22,4),
	FundJournalAccountPK int
)

CREATE CLUSTERED INDEX indx_JournalPVR03 ON #JournalPVR03 (FundPK,ValueDate,FundJournalAccountPK);

INSERT INTO #JournalPVR03
        ( 
		  FundPK ,
		  ValueDate ,
          Movement ,
          FundJournalAccountPK
        )
	SELECT B.FundPK,ValueDate,SUM(ISNULL(B.BaseDebit,0)) Movement,B.FundJournalAccountPK FROM FundJournal A
	LEFT JOIN FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK 
	WHERE A.ValueDate BETWEEN @Datefrom AND @Dateto
	AND A.Posted = 1 AND A.Status = 2 AND A.Reversed = 0
	AND B.FundJournalAccountPK in (147,78,79,80,200,189,81)
	GROUP BY A.ValueDate,B.FundJournalAccountPK,B.FundPK





INSERT INTO #TableResultSummaryCash03
( FundID,Date, Item, Amount, Baris )
SELECT B.ID,A.Date,'IPO' Item
,case when dbo.CheckTodayIsHoliday(A.Date) = 1 then 0 
	else case when sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,195,B.FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,195,B.FundPK)) < 0 then 0 
		else sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,195,B.FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,195,B.FundPK)) end end * -1 Amount

,25 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund B on B.status = 2
 WHERE A.Date between @datefrom and @dateto
GROUP BY B.ID,A.Date,B.FundPK




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Bank Charge' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,25 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 147 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Biaya Transaksi' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,26 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 78 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'MGT Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,27 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 79 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'CSD Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,28 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 80 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'S-Invest Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,29 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 200 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Tax Expense' Item
,0 Amount
,30 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 189 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Audit Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,31 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 81 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Subscription' Item
,SUM(ISNULL(B.Amount,0)) Amount
,35 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end NAVDate,
	SUM(ISNULL(CashAmount,0)) Amount FROM dbo.ClientSubscription A
	left join FundFee B on A.FundPK = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end  BETWEEN @Datefrom AND @Dateto
	GROUP BY case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end,A.FundPK
)B ON A.Date = B.NAVDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Redemption' Item
,SUM(ISNULL(B.Amount,0) * -1) Amount
,36 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,A.PaymentDate ,SUM(ISNULL(CashAmount,0)) Amount FROM dbo.ClientRedemption A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	GROUP BY A.PaymentDate,A.FundPK
)B ON A.Date = B.PaymentDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'switching' Item
,SUM(ISNULL(B.Amount,0)) Amount
,37 Baris FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
    SELECT A.FundPK,A.Date,SUM(ISNULL(amount,0)) Amount FROM (
	SELECT FundPKTo FundPK,case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end Date,ISNULL(CashAmount,0) Amount FROM dbo.ClientSwitching A
	left join FundFee B on A.FundPKTo = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else A.NAVDate end BETWEEN @Datefrom AND @Dateto

	UNION ALL

	SELECT FundPKFrom FundPK,A.PaymentDate  Date,ISNULL(CashAmount,0) * -1 Amount FROM dbo.ClientSwitching A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	)A

	GROUP BY A.Date,A.FundPK

)B ON A.Date = B.Date AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Subs Fee' Item
,SUM(ISNULL(B.Amount,0)) Amount
,38 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end NAVDate,
	SUM(ISNULL(SubscriptionFeeAmount,0)) Amount FROM dbo.ClientSubscription A
	left join FundFee B on A.FundPK = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end BETWEEN @Datefrom AND @Dateto
	GROUP BY case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end,A.FundPK
)B ON A.Date = B.NAVDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Redeem Fee' Item
,SUM(ISNULL(B.Amount,0) * -1) Amount
,39 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,A.PaymentDate PaymentDate,SUM(ISNULL(RedemptionFeeAmount,0)) Amount FROM dbo.ClientRedemption A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	GROUP BY A.PaymentDate,A.FundPK
)B ON A.Date = B.PaymentDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


CREATE TABLE #FinalResult03SummaryCash
(
	FundID NVARCHAR(200) COLLATE DATABASE_DEFAULT,
	BegCash NUMERIC(22,4),
	Date DATETIME,
	Amount NUMERIC(22,4),
	TDonCall NUMERIC(22,4),
	TD NUMERIC(22,4)
)

INSERT INTO #FinalResult03SummaryCash
        ( FundID, BegCash, Date, Amount,TDonCall,TD )

SELECT A.FundID,B.BegCash,A.Date,SUM(ISNULL(A.Amount,0)) Amount 
,ISNULL(C.AmountTDonCall,0) TDonCall , ISNULL(C.AmountTD,0) TD
FROM #TableResultSummaryCash03 A
LEFT JOIN #TableBegCash B ON A.FundID = B.FundID
LEFT JOIN #TD C on A.FundID = C.FundID

GROUP BY A.FundID,B.BegCash,A.Date,C.AmountTDonCall,C.AmountTD





declare @BegCashPerDate table
(
Date datetime,BegCash numeric(22,4), FundID nvarchar(50)
)
		
declare @CounterDate datetime
declare @CounterDateTo datetime


set @CounterDate = dbo.FWorkingDay(@datefrom,-1)
SET @CounterDateTo = DATEADD(Day,1,@CounterDate)

while (@CounterDate < @dateto)
BEGIN

insert into @BegCashPerDate
select @CounterDateTo,
BegCash + sum(Amount),FundID from #FinalResult03SummaryCash where Date between @datefrom  and @CounterDateTo
group by BegCash,FundID

SET @CounterDate = DATEADD(Day,1,@CounterDate)
SET @CounterDateTo = DATEADD(Day,1,@CounterDate)

END


CREATE TABLE #FinalResult03Summary
(
	FundID NVARCHAR(200) COLLATE DATABASE_DEFAULT,
	BegCash NUMERIC(22,4),
	Date DATETIME,
	Amount NUMERIC(22,4),
	TDonCall NUMERIC(22,4),
	TD NUMERIC(22,4)
)

insert into #FinalResult03Summary
select A.FundID,A.BegCash,A.Date,B.BegCash,A.TDonCall,A.TD from #FinalResult03SummaryCash A
left join @BegCashPerDate B on A.Date = B.Date and A.FundID = B.FundID
left join Fund C on A.FundID = C.ID and C.status in (1,2)
where C.MaturityDate >= @datefrom



DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(Date) +',0) ' + QUOTENAME(Date) 
                    from (SELECT DISTINCT Date FROM #FinalResult03Summary) A
					order by A.Date
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


select @cols = STUFF((SELECT distinct ',' + QUOTENAME(Date) 
                    from #FinalResult03Summary
				
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')






set @query = 'SELECT FundID,' + @colsForQuery + ' ,TD,TDonCall   from 
                (
                SELECT FundID,Date,BegCash,Amount,TDonCall,TD FROM #FinalResult03Summary A
					
			
            ) x
            pivot 
            (
                SUM(Amount)
                for Date in (' + @cols + ')
            ) p 
		
			'
exec(@query)



                            
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PortfolioSummaryCash" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "PortfolioSummaryCash" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "Portfolio Summary Cash";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Portfolio Summary Cash");


                                        int incRowExcel;
                                        int incColExcel = 1;
                                        incRowExcel = 1;
                                        // ini buat header
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[1, incColExcel].Value = dr0.GetName(inc1).ToString();
                                            incColExcel++;
                                        }

                                        // ini buat isian
                                        while (dr0.Read())
                                        {
                                            incColExcel = 1;
                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                //worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0.0000";
                                                //worksheet.Cells[incRowExcel, incColExcel].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                worksheet.Column(incColExcel).AutoFit(); worksheet.Cells[incRowExcel + 1, incColExcel].Value = dr0.GetValue(inc1);

                                                worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                worksheet.Cells[incRowExcel + 1, incColExcel].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                incColExcel++;
                                            }
                                            incRowExcel++;
                                        }
                                        incRowExcel++;



                                        //worksheet.Cells[incRowExcel,incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells[incRowExcel - 1, 1, incRowExcel - 1, _rowCtrp].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells[1, _rowCtrp, incRowExcel - 1, _rowCtrp].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells[1, 1, incRowExcel - 1, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;




                                        //worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.PrinterSettings.FitToWidth = 1;
                                        //worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.Column(incColExcel).AutoFit();
                                        //worksheet.Column(2).AutoFit();
                                        //worksheet.Column(3).AutoFit();




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Portfolio Summary Cash";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Trading Portfolio Bloomberg
            if (_FundAccountingRpt.ReportName.Equals("Trading Portfolio Bloomberg"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                   @"
                                Declare @DateToday date
                                Set @DateToday = GETDATE()
                                declare @InterestDays int

                                SELECT  
                                @InterestDays = DATEDIFF(DAY, valuedate, @valuedate)  
                                FROM enddaytrails  
                                WHERE enddaytrailspk = (SELECT  
                                MAX(enddaytrailspk)  
                                FROM enddaytrails  
                                WHERE valuedate < @valuedate  
                                AND status = 2)  

                                select FP.FundPK , FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
                                F.ID FundID,F.Name FundName,case when I.InstrumentTypePK in (1,4,16) then isnull(I.BloombergISIN,'') else I.ID end InstrumentID,I.Name InstrumentName,FP.MaturityDate MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
                                FP.ClosePrice ClosePrice
                                ,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) / case when @InterestDays = 0 then 1 else  @InterestDays end 
                                else 0 end AccrualHarian
                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) / case when @InterestDays = 0 then 1 else  @InterestDays end 
                                * datediff(day,FP.AcqDate,@ValueDate )
                                else FP.InterestPercent end Accrual
                                ,FP.InterestPercent 
                                ,FP.MarketValue MarketValue,
                                sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
                                case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav , sum(FP.Balance/100) Lot ,case when I.InstrumentTypePK not in (5,6) then case when FP.CostValue = 0 then 0 else sum((FP.MarketValue - FP.CostValue))/FP.CostValue * 100 end else 0 end PercentFR 

                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) * I.TaxExpensePercent/100
                                else 0 end TaxAccInterest
                                ,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance)
                                else 0 end AccInterestBond
                                ,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) * I.TaxExpensePercent/100
                                else 0 end TaxAccInterestBond

								,case when isnull(C.AUM,0) = 0 then 0 else case when I.InstrumentTypePK in (5,10) then isnull(sum(FP.Balance / C.AUM),0) * 100 else isnull(sum(FP.MarketValue / C.AUM),0) * 100 end end PercentPorto
                                ,O.SInvestID,O.Name BankName,N.ID BranchID,FP.AcqDate,case when I.InstrumentTypePK in (1,4,16) then I.BloombergCode when I.InstrumentTypePK in (2,3,8,9,11,13,14,15) then I.ISIN +  case when I.InstrumentTypePK in (2,13) then ' Govt' when  I.InstrumentTypePK in (3) then ' Corp' else '' end else '' end ISINCode
                                ,case when I.InstrumentTypePK in (1,4,16) then I.BloombergCode when I.InstrumentTypePK in (2,3,8,9,11,13,14,15) then I.ISIN else '' end ISIN,
                                 @DateToday MarketPlaceDate,
                                 dbo.FWorkingDay(@DateToday,-1) PXLastDate1,
                                 case when dbo.CheckTodayIsHoliday(dateadd(day,-7,@DateToday)) = 1 
								then dbo.fworkingday(dateadd(day,-7,@DateToday),-1)
								else dateadd(day,-7,@DateToday) end PXLastDate2
                                from fundposition FP   
                                left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
                                left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
                                left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
                                left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status in (1,2)  
                                left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType' and M.status in (1,2)  
                                left join BankBranch N on FP.BankBranchPK = N.BankBranchPK and N.status in (1,2)
                                left join Bank O on N.BankPK = O.BankPK and O.status in (1,2)
								left join CloseNAV C on FP.FundPK = C.FundPK and C.Status in (1,2) and C.Date = 
								( select max(date) from CloseNAV where FundPK = Fp.FundPK and date <= @Valuedate and status in (1,2))
                                where FP.status in (1,2)  and FP.Date = @ValueDate  
								" + _paramFund + @"
                                group by FP.FundPK,Fp.AvgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
                                FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne,O.SInvestID,O.Name,N.ID,FP.AcqDate,I.TaxExpensePercent,
	                            I.BloombergCode,I.ISIN,I.BloombergISIN,C.AUM
                                order by I.ID
                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TradingPortfolioBloomberg" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TradingPortfolioBloomberg" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Trading Portfolio Bloomberg");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TradingPortfolioBloomberg> rList = new List<TradingPortfolioBloomberg>();
                                        while (dr0.Read())
                                        {
                                            TradingPortfolioBloomberg rSingle = new TradingPortfolioBloomberg();
                                            rSingle.SecurityCode = Convert.ToString(dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]));
                                            rSingle.SecurityDescription = Convert.ToString(dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]));
                                            rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentTypeName"]));
                                            rSingle.QtyOfUnit = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.Lot = Convert.ToDecimal(dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]));
                                            rSingle.AverageCost = Convert.ToDecimal(dr0["AvgPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AvgPrice"]));
                                            rSingle.BookValue = Convert.ToDecimal(dr0["CostValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CostValue"]));
                                            rSingle.MarketPrice = Convert.ToDecimal(dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]));
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]));
                                            rSingle.UnrealizedProfitLoss = Convert.ToDecimal(dr0["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealised"]));
                                            rSingle.PercentFR = Convert.ToDecimal(dr0["PercentFR"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentFR"]));
                                            rSingle.BICode = Convert.ToString(dr0["SInvestID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SInvestID"]));
                                            rSingle.Branch = Convert.ToString(dr0["BranchID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BranchID"]));
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.TradeDate = Convert.ToString(dr0["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AcqDate"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.RateGross = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.AccIntTD = Convert.ToDecimal(dr0["AccrualHarian"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccrualHarian"]));
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]));
                                            rSingle.Fund = Convert.ToString(dr0["FundPK"]);
                                            rSingle.ISIN = Convert.ToString(dr0["ISIN"]);
                                            rSingle.ISINCode = Convert.ToString(dr0["ISINCode"]);
                                            rSingle.TaxExpensePercent = Convert.ToDecimal(dr0["TaxAccInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAccInterest"]));
                                            rSingle.AccInterestBond = Convert.ToDecimal(dr0["AccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccInterestBond"]));
                                            rSingle.TaxAccInterestBond = Convert.ToDecimal(dr0["TaxAccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAccInterestBond"]));
                                            rSingle.PercentOfNav = Convert.ToDecimal(dr0["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentOfNav"]));
                                            rSingle.PercentPorto = Convert.ToDecimal(dr0["PercentPorto"]);
                                            rSingle.MarketPlaceDate = Convert.ToDateTime(dr0["MarketPlaceDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MarketPlaceDate"]));
                                            rSingle.PXLastDate1 = Convert.ToDateTime(dr0["PXLastDate1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PXLastDate1"]));
                                            rSingle.PXLastDate2 = Convert.ToDateTime(dr0["PXLastDate2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PXLastDate2"]));
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         orderby r.FundName, r.InstrumentTypePK, r.Date ascending
                                         group r by new { r.Fund, r.FundName, r.InstrumentTypeName, r.Date, r.InstrumentTypePK, r.MarketPlaceDate, r.PXLastDate1, r.PXLastDate2 } into rGroup
                                         select rGroup;


                                        int incRowExcel = 0;

                                        incRowExcel = incRowExcel + 3;


                                        int _cash = 0;
                                        int _endCash = 0;
                                        int _rowDate = 0;
                                        int _rowPXLast = 0;
                                        int _rowAUM = 0;

                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundName(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


                                            _cash = incRowExcel;
                                            worksheet.Cells[incRowExcel, 5].Value = "CASH AT BANK :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_TotalAccountBalanceByFundPK(rsHeader.Key.Fund, 2, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "SINVEST CODE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundSinvestCode(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING PAYMENT :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_OutstandingPaymentByFundPKByDate(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND TYPE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundType(rsHeader.Key.Fund);
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            _endCash = incRowExcel;
                                            worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING RECEIVABLE :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_OutstandingReceivableByFundPKByDate(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;



                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy");
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "CASH PROJECTION :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _cash + ":F" + _endCash + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;




                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT TYPE :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentTypeName;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastNav(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 5].Value = "AUM :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastAUMFromCloseNav(rsHeader.Key.Fund, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            _rowAUM = incRowExcel;
                                            incRowExcel = incRowExcel + 2;


                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16) //Equity
                                            {
                                                worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.MarketPlaceDate;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.PXLastDate1;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 13].Value = rsHeader.Key.PXLastDate2;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "dd-MMM-yy";
                                                _rowDate = incRowExcel;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 3].Value = "Bloomberg Name";
                                                worksheet.Cells[incRowExcel, 4].Value = "Securities Description";
                                                worksheet.Cells[incRowExcel, 5].Value = "Qty Of Unit";
                                                worksheet.Cells[incRowExcel, 6].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 7].Value = "Lot";
                                                worksheet.Cells[incRowExcel, 8].Value = "Average Cost";
                                                worksheet.Cells[incRowExcel, 9].Value = "Book Value";
                                                worksheet.Cells[incRowExcel, 10].Value = "PX_LAST";
                                                worksheet.Cells[incRowExcel, 11].Value = "Market Price";
                                                worksheet.Cells[incRowExcel, 12].Value = "PX_LAST";
                                                worksheet.Cells[incRowExcel, 13].Value = "PX_LAST";
                                                worksheet.Cells[incRowExcel, 14].Value = "DAILY RETURN";
                                                worksheet.Cells[incRowExcel, 15].Value = "WEEKLY RETURN";
                                                worksheet.Cells[incRowExcel, 16].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 17].Value = "Market Value";
                                                worksheet.Cells[incRowExcel, 18].Value = "Unrealized Profit/(Loss)";
                                                worksheet.Cells[incRowExcel, 19].Value = "HOLDING RETURN";
                                                worksheet.Cells[incRowExcel, 20].Value = "%fr P/L";
                                                worksheet.Cells[incRowExcel, 21].Value = "%fr Portofolio";


                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                _rowPXLast = incRowExcel;
                                            }

                                            else if (rsHeader.Key.InstrumentTypePK == 5) //Deposito
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                worksheet.Cells[incRowExcel, 2].Value = "TIME DEPOSIT";
                                                worksheet.Cells[incRowExcel, 3].Value = "BI CODE";
                                                worksheet.Cells[incRowExcel, 4].Value = "BRANCH";
                                                worksheet.Cells[incRowExcel, 5].Value = "Nominal";
                                                worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 8].Value = "Tax Accrued Interest";
                                                worksheet.Cells[incRowExcel, 9].Value = "Rate (Gross)";
                                                worksheet.Cells[incRowExcel, 10].Value = "Acc Int.TD";
                                                worksheet.Cells[incRowExcel, 11].Value = "% fr TA";
                                                worksheet.Cells[incRowExcel, 12].Value = "%fr Portofolio";

                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            }

                                            else
                                            {

                                                worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.MarketPlaceDate;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 13].Value = rsHeader.Key.PXLastDate1;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.PXLastDate2;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "dd-MMM-yy";
                                                _rowDate = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                worksheet.Cells[incRowExcel, 3].Value = "ISIN";
                                                worksheet.Cells[incRowExcel, 4].Value = "Securities Description";
                                                worksheet.Cells[incRowExcel, 5].Value = "Qty Of Unit";
                                                worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Tax Accrued Interest";
                                                worksheet.Cells[incRowExcel, 8].Value = "Accrued Interest";
                                                worksheet.Cells[incRowExcel, 9].Value = "Average Cost";
                                                worksheet.Cells[incRowExcel, 10].Value = "Book Value";
                                                worksheet.Cells[incRowExcel, 11].Value = "PX_LAST";
                                                worksheet.Cells[incRowExcel, 12].Value = "Market Price";
                                                worksheet.Cells[incRowExcel, 13].Value = "PX_LAST";
                                                worksheet.Cells[incRowExcel, 14].Value = "PX_LAST";
                                                worksheet.Cells[incRowExcel, 15].Value = "DAILY RETURN";
                                                worksheet.Cells[incRowExcel, 16].Value = "WEEKLY RETURN";
                                                worksheet.Cells[incRowExcel, 17].Value = "Market Value";
                                                worksheet.Cells[incRowExcel, 18].Value = "Unrealized Profit/(Loss)";
                                                worksheet.Cells[incRowExcel, 19].Value = "HOLDING RETURN";
                                                worksheet.Cells[incRowExcel, 20].Value = "%fr P/L";
                                                worksheet.Cells[incRowExcel, 21].Value = "%fr Portofolio";


                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                _rowPXLast = incRowExcel;



                                            }

                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.ISINCode;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.SecurityDescription;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.QtyOfUnit;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Lot;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.AverageCost;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 11].Formula = "=BDP(J" + incRowExcel + ",J" + _rowPXLast + ")";
                                                    worksheet.Cells[incRowExcel, 12].Formula = "=BDH(J" + incRowExcel + ",L" + _rowPXLast + ",L" + _rowDate + ")";
                                                    worksheet.Cells[incRowExcel, 13].Formula = "=BDH(J" + incRowExcel + ",M" + _rowPXLast + ",M" + _rowDate + ")";
                                                    worksheet.Cells[incRowExcel, 14].Formula = "=(K" + incRowExcel + "/L" + incRowExcel + ")-1";
                                                    worksheet.Cells[incRowExcel, 15].Formula = "=(K" + incRowExcel + "/M" + incRowExcel + ")-1";
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 17].Formula = "=K" + incRowExcel + "*G" + incRowExcel + "*100";
                                                    //worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 18].Formula = "=Q" + incRowExcel + "-I" + incRowExcel;
                                                    //if (Convert.ToInt32(worksheet.Cells[incRowExcel, 18].Value) < 0)
                                                    //{
                                                    //    worksheet.Cells[incRowExcel, 18].Style.Font.Color.SetColor(Color.Red);
                                                    //}
                                                    //worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 19].Formula = "=(Q" + incRowExcel + "/I" + incRowExcel + ")-1";
                                                    //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 20].Formula = "=R" + incRowExcel + "/I" + incRowExcel;
                                                    //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 21].Formula = "=Q" + incRowExcel + "/F" + _rowAUM + "*100%";
                                                    //worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 17].Value = rsDetail.MarketValue;
                                                    //worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 18].Value = rsDetail.UnrealizedProfitLoss;
                                                    //worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 19].Value = rsDetail.PercentFR;
                                                    //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 20].Value = rsDetail.PercentPorto;
                                                    //worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11, incRowExcel, 15].Calculate();

                                                    worksheet.Cells[incRowExcel, 17, incRowExcel, 21].Calculate();

                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                    //var conditionalFormattingRule05 = worksheet.ConditionalFormatting.AddExpression(worksheet.Cells[incRowExcel, 18]);
                                                    //conditionalFormattingRule05.Formula = "($R" + incRowExcel + "< 0)";
                                                    //conditionalFormattingRule05.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    //conditionalFormattingRule05.Style.Fill.BackgroundColor.Color = Color.Red;

                                                    //var conditionalFormattingRule06 = worksheet.ConditionalFormatting.AddExpression(worksheet.Cells[incRowExcel, 19]);
                                                    //conditionalFormattingRule06.Formula = "($S" + incRowExcel + "< 0)";
                                                    //conditionalFormattingRule06.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    //conditionalFormattingRule06.Style.Fill.BackgroundColor.Color = Color.Red;
                                                }

                                                else if (rsHeader.Key.InstrumentTypePK == 5)
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BICode;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Branch;
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Nominal;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.TradeDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.TaxExpensePercent;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.RateGross;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.AccIntTD;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.PercentFR;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.PercentPorto;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.ISIN;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.SecurityDescription;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.QtyOfUnit;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.TaxAccInterestBond;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.AccInterestBond;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.AverageCost;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.ISINCode;
                                                    worksheet.Cells[incRowExcel, 12].Formula = "=BDP(K" + incRowExcel + ",K" + _rowPXLast + ")";
                                                    worksheet.Cells[incRowExcel, 13].Formula = "=BDH(K" + incRowExcel + ",M" + _rowPXLast + ",M" + _rowDate + ")";
                                                    worksheet.Cells[incRowExcel, 14].Formula = "=BDH(K" + incRowExcel + ",N" + _rowPXLast + ",N" + _rowDate + ")";
                                                    worksheet.Cells[incRowExcel, 15].Formula = "=(L" + incRowExcel + "/M" + incRowExcel + ")-1";
                                                    worksheet.Cells[incRowExcel, 16].Formula = "=(L" + incRowExcel + "/N" + incRowExcel + ")-1";
                                                    worksheet.Cells[incRowExcel, 17].Formula = "=L" + incRowExcel + "*E" + incRowExcel + "/100";
                                                    //worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 18].Formula = "=Q" + incRowExcel + "-J" + incRowExcel;
                                                    //if (Convert.ToInt32(worksheet.Cells[incRowExcel, 18].Value) < 0)
                                                    //{
                                                    //    worksheet.Cells[incRowExcel, 18].Style.Font.Color.SetColor(Color.Red);
                                                    //}
                                                    //worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 19].Formula = "=(Q" + incRowExcel + "/J" + incRowExcel + ")-1";
                                                    //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 20].Formula = "=R" + incRowExcel + "/J" + incRowExcel;
                                                    //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 21].Formula = "=Q" + incRowExcel + "/F" + _rowAUM + "*100%";
                                                    //worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 17].Value = rsDetail.MarketValue;
                                                    //worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 18].Value = rsDetail.UnrealizedProfitLoss;
                                                    //worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 19].Value = rsDetail.PercentFR;
                                                    //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 20].Value = rsDetail.PercentPorto;
                                                    //worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12, incRowExcel, 21].Calculate();

                                                    //var conditionalFormattingRule07 = worksheet.ConditionalFormatting.AddExpression(worksheet.Cells[incRowExcel, 18]);
                                                    //conditionalFormattingRule07.Formula = "($R" + incRowExcel + "< 0)";
                                                    //conditionalFormattingRule07.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    //conditionalFormattingRule07.Style.Fill.BackgroundColor.Color = Color.Red;

                                                    //var conditionalFormattingRule08 = worksheet.ConditionalFormatting.AddExpression(worksheet.Cells[incRowExcel, 19]);
                                                    //conditionalFormattingRule08.Formula = "($S" + incRowExcel + "< 0)";
                                                    //conditionalFormattingRule08.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    //conditionalFormattingRule08.Style.Fill.BackgroundColor.Color = Color.Red;

                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";

                                                worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 20].Formula = "R" + incRowExcel + "/I" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();

                                                worksheet.Cells[incRowExcel, 17].Calculate();
                                                worksheet.Cells[incRowExcel, 18].Calculate();
                                                worksheet.Cells[incRowExcel, 20].Calculate();
                                                worksheet.Cells[incRowExcel, 21].Calculate();

                                            }
                                            else if (rsHeader.Key.InstrumentTypePK == 5)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();

                                            }
                                            else
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 20].Formula = "R" + incRowExcel + "/J" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";

                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 17].Calculate();
                                                worksheet.Cells[incRowExcel, 18].Calculate();
                                                worksheet.Cells[incRowExcel, 20].Calculate();
                                                worksheet.Cells[incRowExcel, 21].Calculate();
                                            }

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 21];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 50;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 21;
                                        worksheet.Column(11).Width = 22;
                                        worksheet.Column(12).Width = 21;
                                        worksheet.Column(13).Width = 21;
                                        worksheet.Column(14).Width = 21;
                                        worksheet.Column(15).Width = 21;
                                        worksheet.Column(16).Width = 22;
                                        worksheet.Column(17).Width = 25;
                                        worksheet.Column(18).Width = 25;
                                        worksheet.Column(19).Width = 25;
                                        worksheet.Column(20).Width = 25;
                                        worksheet.Column(21).Width = 25;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Trading Portfolio Bloomberg";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Daily Deal Board
            if (_FundAccountingRpt.ReportName.Equals("Daily Deal Board"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            // FUND
                            cmd.CommandText = @"
                            
                            select distinct A.FundPK from Fund A
                            where A.status in (1,2)
                            " + _paramFund;

                            cmd.CommandTimeout = 0;

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {

                                if (dr0.HasRows)
                                {

                                    string filePath = Tools.ReportsPath + "DailyDealBoard" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailyDealBoard" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("DAILY DEAL BOARD");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailyDealBoard> rList = new List<DailyDealBoard>();
                                        while (dr0.Read())
                                        {
                                            DailyDealBoard rSingle = new DailyDealBoard();
                                            rSingle.FundPK = Convert.ToString(dr0["FundPK"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByFund =
                                        from r in rList
                                        orderby r.FundPK ascending
                                        group r by new { r.FundPK } into rGroup
                                        select rGroup;

                                        int incRowExcel = 1;
                                        //int _colCurrency = 0;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsHeader in GroupByFund)
                                        {


                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText =


                                                   @"   

--declare @Date datetime
--declare @FundPK int

--set @Date = '11/12/2020'
--set @FundPk = 4



declare @YesterdayDateFP date
set @YesterdayDateFP =  dbo.FWorkingDay(@Date,-1) 

DECLARE @table TABLE
(
	FundPK INT,
	Baris INT,
	TotalSent INT
)



DECLARE @totalTrx INT
SET @totalTrx = 0
---------------------Equity-------------
SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (1,4,16)
AND FundPK = @FundPK
AND TrxType = 1


--set @totalTrx =  @@ROWCOUNT


INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,1,@totalTrx

SET @totalTrx = 0

-------------------------
SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (1,4,16)
AND FundPK = @FundPK
AND TrxType = 2


--set @totalTrx =  @@ROWCOUNT


INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,2,@totalTrx

SET @totalTrx = 0

-------------------Fixed Income---------------

SELECT @totalTrx=COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (2,3,12,13,15)
AND FundPK = @FundPK
AND TrxType = 1


--set @totalTrx =  @@ROWCOUNT



INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,3,@totalTrx


SET @totalTrx = 0

-------------------
SELECT @totalTrx=COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (2,3,12,13,15)
AND FundPK = @FundPK
AND TrxType = 2


--set @totalTrx =  @@ROWCOUNT



INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,4,@totalTrx


SET @totalTrx = 0

--------------------------------------------Money Market------------------
SELECT @totalTrx=COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (5) --Depo Placement
AND FundPK = @FundPK
AND TrxType = 1

--set @totalTrx =  @@ROWCOUNT

INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,5,@totalTrx


SET @totalTrx = 0

-------------------------------------------------------------
SELECT @totalTrx=COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (5) --Depo Liquidate
AND FundPK = @FundPK
AND TrxType = 2

--set @totalTrx =  @@ROWCOUNT

INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,6,@totalTrx


SET @totalTrx = 0
-------------------------------------------------------------
SELECT @totalTrx=COUNT(A.InstrumentPK) FROM dbo.FundPosition A
LEFT JOIN Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
LEFT JOIN (
	select TrxBuy,InstrumentPK FROM dbo.Investment WHERE StatusSettlement = 2 
	AND ValueDate = @Date
	AND InstrumentTypePK IN (5) 
	AND FundPK = @FundPK
	AND TrxType = 3
)C on A.[Identity] = C.TrxBuy
where A.status = 2 and A.date = @YesterdayDateFP 
AND A.fundPK = @FundPK and A.MaturityDate = @Date --Depo Mature
AND B.InstrumentTypePK IN (5)
AND C.InstrumentPK is null
--set @totalTrx =  @@ROWCOUNT

INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,7,@totalTrx
SET @totalTrx = 0
-------------------------------------------------------------
SELECT @totalTrx=COUNT(InvestmentPK) FROM dbo.Investment WHERE StatusSettlement = 2 
AND ValueDate = @Date
AND InstrumentTypePK IN (5) --Depo Rollover
AND FundPK = @FundPK
AND TrxType = 3

--set @totalTrx =  @@ROWCOUNT

INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,8,@totalTrx
SET @totalTrx = 0



-------------------------------Unit Registry-------------------

SELECT @totalTrx = COUNT(ClientSubscriptionPK) FROM dbo.ClientSubscription WHERE status = 2 
AND NAVDate = @Date
AND FundPK = @FundPK

--set @totalTrx =  @@ROWCOUNT

INSERT INTO @table
        ( FundPK, Baris, TotalSent )

SELECT @FundPK,9,@totalTrx

SET @totalTrx = 0


SELECT @totalTrx = COUNT(ClientRedemptionPK) FROM dbo.ClientRedemption WHERE status = 2 
AND NAVDate = @Date
AND FundPK = @FundPK
--set @totalTrx =  @@ROWCOUNT

INSERT INTO @table
        ( FundPK,Baris, TotalSent )

SELECT @FundPK,10,@totalTrx


SET @totalTrx = 0

SELECT @totalTrx = COUNT(ClientSwitchingPK) FROM dbo.ClientSwitching WHERE status = 2 
AND NAVDate = @Date
AND (FundPKFrom = @FundPK)

--set @totalTrx =  @@ROWCOUNT

INSERT INTO @table
        ( FundPK,Baris, TotalSent )

SELECT @FundPK,11,@totalTrx


SELECT @totalTrx = COUNT(ClientSwitchingPK) FROM dbo.ClientSwitching WHERE status = 2 
AND NAVDate = @Date
AND (FundPKTo = @FundPK)

--set @totalTrx =  @@ROWCOUNT

INSERT INTO @table
        ( FundPK,Baris, TotalSent )

SELECT @FundPK,12,@totalTrx

--if exists (
--	select * from @Table where isnull(Reference,'') <> ''
--)
--BEGIN
 select * from @Table
--END
--ELSE
--BEGIN
--	return
--END

";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                                                    cmd1.ExecuteNonQuery();


                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {

                                                        if (dr1.HasRows)
                                                        {
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_FundName(rsHeader.Key.FundPK);
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Merge = true;
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 18;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Wisma Indocement 3rd Floor";
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Merge = true;
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "JL. Jend. Sudirman Kav .70 - 71";
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Merge = true;
                                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Jakarta 12910";
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Merge = true;
                                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Phone" + " " + _host.Get_CompanyPhone() + ": " + "Facsimile" + " " + _host.Get_CompanyFax();
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Merge = true;
                                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            incRowExcel++;

                                                            incRowExcel = incRowExcel + 1;

                                                            worksheet.Cells[incRowExcel, 1].Value = "TO";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankCustodianName(rsHeader.Key.FundPK);
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "ATTN";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankBranchAttendance(rsHeader.Key.FundPK);
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "FAX";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankBranchFax(rsHeader.Key.FundPK);
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Telp";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankBranchPhone(rsHeader.Key.FundPK);
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "From";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                                            //incRowExcel++;
                                                            //worksheet.Cells[incRowExcel, 1].Value = "Company Telp";
                                                            //worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            //worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyPhone();
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = _FundAccountingRpt.ValueDateFrom;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Subject";
                                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            worksheet.Cells[incRowExcel, 3].Value = "DAILY DEAL BOARD";
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                                            //incRowExcel++;
                                                            //worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                                            //worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                            //worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundName(rsHeader.Key.FundPK);
                                                            incRowExcel = incRowExcel + 2;
                                                            worksheet.Cells[incRowExcel, 1].Value = "We confirm you today we have sent you the following instruction";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            incRowExcel++;

                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<DailyDealBoard> rList1 = new List<DailyDealBoard>();
                                                                while (dr1.Read())
                                                                {
                                                                    DailyDealBoard rSingle1 = new DailyDealBoard();
                                                                    rSingle1.FundPK = Convert.ToString(dr1["FundPK"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["FundPK"]));
                                                                    rSingle1.Baris = Convert.ToInt32(dr1["Baris"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["Baris"]));
                                                                    rSingle1.TotalSent = Convert.ToInt32(dr1["TotalSent"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["TotalSent"]));
                                                                    //rSingle1.Reference = Convert.ToString(dr1["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["Reference"]));

                                                                    rList1.Add(rSingle1);

                                                                }

                                                                incRowExcel++;
                                                                var GroupByReference1 =
                                                                from r1 in rList1
                                                                group r1 by new { } into rGroup1
                                                                select rGroup1;

                                                                foreach (var rsHeader1 in GroupByReference1)
                                                                {

                                                                    worksheet.Cells[incRowExcel, 1].Value = "Name of Instruction";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Total of Instruction";
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Bold = true;
                                                                    //worksheet.Cells[incRowExcel, 4].Value = "Reference Number";

                                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                    //worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);



                                                                    int _inc; int _equity; int _bond; int _deposito;
                                                                    foreach (var rsDetail1 in rsHeader1)
                                                                    {
                                                                        _inc = incRowExcel;

                                                                        if (rsDetail1.Baris == 1)
                                                                        {
                                                                            _equity = _inc + 1;

                                                                            worksheet.Cells[_equity, 1].Value = "Equity";
                                                                            worksheet.Cells[_equity, 1].Style.Font.Bold = true;
                                                                            _equity++;
                                                                            worksheet.Cells[_equity, 1].Value = "Purchase";
                                                                            worksheet.Cells[_equity, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_equity, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_equity, 2, _equity, 3].Merge = true;
                                                                            worksheet.Cells[_equity, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_equity, 2, _equity, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_equity, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 2)
                                                                        {
                                                                            _equity = _inc + 3;
                                                                            worksheet.Cells[_equity, 1].Value = "Sale";
                                                                            worksheet.Cells[_equity, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_equity, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_equity, 2, _equity, 3].Merge = true;
                                                                            worksheet.Cells[_equity, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_equity, 2, _equity, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_equity, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            _equity++;
                                                                            worksheet.Cells[_equity, 1].Value = "";
                                                                            worksheet.Cells[_equity, 2, _equity, 3].Merge = true;
                                                                            worksheet.Cells[_equity, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_equity, 2, _equity, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        }


                                                                        else if (rsDetail1.Baris == 3)
                                                                        {
                                                                            _bond = _inc + 5;
                                                                            worksheet.Cells[_bond, 1].Value = "Fixed Income";
                                                                            worksheet.Cells[_bond, 1].Style.Font.Bold = true;
                                                                            _bond++;
                                                                            worksheet.Cells[_bond, 1].Value = "Purchase";
                                                                            worksheet.Cells[_bond, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_bond, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_bond, 2, _bond, 3].Merge = true;
                                                                            worksheet.Cells[_bond, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_bond, 2, _bond, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bond, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 4)
                                                                        {
                                                                            _bond = _inc + 7;
                                                                            worksheet.Cells[_bond, 1].Value = "Sale";
                                                                            worksheet.Cells[_bond, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_bond, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_bond, 2, _bond, 3].Merge = true;
                                                                            worksheet.Cells[_bond, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_bond, 2, _bond, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bond, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            _bond++;
                                                                            worksheet.Cells[_bond, 1].Value = "";
                                                                            worksheet.Cells[_bond, 2, _bond, 3].Merge = true;
                                                                            worksheet.Cells[_bond, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_bond, 2, _bond, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bond, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        }


                                                                        else if (rsDetail1.Baris == 5)
                                                                        {
                                                                            _deposito = _inc + 9;
                                                                            worksheet.Cells[_deposito, 1].Value = "Time Deposit";
                                                                            worksheet.Cells[_deposito, 1].Style.Font.Bold = true;
                                                                            _deposito++;
                                                                            worksheet.Cells[_deposito, 1].Value = "Placement";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 6)
                                                                        {
                                                                            _deposito = _inc + 11;
                                                                            worksheet.Cells[_deposito, 1].Value = "Liquidate";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 7)
                                                                        {
                                                                            _deposito = _inc + 12;
                                                                            worksheet.Cells[_deposito, 1].Value = "Mature";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 8)
                                                                        {
                                                                            _deposito = _inc + 13;
                                                                            worksheet.Cells[_deposito, 1].Value = "Roll - Over";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            _deposito++;
                                                                            worksheet.Cells[_deposito, 1].Value = "";
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        }


                                                                        else if (rsDetail1.Baris == 9)
                                                                        {
                                                                            _deposito = _inc + 15;

                                                                            worksheet.Cells[_deposito, 1].Value = "Unit Registry";
                                                                            worksheet.Cells[_deposito, 1].Style.Font.Bold = true;
                                                                            _deposito++;
                                                                            worksheet.Cells[_deposito, 1].Value = "Subscription";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 10)
                                                                        {
                                                                            _deposito = _inc + 17;
                                                                            worksheet.Cells[_deposito, 1].Value = "Redemption";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 11)
                                                                        {
                                                                            _deposito = _inc + 18;
                                                                            worksheet.Cells[_deposito, 1].Value = "Switching from";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 12)
                                                                        {
                                                                            _deposito = _inc + 19;
                                                                            worksheet.Cells[_deposito, 1].Value = "Switching To";
                                                                            worksheet.Cells[_deposito, 2].Value = rsDetail1.TotalSent;
                                                                            //worksheet.Cells[_deposito, 4].Value = rsDetail1.Reference;

                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Merge = true;
                                                                            worksheet.Cells[_deposito, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells[_deposito, 2, _deposito, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_deposito, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }

                                                                        //worksheet.Cells[incRowExcel + 2, 1].Value = "Netting Instruction";
                                                                        //worksheet.Cells[incRowExcel + 2, 2, incRowExcel + 2, 3].Merge = true;
                                                                        //worksheet.Cells[incRowExcel + 2, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        //worksheet.Cells[incRowExcel + 2, 2, incRowExcel + 2, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        ////worksheet.Cells[incRowExcel + 2, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        //worksheet.Cells[incRowExcel + 5, 1].Value = "Purchase IPO";
                                                                        //worksheet.Cells[incRowExcel + 5, 2, incRowExcel + 5, 3].Merge = true;
                                                                        //worksheet.Cells[incRowExcel + 5, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        //worksheet.Cells[incRowExcel + 5, 2, incRowExcel + 5, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        ////worksheet.Cells[incRowExcel + 5, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        //worksheet.Cells[incRowExcel + 7, 1].Value = "Stock / Bond Closeing Price";
                                                                        //worksheet.Cells[incRowExcel + 7, 2, incRowExcel + 7, 3].Merge = true;
                                                                        //worksheet.Cells[incRowExcel + 7, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        //worksheet.Cells[incRowExcel + 7, 2, incRowExcel + 7, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        ////worksheet.Cells[incRowExcel + 7, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        //worksheet.Cells[incRowExcel + 8, 1].Value = "Others (Specify)";
                                                                        //worksheet.Cells[incRowExcel + 8, 2, incRowExcel + 8, 3].Merge = true;
                                                                        //worksheet.Cells[incRowExcel + 8, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        //worksheet.Cells[incRowExcel + 8, 2, incRowExcel + 8, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        ////worksheet.Cells[incRowExcel + 8, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        //worksheet.Cells[incRowExcel + 9, 1].Value = "Instruction Payment";
                                                                        //worksheet.Cells[incRowExcel + 9, 2, incRowExcel + 9, 3].Merge = true;
                                                                        //worksheet.Cells[incRowExcel + 9, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        //worksheet.Cells[incRowExcel + 9, 2, incRowExcel + 9, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        ////worksheet.Cells[incRowExcel + 9, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        //worksheet.Cells[incRowExcel + 10, 1].Value = "Instruction Change of Custody Fee";
                                                                        //worksheet.Cells[incRowExcel + 10, 2, incRowExcel + 10, 3].Merge = true;
                                                                        //worksheet.Cells[incRowExcel + 10, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        //worksheet.Cells[incRowExcel + 10, 2, incRowExcel + 10, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        ////worksheet.Cells[incRowExcel + 10, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        //worksheet.Cells[incRowExcel + 11, 1].Value = "Instruction Transfer Money";
                                                                        //worksheet.Cells[incRowExcel + 11, 2, incRowExcel + 11, 3].Merge = true;
                                                                        //worksheet.Cells[incRowExcel + 11, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        //worksheet.Cells[incRowExcel + 11, 2, incRowExcel + 11, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                        ////worksheet.Cells[incRowExcel + 11, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                    }

                                                                    incRowExcel = incRowExcel + 10;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Value = "Approved by";
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.WrapText = true;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    incRowExcel = incRowExcel + 7;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Value = "Authorized signature";
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.WrapText = true;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    _endRowDetail = incRowExcel;
                                                                    incRowExcel = incRowExcel + 15;
                                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                                }


                                                            }

                                                        }
                                                    }
                                                }
                                            }




                                            //incRowExcel++;
                                        }





                                        //incRowExcel++;



                                        string _rangeDetail = "A3:G3";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(1).Width = 23;
                                        worksheet.Column(2).Width = 3;
                                        worksheet.Column(3).Width = 40;
                                        worksheet.Column(4).Width = 12;
                                        worksheet.Column(5).Width = 12;
                                        worksheet.Column(6).Width = 12;
                                        worksheet.Column(7).Width = 12;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20&B DAILY DEAL BOARD";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                    }
                                }

                                return true;
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            //#region CSR Report
            //else if (_FundAccountingRpt.ReportName.Equals("CSR Report"))
            //{
            //    try
            //    {
            //        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
            //        {
            //            DbCon.Open();
            //            using (SqlCommand cmd = DbCon.CreateCommand())
            //            {

            //                string _paramFund = "";
            //                string _paramAgent = "";

            //                if (!_host.findString(_FundAccountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.AgentFrom))
            //                {
            //                    _paramAgent = " And A.AgentPK in ( " + _FundAccountingRpt.AgentFrom + " ) ";
            //                }
            //                else
            //                {
            //                    _paramAgent = "";
            //                }
            //                if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
            //                {
            //                    _paramFund = " And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
            //                }
            //                else
            //                {
            //                    _paramFund = "";
            //                }

            //                cmd.CommandText =
            //                    @"

            //                Select A.FeeType,A.AgentPK,A.FundPK,C.Name FundName, B.ID CSRName,A.MFeePercent ManagementFeeRate, B.AgentFee CSRFee, E.DescOne ManagementFeeType,
            //                case when A.FeeType = 1 then 'Management Fee' else 'AUM' end SharingFeeType,F.ID Currency,
            //                A.Date,A.NAV,unit,AUM,MFee,
            //                Case when A.FeeType = 1 then A.MFee * B.AgentFee else A.AUM * B.AgentFee/100/A.mfeeDays end GrossShare,
            //                0.02 Pph23, 0 NetFeePercent
            //                From AgentCSRDataForCommissionRpt A
            //                left join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
            //                left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
            //                --left join FundFeeSetup D on A.FundPK = D.FundPK and D.status in (1,2)
            //                left join MasterValue E ON A.FeeType = E.Code AND E.ID = 'FundFeeType' AND E.status in (1,2)
            //                left join Currency F on C.CurrencyPK = F.CurrencyPK and F.status in (1,2)
            //                Where A.Date between @Datefrom and @DateTo " + _paramFund + _paramAgent + @"
            //                order by A.FeeType,A.Date
            //                ";
            //                cmd.CommandTimeout = 0;
            //                cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
            //                cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


            //                using (SqlDataReader dr0 = cmd.ExecuteReader())
            //                {
            //                    if (!dr0.HasRows)
            //                    {
            //                        return false;
            //                    }
            //                    else
            //                    {
            //                        string filePath = Tools.ReportsPath + "CSRReport" + "_" + _userID + ".xlsx";
            //                        string pdfPath = Tools.ReportsPath + "CSRReport" + "_" + _userID + ".pdf";
            //                        FileInfo excelFile = new FileInfo(filePath);
            //                        if (excelFile.Exists)
            //                        {
            //                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
            //                            excelFile = new FileInfo(filePath);
            //                        }


            //                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
            //                        using (ExcelPackage package = new ExcelPackage(excelFile))
            //                        {
            //                            package.Workbook.Properties.Title = "FundAccountingReport";
            //                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
            //                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
            //                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
            //                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
            //                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

            //                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("CSR Report");

            //                            int incRowExcel = 1;


            //                            //ATUR DATA GROUPINGNYA DULU
            //                            List<CSRFeeReport> rList = new List<CSRFeeReport>();
            //                            while (dr0.Read())
            //                            {
            //                                CSRFeeReport rSingle = new CSRFeeReport();
            //                                rSingle.FeeType = Convert.ToInt32(dr0["FeeType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["FeeType"]));
            //                                rSingle.AgentPK = Convert.ToInt32(dr0["AgentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["AgentPK"]));
            //                                rSingle.FundPK = Convert.ToInt32(dr0["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["FundPK"]));
            //                                rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
            //                                rSingle.CSRName = Convert.ToString(dr0["CSRName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CSRName"]));
            //                                rSingle.ManagementFeeRate = Convert.ToDecimal(dr0["ManagementFeeRate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFeeRate"]));
            //                                rSingle.CSRFee = Convert.ToDecimal(dr0["CSRFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CSRFee"]));
            //                                rSingle.ManagementFeeType = Convert.ToString(dr0["ManagementFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ManagementFeeType"]));
            //                                rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));
            //                                rSingle.Currency = Convert.ToString(dr0["Currency"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency"]));
            //                                rSingle.Date = Convert.ToString(dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]));
            //                                rSingle.NAV = Convert.ToDecimal(dr0["NAV"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NAV"]));
            //                                rSingle.unit = Convert.ToDecimal(dr0["unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["unit"]));
            //                                rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
            //                                rSingle.MFee = Convert.ToDecimal(dr0["MFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFee"]));
            //                                rSingle.GrossShare = Convert.ToDecimal(dr0["GrossShare"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["GrossShare"]));
            //                                rSingle.Pph23 = Convert.ToDecimal(dr0["Pph23"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Pph23"]));

            //                                rList.Add(rSingle);

            //                            }

            //                            var QueryBySales =
            //                             from r in rList
            //                             orderby r.FeeType, r.FundName ascending
            //                             group r by new { r.FeeType, r.FundName, r.CSRName, r.ManagementFeeRate, r.CSRFee, r.ManagementFeeType, r.SharingFeeType, r.Currency } into rGroup
            //                             select rGroup;

            //                            foreach (var rsHeader in QueryBySales)
            //                            {

            //                                worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

            //                                incRowExcel++;
            //                                worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

            //                                worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyName();
            //                                worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Merge = true;
            //                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "CSR Name";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CSRName;

            //                                worksheet.Cells[incRowExcel, 6].Value = _host.Get_CompanyAddress();
            //                                worksheet.Cells[incRowExcel, 6].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
            //                                worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Merge = true;
            //                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeeRate + "%";
            //                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //                                worksheet.Cells[incRowExcel, 7].Value = "(6221) 2783 0889";
            //                                worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Merge = true;
            //                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "CSR Fee";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CSRFee + "%";
            //                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //                                worksheet.Cells[incRowExcel, 7].Value = "(6221) 2970 7333";
            //                                worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Merge = true;
            //                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //                                string _cellSharingFee = "C" + incRowExcel;


            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeeType;

            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

            //                                incRowExcel++;


            //                                worksheet.Cells[incRowExcel, 1].Value = "Currency";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

            //                                incRowExcel++;

            //                                incRowExcel = incRowExcel + 2;
            //                                int RowB = incRowExcel;
            //                                int RowG = incRowExcel + 1;

            //                                if (rsHeader.Key.FeeType == 1)
            //                                {

            //                                    worksheet.Cells[incRowExcel, 1].Value = "Date.";
            //                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
            //                                    worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
            //                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
            //                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
            //                                    worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
            //                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 3].Value = "UNIT";
            //                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
            //                                    worksheet.Cells["C" + incRowExcel + ":C" + RowG].Merge = true;
            //                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 4].Value = "AUM";
            //                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
            //                                    worksheet.Cells["D" + incRowExcel + ":D" + RowG].Merge = true;
            //                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 5].Value = "Management Fee (" + rsHeader.Key.ManagementFeeRate + ")";
            //                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
            //                                    worksheet.Cells["E" + incRowExcel + ":E" + RowG].Merge = true;
            //                                    worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 6].Value = "Gross Fee Share (" + rsHeader.Key.CSRFee + ")";
            //                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
            //                                    worksheet.Cells["F" + incRowExcel + ":F" + RowG].Merge = true;
            //                                    worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 7].Value = "PPH 23 (2%)";
            //                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
            //                                    worksheet.Cells["G" + incRowExcel + ":G" + RowG].Merge = true;
            //                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 8].Value = "Net FeeShare(0.5)";
            //                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
            //                                    worksheet.Cells["H" + incRowExcel + ":H" + RowG].Merge = true;
            //                                    worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    incRowExcel++;
            //                                    worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

            //                                }
            //                                else
            //                                {

            //                                    worksheet.Cells[incRowExcel, 1].Value = "Date.";
            //                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
            //                                    worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
            //                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
            //                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
            //                                    worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
            //                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 3].Value = "UNIT";
            //                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
            //                                    worksheet.Cells["C" + incRowExcel + ":C" + RowG].Merge = true;
            //                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 4].Value = "AUM";
            //                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
            //                                    worksheet.Cells["D" + incRowExcel + ":D" + RowG].Merge = true;
            //                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 5].Value = "Gross Fee Share (" + rsHeader.Key.CSRFee + ")";
            //                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
            //                                    worksheet.Cells["E" + incRowExcel + ":E" + RowG].Merge = true;
            //                                    worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 6].Value = "PPH 23 (2%)";
            //                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
            //                                    worksheet.Cells["F" + incRowExcel + ":F" + RowG].Merge = true;
            //                                    worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 7].Value = "Net FeeShare(0.5)";
            //                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
            //                                    worksheet.Cells["G" + incRowExcel + ":G" + RowG].Merge = true;
            //                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    incRowExcel++;
            //                                    worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;


            //                                }


            //                                incRowExcel++;
            //                                int StartRow = incRowExcel;
            //                                foreach (var rsDetail in rsHeader)
            //                                {
            //                                    int RowC = incRowExcel;
            //                                    int RowD = incRowExcel;
            //                                    int RowE = incRowExcel + 1;

            //                                    if (rsHeader.Key.FeeType == 1)
            //                                    {
            //                                        worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
            //                                        worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


            //                                        worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
            //                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.NAV;
            //                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
            //                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.unit;
            //                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
            //                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUM;
            //                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(" + rsDetail.MFee + "/" + 1.1 + ")";
            //                                        worksheet.Cells[incRowExcel, 5].Calculate();
            //                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(" + rsDetail.GrossShare + "/" + 1.1 + ")";
            //                                        worksheet.Cells[incRowExcel, 6].Calculate();
            //                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(F" + incRowExcel + "*" + rsDetail.Pph23 + ")";
            //                                        worksheet.Cells[incRowExcel, 7].Calculate();
            //                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(F" + incRowExcel + "-G" + incRowExcel + ")";
            //                                        worksheet.Cells[incRowExcel, 8].Calculate();
            //                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

            //                                        incRowExcel++;
            //                                    }
            //                                    else
            //                                    {
            //                                        worksheet.Cells["A" + RowD + ":G" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
            //                                        worksheet.Cells["A" + RowD + ":G" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


            //                                        worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
            //                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.NAV;
            //                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
            //                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.unit;
            //                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
            //                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUM;
            //                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(" + rsDetail.GrossShare + "/" + 1.1 + ")";
            //                                        worksheet.Cells[incRowExcel, 5].Calculate();
            //                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(E" + incRowExcel + "*" + rsDetail.Pph23 + ")";
            //                                        worksheet.Cells[incRowExcel, 6].Calculate();
            //                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(E" + incRowExcel + "-F" + incRowExcel + ")";
            //                                        worksheet.Cells[incRowExcel, 7].Calculate();
            //                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

            //                                        incRowExcel++;
            //                                    }


            //                                }


            //                                int RowH = incRowExcel;
            //                                int EndRow = RowH - 1;

            //                                if (rsHeader.Key.FeeType == 1)
            //                                {
            //                                    worksheet.Cells["A" + RowH + ":H" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells[incRowExcel, 2].Value = "Total :";
            //                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //                                    worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
            //                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";
            //                                    worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + StartRow + ":H" + EndRow + ")";

            //                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

            //                                    worksheet.Cells[incRowExcel, 5].Calculate();
            //                                    worksheet.Cells[incRowExcel, 6].Calculate();
            //                                    worksheet.Cells[incRowExcel, 8].Calculate();

            //                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
            //                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
            //                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
            //                                    //worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
            //                                    //incRowExcel = incRowExcel + 3;
            //                                }
            //                                else
            //                                {
            //                                    worksheet.Cells["A" + RowH + ":G" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells[incRowExcel, 2].Value = "Total :";
            //                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //                                    worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
            //                                    worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + StartRow + ":G" + EndRow + ")";

            //                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

            //                                    worksheet.Cells[incRowExcel, 5].Calculate();
            //                                    worksheet.Cells[incRowExcel, 7].Calculate();

            //                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
            //                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

            //                                }

            //                                worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
            //                                incRowExcel = incRowExcel + 3;

            //                            }

            //                            worksheet.PrinterSettings.FitToPage = true;
            //                            worksheet.PrinterSettings.FitToWidth = 1;
            //                            worksheet.PrinterSettings.FitToHeight = 0;
            //                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 8];
            //                            worksheet.Column(1).Width = 15;
            //                            worksheet.Column(2).Width = 20;
            //                            worksheet.Column(3).Width = 20;
            //                            worksheet.Column(4).Width = 20;
            //                            worksheet.Column(5).Width = 28;
            //                            worksheet.Column(6).Width = 23;
            //                            worksheet.Column(7).Width = 20;
            //                            worksheet.Column(8).Width = 20;

            //                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
            //                            //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
            //                            worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
            //                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

            //                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
            //                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
            //                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
            //                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
            //                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
            //                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
            //                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
            //                            Image img = Image.FromFile(Tools.ReportImage);
            //                            worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

            //                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
            //                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

            //                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
            //                            worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

            //                            package.Save();
            //                            //Tools.ExportFromExcelToPDF(filePath, pdfPath);
            //                            return true;
            //                        }
            //                    }
            //                }
            //            }
            //        }
            //    }
            //    catch (Exception err)
            //    {
            //        throw err;
            //    }
            //}

            //#endregion


            else
            {
                return false;
            }
        }

        public List<InstrumentForInvestment> Instrument_LookupForOMSBondByMarketPK(int _trxType, int _fundPK, DateTime _date, int _marketPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<InstrumentForInvestment> L_Instrument = new List<InstrumentForInvestment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_trxType == 1)
                        {
                            cmd.CommandText = @"select InstrumentPK,I.ID + ' - ' + I.Name InstrumentID, I.Name, I.MaturityDate, I.InterestPercent,0 Balance,  D.ID CurrencyID,I.CurrencyPK,isnull(12/B.Priority,0) PaymentType 
                            FROM  instrument I 
                            left join InstrumentType IT on I.InstrumentTypePK=IT.InstrumentTypePK and IT.status = 2 left join Currency D on I.CurrencyPK = D.CurrencyPK and D.status = 2 
                            left join MasterValue B on I.InterestPaymentType = B.Code and B.ID = 'InterestPaymentType' and B.status = 2
                            where I.status = 2 and IT.InstrumentTypePK in (2,3,8,9,13,15) and I.MarketPK = @MarketPK and MaturityDate >= @Date order by I.ID ";
                            cmd.Parameters.AddWithValue("@Date", _date);
                            cmd.Parameters.AddWithValue("@MarketPK", _marketPK);
                        }
                        else if (_trxType == 2)
                        {

                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"

                            Declare @TrailsPK int
                            Declare @TrailsDate datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK,@TrailsDate = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @Date  and FundPK = @FundPK   
                            )
                            and status = 2 and FundPK = @FundPK                               

                            select A.TrxBuy,A.TrxBuyType,A.InstrumentPK,A.InstrumentID,A.Balance BegBalance,sum(isnull(B.MovBalance,0)) MovBalance,A.Balance + sum(isnull(B.MovBalance,0)) Balance,A.CurrencyID,A.AcqDate,A.InterestPercent,A.MaturityDate,A.TrxBuy,A.TrxBuyType,A.AvgPrice,isnull(12/C.Priority,0) PaymentType from (

                            select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,A.Balance Balance,'IDR' CurrencyID,'1900-01-01' AcqDate,C.InterestPercent,B.MaturityDate MaturityDate,0 TrxBuy,'FP' TrxBuyType,C.AvgPrice,B.InterestPaymentType from 
							( select A.InstrumentPK,sum(A.Balance) Balance from FundPosition A    
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2    
                            Left join Currency D on A.CurrencyPK = D.CurrencyPK and D.status = 2   
                            where A.FundPK = @FundPK  and A.TrailsPK = @TrailsPK and B.InstrumentTypePK in (2,3,8,9,13,15) and A.MarketPK = @MarketPK  and A.status = 2 and A.MaturityDate >= @Date
							group by A.InstrumentPK
							)A
							left join FundPosition C on A.InstrumentPK = C.InstrumentPK and C.Status = 2   
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2    
                            Left join Currency D on C.CurrencyPK = D.CurrencyPK and D.status = 2   
                            where C.FundPK = @FundPK  and C.TrailsPK = @TrailsPK and B.InstrumentTypePK in (2,3,8,9,13,15) and C.MarketPK = @MarketPK 
							group By A.InstrumentPK,B.ID,B.Name,A.Balance,C.InterestPercent,C.AvgPrice,B.InterestPaymentType,B.MaturityDate

                            union all
	
                            Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(case when A.TrxType = 1  then A.DoneVolume else
                            case when A.trxType = 2  then A.DoneVolume * -1 end end) MovBalance,'IDR',A.ValueDate,A.InterestPercent,A.MaturityDate,InvestmentPK TrxBuy,'INV' TrxBuyType,A.DonePrice,B.InterestPaymentType
                            from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            Left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                            where ValueDate = @Date and StatusInvestment = 2 and StatusDealing = 2 and A.instrumentTypePK in (2,3,8,9,13,15) and OrderStatus in ('M','P') and A.MaturityDate >= @Date
                            and FundPK = @FundPK and TrxType  = 1  and A.MarketPK = @MarketPK 
                            group By A.InstrumentPK,B.ID,B.Name,B.InterestPercent,B.MaturityDate,A.ValueDate,A.InterestPercent,A.MaturityDate,TrxBuy,TrxBuyType,InvestmentPK,A.DonePrice,B.InterestPaymentType

                            ) A 
                            left join
                            (
                            Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(case when A.TrxType = 1  then A.DoneVolume else
                            case when A.trxType = 2  then A.DoneVolume * -1 end end) MovBalance,'IDR' CurrencyID,A.ValueDate,A.InterestPercent,A.MaturityDate,InvestmentPK TrxBuy,'INV' TrxBuyType,A.DonePrice,B.InterestPaymentType,'1900-01-01' AcqDate
                            from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            Left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                            where ValueDate > @TrailsDate and ValueDate <= @date  and StatusInvestment <> 3 and statusDealing <> 3 and statusSettlement <> 3 and A.instrumentTypePK in (2,3,8,9,13,15) and A.MaturityDate >= @Date
                            and FundPK = @FundPK and TrxType  = 2  and A.MarketPK = @MarketPK
                            group By A.InstrumentPK,B.ID,B.Name,B.InterestPercent,B.MaturityDate,A.ValueDate,A.InterestPercent,A.MaturityDate,TrxBuy,TrxBuyType,InvestmentPK,A.DonePrice,B.InterestPaymentType,A.AcqDate
                            ) B on  A.InstrumentPK = B.InstrumentPK and A.AcqDate = B.AcqDate
                            left join MasterValue C on A.InterestPaymentType = C.Code and C.ID = 'InterestPaymentType' and C.status = 2

                            Group By A.InstrumentPK,A.InstrumentID,A.Balance,A.CurrencyID,A.AcqDate,A.InterestPercent,A.MaturityDate,A.TrxBuy,A.TrxBuyType,A.AvgPrice,C.Priority
                            having A.Balance + sum(isnull(B.MovBalance,0)) <> 0 
							order by InstrumentPK                 

                            ";
                            cmd.Parameters.AddWithValue("@Date", _date);
                            cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                            cmd.Parameters.AddWithValue("@MarketPK", _marketPK);
                        }

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    InstrumentForInvestment M_Instrument = new InstrumentForInvestment();
                                    M_Instrument.InstrumentPK = Convert.ToInt32(dr["InstrumentPK"]);
                                    M_Instrument.ID = Convert.ToString(dr["InstrumentID"]);
                                    M_Instrument.Balance = Convert.ToDecimal(dr["Balance"]);
                                    if (_trxType == 2)
                                    {
                                        M_Instrument.BegBalance = Convert.ToDecimal(dr["BegBalance"]);
                                        M_Instrument.MovBalance = Convert.ToDecimal(dr["MovBalance"]);
                                        M_Instrument.AvgPrice = Convert.ToDecimal(dr["AvgPrice"]);
                                        M_Instrument.AcqDate = Convert.ToString(dr["AcqDate"]);
                                        M_Instrument.TrxBuy = Convert.ToInt32(dr["TrxBuy"]);
                                        M_Instrument.TrxBuyType = Convert.ToString(dr["TrxBuyType"]);
                                    }
                                    M_Instrument.InterestPercent = Convert.ToDecimal(dr["InterestPercent"]);
                                    M_Instrument.MaturityDate = Convert.ToString(dr["MaturityDate"]);
                                    M_Instrument.PaymentType = Convert.ToInt32(dr["PaymentType"]);
                                    L_Instrument.Add(M_Instrument);
                                }
                            }
                            return L_Instrument;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public int Validate_CheckAvailableInstrument(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @TrailsDate datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK,@TrailsDate = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @Date  and FundPK = @FundPK   
                            )
                            and status = 2 and FundPK = @FundPK                                  

                            Declare @CurrBalance numeric (18,4)

                            select @CurrBalance =  A.Balance + sum(isnull(B.MovBalance,0)) from (

                            select AB.InstrumentPK,AB.InstrumentID,sum(isnull(AB.Balance,0)) Balance,AB.CurrencyID,AB.AcqDate,AB.InterestPercent,AB.MaturityDate,AB.TrxBuy,AB.TrxBuyType, AB.AvgPrice,AB.InterestPaymentType from(
                            select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(A.Balance) Balance,'IDR' CurrencyID,'1900-01-01' AcqDate,A.InterestPercent,
                            A.MaturityDate,0 TrxBuy,'' TrxBuyType,0 AvgPrice,B.InterestPaymentType from FundPosition A    
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2    
                            Left join Currency D on A.CurrencyPK = D.CurrencyPK and D.status = 2   
                            where A.FundPK = @FundPK  and A.TrailsPK = @TrailsPK and B.InstrumentTypePK in (2,3,8,9,13,15)      and A.status = 2         
                            group by A.InstrumentPK,B.ID,B.Name,A.InterestPercent,A.MaturityDate,B.InterestPaymentType
                            union all	
                            Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(case when A.TrxType = 1  then A.DoneVolume else
                            case when A.trxType = 2  then A.DoneVolume * -1 end end) MovBalance,'IDR','1900-01-01' AcqDate,A.InterestPercent,A.MaturityDate,0 TrxBuy,'' TrxBuyType,0 DonePrice,B.InterestPaymentType
                            from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            Left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                            where ValueDate = @Date and StatusInvestment = 2 and StatusDealing = 2 and A.instrumentTypePK in (2,3,8,9,13,15) and OrderStatus in ('M','P')
                            and FundPK = @FundPK and TrxType  = 1  
                            group By A.InstrumentPK,B.ID,B.Name,B.InterestPercent,B.MaturityDate,A.ValueDate,A.InterestPercent,A.MaturityDate,
                            TrxBuy,TrxBuyType,InvestmentPK,A.DonePrice,B.InterestPaymentType
                            )AB
                            group By AB.InstrumentPK,AB.InstrumentID,AB.CurrencyID,AB.AcqDate,AB.InterestPercent,AB.MaturityDate,AB.TrxBuy,AB.TrxBuyType, AB.AvgPrice,AB.InterestPaymentType


                            ) A 
                            left join
                            (
                            Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(case when A.TrxType = 1  then A.DoneVolume else
                            case when A.trxType = 2  then A.DoneVolume * -1 end end) MovBalance,'IDR' CurrencyID,'1900-01-01' ValueDate,A.InterestPercent,A.MaturityDate,0 TrxBuy,'' TrxBuyType,0 DonePrice,B.InterestPaymentType
                            from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            Left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                            where ValueDate > @TrailsDate and ValueDate <= @date and StatusInvestment <> 3 and StatusDealing <> 3 and StatusSettlement <> 3  and A.instrumentTypePK in (2,3,8,9,13,15)
                            and FundPK = @FundPK and TrxType  = 2
                            group By A.InstrumentPK,B.ID,B.Name,B.InterestPercent,B.MaturityDate,A.ValueDate,A.InterestPercent,A.MaturityDate,TrxBuy,TrxBuyType,InvestmentPK,A.DonePrice,B.InterestPaymentType
                            ) B on  A.InstrumentPK = B.InstrumentPK
                            left join MasterValue C on A.InterestPaymentType = C.Code and C.ID = 'InterestPaymentType' and C.status = 2
                            where A.InstrumentPK = @InstrumentPK
                            Group By A.InstrumentPK,A.InstrumentID,A.Balance,A.CurrencyID,A.InterestPercent,A.MaturityDate,A.TrxBuy,A.TrxBuyType,A.AvgPrice,C.Priority
                            IF (@Balance > @CurrBalance)
                            BEGIN
	                            select 1 Result
                            END
                            ELSE
                            BEGIN
	                            select 2 Result
                            END

                           ";

                        cmd.Parameters.AddWithValue("@date", _investment.ValueDate);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                        cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                        cmd.Parameters.AddWithValue("@Balance", _investment.Volume);
                        //cmd.Parameters.AddWithValue("@TrxBuy", _investment.TrxBuy);
                        //cmd.Parameters.AddWithValue("@TrxBuyType", _investment.TrxBuyType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);
                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public Boolean ClientSubscriptionBatchFormBySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ClientSubscription _clientSubscription)
        {
            try
            {
                string paramClientSubscriptionSelected = "";
                if (!_host.findString(_clientSubscription.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_clientSubscription.UnitRegistrySelected))
                {
                    paramClientSubscriptionSelected = " and ClientSubscriptionPK in (" + _clientSubscription.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientSubscriptionSelected = "  and ClientSubscriptionPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText =

                        @"                  
                            SELECT F.Name NamaFund,CS.ReferenceSInvest Ref,CS.ValueDate date,BN.Name ToNamaBank,BC.Address ToAlamat, BC.ContactPerson ToAttention,BC.Fax1 FaxNumber,CS.ValueDate TradeDate,dbo.FWorkingDay(CS.NAVDate,1) SettlementDate,
                            CS.ClientSubscriptionPK FormNo,FC.ID CustomerID,BN.ID CustodianID,FC.SID CustomerSIDNumber,FC.Name ,CS.CashAmount NominalAmount,CS.SubscriptionFeePercent FeePercent,SubscriptionFeeAmount FeeAmount,
                            CS.NAV NAV,CS.TotalCashAmount NetAmount,CS.UnitAmount NoofUnits, FCR.Name + ' - ' + FCR.BankAccountNo as CashRef from ClientSubscription CS   
                            left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                            left join Fund F ON CS.FundPK = F.FundPK  and F.status = 2   
                            left join FundCashRef FCR ON CS.CashRefPK = FCR.FundCashRefPK  and FCR.status = 2  
                            left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                            left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                            left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2  
                            WHERE CS.NAVDate between @DateFrom and @DateTo 
                            and CS.Type <> 3 and CS.status not in(3,4)" + paramClientSubscriptionSelected;
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "BatchFormSUBInstructionBySelected" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "BatchFormSUBInstructionBySelected" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "Report";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Subscription Batch Form");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<ClientSubscriptionBatchForm> rList = new List<ClientSubscriptionBatchForm>();
                                    while (dr0.Read())
                                    {
                                        ClientSubscriptionBatchForm rSingle = new ClientSubscriptionBatchForm();
                                        rSingle.NamaFund = Convert.ToString(dr0["NamaFund"]);
                                        rSingle.Ref = Convert.ToString(dr0["Ref"]);
                                        rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                        rSingle.ToNamaBank = Convert.ToString(dr0["ToNamaBank"]);
                                        rSingle.ToAlamat = Convert.ToString(dr0["ToAlamat"]);
                                        rSingle.ToAttention = Convert.ToString(dr0["ToAttention"]);
                                        rSingle.FaxNumber = Convert.ToString(dr0["FaxNumber"]);
                                        rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                        rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                        rSingle.FormNo = dr0["FormNo"].ToString();
                                        rSingle.CustomerID = Convert.ToString(dr0["CustomerID"]);
                                        rSingle.CustodianID = Convert.ToString(dr0["CustodianID"]);
                                        rSingle.CustomerSIDNumber = Convert.ToString(dr0["CustomerSIDNumber"]);
                                        rSingle.Name = Convert.ToString(dr0["Name"]);
                                        rSingle.NominalAmount = Convert.ToDecimal(dr0["NominalAmount"]);
                                        rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                        rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                        rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                        rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                        rSingle.NoOfUnits = Convert.ToDecimal(dr0["NoOfUnits"]);
                                        rSingle.CashRef = Convert.ToString(dr0["CashRef"]);

                                        rList.Add(rSingle);

                                    }


                                    var QueryByFundID =
                                        from r in rList
                                        group r by new { r.NamaFund, r.Date, r.ToNamaBank, r.ToAlamat, r.ToAttention, r.FaxNumber, r.TradeDate, r.SettlementDate } into rGroup
                                        select rGroup;

                                    int incRowExcel = 0;


                                    foreach (var rsHeader in QueryByFundID)
                                    {


                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "SUBSCRIPTION";
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "BATCH FORM";
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;

                                        int RowZ = incRowExcel;

                                        worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.NamaFund;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Font.Size = 22;
                                        worksheet.Row(incRowExcel).Height = 28;


                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Wisma Indosemen 3rd Floor Jl.Jen.Sudirman Kav. 70-71";
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                        worksheet.Cells[incRowExcel, 10].Value = "Date";
                                        worksheet.Cells[incRowExcel, 11].Value = ":";
                                        worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //worksheet.Cells["M" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Jakarta 12910";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                        worksheet.Cells[incRowExcel, 10].Value = "To";
                                        worksheet.Cells[incRowExcel, 11].Value = ":";
                                        worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.ToNamaBank;
                                        incRowExcel++;
                                        RowZ = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.ToAlamat;
                                        worksheet.Cells[incRowExcel, 12, incRowExcel, 14].Style.WrapText = true;
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                        worksheet.Cells["L" + incRowExcel + ":M" + RowZ].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Phone No. : " + "";
                                        worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyPhone();
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fax No. : " + "";
                                        worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyFax();
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 10].Value = "Attention";
                                        worksheet.Cells[incRowExcel, 11].Value = ":";
                                        worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.ToAttention;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 10].Value = "Fax Number";
                                        worksheet.Cells[incRowExcel, 11].Value = ":";
                                        worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.FaxNumber;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Please Kindly Receive Our Subscription Of Unit Holders As Follow:";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Trade Date:";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.TradeDate;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Settlement Date:";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.SettlementDate;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        incRowExcel = incRowExcel + 2;
                                        //incRowExcel++;
                                        //Row A = 2
                                        int RowA = incRowExcel;

                                        //Row B = 3
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;


                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Reference No.";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "Customer ID";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "Customer SID Number";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Name";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Nominal Amount";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "Fee";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + RowB + ":H" + RowB].Merge = true;
                                        worksheet.Cells["G" + RowB + ":H" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 7].Value = "%";
                                        worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + RowG + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 8].Value = "Amount";
                                        worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                        worksheet.Cells["H" + RowG + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 9].Value = "Cash ref";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells["I" + RowB + ":K" + RowG].Merge = true;
                                        worksheet.Cells["I" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 12].Value = "Net Amount";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 13].Value = "No Of Units";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                        worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;





                                        incRowExcel++;

                                        // Row C = 4
                                        int RowC = incRowExcel;

                                        incRowExcel++;
                                        //area header

                                        int _no = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            //Row D = 5
                                            int RowD = incRowExcel;
                                            int RowE = incRowExcel + 1;
                                            int RowH = RowB + 2;
                                            int RowI = RowB + 3;

                                            worksheet.Row(incRowExcel).Height = 34;
                                            //ThickBox Border

                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Ref;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.CustomerID;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.CustomerSIDNumber;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Name;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.NominalAmount;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.FeePercent;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeeAmount;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.CashRef;
                                            worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail.NetAmount;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail.NoOfUnits;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#.############";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;

                                        }


                                        worksheet.Cells["A" + _endRowDetail + ":L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Total :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                        worksheet.Cells[incRowExcel, 13].Calculate();
                                        //worksheet.Cells[incRowExcel, 9].Calculate();
                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#.########";
                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#.############";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        incRowExcel += 2;
                                        worksheet.Cells[incRowExcel, 11].Value = "Investment Manager Approval";
                                        worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 10].Value = "Date";
                                        worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.TradeDate;
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 11].Value = "Inputted";
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 11].Value = "Approved";
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 6;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Regards,";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Approved By";
                                        incRowExcel++;

                                        int _RowA = incRowExcel;
                                        int _RowB = incRowExcel + 7;
                                        if (_clientSubscription.Signature1 != 0)
                                        {
                                            worksheet.Cells["A" + _RowA + ":B" + _RowA].Merge = true;
                                            worksheet.Cells[_RowA, 1].Value = _host.Get_PositionSignature(_clientSubscription.Signature1);

                                            worksheet.Cells["A" + _RowB + ":B" + _RowB].Merge = true;
                                            worksheet.Cells[_RowB, 1].Value = "( " + _host.Get_SignatureName(_clientSubscription.Signature1) + " )";


                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 1].Value = "";

                                            worksheet.Cells[_RowB, 1].Value = "";

                                        }


                                        if (_clientSubscription.Signature2 != 0)
                                        {
                                            worksheet.Cells["C" + _RowA + ":D" + _RowA].Merge = true;
                                            worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_clientSubscription.Signature2);

                                            worksheet.Cells["C" + _RowB + ":D" + _RowB].Merge = true;
                                            worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_clientSubscription.Signature2) + " )";

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 3].Value = "";

                                            worksheet.Cells[_RowB, 3].Value = "";

                                        }

                                        if (_clientSubscription.Signature3 != 0)
                                        {
                                            worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_clientSubscription.Signature3);

                                            worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_clientSubscription.Signature3) + " )";

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 5].Value = "";
                                            worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 5].Value = "";
                                            worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }

                                        if (_clientSubscription.Signature4 != 0)
                                        {
                                            worksheet.Cells["F" + _RowA + ":H" + _RowA].Merge = true;
                                            worksheet.Cells[_RowA, 6].Value = _host.Get_PositionSignature(_clientSubscription.Signature4);

                                            worksheet.Cells["F" + _RowB + ":H" + _RowB].Merge = true;
                                            worksheet.Cells[_RowB, 6].Value = "( " + _host.Get_SignatureName(_clientSubscription.Signature4) + " )";


                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 6].Value = "";

                                            worksheet.Cells[_RowB, 6].Value = "";

                                        }


                                        incRowExcel = incRowExcel + 8;
                                        worksheet.Row(incRowExcel).PageBreak = true;

                                    }
                                    //incRowExcel++;
                                    int _lastRow = incRowExcel;

                                    string _rangeA = "A6:M" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 12;
                                    }

                                    worksheet.DeleteRow(_lastRow);


                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                    worksheet.Column(1).Width = 16;
                                    worksheet.Column(2).Width = 24;
                                    worksheet.Column(3).Width = 13;
                                    worksheet.Column(4).Width = 26;
                                    worksheet.Column(5).Width = 45;
                                    worksheet.Column(6).Width = 21;
                                    worksheet.Column(7).Width = 10;
                                    worksheet.Column(8).Width = 18;
                                    worksheet.Column(9).Width = 20;
                                    worksheet.Column(10).Width = 20;
                                    worksheet.Column(11).Width = 2;
                                    worksheet.Column(12).Width = 21;
                                    worksheet.Column(13).Width = 21;


                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B REDEMPTION \n &28&B Batch Form";

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                    package.Save();
                                    if (_clientSubscription.DownloadMode == "PDF")
                                    {
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    }
                                    return true;
                                }
                            }
                        }

                    }

                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public Boolean ClientRedemptionAmountBatchFormBySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ClientRedemption _clientRedemption)
        {
            try
            {
                string paramClientRedemptionSelected = "";
                if (!_host.findString(_clientRedemption.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_clientRedemption.UnitRegistrySelected))
                {
                    paramClientRedemptionSelected = " and ClientRedemptionPK in (" + _clientRedemption.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientRedemptionSelected = " and ClientRedemptionPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText =

                        @"                  
                            SELECT F.Name NamaFund,CS.ReferenceSInvest Ref,CS.ValueDate date,BN.Name ToNamaBank,BC.Address ToAlamat, BC.ContactPerson ToAttention,BC.Fax1 FaxNumber,CS.ValueDate TradeDate,dbo.FWorkingDay(CS.NAVDate,1) SettlementDate,
                            CS.ClientRedemptionPK FormNo,FC.ID CustomerID,BN.ID CustodianID,FC.SID CustomerSIDNumber,FC.name,CS.CashAmount NominalAmount,CS.RedemptionFeePercent FeePercent,RedemptionFeeAmount FeeAmount,CS.NAV NAV,CS.TotalCashAmount NetAmount,
                            CS.UnitAmount NoOfUnits,CS.CashAmount RedeemedNominalAmount,CS.UnitAmount RedeemedNoOfUnits,PaymentDate DateFundToBeTransferred,
                            case when BankRecipientPK=1 then B1.ID + ' - ' + FC.NomorRekening1  when BankRecipientPK= 2 then B2.ID + ' - ' + FC.NomorRekening2  else B3.ID + ' - ' + FC.NomorRekening3  end  BankRecipient from ClientRedemption CS   
                            left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                            left join Fund F ON CS.FundPK = F.FundPK  and F.status = 2   
                            left join FundCashRef FCR ON CS.CashRefPK = FCR.FundCashRefPK  and FCR.status = 2   
                            left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                            left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                            left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2  
                            left join Bank B1 ON FC.NamaBank1 = B1.BankPK  and B1.status = 2  
                            left join Bank B2 ON FC.NamaBank2 = B2.BankPK  and B2.status = 2 
                            left join Bank B3 ON FC.NamaBank3 = B3.BankPK  and B3.status = 2  
                            WHERE CS.NAVDate between @DateFrom and @DateTo 
                            and CS.Type <> 3 and CS.status not in(3,4) " + paramClientRedemptionSelected;

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "BatchFormREDAmountInstructionBySelected" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "BatchFormREDAmountInstructionBySelected" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "Report";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Redemption Batch Form");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<ClientRedemptionBatchForm> rList = new List<ClientRedemptionBatchForm>();
                                    while (dr0.Read())
                                    {
                                        ClientRedemptionBatchForm rSingle = new ClientRedemptionBatchForm();
                                        rSingle.NamaFund = Convert.ToString(dr0["NamaFund"]);
                                        rSingle.Ref = Convert.ToString(dr0["Ref"]);
                                        rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                        rSingle.ToNamaBank = Convert.ToString(dr0["ToNamaBank"]);
                                        rSingle.ToAlamat = Convert.ToString(dr0["ToAlamat"]);
                                        rSingle.ToAttention = Convert.ToString(dr0["ToAttention"]);
                                        rSingle.FaxNumber = Convert.ToString(dr0["FaxNumber"]);
                                        rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                        rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                        rSingle.FormNo = Convert.ToInt32(dr0["FormNo"]);
                                        rSingle.CustomerID = Convert.ToString(dr0["CustomerID"]);
                                        rSingle.CustomerSIDNumber = Convert.ToString(dr0["CustomerSIDNumber"]);
                                        rSingle.Name = Convert.ToString(dr0["Name"]);
                                        rSingle.RedeemedNominalAmount = Convert.ToDecimal(dr0["RedeemedNominalAmount"]);
                                        rSingle.RedeemedNoOfUnits = Convert.ToDecimal(dr0["RedeemedNoOfUnits"]);
                                        rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                        rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                        rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                        rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                        rSingle.DateFundToBeTransferred = Convert.ToDateTime(dr0["DateFundToBeTransferred"]);
                                        rSingle.BankRecipient = Convert.ToString(dr0["BankRecipient"]);
                                        rList.Add(rSingle);

                                    }


                                    var QueryByFundID =
                                        from r in rList
                                        group r by new { r.NamaFund, r.Date, r.ToNamaBank, r.ToAlamat, r.ToAttention, r.FaxNumber, r.TradeDate, r.SettlementDate } into rGroup
                                        select rGroup;

                                    int incRowExcel = 0;


                                    foreach (var rsHeader in QueryByFundID)
                                    {


                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "REDEMPTION";
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "BATCH FORM";
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;

                                        int RowZ = incRowExcel;

                                        worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.NamaFund;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Font.Size = 22;
                                        worksheet.Row(incRowExcel).Height = 28;

                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Wisma Indosemen 3rd Floor Jl.Jen.Sudirman Kav. 70-71";
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                        worksheet.Cells[incRowExcel, 9].Value = "Date";
                                        worksheet.Cells[incRowExcel, 10].Value = ":";
                                        worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["M" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Jakarta 12910";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                        worksheet.Cells[incRowExcel, 9].Value = "To";
                                        worksheet.Cells[incRowExcel, 10].Value = ":";
                                        worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.ToNamaBank;
                                        incRowExcel++;
                                        RowZ = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.ToAlamat;
                                        worksheet.Cells[incRowExcel, 11, incRowExcel, 13].Style.WrapText = true;
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                        worksheet.Cells["K" + incRowExcel + ":M" + RowZ].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Phone No. : " + "";
                                        worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyPhone();
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fax No. : " + "";
                                        worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyFax();
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Value = "Attention";
                                        worksheet.Cells[incRowExcel, 10].Value = ":";
                                        worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.ToAttention;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Value = "Fax Number";
                                        worksheet.Cells[incRowExcel, 10].Value = ":";
                                        worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.FaxNumber;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Please Kindly Receive Our Redemption Of Unit Holders As Follow:";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Trade Date:";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.TradeDate;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Settlement Date:";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.SettlementDate;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        incRowExcel = incRowExcel + 2;
                                        //incRowExcel++;
                                        //Row A = 2
                                        int RowA = incRowExcel;

                                        //Row B = 3
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;


                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Reference No.";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "Customer ID";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "Customer SID Number";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Name";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Redeemed";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells["F" + RowB + ":G" + RowB].Merge = true;
                                        worksheet.Cells["F" + RowB + ":G" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowB + ":G" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 6].Value = "Nominal Amount";
                                        worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                        worksheet.Cells["F" + RowG + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 7].Value = "No. Of Units";
                                        worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + RowG + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 8].Value = "Fee";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells["H" + RowB + ":J" + RowB].Merge = true;
                                        worksheet.Cells["H" + RowB + ":J" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + RowB + ":J" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 8].Value = "%";
                                        worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                        worksheet.Cells["H" + RowG + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 9].Value = "Amount";
                                        worksheet.Cells[RowG, 9].Style.Font.Bold = true;
                                        worksheet.Cells["I" + RowG + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["I" + RowG + ":J" + RowG].Merge = true;

                                        worksheet.Cells[incRowExcel, 11].Value = "Bank Recipient";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 12].Value = "Net Amount";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 13].Value = "Date Of Fund TO Be Transferred";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                        worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;





                                        incRowExcel++;

                                        // Row C = 4
                                        int RowC = incRowExcel;

                                        incRowExcel++;
                                        //area header

                                        int _no = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            //Row D = 5
                                            int RowD = incRowExcel;
                                            int RowE = incRowExcel + 1;
                                            int RowH = RowB + 2;
                                            int RowI = RowB + 3;


                                            //ThickBox Border

                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Ref;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.CustomerID;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.CustomerSIDNumber;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Name;
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedeemedNominalAmount;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.RedeemedNoOfUnits;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeePercent;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.FeeAmount;
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.BankRecipient;
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#.########";
                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail.NetAmount;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail.DateFundToBeTransferred;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;

                                        }


                                        worksheet.Cells["A" + _endRowDetail + ":M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Total :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#.########";
                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        incRowExcel += 2;
                                        worksheet.Cells[incRowExcel, 10].Value = "Investment Manager Approval";
                                        worksheet.Cells["J" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 10].Value = "Date";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.TradeDate;
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 10].Value = "Inputted";
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 10].Value = "Approved";
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 6;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Regards,";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Approved By";
                                        incRowExcel++;

                                        int _RowA = incRowExcel;
                                        int _RowB = incRowExcel + 7;
                                        if (_clientRedemption.Signature1 != 0)
                                        {
                                            worksheet.Cells["A" + _RowA + ":B" + _RowA].Merge = true;
                                            worksheet.Cells[_RowA, 1].Value = _host.Get_PositionSignature(_clientRedemption.Signature1);

                                            worksheet.Cells["A" + _RowB + ":B" + _RowB].Merge = true;
                                            worksheet.Cells[_RowB, 1].Value = "( " + _host.Get_SignatureName(_clientRedemption.Signature1) + " )";


                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 1].Value = "";

                                            worksheet.Cells[_RowB, 1].Value = "";

                                        }


                                        if (_clientRedemption.Signature2 != 0)
                                        {
                                            worksheet.Cells["C" + _RowA + ":D" + _RowA].Merge = true;
                                            worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_clientRedemption.Signature2);

                                            worksheet.Cells["C" + _RowB + ":D" + _RowB].Merge = true;
                                            worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_clientRedemption.Signature2) + " )";

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 3].Value = "";

                                            worksheet.Cells[_RowB, 3].Value = "";

                                        }

                                        if (_clientRedemption.Signature3 != 0)
                                        {
                                            worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_clientRedemption.Signature3);

                                            worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_clientRedemption.Signature3) + " )";

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 5].Value = "";
                                            worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 5].Value = "";
                                            worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        }

                                        if (_clientRedemption.Signature4 != 0)
                                        {
                                            worksheet.Cells["F" + _RowA + ":H" + _RowA].Merge = true;
                                            worksheet.Cells[_RowA, 6].Value = _host.Get_PositionSignature(_clientRedemption.Signature4);

                                            worksheet.Cells["F" + _RowB + ":H" + _RowB].Merge = true;
                                            worksheet.Cells[_RowB, 6].Value = "( " + _host.Get_SignatureName(_clientRedemption.Signature4) + " )";

                                        }
                                        else
                                        {
                                            worksheet.Cells[_RowA, 6].Value = "";

                                            worksheet.Cells[_RowB, 6].Value = "";

                                        }


                                        incRowExcel = incRowExcel + 8;
                                        worksheet.Row(incRowExcel).PageBreak = true;

                                    }
                                    //incRowExcel++;
                                    int _lastRow = incRowExcel;

                                    string _rangeA = "A6:M" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 12;
                                    }

                                    worksheet.DeleteRow(_lastRow);

                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                    worksheet.Column(1).Width = 16;
                                    worksheet.Column(2).Width = 25;
                                    worksheet.Column(3).Width = 14;
                                    worksheet.Column(4).Width = 22;
                                    worksheet.Column(5).Width = 45;
                                    worksheet.Column(6).Width = 21;
                                    worksheet.Column(7).Width = 21;
                                    worksheet.Column(8).Width = 7;
                                    worksheet.Column(9).Width = 14;
                                    worksheet.Column(10).Width = 2;
                                    worksheet.Column(11).Width = 30;
                                    worksheet.Column(12).Width = 21;
                                    worksheet.Column(13).Width = 32;


                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B REDEMPTION \n &28&B Batch Form";

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    if (_clientRedemption.DownloadMode == "PDF")
                                    {
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    }
                                    return true;
                                }
                            }
                        }

                    }

                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public Boolean ClientSwitchingBatchFormBySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ClientSwitching _clientSwitching)
       {
           try
           {
               string paramClientSwitchingSelected = "";
               if (!_host.findString(_clientSwitching.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_clientSwitching.UnitRegistrySelected))
               {
                   paramClientSwitchingSelected = " and CS.ClientSwitchingPK in (" + _clientSwitching.UnitRegistrySelected + ") ";
               }
               else
               {
                   paramClientSwitchingSelected = " and CS.ClientSwitchingPK in (0) "; 
               }
               using (SqlConnection DbCon = new SqlConnection(Tools.conString))
               {
                   DbCon.Open();
                   using (SqlCommand cmd = DbCon.CreateCommand())
                   {

                       cmd.CommandText =

                       @"                  
                        SELECT			F.Name NamaFund,
				                        CS.ReferenceSInvest RefNo,
				                        CS.ValueDate Date,
				                        BN.Name ToNamaBank,
				                        BC.Address ToAlamat,
				                        BC.ContactPerson ToAttention,
				                        BC.Fax1 FaxNumber,
				                        CS.ValueDate TradeDate,
				                        dbo.FWorkingDay(CS.NAVDate,1) SettlementDate,
			                            FC.ID CustomerID,
				                        FC.SID CustomerSIDNumber,
				                        FC.name Name,
				                        isnull(FT.Name,0) SwitchInProduct,
				                        isnull(F.Name,0) SwitchOutProduct,
				                        CS.CashAmount NominalAmount,
				                        CS.SwitchingFeePercent FeePercent,
				                        CS.SwitchingFeeAmount FeeAmount,
				                        CS.NAVFundTo NAV,
				                        CS.TotalCashAmountFundTo NetAmount,
				                        CS.UnitAmount NoOfUnits,
				                        CS.CashAmount SwitchedNominalAmount,
				                        CS.UnitAmount SwitchedNoOfUnits,
				                        'Out' Type 
			                            from ClientSwitching CS   
                                                    left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                                                    left join Fund F ON CS.FundPKFrom = F.FundPK  and F.status = 2   
							                        left join Fund FT ON CS.FundPKTo = FT.FundPK  and FT.status = 2 
                                                    left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                                                    left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                                                    left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2  
			                            where CS.Type <> 3 and CS.status not in(3,4) and valuedate between @datefrom and @dateto " + paramClientSwitchingSelected + @"
				
                        union All

                         SELECT			F.Name NamaFund,
				                        CS.ReferenceSInvest RefNo,
				                        CS.ValueDate Date,
				                        BN.Name ToNamaBank,
				                        BC.Address ToAlamat,
				                        BC.ContactPerson ToAttention,
				                        BC.Fax1 FaxNumber,
				                        CS.ValueDate TradeDate,
				                        dbo.FWorkingDay(CS.NAVDate,1) SettlementDate,
			                            FC.ID CustomerID,
				                        FC.SID CustomerSIDNumber,
				                        FC.name Name,
				                        isnull(F.Name,0) SwitchInProduct,
				                        isnull(FT.Name,0) SwitchOutProduct,
				                        CS.CashAmount NominalAmount,
				                        CS.SwitchingFeePercent FeePercent,
				                        CS.SwitchingFeeAmount FeeAmount,
				                        CS.NAVFundTo NAV,
				                        CS.TotalCashAmountFundTo NetAmount,
				                        CS.UnitAmount NoOfUnits,
				                        CS.CashAmount SwitchedNominalAmount,
				                        CS.UnitAmount SwitchedNoOfUnits,
				                        'IN' Type 
			                            from ClientSwitching CS   
                                                    left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                                                    left join Fund F ON CS.FundPKTo = F.FundPK  and F.status = 2   
							                        left join Fund FT ON CS.FundPKFrom = FT.FundPK  and FT.status = 2 
                                                    left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                                                    left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                                                    left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2  
			                            where CS.Type <> 3 and CS.status not in(3,4) and valuedate between @datefrom and @dateto
                          " + paramClientSwitchingSelected;

                       cmd.CommandTimeout = 0;
                       cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                       cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                       using (SqlDataReader dr0 = cmd.ExecuteReader())
                       {
                           if (!dr0.HasRows)
                           {
                               return false;
                           }
                           else
                           {
                               string filePath = Tools.ReportsPath + "BatchFormSWITCHInstructionBySelected" + "_" + _userID + ".xlsx";
                               string pdfPath = Tools.ReportsPath + "BatchFormSWITCHInstructionBySelected" + "_" + _userID + ".pdf";
                               FileInfo excelFile = new FileInfo(filePath);
                               if (excelFile.Exists)
                               {
                                   excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                   excelFile = new FileInfo(filePath);
                               }

                               // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                               using (ExcelPackage package = new ExcelPackage(excelFile))
                               {
                                   package.Workbook.Properties.Title = "Report";
                                   package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                   package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                   package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                   package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                   package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                   ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Switching In Batch Form");


                                   //ATUR DATA GROUPINGNYA DULU
                                   List<ClientSwitchingBatchForm> rList = new List<ClientSwitchingBatchForm>();
                                   while (dr0.Read())
                                   {
                                       ClientSwitchingBatchForm rSingle = new ClientSwitchingBatchForm();
                                       rSingle.NamaFund = Convert.ToString(dr0["NamaFund"]);
                                       rSingle.RefNo = Convert.ToString(dr0["RefNo"]);
                                       rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                       rSingle.ToNamaBank = Convert.ToString(dr0["ToNamaBank"]);
                                       rSingle.ToAlamat = Convert.ToString(dr0["ToAlamat"]);
                                       rSingle.ToAttention = Convert.ToString(dr0["ToAttention"]);
                                       rSingle.FaxNumber = Convert.ToString(dr0["FaxNumber"]);
                                       rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                       rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                       rSingle.CustomerID = Convert.ToString(dr0["CustomerID"]);
                                       rSingle.CustomerSIDNumber = Convert.ToString(dr0["CustomerSIDNumber"]);
                                       rSingle.Name = Convert.ToString(dr0["Name"]);
                                       rSingle.SwitchInProduct = Convert.ToString(dr0["SwitchInProduct"]);
                                       rSingle.SwitchOutProduct = Convert.ToString(dr0["SwitchOutProduct"]);
                                       rSingle.SwitchedNominalAmount = Convert.ToDecimal(dr0["SwitchedNominalAmount"]);
                                       rSingle.SwitchedNoOfUnits = Convert.ToDecimal(dr0["SwitchedNoOfUnits"]);
                                       rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                       rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                       rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                       rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                       rSingle.Type = Convert.ToString(dr0["Type"]);
                                       rList.Add(rSingle);

                                   }


                                   var QueryByFundID =
                                       from r in rList
                                       group r by new { r.Type,r.RefNo, r.NamaFund, r.Date, r.ToNamaBank, r.ToAlamat, r.ToAttention, r.FaxNumber, r.TradeDate, r.SettlementDate } into rGroup
                                       select rGroup;

                                   int incRowExcel = 0;


                                   foreach (var rsHeader in QueryByFundID)
                                   {

                                       if(rsHeader.Key.Type == "IN")
                                       {
                                       incRowExcel = incRowExcel + 2;
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 1].Value = "SWITCHING IN";
                                       worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                       worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                       }
                                       else 
                                       {
                                           incRowExcel = incRowExcel + 2;
                                           worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 1].Value = "SWITCHING OUT";
                                           worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                           worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                       }

                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 1].Value = "BATCH FORM";
                                       worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                       worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       incRowExcel = incRowExcel + 2;

                                       int RowZ = incRowExcel;

                                       worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.NamaFund;
                                       worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                       incRowExcel++;
                                       //worksheet.Cells[incRowExcel, 1].Value = "Wisma Indosemen 3rd Floor Jl.Jen.Sudirman Kav. 70-71";
                                       worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                       worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                       worksheet.Cells[incRowExcel, 10].Value = "Date";
                                       worksheet.Cells[incRowExcel, 11].Value = ":";
                                       worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.Date;
                                       worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd-MMM-yyyy";
                                       worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                       worksheet.Cells["N" + incRowExcel + ":O" + incRowExcel].Merge = true;
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Value = "Jakarta 12910";
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;

                                       worksheet.Cells[incRowExcel, 10].Value = "To";
                                       worksheet.Cells[incRowExcel, 11].Value = ":";
                                       worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.ToNamaBank;
                                       incRowExcel++;
                                       RowZ = incRowExcel + 2;
                                       worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.ToAlamat;
                                       worksheet.Cells[incRowExcel, 11, incRowExcel, 13].Style.WrapText = true;
                                       worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                       worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                       worksheet.Cells["K" + incRowExcel + ":M" + RowZ].Merge = true;
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Value = "Phone No. : " + "";
                                       worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyPhone();
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Value = "Fax No. : " + "";
                                       worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyFax();
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 10].Value = "Attention";
                                       worksheet.Cells[incRowExcel, 11].Value = ":";
                                       worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.ToAttention;
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 10].Value = "Fax Number";
                                       worksheet.Cells[incRowExcel, 11].Value = ":";
                                       worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.FaxNumber;
                                       incRowExcel = incRowExcel + 2;
                                       worksheet.Cells[incRowExcel, 1].Value = "Please Kindly Receive Our Switching Of Unit Holders As Follow:";
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Value = "Trade Date:";
                                       worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.TradeDate;
                                       worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Value = "Settlement Date:";
                                       worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.SettlementDate;
                                       worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                       incRowExcel = incRowExcel + 2;
                                       //incRowExcel++;
                                       //Row A = 2
                                       int RowA = incRowExcel;

                                       //Row B = 3
                                       int RowB = incRowExcel;
                                       int RowG = incRowExcel + 1;


                                       worksheet.Cells[incRowExcel, 1].Value = "NO";
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                       worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                       worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[incRowExcel, 2].Value = "Reference No.";
                                       worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                       worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                       worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[incRowExcel, 3].Value = "Customer ID";
                                       worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                       worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                       worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[incRowExcel, 4].Value = "Customer SID Number";
                                       worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                       worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                       worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[incRowExcel, 5].Value = "Name";
                                       worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                       worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                       worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       if (rsHeader.Key.Type == "IN")
                                       {
                                           worksheet.Cells[incRowExcel, 6].Value = "Switch Out Product";
                                           worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                           worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                           worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                           worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                       }
                                       else
                                       {
                                           worksheet.Cells[incRowExcel, 6].Value = "Switch In Product";
                                           worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                           worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                           worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                           worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                       }


                                       worksheet.Cells[incRowExcel, 7].Value = "Switched Amount/Unit";
                                       worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                       worksheet.Cells["G" + RowB + ":H" + RowB].Merge = true;
                                       worksheet.Cells["G" + RowB + ":H" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["G" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[RowG, 7].Value = "Nominal Amount";
                                       worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                       worksheet.Cells["G" + RowG + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[RowG, 8].Value = "No. Of Units";
                                       worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                       worksheet.Cells["H" + RowG + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[incRowExcel, 9].Value = "Fee";
                                       worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                       worksheet.Cells["I" + RowB + ":K" + RowB].Merge = true;
                                       worksheet.Cells["I" + RowB + ":K" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["I" + RowB + ":K" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[RowG, 9].Value = "%";
                                       worksheet.Cells[RowG, 9].Style.Font.Bold = true;
                                       worksheet.Cells["I" + RowG + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[RowG, 10].Value = "Amount";
                                       worksheet.Cells[RowG, 10].Style.Font.Bold = true;
                                       worksheet.Cells["J" + RowG + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                       worksheet.Cells["J" + RowG + ":K" + RowG].Merge = true;

                                       worksheet.Cells[incRowExcel, 12].Value = "NAV";
                                       worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                       worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                       worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       worksheet.Cells[incRowExcel, 13].Value = "Net Amount";
                                       worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                       worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                       worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                       worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;






                                       incRowExcel++;

                                       // Row C = 4
                                       int RowC = incRowExcel;

                                       incRowExcel++;
                                       //area header

                                       int _no = 1;
                                       int _startRowDetail = incRowExcel;
                                       int _endRowDetail = 0;
                                       foreach (var rsDetail in rsHeader)
                                       {
                                           //Row D = 5
                                           int RowD = incRowExcel;
                                           int RowE = incRowExcel + 1;
                                           int RowH = RowB + 2;
                                           int RowI = RowB + 3;


                                           //ThickBox Border

                                           worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                           worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                           worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                           worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                           worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                           worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                           //area detail
                                           worksheet.Cells[incRowExcel, 1].Value = _no;
                                           worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 2].Value = rsDetail.RefNo;
                                           worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 3].Value = rsDetail.CustomerID;
                                           worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 4].Value = rsDetail.CustomerSIDNumber;
                                           worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 5].Value = rsDetail.Name;

                                           if (rsHeader.Key.Type == "IN")
                                           {
                                               worksheet.Cells[incRowExcel, 6].Value = rsDetail.SwitchOutProduct;
                                           }
                                           else 
                                           {
                                               worksheet.Cells[incRowExcel, 6].Value = rsDetail.SwitchInProduct;
                                           }
                                           


                                           worksheet.Cells[incRowExcel, 7].Value = rsDetail.SwitchedNominalAmount;
                                           worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                           worksheet.Cells[incRowExcel, 8].Value = rsDetail.SwitchedNoOfUnits;
                                           worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#.############";
                                           worksheet.Cells[incRowExcel, 9].Value = rsDetail.FeePercent;
                                           worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                           worksheet.Cells[incRowExcel, 10].Value = rsDetail.FeeAmount;
                                           worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                           worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                           worksheet.Cells[incRowExcel, 12].Value = rsDetail.NAV;
                                           worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#.########";
                                           worksheet.Cells[incRowExcel, 13].Value = rsDetail.NetAmount;
                                           worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";

                                           _endRowDetail = incRowExcel;
                                           _no++;
                                           incRowExcel++;

                                       }


                                       worksheet.Cells["A" + _endRowDetail + ":M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                       worksheet.Cells[incRowExcel, 1].Value = "Total :";
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                       worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                       worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                       worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                       worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                       worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                       worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                       worksheet.Cells[incRowExcel, 7].Calculate();
                                       worksheet.Cells[incRowExcel, 8].Calculate();
                                       worksheet.Cells[incRowExcel, 9].Calculate();
                                       worksheet.Cells[incRowExcel, 12].Calculate();
                                       worksheet.Cells[incRowExcel, 10].Calculate();
                                       worksheet.Cells[incRowExcel, 13].Calculate();
                                       worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                       worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#.############";
                                       worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                       worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                       worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#.########";
                                       worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                       worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                       worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                       worksheet.Cells[incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                       incRowExcel += 2;
                                       worksheet.Cells[incRowExcel, 10].Value = "Investment Manager Approval";
                                       worksheet.Cells["J" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                       incRowExcel++;
                                       //worksheet.Cells[incRowExcel, 10].Value = "Date";
                                       worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.TradeDate;
                                       worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "dd-MMM-yyyy";
                                       worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                       worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 10].Value = "Inputted";
                                       worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 10].Value = "Approved";
                                       worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                       incRowExcel = incRowExcel + 6;
                                       worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                       worksheet.Cells[incRowExcel, 1].Value = "Regards,";
                                       worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                       worksheet.Cells[incRowExcel, 3].Value = "Approved By";
                                       incRowExcel++;

                                       int _RowA = incRowExcel;
                                       int _RowB = incRowExcel + 7;
                                       if (_clientSwitching.Signature1 != 0)
                                       {
                                           worksheet.Cells["A" + _RowA + ":B" + _RowA].Merge = true;
                                           worksheet.Cells[_RowA, 1].Value = _host.Get_PositionSignature(_clientSwitching.Signature1);

                                           worksheet.Cells["A" + _RowB + ":B" + _RowB].Merge = true;
                                           worksheet.Cells[_RowB, 1].Value = "( " + _host.Get_SignatureName(_clientSwitching.Signature1) + " )";


                                       }
                                       else
                                       {
                                           worksheet.Cells[_RowA, 1].Value = "";

                                           worksheet.Cells[_RowB, 1].Value = "";

                                       }


                                       if (_clientSwitching.Signature2 != 0)
                                       {
                                           worksheet.Cells["C" + _RowA + ":D" + _RowA].Merge = true;
                                           worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_clientSwitching.Signature2);

                                           worksheet.Cells["C" + _RowB + ":D" + _RowB].Merge = true;
                                           worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_clientSwitching.Signature2) + " )";

                                       }
                                       else
                                       {
                                           worksheet.Cells[_RowA, 3].Value = "";

                                           worksheet.Cells[_RowB, 3].Value = "";

                                       }

                                       if (_clientSwitching.Signature3 != 0)
                                       {
                                           worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_clientSwitching.Signature3);

                                           worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_clientSwitching.Signature3) + " )";

                                       }
                                       else
                                       {
                                           worksheet.Cells[_RowA, 5].Value = "";
                                           worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                           worksheet.Cells[_RowB, 5].Value = "";
                                           worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                       }

                                       if (_clientSwitching.Signature4 != 0)
                                       {
                                           worksheet.Cells["F" + _RowA + ":H" + _RowA].Merge = true;
                                           worksheet.Cells[_RowA, 6].Value = _host.Get_PositionSignature(_clientSwitching.Signature4);

                                           worksheet.Cells["F" + _RowB + ":H" + _RowB].Merge = true;
                                           worksheet.Cells[_RowB, 6].Value = "( " + _host.Get_SignatureName(_clientSwitching.Signature4) + " )";


                                       }
                                       else
                                       {
                                           worksheet.Cells[_RowA, 6].Value = "";

                                           worksheet.Cells[_RowB, 6].Value = "";

                                       }


                                       incRowExcel = incRowExcel + 8;
                                       worksheet.Row(incRowExcel).PageBreak = true;

                                   }
                                   //incRowExcel++;
                                   int _lastRow = incRowExcel;

                                   string _rangeA = "A5:M" + incRowExcel;
                                   using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                   {
                                       r.Style.Font.Size = 12;
                                   }

                                   worksheet.DeleteRow(_lastRow);

                                   worksheet.PrinterSettings.FitToPage = true;
                                   worksheet.PrinterSettings.FitToWidth = 1;
                                   worksheet.PrinterSettings.FitToHeight = 0;
                                   worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                   worksheet.Column(1).Width = 16;
                                   worksheet.Column(2).Width = 14;
                                   worksheet.Column(3).Width = 14;
                                   worksheet.Column(4).Width = 22;
                                   worksheet.Column(5).Width = 26;
                                   worksheet.Column(6).Width = 58;
                                   worksheet.Column(7).Width = 21;
                                   worksheet.Column(8).Width = 21;
                                   worksheet.Column(9).Width = 7;
                                   worksheet.Column(10).Width = 14;
                                   worksheet.Column(11).Width = 2;
                                   worksheet.Column(12).Width = 21;
                                   worksheet.Column(13).Width = 21;


                                   // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                   //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                   //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                   worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                   worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                   //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SWITCHING \n &28&B Batch Form";

                                   worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                   worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                   worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                   // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                   worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                   worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                   worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                   worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                   //Image img = Image.FromFile(Tools.ReportImage);
                                   //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                   //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                   //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                   worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                   string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                   ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                   //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                   package.Save();
                                   if (_clientSwitching.DownloadMode == "PDF")
                                   {
                                       Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                   }
                                   return true;
                               }
                           }
                       }

                   }

               }
           }
           catch (Exception err)
           {
               return false;
               throw err;
           }

       }

        public Boolean KertasKerjaDealing_Saham(string _userID, DateTime _dateFrom, DateTime _dateTo, KertasKerja _kertasKerja)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramDealingPK = "";

                        if (!_host.findString(_kertasKerja.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_kertasKerja.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And A.DealingPK in (" + _kertasKerja.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And A.DealingPK in (0) ";
                        }

                        cmd.CommandText = @"

                        select B.Name Reksadana,A.ValueDate Date,A.TrxTypeID BuySell,C.Name Securities,A.DonePrice Price,A.DoneLot Volume,A.InvestmentNotes Notes,D.ID Counterpart from Investment A
                        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
                        left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.Status in (1,2)
                        where ValueDate between @DateFrom and @DateTo and A.StatusInvestment =2 and A.statusDealing = 2 and A.InstrumentTypePK in (1,4,16) " + _paramDealingPK;

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);


                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "KertasKerjaDealingSaham" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "KertasKerjaDealingSaham" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "KertasKerja";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Kertas Kerja Dealing Saham");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<KertasKerja> rList = new List<KertasKerja>();
                                    while (dr0.Read())
                                    {

                                        KertasKerja rSingle = new KertasKerja();
                                        rSingle.Reksadana = Convert.ToString(dr0["Reksadana"]);
                                        rSingle.BuySell = Convert.ToString(dr0["BuySell"]);
                                        rSingle.Securities = Convert.ToString(dr0["Securities"]);
                                        rSingle.Price = Convert.ToDecimal(dr0["Price"]);
                                        rSingle.Volume = Convert.ToDecimal(dr0["Volume"]);
                                        rSingle.Counterpart = Convert.ToString(dr0["Counterpart"]);
                                        rSingle.Notes = Convert.ToString(dr0["Notes"]);
                                        rSingle.Date = Convert.ToDateTime(dr0["Date"]);




                                        rList.Add(rSingle);

                                    }



                                    var GroupByReference =
                                            from r in rList
                                                //orderby r ascending
                                            group r by new { r.Date } into rGroup
                                            select rGroup;

                                    int incRowExcel = 1;

                                    foreach (var rsHeader in GroupByReference)
                                    {
                                        worksheet.Row(incRowExcel).Height = 24;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DEAL TICKET";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "Equity";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 18;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Reksadana";
                                        worksheet.Cells[incRowExcel, 2].Value = "Buy/Sell";
                                        worksheet.Cells[incRowExcel, 3].Value = "Securities";
                                        worksheet.Cells[incRowExcel, 4].Value = "Price";
                                        worksheet.Cells[incRowExcel, 5].Value = "Volume";
                                        worksheet.Cells[incRowExcel, 6].Value = "Counterpart";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 11;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;









                                        incRowExcel = incRowExcel + 1;

                                        int first = incRowExcel;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.Reksadana;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.BuySell;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Securities;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Price;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Volume;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.Counterpart;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            incRowExcel++;






                                        }

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Notes : ";

                                        incRowExcel = incRowExcel + 3;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_PositionSignature(_kertasKerja.Signature1);
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 6;


                                        worksheet.Cells[incRowExcel, 1].Value = _kertasKerja.Signature1Desc;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = _kertasKerja.Signature2Desc;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        _endRowDetail = incRowExcel + 3;

                                    }

                                    worksheet.Row(incRowExcel).PageBreak = true;

                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                    worksheet.Column(1).Width = 50;
                                    worksheet.Column(2).Width = 10;
                                    worksheet.Column(3).Width = 40;
                                    worksheet.Column(4).Width = 15;
                                    worksheet.Column(5).Width = 15;
                                    worksheet.Column(6).Width = 12;




                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Kertas Kerja Dealing Saham";


                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();


                                    return true;
                                }

                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public Boolean KertasKerjaDealing_Obligasi(string _userID, DateTime _dateFrom, DateTime _dateTo, KertasKerja _kertasKerja)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramDealingPK = "";

                        if (!_host.findString(_kertasKerja.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_kertasKerja.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And A.DealingPK in (" + _kertasKerja.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And A.DealingPK in (0) ";
                        }

                        cmd.CommandText = @"
                     
                        select B.Name Buyer,A.ValueDate Date,D.ID Seller,C.Name Securities, A.DonePrice Price, A.DoneVolume Size,A.ValueDate TradeDate,A.SettlementDate SettlementDate,
                        E.DescOne TypeOfTransaction, A.InvestmentNotes Notes
                        from Investment A
                        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
                        left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.Status in (1,2)
                        left join MasterValue E on A.SettlementMode = E.Code and E.status in (1,2) and E.ID = 'SettlementMode'
                        where ValueDate between @DateFrom and @DateTo and A.StatusInvestment =2 and A.InstrumentTypePK in (2,3,8,9,12,13,14,15)
                        and A.statusDealing = 2 and A.CrossFundFromPK = 0 " + _paramDealingPK + @"


                        union all

                        select case when A.TrxType = 1 then B.Name else F.Name end Buyer,A.ValueDate Date,case when A.TrxType = 2 then B.Name else F.Name end Seller,C.Name Securities, A.DonePrice Price, A.DoneVolume Size,A.ValueDate TradeDate,A.SettlementDate SettlementDate,
                        E.DescOne TypeOfTransaction, A.InvestmentNotes Notes
                        from Investment A
                        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
                        left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.Status in (1,2)
                        left join MasterValue E on A.SettlementMode = E.Code and E.status in (1,2) and E.ID = 'SettlementMode'
                        left join Fund F on A.CrossFundFromPK = F.FundPK and F.status in (1,2)
                        where ValueDate between @DateFrom and @DateTo and A.StatusInvestment =2 and A.InstrumentTypePK in (2,3,8,9,12,13,14,15)
                        and A.statusDealing = 2 and A.CrossFundFromPK <> 0 " + _paramDealingPK;

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);


                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "KertasKerjaDealingObligasi" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "KertasKerjaDealingObligasi" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "KertasKerja";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Kertas Kerja Dealing Obligasi");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<KertasKerja> rList = new List<KertasKerja>();
                                    while (dr0.Read())
                                    {

                                        KertasKerja rSingle = new KertasKerja();
                                        rSingle.Securities = Convert.ToString(dr0["Securities"]);
                                        rSingle.Price = Convert.ToDecimal(dr0["Price"]);
                                        rSingle.Notes = Convert.ToString(dr0["Notes"]);

                                        rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                        rSingle.Buyer = Convert.ToString(dr0["Buyer"]);
                                        rSingle.Seller = Convert.ToString(dr0["Seller"]);
                                        rSingle.Size = Convert.ToDecimal(dr0["Size"]);
                                        rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                        rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                        rSingle.TypeOfTransaction = Convert.ToString(dr0["TypeOfTransaction"]);




                                        rList.Add(rSingle);

                                    }



                                    var GroupByReference =
                                            from r in rList
                                                //orderby r ascending
                                            group r by new { r.Date } into rGroup
                                            select rGroup;

                                    int incRowExcel = 1;
                                    foreach (var rsHeader in GroupByReference)
                                    {
                                        worksheet.Row(incRowExcel).Height = 24;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DEAL TICKET";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "Bonds";
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 18;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Buyer";
                                        worksheet.Cells[incRowExcel, 2].Value = "Seller";
                                        worksheet.Cells[incRowExcel, 3].Value = "Securities";
                                        worksheet.Cells[incRowExcel, 4].Value = "Price";
                                        worksheet.Cells[incRowExcel, 5].Value = "Size";
                                        worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
                                        worksheet.Cells[incRowExcel, 7].Value = "Settlement Date";
                                        worksheet.Cells[incRowExcel, 8].Value = "Type Of Transaction";
                                        worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 11;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;









                                        incRowExcel = incRowExcel + 1;

                                        int first = incRowExcel;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.Buyer;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Seller;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Securities;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Price;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Size;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.TradeDate;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.SettlementDate;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.TypeOfTransaction;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                            incRowExcel++;






                                        }

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Notes : ";

                                        incRowExcel = incRowExcel + 3;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_PositionSignature(_kertasKerja.Signature1);
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 8].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 6;


                                        worksheet.Cells[incRowExcel, 1].Value = _kertasKerja.Signature1Desc;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = _kertasKerja.Signature2Desc;
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;


                                        _endRowDetail = incRowExcel + 3;

                                    }


                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                    worksheet.Column(1).Width = 50;
                                    worksheet.Column(2).Width = 10;
                                    worksheet.Column(3).Width = 70;
                                    worksheet.Column(4).Width = 15;
                                    worksheet.Column(5).Width = 20;
                                    worksheet.Column(6).Width = 15;
                                    worksheet.Column(7).Width = 15;
                                    worksheet.Column(8).Width = 15;




                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Kertas Kerja Dealing Obligasi";


                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();


                                    return true;
                                }

                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public Boolean KertasKerjaDealing_TimeDeposit(string _userID, DateTime _dateFrom, DateTime _dateTo, KertasKerja _kertasKerja)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramDealingPK = "";

                        if (!_host.findString(_kertasKerja.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_kertasKerja.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And A.DealingPK in (" + _kertasKerja.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And A.DealingPK in (0) ";
                        }

                        cmd.CommandText = @"
                         select A.ValueDate Date,B.Name Reksadana,A.TrxTypeID Type,C.Name Bank,A.DoneVolume Nominal,
		A.InterestPercent InterestRate,cast(DATEDIFF(day,A.ValueDate,A.MaturityDate) as nvarchar(50)) Tenor,A.InvestmentNotes Notes ,case when A.TrxType = 3 then case when A.BitRollOverInterest = 1 then 'Rollover + Bunga' else 'Rollover Pokok' end else A.InvestmentNotes end Remarks
 from Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join Bank C on A.BankPK = C.BankPK and C.Status in (1,2) 
where ValueDate between @DateFrom and @DateTo and A.StatusInvestment =2 and A.InstrumentTypePK in (5,10)
 and A.statusDealing = 2 " + _paramDealingPK;

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);



                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "KertasKerjaDealingTimeDeposit" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "KertasKerjaDealingTimeDeposit" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "KertasKerja";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Kertas Kerja Dealing TimeDeposit");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<KertasKerja> rList = new List<KertasKerja>();
                                    while (dr0.Read())
                                    {

                                        KertasKerja rSingle = new KertasKerja();
                                        rSingle.Reksadana = Convert.ToString(dr0["Reksadana"]);
                                        rSingle.Type = Convert.ToString(dr0["Type"]);
                                        rSingle.Bank = Convert.ToString(dr0["Bank"]);
                                        rSingle.Nominal = Convert.ToDecimal(dr0["Nominal"]);
                                        rSingle.InterestRate = Convert.ToDecimal(dr0["InterestRate"]);
                                        rSingle.Tenor = Convert.ToString(dr0["Tenor"]);
                                        rSingle.Notes = Convert.ToString(dr0["Notes"]);
                                        rSingle.Date = Convert.ToDateTime(dr0["Date"]);


                                        rList.Add(rSingle);

                                    }



                                    var GroupByReference =
                                            from r in rList
                                                //orderby r ascending
                                            group r by new { r.Date } into rGroup
                                            select rGroup;

                                    int incRowExcel = 1;
                                    foreach (var rsHeader in GroupByReference)
                                    {

                                        worksheet.Row(incRowExcel).Height = 24;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DEAL TICKET";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "Money Market";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 18;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Reksadana";
                                        worksheet.Cells[incRowExcel, 2].Value = "Type";
                                        worksheet.Cells[incRowExcel, 3].Value = "Bank";
                                        worksheet.Cells[incRowExcel, 4].Value = "Nominal";
                                        worksheet.Cells[incRowExcel, 5].Value = "InterestRate";
                                        worksheet.Cells[incRowExcel, 6].Value = "Tenor(Days)";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 11;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;








                                        incRowExcel = incRowExcel + 1;

                                        int first = incRowExcel;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.Reksadana;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Type;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Bank;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Nominal;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.InterestRate;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.Tenor;
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            incRowExcel++;






                                        }

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Notes : ";

                                        incRowExcel = incRowExcel + 3;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_PositionSignature(_kertasKerja.Signature1);
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 6;


                                        worksheet.Cells[incRowExcel, 1].Value = _kertasKerja.Signature1Desc;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = _kertasKerja.Signature2Desc;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        _endRowDetail = incRowExcel + 3;

                                    }


                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                    worksheet.Column(1).Width = 50;
                                    worksheet.Column(2).Width = 15;
                                    worksheet.Column(3).Width = 40;
                                    worksheet.Column(4).Width = 18;
                                    worksheet.Column(5).Width = 15;
                                    worksheet.Column(6).Width = 22;




                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Kertas Kerja Dealing TimeDeposit";


                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();


                                    return true;
                                }

                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                return false;
                throw err;
            }

        }


        public Boolean KertasKerjaSettlement_Saham(string _userID, DateTime _dateFrom, DateTime _dateTo, KertasKerja _kertasKerja)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramSettlementPK = "";

                        if (!_host.findString(_kertasKerja.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_kertasKerja.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And A.SettlementPK in (" + _kertasKerja.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And A.SettlementPK in (0) ";
                        }


                        cmd.CommandText = @"
                        select B.Name Fund,A.ValueDate TradeDate,SUBSTRING(A.Reference,CHARINDEX('/',A.Reference)-2,2) InstructionNo,A.SettlementDate SettlementDate,D.Name Broker,
                        A.TrxTypeID BuySell,C.Name SecurityName,A.DoneLot Lot, A.DoneVolume Quantity,A.DonePrice UnitPrice,
                        A.DoneAmount TotalPrice, A.CommissionAmount Comm, A.WHTAmount,A.LevyAmount TotalLevy,A.VATAmount VATBrokerage,
                        A.TotalAmount Amount,case when D.ID = 'RB' then 'Y' else 'N' end AffYN,A.ApprovedDealingID ApprovedDealingID, A.ApprovedSettlementID ApprovedSettlementID
                        from Investment A
                        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
                        left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.Status in (1,2)
                        where ValueDate between @DateFrom and @DateTo and A.StatusInvestment =2 and A.InstrumentTypePK in (1,4,16) and A.statusDealing = 2 and A.statusSettlement in (2) " + _paramSettlementPK;

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);



                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "KertasKerjaSettlementSaham" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "KertasKerjaSettlementSaham" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "KertasKerja";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Kertas Kerja Settlement Saham");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<KertasKerja> rList = new List<KertasKerja>();
                                    while (dr0.Read())
                                    {

                                        KertasKerja rSingle = new KertasKerja();
                                        rSingle.Fund = Convert.ToString(dr0["Fund"]);

                                        rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                        rSingle.InstructionNo = Convert.ToString(dr0["InstructionNo"]);
                                        rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                        rSingle.Broker = Convert.ToString(dr0["Broker"]);
                                        rSingle.AffYN = Convert.ToString(dr0["AffYN"]);
                                        rSingle.BuySell = Convert.ToString(dr0["BuySell"]);
                                        rSingle.SecurityName = Convert.ToString(dr0["SecurityName"]);
                                        //rSingle.FundManager = Convert.ToString(dr0["FundManager"]);
                                        rSingle.Lot = Convert.ToDecimal(dr0["Lot"]);
                                        rSingle.Quantity = Convert.ToDecimal(dr0["Quantity"]);
                                        rSingle.UnitPrice = Convert.ToDecimal(dr0["UnitPrice"]);
                                        rSingle.TotalPrice = Convert.ToDecimal(dr0["TotalPrice"]);
                                        rSingle.Comm = Convert.ToDecimal(dr0["Comm"]);
                                        rSingle.WHTAmount = Convert.ToDecimal(dr0["WHTAmount"]);
                                        rSingle.TotalLevy = Convert.ToDecimal(dr0["TotalLevy"]);
                                        rSingle.VATBrokerage = Convert.ToDecimal(dr0["VATBrokerage"]);
                                        rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                        rSingle.ApprovedDealingID = Convert.ToString(dr0["ApprovedDealingID"]);
                                        rSingle.ApprovedSettlementID = Convert.ToString(dr0["ApprovedSettlementID"]);




                                        rList.Add(rSingle);

                                    }



                                    var GroupByReference =
                                            from r in rList
                                                //orderby r ascending
                                            group r by new { r.Fund, r.TradeDate, r.SettlementDate, r.ApprovedDealingID, r.ApprovedSettlementID } into rGroup
                                            select rGroup;

                                    int incRowExcel = 1;
                                    foreach (var rsHeader in GroupByReference)
                                    {


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Value = "DAILY TRANSACTION FORM";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 2].Value = "Fund : ";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Fund;
                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        worksheet.Cells[incRowExcel, 6].Value = "Trade Date : ";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.TradeDate;
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        //worksheet.Cells[incRowExcel, 11].Value = "Instruction No : ";
                                        //worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.InstructionNo;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 18;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "Security : ";
                                        worksheet.Cells[incRowExcel, 3].Value = "EQUITY";

                                        worksheet.Cells[incRowExcel, 11].Value = "Settlement Date : ";
                                        worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.SettlementDate;
                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;



                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        worksheet.Cells[incRowExcel, 2].Value = "Broker";
                                        worksheet.Cells[incRowExcel, 3].Value = "Aff Y/N";
                                        worksheet.Cells[incRowExcel, 4].Value = "Sell/Buy";
                                        worksheet.Cells[incRowExcel, 5].Value = "Security Name";
                                        //worksheet.Cells[incRowExcel, 6].Value = "Lot";
                                        worksheet.Cells[incRowExcel, 6].Value = "Quantity";
                                        worksheet.Cells[incRowExcel, 7].Value = "Unit Price";
                                        worksheet.Cells[incRowExcel, 8].Value = "Total Price";
                                        worksheet.Cells[incRowExcel, 9].Value = "Comm";
                                        worksheet.Cells[incRowExcel, 10].Value = "WH. Tax art 23";
                                        worksheet.Cells[incRowExcel, 11].Value = "Total Levy";
                                        worksheet.Cells[incRowExcel, 12].Value = "VAT from Brokerage";
                                        worksheet.Cells[incRowExcel, 13].Value = "Amount";
                                        worksheet.Cells[incRowExcel, 14].Value = "Instruction No.";

                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Font.Size = 11;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;







                                        incRowExcel = incRowExcel + 1;

                                        int first = incRowExcel;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;




                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Broker;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.AffYN;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.BuySell;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.SecurityName;

                                            //worksheet.Cells[incRowExcel, 6].Value = rsDetail.Lot;

                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.Quantity;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitPrice;

                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.TotalPrice;

                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.Comm;

                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.WHTAmount;

                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalLevy;

                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail.VATBrokerage;

                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail.Amount;

                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail.InstructionNo;
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                            incRowExcel++;






                                        }


                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 2].Value = "Please Confirm Upon Setlement";

                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Medium;

                                        //worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 9].Value = "For Internal User Fund Administrator";
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Value = "Approved By,";
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Value = "Prepare By : ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.ApprovedSettlementID;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Value = "Checked By : ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.ApprovedDealingID;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Value = "Verified By : ";
                                        worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.ApprovedDealingID;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        int _RowA = incRowExcel;
                                        int _RowB = incRowExcel + 6;
                                        worksheet.Cells[incRowExcel, 9].Value = "Date : ";
                                        worksheet.Cells[incRowExcel, 10].Value = Convert.ToDateTime(_dateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //if (_kertasKerja.Signature1 != 0)
                                        //{
                                        worksheet.Cells[_RowA, 2].Value = _host.Get_PositionSignature(_kertasKerja.Signature1);
                                        worksheet.Cells[_RowA, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 2].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature1) + " )";
                                        worksheet.Cells[_RowB, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                        //}
                                        //else
                                        //{
                                        //    worksheet.Cells[_RowA, 2].Value = "";
                                        //    worksheet.Cells[_RowA, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        //    worksheet.Cells[_RowB, 2].Value = "";
                                        //    worksheet.Cells[_RowB, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        //}


                                        //if (_kertasKerja.Signature2 != 0)
                                        //{
                                        worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                        worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature2) + " )";
                                        worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        //}
                                        //else
                                        //{
                                        //    worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                        //    worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        //    worksheet.Cells[_RowB, 5].Value = "";
                                        //    worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        //}

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        incRowExcel = incRowExcel + 8;
                                        _endRowDetail = incRowExcel + 3;

                                        worksheet.Row(incRowExcel).PageBreak = true;
                                    }


                                    string _rangeA = "A:O" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 14;
                                        //r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }

                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];

                                    worksheet.Column(2).Width = 45;
                                    worksheet.Column(3).Width = 10;
                                    worksheet.Column(4).Width = 10;
                                    worksheet.Column(5).Width = 45;
                                    //worksheet.Column(6).Width = 12;
                                    worksheet.Column(6).Width = 18;
                                    worksheet.Column(7).Width = 15;
                                    worksheet.Column(8).Width = 20;
                                    worksheet.Column(9).Width = 18;
                                    worksheet.Column(10).Width = 20;
                                    worksheet.Column(11).Width = 18;
                                    worksheet.Column(12).Width = 22;
                                    worksheet.Column(13).Width = 23;
                                    worksheet.Column(14).Width = 28;





                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Kertas Kerja Settlement Saham";


                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();


                                    return true;
                                }

                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                return false;
                throw err;
            }
        }


        public Boolean KertasKerjaSettlement_Obligasi(string _userID, DateTime _dateFrom, DateTime _dateTo, KertasKerja _kertasKerja)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        string _paramSettlementPK = "";

                        if (!_host.findString(_kertasKerja.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_kertasKerja.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And A.SettlementPK in (" + _kertasKerja.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And A.SettlementPK in (0) ";
                        }

                        cmd.CommandText = @"
select B.Name NamaFund,
		A.Reference Reference,
	   A.ValueDate Date,
	  case when A.TrxType = 1 then case when CrossFundFromPK <> 0 then E.Name else D.Name end when A.TrxType = 2 then case when CrossFundFromPK <> 0 then E.Name else D.Name end else D.Name end Counterpart,
		D.ContactPerson Attention,
		C.Name Re,
		C.Name BondName,
		C.ID ShortCode,
		
       A.TrxType,
		case when CrossFundFromPK <> 0 then B.name else case when CrossFundFromPK = 0 then case when A.TrxType = 1 then B.name else D.Name end else '' end end Buyer,
		case when CrossFundFromPK <> 0 then E.name  else case when CrossFundFromPK = 0 then case when A.TrxType = 2 then B.name else D.Name end else '' end end Seller,
	
		A.MaturityDate MaturityDate,
		A.LastCouponDate LastCouponPayment,
		A.DoneVolume Quantity,
		A.InterestPercent CurrentCoupon,
		A.DonePrice Price,
		A.DoneAmount PurchaseAmount,
		A.DoneAccruedInterest AccruedInterest,
		A.DoneAccruedInterest TaxAccruedInterest,
		IncomeTaxGainAmount TaxCapitalGainLoss,
		IncomeTaxInterestAmount TaxIncome,
		IncomeTaxGainAmount + IncomeTaxInterestAmount TotalTaxIncome,
		A.TotalAmount NetProceeds,
		A.ValueDate TradeDate,
		A.SettlementDate SettlementDate,
		A.AcqPrice AcqPrice,
		A.AcqDate AcqDate,
		A.AcqVolume AcqVolume
      
       
	


	    from Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.Status in (1,2)
left join Fund E on A.CrossFundFromPK = E.FundPK and E.status = 2
where ValueDate between @DateFrom and @DateTo and A.StatusInvestment =2 and A.InstrumentTypePK in (2,3,8,9,12,13,14,15)
and A.statusDealing = 2 and A.statusSettlement in (2) " + _paramSettlementPK;

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);



                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "KertasKerjaSettlementObligasi" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "KertasKerjaSettlementObligasi" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "KertasKerja";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Kertas Kerja Settlement Obligasi");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<KertasKerja> rList = new List<KertasKerja>();
                                    while (dr0.Read())
                                    {

                                        KertasKerja rSingle = new KertasKerja();
                                        rSingle.NamaFund = Convert.ToString(dr0["NamaFund"]);
                                        rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                        rSingle.Counterpart = Convert.ToString(dr0["Counterpart"]);
                                        rSingle.Attention = Convert.ToString(dr0["Attention"]);
                                        rSingle.Re = Convert.ToString(dr0["Re"]);
                                        rSingle.BondName = Convert.ToString(dr0["BondName"]);
                                        rSingle.ShortCode = Convert.ToString(dr0["ShortCode"]);
                                        rSingle.Buyer = Convert.ToString(dr0["Buyer"]);
                                        rSingle.Seller = Convert.ToString(dr0["Seller"]);
                                        rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                        rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);



                                        rSingle.LastCouponPayment = Convert.ToDateTime(dr0["LastCouponPayment"]);
                                        rSingle.Quantity = Convert.ToDecimal(dr0["Quantity"]);
                                        rSingle.CurrentCoupon = Convert.ToDecimal(dr0["CurrentCoupon"]);
                                        rSingle.Price = Convert.ToDecimal(dr0["Price"]);
                                        rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                        rSingle.AccruedInterest = Convert.ToDecimal(dr0["AccruedInterest"]);
                                        rSingle.TaxAccruedInterest = Convert.ToDecimal(dr0["TaxAccruedInterest"]);
                                        rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                        rSingle.TaxIncome = Convert.ToDecimal(dr0["TaxIncome"]);
                                        rSingle.TotalTaxIncome = Convert.ToDecimal(dr0["TotalTaxIncome"]);

                                        rSingle.NetProceeds = Convert.ToDecimal(dr0["NetProceeds"]);
                                        rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                        rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                        rSingle.AcqPrice = Convert.ToDecimal(dr0["AcqPrice"]);
                                        rSingle.AcqDate = Convert.ToDateTime(dr0["AcqDate"]);
                                        rSingle.AcqVolume = Convert.ToDecimal(dr0["AcqVolume"]);






                                        rList.Add(rSingle);

                                    }



                                    var GroupByReference =
                                            from r in rList
                                                //orderby r ascending
                                            group r by new { r.NamaFund } into rGroup
                                            select rGroup;
                                    int incRowExcel = 0;

                                    foreach (var rsHeader in GroupByReference)
                                    {
                                        int first = incRowExcel;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;



                                        incRowExcel++;



                                        foreach (var rsDetail in rsHeader)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.NamaFund;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyPhone() + ", " + _host.Get_CompanyFax();
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 2].Value = "Ref.No";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Reference;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_dateFrom).ToString("dd-MMM-yyyy");
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "To";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Counterpart;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Attention";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Attention;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Re";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Re;
                                            incRowExcel = incRowExcel + 4; ;

                                            worksheet.Cells[incRowExcel, 2].Value = "Dear Sirs";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "As Per Our Conversation  with you, herewith we would like to confirm having bond transaction with details as follows :";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 2].Value = "Bond Name";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.BondName;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Short Code";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.ShortCode;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Buyer";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Buyer;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Seller";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Seller;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Maturity Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.MaturityDate;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Last Coupon Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.LastCouponPayment;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Quantity / Nominal";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Quantity;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Current Coupon";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.CurrentCoupon;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Price";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Price;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Purchase Amount";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.PurchaseAmount;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Accrued Interest";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.AccruedInterest;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Taxable Accrued Interest";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.TaxAccruedInterest;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Capital Gain Tax ";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.TaxCapitalGainLoss;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Interest Income Tax";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.TaxIncome;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Withholding Tax";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalTaxIncome;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Net Proceeds";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.NetProceeds;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.TradeDate;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Settlement Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.SettlementDate;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 2].Value = "Seller's Acquisition Price";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.AcqPrice;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Seller's Acquisition Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.AcqDate;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.AcqVolume;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel = incRowExcel + 4;

                                            worksheet.Cells[incRowExcel, 2].Value = "Please Provide your confirmation by returning this confirmation to " + rsDetail.NamaFund + " by Fax.No 021-2510126, signed by your authorized signer by 24 hours.";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Otherwise this transaction will be considered confirmed with no errors.";
                                            incRowExcel = incRowExcel + 4;
                                            worksheet.Cells[incRowExcel, 2].Value = "Sincerely,";
                                            worksheet.Cells[incRowExcel, 6].Value = "Confirmed By,";
                                            incRowExcel++;
                                            if (rsDetail.TrxType == 1) //Buy
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Buyer;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Seller;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Seller;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Buyer;

                                            }



                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 2].Value = "NamaFund (buyer)";
                                            //worksheet.Cells[incRowExcel, 6].Value = "NamaFund (Seller)";
                                            incRowExcel = incRowExcel + 5;
                                            int _RowA = incRowExcel;
                                            int _RowB = incRowExcel + 6;
                                            //if (_kertasKerja.Signature1 != 0)
                                            //{
                                            worksheet.Cells[_RowA, 2].Value = _host.Get_PositionSignature(_kertasKerja.Signature1);
                                            worksheet.Cells[_RowA, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 2].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature1) + " )";
                                            worksheet.Cells[_RowB, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            //}
                                            //else
                                            //{
                                            //    worksheet.Cells[_RowA, 2].Value = "";
                                            //    worksheet.Cells[_RowA, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //    worksheet.Cells[_RowB, 2].Value = "";
                                            //    worksheet.Cells[_RowB, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //}


                                            //if (_kertasKerja.Signature2 != 0)
                                            //{
                                            worksheet.Cells[_RowA, 4].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                            worksheet.Cells[_RowA, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowB, 4].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature2) + " )";
                                            worksheet.Cells[_RowB, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //}
                                            //else
                                            //{
                                            //    worksheet.Cells[_RowA, 4].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                            //    worksheet.Cells[_RowA, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //    worksheet.Cells[_RowB, 4].Value = "";
                                            //    worksheet.Cells[_RowB, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //}

                                            //if (_kertasKerja.Signature3 != 0)
                                            //{
                                            worksheet.Cells[_RowA, 7].Value = _host.Get_PositionSignature(_kertasKerja.Signature3);
                                            worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[_RowA, 7, _RowA, 8].Merge = true;


                                            worksheet.Cells[_RowB, 7].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature3) + " )";
                                            worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[_RowB, 7, _RowB, 8].Merge = true;

                                            //}
                                            //else
                                            //{
                                            //    worksheet.Cells[_RowA, 6].Value = "";
                                            //    worksheet.Cells[_RowA, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //    worksheet.Cells[_RowB, 6].Value = "";
                                            //    worksheet.Cells[_RowB, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //}

                                            //if (_kertasKerja.Signature4 != 0)
                                            //{
                                            worksheet.Cells[_RowA, 11].Value = _host.Get_PositionSignature(_kertasKerja.Signature4);
                                            worksheet.Cells[_RowA, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[_RowA, 11, _RowA, 12].Merge = true;

                                            worksheet.Cells[_RowB, 11].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature4) + " )";
                                            worksheet.Cells[_RowB, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[_RowB, 11, _RowB, 12].Merge = true;

                                            //}
                                            //else
                                            //{
                                            //    worksheet.Cells[_RowA, 7].Value = "";
                                            //    worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //    worksheet.Cells[_RowB, 7].Value = "";
                                            //    worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //}




                                            incRowExcel = incRowExcel + 12;
                                            worksheet.Row(incRowExcel).PageBreak = true;
                                        }


                                        //worksheet.Cells[incRowExcel, 1].Value = "Notes : ";

                                        //incRowExcel = incRowExcel + 3;
                                        //worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Dealer;
                                        //worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.Settlement;
                                        //worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                        incRowExcel--;

                                    }



                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 15];
                                    worksheet.Column(2).Width = 20;
                                    worksheet.Column(3).Width = 20;
                                    worksheet.Column(4).Width = 20;
                                    //worksheet.Column(5).AutoFit();
                                    //worksheet.Column(6).AutoFit();
                                    //worksheet.Column(7).AutoFit();
                                    //worksheet.Column(8).AutoFit();




                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Kertas Kerja Settlement Obligasi";


                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();

                                    return true;
                                }

                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                return false;
                throw err;
            }
        }

        public Boolean KertasKerjaSettlement_TimeDeposit(string _userID, DateTime _dateFrom, DateTime _dateTo, KertasKerja _kertasKerja)
        {

            try
            {
                var _HasRowRedeem = 0;
                var _HasRowRollover = 0;
                var _HasRowPlacement = 0;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramSettlementPK = "";
                        string _bitIsMature = "";

                        if (!_host.findString(_kertasKerja.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_kertasKerja.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And A.SettlementPK in (" + _kertasKerja.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And A.SettlementPK in (0) ";
                        }

                        if (_kertasKerja.BitIsMature == true)
                        {
                            _bitIsMature = @"
                            union all
                        
select 
B.Name NamaFund,
A.ValueDate Date,
F.ID Untuk,
F.BankAccountName BankAccountName,
F.BankAccountNo BankAccountNo,
F.ContactPerson Attention,
F.Phone1 Telephone,
F.Fax1 Fax,
I.ID Cc,
I.BankAccountName BankAccountNameFund,
J.Name + ' - ' + L.BankAccountNo BankAccountNoFund,
I.ContactPerson AttentionFromFund,
I.Phone1 TelephoneFromFund,
I.Fax1 FaxFromFund,
A.Reference RefNo,
E.Name + F.ID NamaBank,
F.BankAccountName AccountName,
F.BankAccountNo IFO,
A.Amount Amount,
H.ID Issuer,
A.Amount Pokok,(A.Amount * A.InterestPercent * 0.8 /100 / case when A.InterestDaysType = 4 then 365 
else case when A.InterestDaysType = 3 then 360 
else case when  A.InterestDaysType = 2 then 
datediff(Day,DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, A.ValueDate), 0)), DATEADD(yy, DATEDIFF(yy, 0, A.ValueDate) + 1, -1)) else 0 end end end ) * datediff(day,A.AcqDate,case when A.TrxType in (1,3) then A.MaturityDate else A.ValueDate end) Bunga,
A.Amount + (A.Amount * A.InterestPercent * 0.8  /100 / case when A.InterestDaysType = 4 then 365 
else case when A.InterestDaysType = 3 then 360 
else case when  A.InterestDaysType = 2 then 
datediff(Day,DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, A.ValueDate), 0)), DATEADD(yy, DATEDIFF(yy, 0, A.ValueDate) + 1, -1)) else 0 end end end ) * datediff(day,A.AcqDate,case when A.TrxType in (1,3) then A.MaturityDate else A.ValueDate end) Total, --dirubah jadi rumus di excel
A.InterestPercent Rate,
datediff(day,A.AcqDate,A.MaturityDate) Days,
A.AcqDate PeriodFrom,
A.MaturityDate PeriodTo,2 TrxType,datediff(day,A.AcqDate,case when A.TrxType in (1,3) then A.MaturityDate else A.ValueDate end) TenorDays,'LIQUIDATE' TrxTypeID
,case when A.InterestDaysType = 3 then 360 when A.InterestDaysType = 4 then 365 else datediff(Day,DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, A.ValueDate), 0)), DATEADD(yy, DATEDIFF(yy, 0, A.ValueDate) + 1, -1)) end Dayscount
,A.MaturityDate
,(A.Amount * A.InterestPercent * 0.8 /100 / case when A.InterestDaysType = 4 then 365 
else case when A.InterestDaysType = 3 then 360 
else case when  A.InterestDaysType = 2 then 
datediff(Day,DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, A.ValueDate), 0)), DATEADD(yy, DATEDIFF(yy, 0, A.ValueDate) + 1, -1)) else 0 end end end ) * datediff(day,A.AcqDate,case when A.TrxType in (1,3) then A.MaturityDate else A.ValueDate end) * 0.8 Interest
 
from InvestmentMature Z
left join Investment A on Z.InvestmentPK = A.InvestmentPK 
left join Fund B on A.FundPK  = B.FundPK and B.status in (1,2) 
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.Status in (1,2)
left join Bank E on A.BankPK = E.BankPK and E.Status in (1,2)
left join BankBranch F on A.BankBranchPK = F.BankBranchPK and F.Status in (1,2)
left Join Period G on A.PeriodPK = G.PeriodPK and G.Status in (1,2)
left join Issuer H on E.IssuerPK = H.IssuerPK and H.status in (1,2)
left join BankBranch I on B.BankBranchPK = I.BankBranchPK and I.status = 2
left join Bank J on I.BankPK = J.BankPK and J.status = 2
left join FundAccountingSetup K on A.FundPK = K.FundPK and K.status = 2
left join FundCashRef L on a.FundCashRefPK = L.FundCashRefPK and L.Status = 2
where Selected = 1
                         ";
                        }
                        else
                        {
                            _bitIsMature = "";
                        }

                        cmd.CommandText = @"
                    select B.Name NamaFund,
		A.ValueDate Date,
		F.ID Untuk,
        F.BankAccountName BankAccountName,
		F.BankAccountNo BankAccountNo,
		F.ContactPerson Attention,
		F.Phone1 Telephone,
		F.Fax1 Fax,
		I.ID Cc,
        I.BankAccountName BankAccountNameFund,
		J.Name + ' - ' + L.BankAccountNo BankAccountNoFund,
		I.ContactPerson AttentionFromFund,
		I.Phone1 TelephoneFromFund,
		I.Fax1 FaxFromFund,
		A.Reference RefNo,
		E.Name + F.ID NamaBank,
		F.BankAccountName AccountName,
		F.BankAccountNo IFO,
		A.Amount Amount,
		H.ID Issuer,
		A.Amount Pokok,
		(A.Amount * case when A.TrxType = 2 then A.BreakInterestPercent * 0.8 else A.InterestPercent end /100 / case when A.InterestDaysType = 4 then 365 
		else case when A.InterestDaysType = 3 then 360 
		else case when  A.InterestDaysType = 2 then 
		datediff(Day,DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, ValueDate), 0)), DATEADD(yy, DATEDIFF(yy, 0, ValueDate) + 1, -1)) else 0 end end end ) * datediff(day,A.AcqDate,case when A.TrxType in (1,3) then A.MaturityDate else A.ValueDate end) Bunga,
		A.Amount + (A.Amount * case when A.TrxType = 2 then A.BreakInterestPercent * 0.8 else A.InterestPercent end  /100 / case when A.InterestDaysType = 4 then 365 
		else case when A.InterestDaysType = 3 then 360 
		else case when  A.InterestDaysType = 2 then 
		datediff(Day,DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, ValueDate), 0)), DATEADD(yy, DATEDIFF(yy, 0, ValueDate) + 1, -1)) else 0 end end end ) * datediff(day,A.AcqDate,case when A.TrxType in (1,3) then A.MaturityDate else A.ValueDate end) Total, --dirubah jadi rumus di excel
		case when A.TrxType in (1,3) then A.InterestPercent else A.BreakInterestPercent end Rate,
		datediff(day,Acqdate,A.ValueDate) Days,
		A.AcqDate PeriodFrom,
		A.ValueDate PeriodTo,A.TrxType,datediff(day,A.AcqDate,case when A.TrxType in (1,3) then A.MaturityDate else A.ValueDate end) TenorDays,A.TrxTypeID
       ,case when A.InterestDaysType = 3 then 360 when A.InterestDaysType = 4 then 365 else datediff(Day,DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, ValueDate), 0)), DATEADD(yy, DATEDIFF(yy, 0, ValueDate) + 1, -1)) end Dayscount
       ,A.MaturityDate
       ,(A.Amount * case when A.TrxType = 2 then A.BreakInterestPercent * 0.8 else A.InterestPercent end  /100 / case when A.InterestDaysType = 4 then 365 
		else case when A.InterestDaysType = 3 then 360 
		else case when  A.InterestDaysType = 2 then 
		datediff(Day,DATEADD(dd, -1, DATEADD(yy, DATEDIFF(yy, 0, ValueDate), 0)), DATEADD(yy, DATEDIFF(yy, 0, ValueDate) + 1, -1)) else 0 end end end ) * datediff(day,A.AcqDate,case when A.TrxType in (1,3) then A.MaturityDate else A.ValueDate end) * 0.8 Interest


    from Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.Status in (1,2)
left join Bank E on A.BankPK = E.BankPK and E.Status in (1,2)
left join BankBranch F on A.BankBranchPK = F.BankBranchPK and F.Status in (1,2)
left Join Period G on A.PeriodPK = G.PeriodPK and G.Status in (1,2)
left join Issuer H on E.IssuerPK = H.IssuerPK and H.status in (1,2)
left join BankBranch I on B.BankBranchPK = I.BankBranchPK and I.status = 2
left join Bank J on I.BankPK = J.BankPK and J.status = 2
left join FundAccountingSetup K on A.FundPK = K.FundPK and K.status = 2
left join FundCashRef L on a.FundCashRefPK = L.FundCashRefPK and L.Status = 2
where ValueDate between @DateFrom and @DateTo and A.StatusInvestment =2 and A.InstrumentTypePK in (5,10) --and A.TrxType in (2) 
and A.statusDealing = 2 and A.statusSettlement in (2) " + _paramSettlementPK + _bitIsMature;

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);



                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                _HasRowRedeem = 1;

                            }
                            string filePath = Tools.ReportsPath + "KertasKerjaSettlementTimeDeposit" + "_" + _userID + ".xlsx";
                            string pdfPath = Tools.ReportsPath + "KertasKerjaSettlementTimeDeposit" + "_" + _userID + ".pdf";
                            FileInfo excelFile = new FileInfo(filePath);
                            if (excelFile.Exists)
                            {
                                excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                excelFile = new FileInfo(filePath);
                            }

                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                            using (ExcelPackage package = new ExcelPackage(excelFile))
                            {
                                package.Workbook.Properties.Title = "KertasKerja";
                                package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Kertas Kerja Settlement TimeDeposit");


                                //ATUR DATA GROUPINGNYA DULU
                                List<KertasKerja> rList = new List<KertasKerja>();
                                while (dr0.Read())
                                {

                                    KertasKerja rSingle = new KertasKerja();
                                    rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                    rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);
                                    rSingle.NamaFund = Convert.ToString(dr0["NamaFund"]);
                                    rSingle.Untuk = Convert.ToString(dr0["Untuk"]);
                                    rSingle.Attention = Convert.ToString(dr0["Attention"]);
                                    rSingle.Telephone = Convert.ToString(dr0["Telephone"]);
                                    rSingle.Fax = Convert.ToString(dr0["Fax"]);
                                    rSingle.Cc = Convert.ToString(dr0["Cc"]);
                                    rSingle.AttentionFromFund = Convert.ToString(dr0["AttentionFromFund"]);
                                    rSingle.TelephoneFromFund = Convert.ToString(dr0["TelephoneFromFund"]);
                                    rSingle.FaxFromFund = Convert.ToString(dr0["FaxFromFund"]);
                                    rSingle.RefNo = Convert.ToString(dr0["RefNo"]);

                                    rSingle.NamaBank = Convert.ToString(dr0["NamaBank"]);

                                    rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                    rSingle.IFO = Convert.ToString(dr0["IFO"]);
                                    rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                    rSingle.Issuer = Convert.ToString(dr0["Issuer"]);
                                    rSingle.Pokok = Convert.ToDecimal(dr0["Pokok"]);
                                    rSingle.Bunga = Convert.ToDecimal(dr0["Bunga"]);
                                    rSingle.Total = Convert.ToDecimal(dr0["Total"]);

                                    rSingle.Rate = Convert.ToDecimal(dr0["Rate"]);
                                    rSingle.Days = Convert.ToInt32(dr0["Days"]);
                                    rSingle.TenorDays = Convert.ToInt32(dr0["TenorDays"]);
                                    rSingle.PeriodFrom = Convert.ToDateTime(dr0["PeriodFrom"]);
                                    rSingle.PeriodTo = Convert.ToDateTime(dr0["PeriodTo"]);

                                    rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                    rSingle.Dayscount = Convert.ToInt32(dr0["Dayscount"]);
                                    rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                    rSingle.Interest = Convert.ToDecimal(dr0["Interest"]);
                                    rSingle.BankAccountName = Convert.ToString(dr0["BankAccountName"]);
                                    rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);
                                    rSingle.BankAccountNameFund = Convert.ToString(dr0["BankAccountNameFund"]);
                                    rSingle.BankAccountNoFund = Convert.ToString(dr0["BankAccountNoFund"]);


                                    rList.Add(rSingle);

                                }



                                var GroupByReference =
                                        from r in rList
                                            //orderby r ascending
                                        group r by new { r.NamaFund, r.TrxTypeID } into rGroup
                                        select rGroup;

                                int incRowExcel = 1;
                                //worksheet.Row(incRowExcel).Height = 24;
                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                //worksheet.Cells[incRowExcel, 1].Value = "Redeem";
                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 18;
                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                //incRowExcel = incRowExcel + 3;

                                foreach (var rsHeader in GroupByReference)
                                {
                                    int first = incRowExcel;

                                    int _startRowDetail = incRowExcel;
                                    int _endRowDetail = 0;

                                    incRowExcel = incRowExcel + 1;


                                    foreach (var rsDetail in rsHeader)
                                    {

                                        if (rsHeader.Key.TrxTypeID == "LIQUIDATE")

                                        #region liquidate
                                        {
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Value = "LIQUIDATE";
                                            incRowExcel++;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.NamaFund;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            incRowExcel++;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Telephone : " + _host.Get_CompanyPhone() + ", " + "Fax : " + _host.Get_CompanyFax();
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "FAX TRANSMISION";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = "Date";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(_dateFrom).ToString("dd-MMM-yyyy");
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "To";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Untuk;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Attention";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Attention;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Telephone";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Telephone;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Fax;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Cc";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Cc;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Attention";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.AttentionFromFund;
                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 3].Value = "Telephone";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.TelephoneFromFund;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.FaxFromFund;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Re";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = "DOC Withdrawal";

                                            if (rsDetail.PeriodTo != rsDetail.MaturityDate) // LIQUIDATE
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Ref.No";
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RefNo;
                                            }
                                            incRowExcel++;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "IF YOU DO NOT RECEIVE ALL THE PAGES PLEASE CALL US IMMEDIATELY";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;


                                            worksheet.Cells[incRowExcel, 3].Value = "As per our conversation with you, we would like to withdraw our deposit and kindly RTGS (by 09:00 WIB)";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Total;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            if (rsDetail.PeriodTo == rsDetail.MaturityDate) // MATURE
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = " on " + Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy") + " To The Following Account"; //Tambahin Settlement Date
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = " on " + Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy") + " To The Following Account"; //Tambahin Settlement Date
                                            }


                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.NamaBank + " - " + rsDetail.BankBranch;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "AccountName";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.AccountName;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "IFO";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.IFO;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Total;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel = incRowExcel + 3;



                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 3].Value = "Please Provide your confirmation by fazing this confirmation to fax no. 241-2112, signed by your authorized signer by 24 hours,";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Otherwise this confirmation will be considered confirmed with no errors";
                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 3].Value = "Yours Sincerely, ";
                                            worksheet.Cells[incRowExcel, 8].Value = "Confirmed By Issuer";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.Untuk;
                                            incRowExcel = incRowExcel + 4;
                                            worksheet.Cells[incRowExcel, 8].Value = "________ ";
                                            int _RowA = incRowExcel;
                                            int _RowB = incRowExcel + 1;

                                            worksheet.Cells[_RowB, 3].Value = _host.Get_PositionSignature(_kertasKerja.Signature1);
                                            worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowA, 3].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature1) + " )";
                                            worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[_RowB, 6].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                            worksheet.Cells[_RowB, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowA, 6].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature2) + " )";
                                            worksheet.Cells[_RowA, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Name:";
                                            worksheet.Cells[incRowExcel, 8].Value = "Position";

                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 3].Value = "NB";

                                            incRowExcel++;
                                            if (rsDetail.PeriodTo == rsDetail.MaturityDate) // MATURE
                                            {
                                                worksheet.Cells[incRowExcel, 3].Value = "Placement Ref.No";
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RefNo;
                                            }

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Pokok";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Pokok;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Bunga";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Bunga;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Pokok + rsDetail.Bunga;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = "Rate (%)";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Rate;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "0.00";
                                            //worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Days ";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Days;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Periode";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.PeriodFrom).ToString("dd-MMM-yyyy") + " s/d " + Convert.ToDateTime(rsDetail.PeriodTo).ToString("dd-MMM-yyyy");


                                            #endregion

                                        }
                                        else if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                        {

                                            #region Placement
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.NamaFund;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            incRowExcel++;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Telephone : " + _host.Get_CompanyPhone() + ", " + "Fax : " + _host.Get_CompanyFax();
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "FAX TRANSMISION";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = "Date";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(_dateFrom).ToString("dd-MMM-yyyy");
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "To";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Untuk;

                                            worksheet.Cells[incRowExcel, 9].Value = "Telephone";
                                            worksheet.Cells[incRowExcel, 10].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.Telephone;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Attention";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Attention;

                                            worksheet.Cells[incRowExcel, 9].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 10].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.Fax;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Cc";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Cc;

                                            worksheet.Cells[incRowExcel, 9].Value = "Telephone";
                                            worksheet.Cells[incRowExcel, 10].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.TelephoneFromFund;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Attention";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.AttentionFromFund;

                                            worksheet.Cells[incRowExcel, 9].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 10].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.FaxFromFund;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Re";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = "Time Deposit Placement";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Ref.No";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.RefNo;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "IF YOU DO NOT RECEIVE ALL THE PAGES PLEASE CALL US IMMEDIATELY";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;


                                            worksheet.Cells[incRowExcel, 3].Value = "Dear Sir/Madam,";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = " As per our conversation with you, we would like to placement time deposite with term and condition as follows :";
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 3].Value = rsDetail.Amount;
                                            //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Value = " on " + Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy") + " To The Following Account"; //Tambahin Settlement Date

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Interest rate";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Rate;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "0.00";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Value Date";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Maturity Date";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Tenor";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.TenorDays;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Days Count";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Dayscount;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Principal + Interest";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount + rsDetail.Interest;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();


                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 3].Value = "At " + Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy") + ", the net proceeds will be credited to your account at :";

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Bank";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Untuk;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Account Name";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.BankAccountName;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "No. A/C";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.BankAccountNo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Message";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = "Time Deposit Placement " + rsDetail.NamaFund;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = "At " + Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy") + ", please transfer the proceed to :";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Bank";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Cc;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "A/C No.";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.BankAccountNoFund;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "IFO";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.NamaFund;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount + rsDetail.Interest;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();


                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 3].Value = "To indicate your formal acceptance please kindly return this confirmation letter with signature below and fax to 251-2112.";
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Value = "Thank you for your kind attention and cooperation.";
                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 3].Value = "Yours Sincerely, ";
                                            worksheet.Cells[incRowExcel, 8].Value = "Confirmed By Issuer";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.Untuk;
                                            incRowExcel = incRowExcel + 4;
                                            worksheet.Cells[incRowExcel, 8].Value = "________ ";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Name : ";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Position : ";
                                            int _RowA = incRowExcel - 2;
                                            int _RowB = incRowExcel - 1;

                                            worksheet.Cells[_RowB, 3].Value = _host.Get_PositionSignature(_kertasKerja.Signature1);
                                            worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowA, 3].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature1) + " )";
                                            worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[_RowB, 6].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                            worksheet.Cells[_RowB, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowA, 6].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature2) + " )";
                                            worksheet.Cells[_RowA, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            #endregion

                                        }
                                        else
                                        {

                                            #region RollOver
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.NamaFund;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            incRowExcel++;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Telephone : " + _host.Get_CompanyPhone() + ", " + "Fax : " + _host.Get_CompanyFax();
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "FAX TRANSMISION";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = "Date";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(_dateFrom).ToString("dd-MMM-yyyy");
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "To";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Untuk;

                                            worksheet.Cells[incRowExcel, 9].Value = "Telephone";
                                            worksheet.Cells[incRowExcel, 10].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.Telephone;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Attention";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Attention;

                                            worksheet.Cells[incRowExcel, 9].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 10].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.Fax;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Cc";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Cc;

                                            worksheet.Cells[incRowExcel, 9].Value = "Telephone";
                                            worksheet.Cells[incRowExcel, 10].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.TelephoneFromFund;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Attention";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.AttentionFromFund;

                                            worksheet.Cells[incRowExcel, 9].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 10].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.FaxFromFund;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Re";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = "Time Deposit Rollover";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Ref.No";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.RefNo;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "IF YOU DO NOT RECEIVE ALL THE PAGES PLEASE CALL US IMMEDIATELY";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;


                                            worksheet.Cells[incRowExcel, 3].Value = "Dear Sir/Madam,";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = " As per our conversation with you, we would like to rollover time deposite with term and condition as follows :";
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 3].Value = rsDetail.Amount;
                                            //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Value = " on " + Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy") + " To The Following Account"; //Tambahin Settlement Date

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Interest rate";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Rate;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "0.00";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Value Date";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Maturity Date";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Tenor";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.TenorDays;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Days Count";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Dayscount;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Principal + Interest";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount + rsDetail.Interest;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();


                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 3].Value = "At " + Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy") + ", the net proceeds will be credited to your account at :";

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Untuk;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Account Name";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.BankAccountName;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "No. A/C";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.BankAccountNo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Message";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = "Time Deposit Rollover " + rsDetail.NamaFund;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 3].Value = "At " + Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy") + ", please transfer the proceed to :";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Cc;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "A/C No.";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.BankAccountNoFund;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "IFO";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.NamaFund;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 4].Value = ":";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount + rsDetail.Interest;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();


                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 3].Value = "To indicate your formal acceptance please kindly return this confirmation letter with signature below and fax to 251-2112.";
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Value = "Thank you for your kind attention and cooperation.";
                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 3].Value = "Yours Sincerely, ";
                                            worksheet.Cells[incRowExcel, 8].Value = "Confirmed By Issuer";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.Untuk;
                                            incRowExcel = incRowExcel + 6;
                                            worksheet.Cells[incRowExcel, 8].Value = "________ ";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Name : ";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Position : ";
                                            int _RowA = incRowExcel - 2;
                                            int _RowB = incRowExcel - 1;

                                            worksheet.Cells[_RowB, 3].Value = _host.Get_PositionSignature(_kertasKerja.Signature1);
                                            worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowA, 3].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature1) + " )";
                                            worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[_RowB, 6].Value = _host.Get_PositionSignature(_kertasKerja.Signature2);
                                            worksheet.Cells[_RowB, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[_RowA, 6].Value = "( " + _host.Get_SignatureName(_kertasKerja.Signature2) + " )";
                                            worksheet.Cells[_RowA, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            #endregion

                                        }


                                        incRowExcel = incRowExcel + 7;
                                        worksheet.Row(incRowExcel).PageBreak = true;
                                    }

                                    _endRowDetail = incRowExcel + 3;

                                }

                                worksheet.PrinterSettings.FitToPage = true;
                                worksheet.PrinterSettings.FitToWidth = 1;
                                worksheet.PrinterSettings.FitToHeight = 0;
                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[2, 3, incRowExcel, 11];
                                //worksheet.Column(1).AutoFit();
                                //worksheet.Column(2).AutoFit();
                                worksheet.Column(3).Width = 17;
                                worksheet.Column(4).Width = 2;
                                worksheet.Column(5).Width = 20;
                                worksheet.Column(6).Width = 20;
                                worksheet.Column(7).Width = 30;
                                worksheet.Column(8).Width = 20;
                                worksheet.Column(9).Width = 15;
                                worksheet.Column(10).Width = 2;
                                worksheet.Column(11).AutoFit();
                                //worksheet.Column(10).AutoFit();
                                //worksheet.Column(11).AutoFit();
                                //worksheet.Column(12).AutoFit();


                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                //worksheet.PrinterSettings.FitToPage = true;
                                worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Kertas Kerja Settlement TimeDeposit";


                                //Image img = Image.FromFile(Tools.ReportImage);
                                //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                //Image img = Image.FromFile(Tools.ReportImage);
                                //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                if (_HasRowRedeem == 1 && _HasRowRollover == 1 && _HasRowPlacement == 1)
                                    return false;
                                else
                                {
                                    package.Save();
                                    return true;
                                }
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public Boolean OMSEquity_ListingRpt(string _userID, InvestmentListing _listing)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";
                        string _paramInvestmentPK = "";

                        if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                        {
                            _paramInvestmentPK = " And IV.InvestmentPK in (" + _listing.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramInvestmentPK = " And IV.InvestmentPK in (0) ";
                        }

                        if (_listing.ParamFundID != "All")
                        {
                            _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" Select F.FundPK,ValueDate, F.Name FundName, K.Name CounterpartName, IV.TrxTypeID TrxTypeID, I.Name InstrumentName, N.DescOne BoardTypeID, DonePrice, Lot, 
                             L.DescOne InvestmentStrategy,case when M.Code = 5 then IV.OtherInvestmentObjective else M.DescOne end InvestmentObjective,InvestmentNotes
                            from Investment IV       
                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2      
                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2      
                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                            left join BankBranch J on IV.BankBranchPK = J.BankBranchPK and J.status = 2 
                            left join Counterpart K on IV.CounterpartPK = K.CounterpartPK and K.status = 2
                            left join MasterValue L on IV.InvestmentStrategy = L.Code and L.ID = 'InvestmentStrategy' and L.status = 2
                            left join MasterValue M on IV.InvestmentObjective = M.Code and M.ID = 'InvestmentObjective' and M.status = 2
                            left join MasterValue N on IV.BoardType = N.Code and N.ID = 'BoardType' and N.status = 2
                            Where  IV.ValueDate = @ParamListDate and IV.StatusInvestment <> 3   and IT.Type = 1
                        " + _paramInvestmentPK + _paramFund + @" 
                        order by F.ID,IV.InvestmentPK ";

                        cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                        if (_listing.ParamFundID != "All")
                        {
                            cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                        }

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "OMSEquityListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "OMSEquityListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Investment Listing");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<InvestmentListing> rList = new List<InvestmentListing>();
                                    while (dr0.Read())
                                    {
                                        InvestmentListing rSingle = new InvestmentListing();
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                        rSingle.CounterpartName = Convert.ToString(dr0["CounterpartName"]);
                                        rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                        rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                        rSingle.BoardTypeID = Convert.ToString(dr0["BoardTypeID"]);
                                        rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"]);
                                        rSingle.Lot = Convert.ToDecimal(dr0["Lot"]);
                                        rSingle.InvestmentStrategy = Convert.ToString(dr0["InvestmentStrategy"]);
                                        rSingle.InvestmentObjective = Convert.ToString(dr0["InvestmentObjective"]);
                                        rSingle.InvestmentNotes = Convert.ToString(dr0["InvestmentNotes"]);

                                        rList.Add(rSingle);

                                    }

                                    var GroupByFundID =
                                         from r in rList
                                         orderby r.FundID
                                         group r by new { r.FundID, r.TrxTypeID } into rGroup
                                         select rGroup;

                                    int incRowExcel = 0;


                                    foreach (var rsHeader in GroupByFundID)
                                    {



                                        int _endRowDetail = incRowExcel;

                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            incRowExcel++;

                                            //worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            //area detail
                                            worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "EQUITY TRANSACTION INSTRUCTION";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.UnderLine = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.ValueDate);
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundName;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Type of Transaction";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.TrxTypeID;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Equity Name";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Market";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.BoardTypeID;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Price";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.DonePrice;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Lot";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Lot;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Transaction backgrounds";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.UnderLine = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Investment Strategy";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestmentStrategy;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Investment Objective";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestmentObjective;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Additional Information";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.UnderLine = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Remarks/Allocation";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestmentNotes;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            if (_listing.Signature1 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = _host.Get_PositionSignature(_listing.Signature1);
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            if (_listing.Signature2 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            if (_listing.Signature1 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }

                                            if (_listing.Signature2 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //incRowExcel = incRowExcel + 10;
                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }


                                    }
                                    //incRowExcel = incRowExcel + 2;





                                    string _rangeA = "A1:G" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 11;
                                        //r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                    worksheet.Column(1).Width = 10;
                                    worksheet.Column(2).Width = 40;
                                    worksheet.Column(3).Width = 3;
                                    worksheet.Column(4).Width = 20;
                                    worksheet.Column(5).Width = 20;
                                    worksheet.Column(6).Width = 30;

                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 INVESTMENT APPROVAL";
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    if (_listing.DownloadMode == "PDF")
                                    {
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    }
                                    return true;
                                }

                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }


        public Boolean OMSBond_ListingRpt(string _userID, InvestmentListing _listing)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";
                        string _paramInvestmentPK = "";

                        if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                        {
                            _paramInvestmentPK = " And IV.InvestmentPK in (" + _listing.stringInvestmentFrom + ")";
                        }
                        else
                        {
                            _paramInvestmentPK = " And IV.InvestmentPK in (0) ";
                        }

                        if (_listing.ParamFundID != "All")
                        {
                            _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @" Select IV.ValueDate, F.Name FundName, K.Name CounterpartName, IV.TrxTypeID,I.Name InstrumentName,
                        IT.Name InstrumentType, IV.Amount, I.BondRating, IV.YieldPercent,L.DescOne InvestmentStrategy, 
                        case when M.Code = 6 then IV.OtherInvestmentStyle else M.DescOne end InvestmentStyle, 
                        case when N.Code = 5 then IV.OtherInvestmentObjective else N.DescOne end InvestmentObjective,
                        case when O.Code = 5 then IV.OtherRevision else O.DescOne end Revision, 
                        P.CloseInd BIRate, InvestmentNotes
                        from Investment IV       
                        left join Fund F on IV.FundPK = F.FundPK and F.status in (1,2)      
                        left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status in (1,2)      
                        left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)
                        left join BankBranch J on IV.BankBranchPK = J.BankBranchPK and J.status in (1,2) 
                        left join Counterpart K on IV.CounterpartPK = K.CounterpartPK and K.status in (1,2) 
                        left join MasterValue L on IV.InvestmentStrategy = L.Code and L.ID = 'InvestmentStrategy' and L.status in (1,2)
                        left join MasterValue M on IV.InvestmentStyle = M.Code and M.ID = 'InvestmentStyle' and M.status in (1,2)
                        left join MasterValue N on IV.InvestmentObjective = N.Code and N.ID = 'InvestmentObjective' and N.status in (1,2)
                        left join MasterValue O on IV.Revision = O.Code and O.ID = 'Revision' and O.status in (1,2)
                        left join BenchmarkIndex P on IV.BIRate = P.BenchmarkIndexPK and P.status in (1,2)
                        Where  IV.ValueDate = @ParamListDate and IV.StatusInvestment <> 3 and IT.Type in (2,5,14)
                        " + _paramInvestmentPK + _paramFund + @" 
                        order by F.Name,IV.InvestmentPK ";


                        cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                        if (_listing.ParamFundID != "All")
                        {
                            cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                        }

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "OMSBondListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "OMSBondListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Investment Listing");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<InvestmentListing> rList = new List<InvestmentListing>();
                                    while (dr0.Read())
                                    {
                                        InvestmentListing rSingle = new InvestmentListing();
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                        rSingle.CounterpartName = Convert.ToString(dr0["CounterpartName"]);
                                        rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                        rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                        rSingle.InstrumentType = Convert.ToString(dr0["InstrumentType"]);
                                        rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                        rSingle.BondRating = Convert.ToString(dr0["BondRating"]);
                                        rSingle.YieldPercent = Convert.ToDecimal(dr0["YieldPercent"]);
                                        rSingle.InvestmentStrategy = Convert.ToString(dr0["InvestmentStrategy"]);
                                        rSingle.InvestmentStyle = Convert.ToString(dr0["InvestmentStyle"]);
                                        rSingle.InvestmentObjective = Convert.ToString(dr0["InvestmentObjective"]);
                                        rSingle.Revision = Convert.ToString(dr0["Revision"]);
                                        rSingle.BIRate = Convert.ToDecimal(dr0["BIRate"]);
                                        rSingle.InvestmentNotes = Convert.ToString(dr0["InvestmentNotes"]);

                                        rList.Add(rSingle);

                                    }

                                    var GroupByFundID =
                                         from r in rList
                                         orderby r.FundID
                                         group r by new { r.FundID, r.TrxTypeID } into rGroup
                                         select rGroup;



                                    int incRowExcel = 0;


                                    foreach (var rsHeader in GroupByFundID)
                                    {



                                        int _endRowDetail = incRowExcel;

                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            incRowExcel++;

                                            //worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            //area detail
                                            worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "FIXED INCOME TRANSACTION INSTRUCTION";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.UnderLine = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.ValueDate);
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundName;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Broker";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.CounterpartName;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Type of Transaction";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.TrxTypeID;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Bond Name";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Bond Category";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentType;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Amount;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Rating";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.BondRating;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Target YTM";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.YieldPercent;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Transaction backgrounds";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.UnderLine = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Investment Strategy";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestmentStrategy;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Investment Style";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestmentStyle;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Investment Objective";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestmentObjective;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Revision";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Revision;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Additional Information";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.UnderLine = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "BI Rate";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.BIRate;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Note";
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestmentNotes;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;



                                            if (_listing.Signature1 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = _host.Get_PositionSignature(_listing.Signature1);
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            if (_listing.Signature2 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            if (_listing.Signature1 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }

                                            if (_listing.Signature2 != 0)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //incRowExcel = incRowExcel + 10;
                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }


                                    }
                                    //incRowExcel = incRowExcel + 2;


                                    string _rangeA = "A1:G" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 11;
                                        //r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                    worksheet.Column(1).Width = 10;
                                    worksheet.Column(2).Width = 40;
                                    worksheet.Column(3).Width = 3;
                                    worksheet.Column(4).Width = 20;
                                    worksheet.Column(5).Width = 20;
                                    worksheet.Column(6).Width = 30;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 INVESTMENT APPROVAL";
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    if (_listing.DownloadMode == "PDF")
                                    {
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    }
                                    return true;
                                }

                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }


        public Boolean GenerateReportCompliance(string _userID, OjkRpt _OjkRpt)
        {

            #region KYC Risk Profile
            if (_OjkRpt.ReportName.Equals("24"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFundClient = "";
                            string _paramFundClientA = "";
                            string _paramFundClientB = "";

                            if (!_host.findString(_OjkRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_OjkRpt.FundClientFrom))
                            {
                                _paramFundClient = "And FundClientPK in ( " + _OjkRpt.FundClientFrom + " ) ";
                                _paramFundClientA = "And A.FundClientPK in ( " + _OjkRpt.FundClientFrom + " ) ";
                                _paramFundClientB = "And B.FundClientPK in ( " + _OjkRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                                _paramFundClientA = "";
                                _paramFundClientB = "";
                            }



                            cmd.CommandText = @"
                     
Declare @tempTableBlackList table
(
	FundClientPK int,
    FieldName nvarchar(100),
    Name nvarchar(200),
    HighRiskName nvarchar(200),
    HighRiskDesc nvarchar(1000),
    Percentage numeric(18,0)
)

Declare @BlackList table
(
	FundClientPK int,
	Percentage numeric(18,0)
)

Declare @KYCRiskProfileScore table
(
	FundClientPK int,
	Groups nvarchar(70),
	Input nvarchar(70),
	Type nvarchar(70),
	Score int
)

Declare @TotalScoreKYC table
(
	FundClientPK int,
	Groups nvarchar(50),
	Score int,
	Level nvarchar(50)
)

Declare @BlackListName nvarchar(200)
Declare @BlackListDesc nvarchar(1000)
                    
Declare A Cursor For 
        Select NameAlias,Description + ' || ' + NoDoc From BlackListName Where status = 2 and len(rtrim(ltrim(NameAlias))) > 1
        UNION ALL
        Select Name,Description + ' || ' + NoDoc From BlackListName A Where status = 2 and len(rtrim(ltrim(Name))) > 1 and isnull(A.Name,'') <> '' and len(rtrim(ltrim(a.Description))) > 3 and A.Type <> 0
                    
Open A
                    
Fetch Next From A
into @BlackListName,@BlackListDesc
                    
WHILE @@FETCH_STATUS = 0
BEGIN
                    
    Insert into @tempTableBlackList
    select FundClientPK,'Name' FieldName,Name,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](Name,@BlackListName) Percentage
    from FundClient A where status in (1,2) and CAST(LastUpdate AS DATE) between @DateFrom and @Dateto   " + _paramFundClient + @" 
			
			        
    --Insert into @tempTableBlackList
    --select FundClientPK,'First name' FieldName,NamaDepanInd,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](NamaDepanInd,@BlackListName) Percentage
    --from FundClient where status in (1,2) and CAST(EntryTime AS DATE) between @DateFrom and @Dateto and InvestorType = 1  " + _paramFundClient + @"
	                
    --Insert into @tempTableBlackList
    --select FundClientPK,'Middle name' FieldName,NamaTengahInd,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](NamaTengahInd,@BlackListName) Percentage
    --from FundClient where status in (1,2) and CAST(EntryTime AS DATE) between @DateFrom and @Dateto and InvestorType = 1  " + _paramFundClient + @" 
	                
    --Insert into @tempTableBlackList
    --select FundClientPK,'Last name' FieldName,NamaBelakangInd,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](NamaBelakangInd,@BlackListName) Percentage 
    --from FundClient where status in (1,2) and CAST(EntryTime AS DATE) between @DateFrom and @Dateto and InvestorType = 1  " + _paramFundClient + @" 
		                      
    FETCH NEXT FROM A 
    INTO @BlackListName,@BlackListDesc
                    
END 
CLOSE A;
DEALLOCATE A;

insert into @BlackList
SELECT FundClientPK, MAX(Percentage)
FROM @tempTableBlackList
GROUP BY FundClientPK





Insert into @KYCRiskProfileScore

--LOCAL
select A.FundClientPK,'Negara','DataNegara','ID',isnull(B.Score,0) from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2) and case when A.InvestorType = 1 then A.OtherNegaraInd1 else A.Negara end = B.Type and B.Type = 'ID'
where A.Status in (2)  and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto   " + _paramFundClientA + @" 

union all

--US
select A.FundClientPK,'Negara','DataNegara','US',isnull(B.Score,0) from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2) and case when A.InvestorType = 1 then A.CountryOfBirth else A.CountryofEstablishment end = B.Type  and B.Type = 'US'
where A.Status in (2)  and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto   " + _paramFundClientA + @" 

union all

--Other

select A.FundClientPK,'Negara','DataNegara','Other',
case when A.InvestorType = 1 and (A.OtherNegaraInd1 not in ('ID','US')) then isnull(B.Score,2)
		when A.InvestorType = 2 and A.Negara not in ('ID','US') then isnull(B.Score,2) 
			else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2) and B.Type = 'Other'
where A.Status in (1,2)   " + _paramFundClientA + @"

union all

--HighRiskCountry

select B.FundClientPK,Negara,DataNegara,HighRiskCountry,max(Score)
from (
select A.FundClientPK,'Negara' Negara,'DataNegara' DataNegara,'HighRiskCountry' HighRiskCountry,
case when C.IsHighRisk = 1  then B.Score else 0 end Score from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on case when A.InvestorType = 1 then A.CountryOfBirth else A.CountryofEstablishment end = C.Code and C.ID = 'SDICountry' and C.status in (1,2)
where A.Status in (2) and B.Groups  = 'Negara' and B.Input  = 'DataNegara' and B.Type = 'HighRiskCountry' and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto  " + _paramFundClientA + @" 

union all

select A.FundClientPK,'Negara','DataNegara','HighRiskCountry',
case when C.IsHighRisk = 1  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on case when A.InvestorType = 1 then A.Nationality else A.CountryofEstablishment end = C.Code and C.ID = 'SDICountry' and C.status in (1,2)
where A.Status in (2) and B.Groups  = 'Negara' and B.Input  = 'DataNegara' and B.Type = 'HighRiskCountry' and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto  " + _paramFundClientA + @" 
) B
group by B.FundClientPK,Negara,DataNegara,HighRiskCountry

union all

--FATF
select A.FundClientPK,'Negara','DataNegara','FATF',
case when A.InvestorType = 1 and A.CountryofDomicile in ('ID','US','0') then 0 
		when  A.InvestorType = 2 and A.Negara in ('ID','US','0') then 0 
			when isnull(C.Ishighrisk,0) = 1 then isnull(B.Score,0)				
				else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on case when A.InvestorType = 1 then A.CountryofDomicile else A.Negara end = C.Code and C.ID = 'FATF' and C.status in (1,2)
where A.Status in (2) and B.Groups  = 'Negara' and B.Input  = 'DataNegara' and B.Type = 'FATF' and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto  " + _paramFundClientA + @" 

union all

--PPATK
select FundClientPK,'ProfilNasabah','NamaNasabah','PPATK',case when A.Percentage >= B.Validate then B.Score else 0 end from @BlackList A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'NamaNasabah' and B.Type = 'PPATK'

union all

--PEP
select A.FundClientPK,'ProfilNasabah','NamaNasabah','PEP',case when isnull(A.Politis,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'NamaNasabah' and B.Type = 'PEP' and A.Status in (2) and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto  " + _paramFundClientA + @" 

union all

--Total Gabungan HighRisk ProfilNasabah PPATK + PEP
select distinct FundClientPK,Groups,Input,'HighRisk' HighRisk,case when Score <> 0 then 3 else 0 end Score
from (
select FundClientPK,'ProfilNasabah' Groups,'NamaNasabah' Input,'' Type,case when A.Percentage >= B.Validate then B.Score else 0 end Score from @BlackList A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'NamaNasabah' and B.Type = 'PPATK'

union all

select A.FundClientPK,'ProfilNasabah','NamaNasabah','',case when isnull(A.Politis,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'NamaNasabah' and B.Type = 'PEP' and A.Status in (2) and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto  " + _paramFundClientA + @" 
) A 


union all

--APUPPTOccupation Individu (APUPPTOccupation)
select A.FundClientPK,'ProfilNasabah','PekerjaanAPUPPTIndividu','APUPPTOccupation',case when isnull(C.IsHighRisk,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on A.APUPPTOccupation = C.Code and C.ID = 'APUPPTOccupation' and C.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'PekerjaanAPUPPTIndividu' and B.Type = 'APUPPTOccupation' and A.Status in (2)  and A.InvestorType = 1 and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto " + _paramFundClientA + @" 

union all

--PenghasilanPerTahun
select A.FundClientPK,'ProfilNasabah','PenghasilanPerTahun','JabatanKantor',
case when A.JabatanKantor = 1 and A.PenghasilanInd in (2,3,4,5,6) then B.Score
		when A.JabatanKantor in (2,3,4) and A.PenghasilanInd in (5,6) then B.Score
			when A.JabatanKantor in (5) and A.PenghasilanInd in (6) then B.Score
					when isnull(A.JabatanKantor,0) = 0 then 0 else 0 end
	 from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'PenghasilanPerTahun' and B.Type = 'JabatanKantor' and A.Status in (2) and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto   " + _paramFundClientA + @" 


union all

--APUPPTOccupationRisk
select A.FundClientPK,'BisnisNasabah','PekerjaanAPUPPT','APUPPTOccupation',
case when A.InvestorType = 1 and isnull(C.IsHighRisk,0) <> 0  then B.Score 
		when A.InvestorType = 2 and isnull(D.IsHighRisk,0) <> 0  then B.Score 
			else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on A.APUPPTOccupation = C.Code and C.ID = 'APUPPTOccupation' and C.status in (1,2)
left join MasterValue D on A.Tipe = D.Code and D.ID = 'CompanyType' and D.status in (1,2)
where B.Groups  = 'BisnisNasabah' and B.Input  = 'PekerjaanAPUPPT' and B.Type = 'APUPPTOccupation' and A.Status in (2) and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto   " + _paramFundClientA + @" 


union all

--APUPPTOccupation Insti (CompanyType)
select A.FundClientPK,'BisnisNasabah','PekerjaanAPUPPT','CompanyType',case when isnull(C.IsHighRisk,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on A.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
where B.Groups  = 'BisnisNasabah' and B.Input  = 'PekerjaanAPUPPT' and B.Type = 'CompanyType' and A.Status in (2) and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto  and A.InvestorType = 2  " + _paramFundClientA + @" 


union all

--nature of business
select A.FundClientPK,'BisnisNasabah','IndustriBisnis','NatureofBusiness',case when isnull(C.IsHighRisk,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on A.NatureOfBusiness = C.Code and C.ID = 'HRBusiness' and C.status in (1,2)
where B.Groups  = 'BisnisNasabah' and B.Input  = 'IndustriBisnis' and B.Type = 'NatureofBusiness' and A.Status in (2)  and A.InvestorType = 1 and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto " + _paramFundClientA + @" 

union all

--Office Position
select A.FundClientPK,'BisnisNasabah','JabatanNasabah','OfficePosition',
case when A.JabatanKantor in (6) then B.Score else 0 end
	 from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'BisnisNasabah' and B.Input  = 'JabatanNasabah' and B.Type = 'OfficePosition' and A.Status in (2) and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto  " + _paramFundClientA + @" 



insert into @TotalScoreKYC
select FundClientPK,Groups,sum(Score),
case when sum(Score) > 5 then 'High'
		when sum(Score) <= 1 then 'Low'
			else 'Medium' end from @KYCRiskProfileScore
group by FundClientPK,Groups



select Name NamaNasabah,isnull(MV1.DescOne,'') NegaraKelahiranNasabah,isnull(MV2.DescOne,'') NegaraPadaID,
isnull(MV3.DescOne,'') PekerjaanNasabah,isnull(MV4.DescOne,'') PekerjaanTerkaitAPUPPT,isnull(MV5.DescOne,'') LokasiBekerja,isnull(MV6.DescOne,'') IndustriBisnis,
case when JabatanKantor = 1 then 'Staff' 
		when JabatanKantor = 2 then 'Supervisor' 
			when JabatanKantor = 3 then 'Manager'
				when JabatanKantor = 4 then 'Senior Manager'
					when JabatanKantor = 5 then 'General Manager'
						when JabatanKantor = 6 then 'Director'
							else '' end Jabatan,
F.FaktorKerentananNegara1,F.FaktorKerentananNegara2,F.FaktorKerentananNegara3,F.FaktorKerentananNegara4,
F.FaktorKerentananNamaNasabah1,F.FaktorKerentananNamaNasabah2,F.FaktorKerentananNamaNasabah3,F.FaktorKerentananNamaNasabah4,F.FaktorKerentananNamaNasabah5,
F.FaktorKerentananBisnisNasabah1,F.FaktorKerentananBisnisNasabah2,F.FaktorKerentananBisnisNasabah3,F.FaktorKerentananBisnisNasabah4,
F.ScoreNegara,F.LevelNegara,F.ScoreNamaNasabah,F.LevelNamaNasabah,F.ScoreBisnisNasabah,F.LevelBisnisNasabah
 from FundClient A
left join MasterValue MV1 on case when A.InvestorType = 1 then CountryOfBirth else CountryofEstablishment end = MV1.Code and MV1.ID = 'SDICountry' and MV1.status in (1,2)
left join MasterValue MV2 on case when A.InvestorType = 1 then OtherNegaraInd1 else Negara end = MV2.Code and MV2.ID = 'SDICountry' and MV2.status in (1,2)
left join MasterValue MV3 on A.Pekerjaan = MV3.Code and MV3.ID = 'Occupation' and MV3.status in (1,2)
left join MasterValue MV4 on A.APUPPTOCCUPATION = MV4.Code and MV4.ID = 'APUPPTOCCUPATION' and MV4.status in (1,2)
left join MasterValue MV5 on case when A.InvestorType = 1 then KodeCountryofKantor else Negara end = MV5.Code and MV5.ID = 'SDICountry' and MV5.status in (1,2)
left join MasterValue MV6 on A.Tipe = MV6.Code and MV6.ID = 'CompanyType' and MV6.status in (1,2)
left join (
select B.FundClientPK,
case when F.InvestorType = 1 and OtherNegaraInd1 = 'ID' then 'Yes' 
        when F.InvestorType = 2 and Negara = 'ID' then 'Yes'  else 'No' end FaktorKerentananNegara1,
case when FaktorKerentananNegara2 <> 0 then 'Yes' else 'No' end FaktorKerentananNegara2,
case when FaktorKerentananNegara3 <> 0 then 'Yes' else 'No' end FaktorKerentananNegara3,
case when FaktorKerentananNegara4 <> 0 then 'Yes' else 'No' end FaktorKerentananNegara4,
case when FaktorKerentananNamaNasabah1 <> 0 then 'Yes' else 'No' end FaktorKerentananNamaNasabah1,
case when FaktorKerentananNamaNasabah2 <> 0 then 'Yes' else 'No' end FaktorKerentananNamaNasabah2,
case when FaktorKerentananNamaNasabah3 <> 0 then 'Yes' else 'No' end FaktorKerentananNamaNasabah3,
case when FaktorKerentananNamaNasabah4 <> 0 then 'Yes' else 'No' end FaktorKerentananNamaNasabah4,
case when FaktorKerentananNamaNasabah5 <> 0 then 'Yes' else 'No' end FaktorKerentananNamaNasabah5,
case when FaktorKerentananBisnisNasabah1 <> 0 then 'Yes' else 'No' end FaktorKerentananBisnisNasabah1,
case when FaktorKerentananBisnisNasabah2 <> 0 then 'Yes' else 'No' end FaktorKerentananBisnisNasabah2,
case when FaktorKerentananBisnisNasabah3 <> 0 then 'Yes' else 'No' end FaktorKerentananBisnisNasabah3,
case when FaktorKerentananBisnisNasabah4 <> 0 then 'Yes' else 'No' end FaktorKerentananBisnisNasabah4,
C.Score 'ScoreNegara',C.Level 'LevelNegara',D.Score 'ScoreNamaNasabah',D.Level 'LevelNamaNasabah',E.Score 'ScoreBisnisNasabah',E.Level 'LevelBisnisNasabah'
from (
select sum(case when Groups = 'Negara' and Input = 'DataNegara' and Type = 'ID' then 1 else 0 end) FaktorKerentananNegara1,
sum(case when Groups = 'Negara' and Input = 'DataNegara' and Type = 'US' and Score <> 0 then 1 else 0 end) FaktorKerentananNegara2,
sum(case when Groups = 'Negara' and Input = 'DataNegara' and Type = 'HighRiskCountry' and Score <> 0 then 1 else 0 end) FaktorKerentananNegara3,
sum(case when Groups = 'Negara' and Input = 'DataNegara' and Type = 'FATF' and Score <> 0 then 1 else 0 end) FaktorKerentananNegara4,

sum(case when Groups = 'ProfilNasabah' and Input = 'NamaNasabah' and Type = 'PPATK' and Score <> 0 then 1 else 0 end) FaktorKerentananNamaNasabah1,
sum(case when Groups = 'ProfilNasabah' and Input = 'NamaNasabah' and Type = 'PPATK' and Score <> 0 then 1 else 0 end) FaktorKerentananNamaNasabah2,
sum(case when Groups = 'ProfilNasabah' and Input = 'NamaNasabah' and Type = 'PEP' and Score <> 0 then 1 else 0 end) FaktorKerentananNamaNasabah3,
sum(case when Groups = 'ProfilNasabah' and Input = 'PekerjaanAPUPPTIndividu' and Type = 'APUPPTOccupation' and Score <> 0 then 1 else 0 end) FaktorKerentananNamaNasabah4,
sum(case when Groups = 'ProfilNasabah' and Input = 'PenghasilanPerTahun' and Type = 'JabatanKantor' and Score <> 0 then 1 else 0 end) FaktorKerentananNamaNasabah5,

sum(case when Groups = 'BisnisNasabah' and Input = 'PekerjaanAPUPPT' and Type = 'APUPPTOccupation' and Score <> 0 then 1 else 0 end) FaktorKerentananBisnisNasabah1,
sum(case when Groups = 'BisnisNasabah' and Input = 'PekerjaanAPUPPT' and Type = 'CompanyType' and Score <> 0 then 1 else 0 end) FaktorKerentananBisnisNasabah2,
sum(case when Groups = 'BisnisNasabah' and Input = 'IndustriBisnis' and Type = 'NatureofBusiness' and Score <> 0 then 1 else 0 end) FaktorKerentananBisnisNasabah3,
sum(case when Groups = 'BisnisNasabah' and Input = 'JabatanNasabah' and Type = 'OfficePosition' and Score <> 0 then 1 else 0 end) FaktorKerentananBisnisNasabah4,FundClientPK
from @KYCRiskProfileScore A
where  A.FundClientPK = A.FundClientPK " + _paramFundClientA + @"    
group by FundClientPK
) B
left join @TotalScoreKYC C on B.FundClientPK = C.FundClientPK and C.Groups = 'Negara'
left join @TotalScoreKYC D on B.FundClientPK = D.FundClientPK and D.Groups = 'ProfilNasabah'
left join @TotalScoreKYC E on B.FundClientPK = E.FundClientPK and E.Groups = 'BisnisNasabah'
left join FundClient F on B.FundClientPK = F.FundClientPK and F.status  = 2
) F on A.FundClientPK = F.FundClientPK
where A.status in (2) and CAST(A.LastUpdate AS DATE) between @DateFrom and @Dateto " + _paramFundClientA + @"    
                                                        ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _OjkRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@Dateto", _OjkRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportKYCRiskProfile" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportKYCRiskProfile" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ComplianceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report KYC Risk Profile");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportKYCRiskProfile> rList = new List<ReportKYCRiskProfile>();
                                        while (dr0.Read())
                                        {

                                            ReportKYCRiskProfile rSingle = new ReportKYCRiskProfile();
                                            rSingle.NamaNasabah = Convert.ToString(dr0["NamaNasabah"]);
                                            rSingle.NegaraKelahiranNasabah = Convert.ToString(dr0["NegaraKelahiranNasabah"]);
                                            rSingle.NegaraPadaID = Convert.ToString(dr0["NegaraPadaID"]);
                                            rSingle.PekerjaanNasabah = Convert.ToString(dr0["PekerjaanNasabah"]);
                                            rSingle.PekerjaanterkaitAPUPPT = Convert.ToString(dr0["PekerjaanTerkaitAPUPPT"]);
                                            rSingle.LokasiPekerja = Convert.ToString(dr0["LokasiBekerja"]);
                                            rSingle.IndustriBisnis = Convert.ToString(dr0["IndustriBisnis"]);
                                            rSingle.Jabatan = Convert.ToString(dr0["Jabatan"]);
                                            rSingle.FaktorKerentananNegara1 = dr0["FaktorKerentananNegara1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNegara1"]);
                                            rSingle.FaktorKerentananNegara2 = dr0["FaktorKerentananNegara2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNegara2"]);
                                            rSingle.FaktorKerentananNegara3 = dr0["FaktorKerentananNegara3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNegara3"]);
                                            rSingle.FaktorKerentananNegara4 = dr0["FaktorKerentananNegara4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNegara4"]);
                                            rSingle.TotalNilaiKerentananYuridiksi = dr0["ScoreNegara"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ScoreNegara"]);
                                            rSingle.LevelKerentananYuridiksi = dr0["LevelNegara"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LevelNegara"]);

                                            rSingle.FaktorKerentananNamaNasabah1 = dr0["FaktorKerentananNamaNasabah1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNamaNasabah1"]);
                                            rSingle.FaktorKerentananNamaNasabah2 = dr0["FaktorKerentananNamaNasabah2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNamaNasabah2"]);
                                            rSingle.FaktorKerentananNamaNasabah3 = dr0["FaktorKerentananNamaNasabah3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNamaNasabah3"]);
                                            rSingle.FaktorKerentananNamaNasabah4 = dr0["FaktorKerentananNamaNasabah4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNamaNasabah4"]);
                                            rSingle.FaktorKerentananNamaNasabah5 = dr0["FaktorKerentananNamaNasabah5"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananNamaNasabah5"]);
                                            rSingle.TotalNilaiKerentananNamaNasabah = dr0["ScoreNamaNasabah"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ScoreNamaNasabah"]);

                                            rSingle.LevelKerentananNamaNasabah = dr0["LevelNamaNasabah"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LevelNamaNasabah"]);


                                            rSingle.FaktorKerentananBisnisNasabah1 = dr0["FaktorKerentananBisnisNasabah1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananBisnisNasabah1"]); ;
                                            rSingle.FaktorKerentananBisnisNasabah2 = dr0["FaktorKerentananBisnisNasabah2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananBisnisNasabah2"]);
                                            rSingle.FaktorKerentananBisnisNasabah3 = dr0["FaktorKerentananBisnisNasabah3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananBisnisNasabah3"]); ;
                                            rSingle.FaktorKerentananBisnisNasabah4 = dr0["FaktorKerentananBisnisNasabah4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaktorKerentananBisnisNasabah4"]);
                                            rSingle.TotalNilaiKerentananNasabah = dr0["ScoreBisnisNasabah"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ScoreBisnisNasabah"]);

                                            rSingle.LevelKerentananNasabah = dr0["LevelBisnisNasabah"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LevelBisnisNasabah"]);
                                            //rSingle.TotalNilaiKeseluruhan = Convert.ToString(dr0["ScoreBisnisNasabah"]);
                                            //rSingle.TotalLevelKerentanan = Convert.ToString(dr0["LevelBisnisNasabah"]);

                                            rList.Add(rSingle);

                                        }


                                        var GroupByFundID =
                                        from r in rList
                                        orderby r.NamaNasabah
                                        group r by new { r.NamaNasabah } into rGroup
                                        select rGroup;

                                        int incRowExcel = 0;


                                        foreach (var rsHeader in GroupByFundID)
                                        {



                                            int _endRowDetail = incRowExcel;

                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel = incRowExcel + 3;
                                                incRowExcel++;


                                                ////area detail
                                                worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "PT. Nikko Securities Indonesia";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Divisi Fund Management";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Hasil penilaian manajemen risiko terhadap profil risiko calon investor reksadana";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Nama Nasabah";
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NamaNasabah;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Negara Kelahiran Nasabah";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NegaraKelahiranNasabah;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Negara Pada ID";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NegaraPadaID;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Pekerjaan Nasabah";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.PekerjaanNasabah;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Pekerjaan terkait APU PPT";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.PekerjaanterkaitAPUPPT;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Lokasi bekerja";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.LokasiPekerja;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Industri bisnis";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.IndustriBisnis;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Jabatan";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Jabatan;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "FAKTOR KERENTANAN NEGARA";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "1. Asal Nasabah adalah  'LOCAL' atau  'FOREIGN'? (berdasarkan dokumen Identitas Utama e-KTP / Passport)";
                                                if (rsDetail.FaktorKerentananNegara1 == "Yes")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "LOCAL";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "FOREIGN";
                                                }

                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "2. Negara Tempat Kelahiran Nasabah di Amerika?";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananNegara2;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "3. Kewarganegaraan atau Negara Tempat Kelahiran Nasabah ini dari negara yang tergabung dalam 'Yuridiksi Beresiko Tinggi'?";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananNegara3;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "4. Nasabah ini tinggal atau berbisnis di Negara yang Berisiko Tinggi yang Tidak Kooperatif yang dipublikasikan oleh FATF? ";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananNegara4;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 3].Value = "Total Nilai Kerentanan Yuridiksi";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalNilaiKerentananYuridiksi;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Level Kerentanan Yuridiksi";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.LevelKerentananYuridiksi;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 3].Value = "FAKTOR KERENTANAN NASABAH";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah Nasabah ini terekspos 'beresiko tinggi'? (tercantum dalam daftar terduga teroris dan/atau organisasi teroris, PEP, WIC, BO dll)";
                                                if (rsDetail.FaktorKerentananNamaNasabah2 == "Yes" || rsDetail.FaktorKerentananNamaNasabah3 == "Yes")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "Yes";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "No";
                                                }


                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah Nasabah ini termasuk dalam Daftar Teroris / organisasi teroris ? (di dalam atau  di Luar negeri)";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananNamaNasabah2;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah Nasabah ini termasuk 'Politically Exposed Person' ? (di dalam atau  di Luar negeri)";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananNamaNasabah3;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah Nasabah ini terekspos 'Profil beresiko tinggi'? (notaris, advocat, kurator, akuntan publik, pegawai pelayanan publik  dll)";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananNamaNasabah4;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah penghasilan calon nasabah tidak sesuai dengan profil calon nasabah ? ( penghasilan calon nasabah vs jabatan calon nasabah)";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananNamaNasabah5;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Total Nilai Kerentanan Nasabah";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalNilaiKerentananNamaNasabah;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Level Kerentanan Nasabah";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.LevelKerentananNamaNasabah;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;







                                                worksheet.Cells[incRowExcel, 3].Value = "FAKTOR KERENTANAN BISNIS NASABAH";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah Pekerjaan atau usahanya termasuk kategori 'Beresiko Tinggi'?";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananBisnisNasabah1;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah Calon Nasabah ini bisnis / usahanya termasuk memiliki bisnis yang 'Beresiko Tinggi'?";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananBisnisNasabah2;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah Calon Nasabah ini bekerja pada industri bisnis yang 'Beresiko Tinggi'?";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananBisnisNasabah3;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Apakah jabatan Calon Nasabah memiliki otoritas dalam pengambilan keputusam? (Direksi, Bendahara, Komisaris, Corporate secretary)";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FaktorKerentananBisnisNasabah4;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Total Nilai Kerentanan Nasabah";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalNilaiKerentananNasabah;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Level Kerentanan Nasabah";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.LevelKerentananNasabah;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Total Nilai Keseluruhan";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalNilaiKerentananYuridiksi + rsDetail.TotalNilaiKerentananNamaNasabah + rsDetail.TotalNilaiKerentananNasabah;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Level Kerentanan Nasabah";
                                                int _total = rsDetail.TotalNilaiKerentananYuridiksi + rsDetail.TotalNilaiKerentananNamaNasabah + rsDetail.TotalNilaiKerentananNasabah;
                                                if (_total > 7)
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "High";
                                                }
                                                else if (_total <= 1)
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "Low";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "Medium";
                                                }


                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Row(incRowExcel).Height = 27;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Checked by,";
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 3].Value = "Manajemen Risiko";
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                worksheet.Row(incRowExcel).PageBreak = true;

                                            }


                                        }



                                        string _rangeA = "A1:E" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                            //r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 5, 5];
                                        worksheet.Column(1).Width = 8;
                                        worksheet.Column(2).Width = 8;
                                        worksheet.Column(3).Width = 65;
                                        worksheet.Column(4).Width = 65;
                                        worksheet.Column(5).Width = 8;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 KYC Risk Profile";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_OjkRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            #region Investor Risk Profile
            if (_OjkRpt.ReportName.Equals("25"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {




                            cmd.CommandText = @"
                    CREATE table #RiskScore
(
	FundClientPK INT,
	Score numeric(18,0),
	InvestorRiskProfile INT
)

CREATE CLUSTERED INDEX indx_RiskScore ON #RiskScore (FundClientPK,Score);


CREATE table #FirstSubs 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstSubs ON #FirstSubs (FundPK,FundClientPK);


INSERT INTO #FirstSubs
        ( FundPK, FundClientPK, ValueDate )

select FundPK,FundClientPK,MIN(ValueDate) from (
select FundPK,FundClientPK,MIN(ValueDate) ValueDate from ClientSubscription A where status = 2
GROUP BY FundClientPK,FundPK
union all
select FundPKTo,FundClientPK,MIN(ValueDate) ValueDate from ClientSwitching A where status = 2
GROUP BY FundClientPK,FundPKTo
) A
GROUP BY FundClientPK,FundPK


CREATE table #FirstPosition 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstPosition ON #FirstPosition (FundPK,FundClientPK);

insert into #FirstPosition
	 ( FundPK, FundClientPK, ValueDate )

SELECT FundPk,FundClientPK,MIN(Date) FROM dbo.FundClientPosition A
WHERE A.UnitAmount > 0 
 GROUP BY FundClientPK,FundPK


 
CREATE Table #FirstPositionResult 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstPositionResult ON #FirstPositionResult (FundPK,FundClientPK);



CREATE Table #DistinctFirstPositionResult 
(
	FundClientPK INT
)

CREATE CLUSTERED INDEX indx_DistinctFirstPositionResult ON #DistinctFirstPositionResult (FundClientPK);

INSERT INTO #FirstPositionResult
        ( FundPK ,
          FundClientPK ,
          ValueDate 
        )
SELECT  A.FundPK,A.FundClientPk,A.ValueDate FROM #FirstPosition A
LEFT JOIN #FirstSubs B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
WHERE B.FundPK IS NULL OR A.ValueDate < B.ValueDate


INSERT INTO #FirstPositionResult
        ( FundPK ,
          FundClientPK ,
          ValueDate 
        )

select A.FundPK,A.FundClientPK,A.ValueDate from #FirstSubs A
left join #FirstPosition B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
where B.FundPK IS NULL or A.ValueDate < B.ValueDate




--- DISTINCT FUND CLIENTPK
INSERT INTO #DistinctFirstPositionResult
        ( 
          FundClientPK 
        )
SELECT distinct A.FundClientPk FROM #FirstPosition A
LEFT JOIN #FirstSubs B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
WHERE B.FundPK IS NULL OR A.ValueDate < B.ValueDate


INSERT INTO #DistinctFirstPositionResult
        ( 
          FundClientPK
   
        )

select distinct A.FundClientPK from #FirstSubs A
left join #FirstPosition B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
where B.FundPK IS NULL or A.ValueDate < B.ValueDate






INSERT INTO #RiskScore
        (
		  FundClientPK ,
          Score,
		  InvestorRiskProfile
        )

select FundClientPK,Score,isnull(E.InvestorRiskProfile,0) from 
(
select A.FundClientPK,sum(C.Score) as Score
from #DistinctFirstPositionResult A
left join FundClientRiskQuestionnaire B on A.FundClientPK = B.FundClientPK
left join RiskQuestionnaireAnswer C on B.RiskQuestionnaireAnswerPK = C.RiskQuestionnaireAnswerPK and C.status = 2
group by A.FundClientPK
) D
left join RiskProfileScore E on D.Score between E.FromValue and E.ToValue and E.status  = 2




select B.Name,case when B.InvestorType = 1 then TempatLahir + ' , ' + CONVERT(NVARCHAR, TanggalLahir, 106) else LokasiBerdiri + ' , ' + CONVERT(NVARCHAR, TanggalBerdiri, 106) end TempatTanggalLahir,
case when B.InvestorType = 1 then AlamatInd1  else AlamatPerusahaan end Alamat,CONVERT(NVARCHAR, CAST(A.ValueDate AS DATE), 106) Date,
isnull(CAST(H.Score as nvarchar),'Data Tidak Tersedia') RiskProfileScore,isnull(E.DescOne,'Data Tidak Tersedia') InvestorRiskProfile,
C.Name FundName,isnull(G.DescOne,'Data Tidak Tersedia') FundRiskProfile,
Case when isnull(D.InvestorRiskProfile,0) = 0 or isnull(F.RiskProfilePK,0) = 0 then 'Data Tidak Tersedia' 
		when isnull(D.InvestorRiskProfile,0) >= isnull(F.RiskProfilePK,0) then 'Sesuai'
			else 'Tidak Sesuai' end Rekomendasi 
from #FirstPositionResult A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join #RiskScore H on A.FundClientPK = H.FundClientPK
left join RiskProfileScore D on H.InvestorRiskProfile = D.InvestorRiskProfile and D.Status in (1,2)
left join MasterValue E on H.InvestorRiskProfile = E.Code and E.status in (1,2) and E.ID = 'InvestorsRiskProfile'
left join FundRiskProfile F on C.FundPK = F.FundPK and F.Status in (1,2)
left join MasterValue G on F.RiskProfilePK = G.Code and G.status in (1,2) and G.ID = 'InvestorsRiskProfile'
where A.ValueDate between @Datefrom and @DateTo
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _OjkRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _OjkRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "InvestorRiskProfile" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "InvestorRiskProfile" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ComplianceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Laporan EDD");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestorRiskProfile> rList = new List<InvestorRiskProfile>();
                                        while (dr0.Read())
                                        {

                                            InvestorRiskProfile rSingle = new InvestorRiskProfile();
                                            rSingle.NamaInvestor = Convert.ToString(dr0["Name"]);
                                            rSingle.TempatTanggalLahir = Convert.ToString(dr0["TempatTanggalLahir"]);
                                            rSingle.Alamat = Convert.ToString(dr0["Alamat"]);
                                            rSingle.TanggalRencanaInvestasi = Convert.ToString(dr0["Date"]);
                                            rSingle.ScoreProfilRisikoInvestor = Convert.ToString(dr0["RiskProfileScore"]);
                                            rSingle.ProfilRisikoInvestor = Convert.ToString(dr0["InvestorRiskProfile"]);
                                            rSingle.ReksadanaPilihanInvestor = Convert.ToString(dr0["FundName"]);
                                            rSingle.ProfilRisikoReksadanaPilihan = Convert.ToString(dr0["FundRiskProfile"]);
                                            rSingle.Rekomendasi = Convert.ToString(dr0["Rekomendasi"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 3;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "PT Nikko Securities Indonesia";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Divisi Fund Management";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Hasil penilaian manajemen risiko terhadap profil risiko calon investor reksadana";
                                        worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 3].Value = "NO";
                                        worksheet.Cells[incRowExcel, 4].Value = "Nama Investor";
                                        worksheet.Cells[incRowExcel, 5].Value = "Tempat/Tanggal Lahir";
                                        worksheet.Cells[incRowExcel, 6].Value = "Alamat";
                                        worksheet.Cells[incRowExcel, 7].Value = "Tanggal Rencana Investasi";
                                        worksheet.Cells[incRowExcel, 8].Value = "Score Profil Risiko Investor";
                                        worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "Profil Risiko Investor";
                                        worksheet.Cells[incRowExcel, 10].Value = "Reksadana Pilihan Investor";
                                        worksheet.Cells[incRowExcel, 11].Value = "Profil Risiko Reksadana Pilihan";
                                        worksheet.Cells[incRowExcel, 11].Style.WrapText = true;
                                        worksheet.Cells[incRowExcel, 12].Value = "Rekomendasi";

                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        int _no = 1;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            int first = incRowExcel;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                worksheet.Cells[incRowExcel, 3].Value = _no;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NamaInvestor;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TempatTanggalLahir;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Alamat;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.TanggalRencanaInvestasi;
                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ScoreProfilRisikoInvestor;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.ProfilRisikoInvestor;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.ReksadanaPilihanInvestor;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 10].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.ProfilRisikoReksadanaPilihan;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Rekomendasi;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                _no++;
                                                _endRowDetail = incRowExcel;

                                            }



                                        }



                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 3].Value = "Checked By,";

                                        incRowExcel = incRowExcel + 4;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Value = "Manajemen Risiko";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;



                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =

                                                @"
                                                   SELECT  isnull(CAST(D.FromValue as nvarchar) + ' - ' +  CAST(D.ToValue as nvarchar),'') Score,
                                                    E.DescOne
                                                                , STUFF 
                                                                    ((
                                                                    SELECT ', ' + CAST(C.Name AS VARCHAR(MAX))
                                                                    FROM FundRiskProfile A
				                                                    left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                                                                    WHERE ( A.RiskProfilePK = B.RiskProfilePK ) and A.status in (1,2)
                                                                    FOR XML PATH('')
                                                                    ) ,1,2,'') 
                                                                    AS FundName
                                                    FROM FundRiskProfile B
                                                    left join RiskProfileScore D on B.RiskProfilePK = D.InvestorRiskProfile and D.status in (1,2)
                                                    left join MasterValue E on B.RiskProfilePK = E.Code and E.status in (1,2) and E.ID = 'InvestorsRiskProfile'
                                                    where B.status in (1,2)
                                                    order by FromValue asc


                                                                 ";

                                                cmd2.CommandTimeout = 0;

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {


                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<InvestorRiskProfile> rList2 = new List<InvestorRiskProfile>();
                                                        while (dr2.Read())
                                                        {
                                                            InvestorRiskProfile rSingle2 = new InvestorRiskProfile();
                                                            rSingle2.Score = Convert.ToString(dr2["Score"]);
                                                            rSingle2.FundRiskProfile = Convert.ToString(dr2["DescOne"]);
                                                            rSingle2.FundName = Convert.ToString(dr2["FundName"]);
                                                            rList2.Add(rSingle2);

                                                        }


                                                        var QueryByFundID2 =
                                                            from r2 in rList2
                                                            group r2 by new { } into rGroup2
                                                            select rGroup2;


                                                        foreach (var rsHeader2 in QueryByFundID2)
                                                        {
                                                            incRowExcel = incRowExcel + 3;
                                                            //worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            //worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            //worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            //worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                            worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                            worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                            worksheet.Cells[incRowExcel, 5].Style.Border.BorderAround(ExcelBorderStyle.Medium);

                                                            worksheet.Cells[incRowExcel, 3].Value = "Score";
                                                            worksheet.Cells[incRowExcel, 4].Value = "Type Investor";
                                                            worksheet.Cells[incRowExcel, 5].Value = "Pilihan Investasi";
                                                            incRowExcel++;
                                                            foreach (var rsDetail2 in rsHeader2)
                                                            {
                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.Score;
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail2.FundRiskProfile;
                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail2.FundName;
                                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                                worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                                worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                                worksheet.Cells[incRowExcel, 5].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                                incRowExcel++;

                                                            }



                                                            incRowExcel++;
                                                        }

                                                    }
                                                }
                                            }
                                        }


                                        //incRowExcel = incRowExcel + 3;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        //worksheet.Cells[incRowExcel, 3].Value = "Score";
                                        //worksheet.Cells[incRowExcel, 4].Value = "Type Investor";
                                        //worksheet.Cells[incRowExcel, 5].Value = "Pilihan Investasi";
                                        //worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                        //worksheet.Cells[incRowExcel, 3].Value = "9-17";
                                        //worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //worksheet.Cells[incRowExcel, 4].Value = "Conservative Investor";
                                        //worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //worksheet.Cells[incRowExcel, 5].Value = "Nikko Kas Manajemen & Nikko Money Market Fund ";
                                        //worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Row(incRowExcel).Height = 36;
                                        //worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                        //worksheet.Cells[incRowExcel, 3].Value = "18-27";
                                        //worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //worksheet.Cells[incRowExcel, 4].Value = "Moderate Investor";
                                        //worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //worksheet.Cells[incRowExcel, 5].Value = "Nikko Gebyar Indonesia Dua, Nikko Bond Fund, Nikko Tron Dua, Nikko Indah Nusantara Dua, Nikko Balanced Fund";
                                        //worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                        //worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        //worksheet.Row(incRowExcel).Height = 30;

                                        //worksheet.Cells[incRowExcel, 3].Value = "Diatas 27";
                                        //worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //worksheet.Cells[incRowExcel, 4].Value = "Aggressive Investor";
                                        //worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //worksheet.Cells[incRowExcel, 5].Value = "Nikko BUMN Plus, Nikko Equity Fund, Nikko Saham Pembangunan";
                                        //worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 5].Style.WrapText = true;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[3, 3, incRowExcel, 12];
                                        worksheet.Column(3).Width = 11;
                                        worksheet.Column(4).Width = 40;
                                        worksheet.Column(5).Width = 26;
                                        worksheet.Column(6).Width = 50;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 27;
                                        worksheet.Column(10).Width = 50;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 17;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Investor Risk Profile";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_OjkRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Blacklist Report
            if (_OjkRpt.ReportName.Equals("26"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {




                            cmd.CommandText = @"

                            --DROP TABLE #FundClient
                            --DROP TABLE #BlackListName
                            --DROP TABLE #tempTableBlackList

                            --declare @Valuedate datetime
                            --set @Valuedate = '11/19/2020

                            CREATE TABLE #FundClient
                            (
                            FundClientPK int,
                            HistoryPK int,
                            SID nvarchar(500),
                            Name nvarchar(500),
                            )
 
  
                            CREATE TABLE #BlackListName
                            (	
                            NoDoc nvarchar(500),
                            BlackListName nvarchar(500),
                            BlackListDesc nvarchar(500),
                            )

                            CREATE TABLE  #tempTableBlackList
                            (	
                            NoDoc nvarchar(500),
                            FundClientPK int,
                            SID nvarchar(500),
                            Name nvarchar(500),
                            Percentage numeric(19,4)
                            )


                            Insert into #FundClient
                            select distinct A.FundClientPK,A.HistoryPK,SID,Name from FundClient A
                            left join HighRiskMonitoring B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
                            where A.status = 2 and B.HighRiskType = 98 and cast(B.ApprovedTime as date) <= @ValueDate

                            Insert into #BlackListName
                            Select NoDoc,NameAlias,Description + ' || ' + NoDoc From BlackListName Where status = 2 and len(rtrim(ltrim(NameAlias))) > 1 and EntryTime <= @Valuedate
                            Insert into #BlackListName
                            Select NoDoc,Name,Description + ' || ' + NoDoc From BlackListName A Where status = 2 and len(rtrim(ltrim(Name))) > 1 and isnull(A.Name,'') <> '' and len(rtrim(ltrim(a.Description))) > 3 and A.Type <> 0  and EntryTime <= @Valuedate


                            Declare @CFundClientPK int
                            Declare @CSID nvarchar(1000)
                            Declare @CName nvarchar(1000)
                    
                            Declare A Cursor For 
                            select FundClientPK,SID,Name from #FundClient                  
                            Open A
                    
                            Fetch Next From A
                            into @CFundClientPK,@CSID,@CName
                    
                            WHILE @@FETCH_STATUS = 0
                            BEGIN
                    
                            Insert into #tempTableBlackList
                            select NoDoc,@CFundClientPK,@CSID,@CName, dbo.[FGetPercentageOfTwoStringMatching](@CName,BlackListName) Percentage
                            from #BlackListName A
                      
                            FETCH NEXT FROM A 
                            INTO @CFundClientPK,@CSID,@CName
                    
                            END 
                            CLOSE A;
                            DEALLOCATE A;
	

                            select distinct A.NoDoc,isnull(B.SID,'NIHIL') SID,isnull(B.Name,'NIHIL') Name from #BlackListName A
                            left join #tempTableBlackList B on A.NoDoc = B.NoDoc and Percentage >= 50
                            order by A.NoDoc

  
                                                        ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _OjkRpt.ValueDateFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BlacklistReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BlacklistReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ComplianceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Blacklist Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BlackListReport> rList = new List<BlackListReport>();
                                        while (dr0.Read())
                                        {

                                            BlackListReport rSingle = new BlackListReport();
                                            rSingle.NoDoc = Convert.ToString(dr0["NoDoc"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);

                                            rList.Add(rSingle);

                                        }


                                        var GroupByNoDoc =
                                        from r in rList
                                        orderby r.NoDoc
                                        group r by new { } into rGroup
                                        select rGroup;

                                        int incRowExcel = 0;


                                        foreach (var rsHeader in GroupByNoDoc)
                                        {
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 2].Value = "No surat DTTOT";
                                            worksheet.Cells[incRowExcel, 3].Value = "SID";
                                            worksheet.Cells[incRowExcel, 4].Value = "Nama Nasabah";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NoDoc;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;



                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }
                                        }


                                        string _rangeA = "A:D" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                            //r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 5, 5];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 60;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 BlackList Report";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_OjkRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            else
            {
                return false;
            }
        }


        public List<BIRate> BIRate_Combo(DateTime _dateFrom)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<BIRate> L_BenchmarkIndex = new List<BIRate>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"select A.BenchmarkIndexPK,CloseInd from BenchmarkIndex A
                                            left join [Index] B on A.IndexPK = B.IndexPK and B.status in (1,2)
                                            where B.ID = 'BI7REPO' and A.Date = (
                                            SELECT MAX(Date) FROM dbo.BenchmarkIndex A
                                            left join [Index] B on A.IndexPK = B.IndexPK and B.status in (1,2)
                                            where B.ID = 'BI7REPO' and A.Date <= @ValueDate AND A.Status in (1,2)
                                            ) AND A.status in (1,2) ";
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    BIRate M_BenchmarkIndex = new BIRate();
                                    M_BenchmarkIndex.BenchmarkIndexPK = Convert.ToInt32(dr["BenchmarkIndexPK"]);
                                    M_BenchmarkIndex.CloseInd = Convert.ToDecimal(dr["CloseInd"]);
                                    L_BenchmarkIndex.Add(M_BenchmarkIndex);
                                }
                            }
                            return L_BenchmarkIndex;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }



        public string Insert_HighRiskMonitoringCustomClient20(string _usersID, int _fundClientPK, int _historyPK)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
    
    Declare @tempTableBlackList table
(
	FundClientPK int,
    FieldName nvarchar(100),
    Name nvarchar(200),
    HighRiskName nvarchar(200),
    HighRiskDesc nvarchar(1000),
    Percentage numeric(18,0)
)

Declare @BlackList table
(
	FundClientPK int,
	Percentage numeric(18,0)
)

Declare @KYCRiskProfileScore table
(
	FundClientPK int,
	Name nvarchar(70),
	Groups nvarchar(70),
	Input nvarchar(70),
	Type nvarchar(70),
	Score int
)

Declare @TotalScoreKYC table
(
	FundClientPK int,
	Score int
)

Declare @tempReason table
(
	FundClientPK int,
	Reason nvarchar(1000)
)

Declare @tempDescription table
(
	FundClientPK int,
	Description nvarchar(1000)
)


Declare @FinalDescription table
(
	FundClientPK int,
	Description nvarchar(1000)
)


Declare @BlackListName nvarchar(200)
Declare @BlackListDesc nvarchar(1000)
                    
Declare A Cursor For 
        Select NameAlias,Description + ' || ' + NoDoc From BlackListName Where status = 2 and len(rtrim(ltrim(NameAlias))) > 1
        UNION ALL
        Select Name,Description + ' || ' + NoDoc From BlackListName A Where status = 2 and len(rtrim(ltrim(Name))) > 1 and isnull(A.Name,'') <> '' and len(rtrim(ltrim(a.Description))) > 3 and A.Type <> 0
                    
Open A
                    
Fetch Next From A
into @BlackListName,@BlackListDesc
                    
WHILE @@FETCH_STATUS = 0
BEGIN
                    
    Insert into @tempTableBlackList
    select FundClientPK,'Name' FieldName,Name,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](Name,@BlackListName) Percentage
    from FundClient A where status in (2)  and FundClientPK = @FundClientPK and HistoryPK = @HistoryPK
			
			        
    --Insert into @tempTableBlackList
    --select FundClientPK,'First name' FieldName,NamaDepanInd,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](NamaDepanInd,@BlackListName) Percentage
    --from FundClient where status in (1,2)  and InvestorType = 1 and FundClientPK = @FundClientPK and HistoryPK = @HistoryPK 
	                
    --Insert into @tempTableBlackList
    --select FundClientPK,'Middle name' FieldName,NamaTengahInd,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](NamaTengahInd,@BlackListName) Percentage
    --from FundClient where status in (1,2)  and InvestorType = 1 and FundClientPK = @FundClientPK  and HistoryPK = @HistoryPK
	                
    --Insert into @tempTableBlackList
    --select FundClientPK,'Last name' FieldName,NamaBelakangInd,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](NamaBelakangInd,@BlackListName) Percentage 
    --from FundClient where status in (1,2)  and InvestorType = 1 and FundClientPK = @FundClientPK  and HistoryPK = @HistoryPK
		                      
    FETCH NEXT FROM A 
    INTO @BlackListName,@BlackListDesc
                    
END 
CLOSE A;
DEALLOCATE A;

insert into @BlackList
SELECT FundClientPK, MAX(Percentage)
FROM @tempTableBlackList
GROUP BY FundClientPK


declare @HouseWife nvarchar(50)
select @HouseWife = case when Pekerjaan in (1,2) then 'HouseWife/Student' else '' end 
from FundClient where status  in (1,2) and FundClientPK  = @fundclientpk  and HistoryPK = @HistoryPK



Insert into @KYCRiskProfileScore

--LOCAL
select B.FundClientPK,'KYC','Negara','DataNegara','ID',isnull(A.Score,0) from KYCRiskProfileScoreSetup A
left join FundClient B on B.status in (1,2) and case when B.InvestorType = 1 then B.OtherNegaraInd1 else B.Negara end = A.Type and A.Type = 'ID'
where A.Status in (1,2)  and B.FundClientPK  = @fundclientpk  and B.HistoryPK = @HistoryPK




union all

--US
select B.FundClientPK,'KYC','Negara','DataNegara','US',isnull(A.Score,0) from KYCRiskProfileScoreSetup A
left join FundClient B on B.status in (1,2) and case when B.InvestorType = 1 then B.CountryOfBirth else B.CountryofEstablishment end = A.Type  and A.Type = 'US'
where A.Status in (1,2) and B.FundClientPK  = @fundclientpk  and B.HistoryPK = @HistoryPK


union all

select A.FundClientPK,'KYC','Negara','DataNegara','Other',	
case when A.InvestorType = 1 and (A.OtherNegaraInd1 not in ('ID','US')) then isnull(B.Score,2)
		when A.InvestorType = 2 and A.Negara not in ('ID','US') then isnull(B.Score,2) 	
			else 0 end from FundClient A	
left join KYCRiskProfileScoreSetup B on B.status in (1,2) and B.Type = 'Other'	
where A.Status in (1,2) and A.FundClientPK  = @fundclientpk  and A.HistoryPK = @HistoryPK


union all

--HighRiskCountry

select B.FundClientPK,'KYC',Negara,DataNegara,HighRiskCountry,max(Score)
from (
select A.FundClientPK,'Negara' Negara,'DataNegara' DataNegara,'HighRiskCountry' HighRiskCountry,
case when C.IsHighRisk = 1  then B.Score else 0 end Score from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on case when A.InvestorType = 1 then A.CountryOfBirth else A.CountryofEstablishment end = C.Code and C.ID = 'SDICountry' and C.status in (1,2)
where A.Status in (2) and B.Groups  = 'Negara' and B.Input  = 'DataNegara' and B.Type = 'HighRiskCountry' and A.FundClientPK  = @fundclientpk  and A.HistoryPK = @HistoryPK

union all

select A.FundClientPK,'Negara','DataNegara','HighRiskCountry',
case when C.IsHighRisk = 1  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on case when A.InvestorType = 1 then A.Nationality else A.CountryofEstablishment end = C.Code and C.ID = 'SDICountry' and C.status in (1,2)
where A.Status in (2) and B.Groups  = 'Negara' and B.Input  = 'DataNegara' and B.Type = 'HighRiskCountry' and A.FundClientPK  = @fundclientpk  and A.HistoryPK = @HistoryPK
) B
group by B.FundClientPK,Negara,DataNegara,HighRiskCountry


union all

--FATF
select A.FundClientPK,'KYC','Negara','DataNegara','FATF',
case when A.InvestorType = 1 and A.CountryofDomicile in ('ID','US','0') then 0 
		when  A.InvestorType = 2 and A.Negara in ('ID','US','0') then 0 
			when isnull(C.Ishighrisk,0) = 1 then isnull(B.Score,0)				
				else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on case when A.InvestorType = 1 then A.CountryofDomicile else A.Negara end = C.Code and C.ID = 'FATF' and C.status in (1,2)
where A.Status in (1,2) and B.Groups  = 'Negara' and B.Input  = 'DataNegara' and B.Type = 'FATF' and A.FundClientPK  = @fundclientpk and A.HistoryPK = @HistoryPK


union all

--PPATK
select FundClientPK,'PPATK','ProfilNasabah','NamaNasabah','PPATK',case when A.Percentage >= B.Validate then B.Score else 0 end from @BlackList A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'NamaNasabah' and B.Type = 'PPATK'

union all

--HouseWife/Student
select FundClientPK,'HouseWife/Student','ProfilNasabah','NamaNasabah','HouseWife/Student',0 from FundClient A
where A.Status in (1,2) and A.FundClientPK = @FundClientPK  and A.HistoryPK = @HistoryPK and Pekerjaan in (1,2)

union all

--PEP
select A.FundClientPK,'PEP','ProfilNasabah','NamaNasabah','PEP',case when isnull(A.Politis,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'NamaNasabah' and B.Type = 'PEP' and A.Status in (1,2) and A.FundClientPK = @FundClientPK  and A.HistoryPK = @HistoryPK

union all



--Total Gabungan HighRisk ProfilNasabah PPATK + PEP
select distinct FundClientPK,'KYC',Groups,Input,'HighRisk' HighRisk,case when Score <> 0 then 3 else 0 end Score
from (
select FundClientPK,'ProfilNasabah' Groups,'NamaNasabah' Input,'' Type,case when A.Percentage >= B.Validate then B.Score else 0 end Score from @BlackList A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'NamaNasabah' and B.Type = 'PPATK'

union all

select A.FundClientPK,'ProfilNasabah','NamaNasabah','',case when isnull(A.Politis,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'NamaNasabah' and B.Type = 'PEP' and A.Status in (1,2) and A.FundClientPK  = @fundclientpk and A.HistoryPK = @HistoryPK 
) A 


union all

--APUPPTOccupation Individu (APUPPTOccupation)
select A.FundClientPK,'KYC','ProfilNasabah','PekerjaanAPUPPTIndividu','APUPPTOccupation',case when isnull(C.IsHighRisk,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on A.APUPPTOccupation = C.Code and C.ID = 'APUPPTOccupation' and C.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'PekerjaanAPUPPTIndividu' and B.Type = 'APUPPTOccupation' and A.Status in (1,2) and A.FundClientPK  = @fundclientpk and A.InvestorType = 1 and A.HistoryPK = @HistoryPK



union all


--PenghasilanPerTahun
select A.FundClientPK,'KYC','ProfilNasabah','PenghasilanPerTahun','JabatanKantor',	
case when A.JabatanKantor = 1 and A.PenghasilanInd in (2,3,4,5,6) then B.Score
		when A.JabatanKantor in (2,3,4) and A.PenghasilanInd in (5,6) then B.Score
			when A.JabatanKantor in (5) and A.PenghasilanInd in (6) then B.Score
					when isnull(A.JabatanKantor,0) = 0 then 0 else 0 end
from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'ProfilNasabah' and B.Input  = 'PenghasilanPerTahun' and B.Type = 'JabatanKantor' and A.Status in (1,2) and A.FundClientPK  = @fundclientpk and A.HistoryPK = @HistoryPK 




union all

--APUPPTOccupationRisk
select A.FundClientPK,'KYC','BisnisNasabah','PekerjaanAPUPPT','APUPPTOccupation',
case when A.InvestorType = 1 and isnull(C.IsHighRisk,0) <> 0  then B.Score 
		when A.InvestorType = 2 and isnull(D.IsHighRisk,0) <> 0  then B.Score 
			else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on A.APUPPTOccupation = C.Code and C.ID = 'APUPPTOccupation' and C.status in (1,2)
left join MasterValue D on A.Tipe = D.Code and D.ID = 'CompanyType' and D.status in (1,2)
where B.Groups  = 'BisnisNasabah' and B.Input  = 'PekerjaanAPUPPT' and B.Type = 'APUPPTOccupation' and A.Status in (1,2) and A.FundClientPK  = @fundclientpk and A.HistoryPK = @HistoryPK 



union all

--APUPPTOccupation Insti (CompanyType)
select A.FundClientPK,'KYC','BisnisNasabah','PekerjaanAPUPPT','CompanyType',case when isnull(C.IsHighRisk,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on A.Tipe = C.Code and C.ID = 'CompanyType' and C.status in (1,2)
where B.Groups  = 'BisnisNasabah' and B.Input  = 'PekerjaanAPUPPT' and B.Type = 'CompanyType' and A.Status in (1,2) and A.FundClientPK  = @fundclientpk and A.InvestorType = 2 and A.HistoryPK = @HistoryPK  


union all

--nature of business
select A.FundClientPK,'KYC','BisnisNasabah','IndustriBisnis','NatureofBusiness',case when isnull(C.IsHighRisk,0) <> 0  then B.Score else 0 end from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
left join MasterValue C on A.NatureOfBusiness = C.Code and C.ID = 'HRBusiness' and C.status in (1,2)
where B.Groups  = 'BisnisNasabah' and B.Input  = 'IndustriBisnis' and B.Type = 'NatureofBusiness' and A.Status in (1,2) and A.FundClientPK  = @fundclientpk and A.InvestorType = 1 and A.HistoryPK = @HistoryPK  



union all

--Office Position
select A.FundClientPK,'KYC','BisnisNasabah','JabatanNasabah','OfficePosition',
case when A.JabatanKantor in (6) then B.Score else 0 end
	 from FundClient A
left join KYCRiskProfileScoreSetup B on B.status in (1,2)
where B.Groups  = 'BisnisNasabah' and B.Input  = 'JabatanNasabah' and B.Type = 'OfficePosition' and A.Status in (1,2) and A.FundClientPK  = @fundclientpk  and A.HistoryPK = @HistoryPK


-- Scoring dan Level KYC
insert into @TotalScoreKYC
select FundClientPK,sum(Score) from @KYCRiskProfileScore
group by FundClientPK


Declare @DescTotalScore nvarchar(100)
select @DescTotalScore = 'Total KYC Score : ' + cast(sum(Score) as nvarchar(10)) from @TotalScoreKYC

DECLARE @Reason VARCHAR(1000)
DECLARE @Description VARCHAR(Max)


Declare @KYCSummary table
(Name nvarchar(100))

BEGIN

	insert into @KYCSummary
	select 'PPATK' Name from @KYCRiskProfileScore
	where Type in ('PPATK') and Score > 0

	insert into @KYCSummary
	select 'PEP' Name from @KYCRiskProfileScore
	where Type in ('PEP') and Score > 0

	insert into @KYCSummary
	select 'HouseWife/Student' Name from @KYCRiskProfileScore
	where Type in ('HouseWife/Student')

	insert into @KYCSummary
	select 'KYC' Name from @KYCRiskProfileScore
	having sum(Score) > 7


	-- Reason
	SELECT @Reason = COALESCE(@Reason + ', ', '') + Name
	FROM @KYCSummary


	-- Description
	insert into @tempDescription
	select FundClientPK,'Groups : ' + 
	case when Groups = 'Negara' then 'FAKTOR KERENTANAN NEGARA'
			when Groups = 'ProfilNasabah' then 'FAKTOR KERENTANAN NASABAH'
				else 'FAKTOR KERENTANAN BISNIS NASABAH' end  + ', Score : ' + cast(sum(Score) as varchar(10))
	FROM @KYCRiskProfileScore where FundClientPK = @FundClientPK and Score > 0
	group by FundClientPK,Groups

	SELECT @Description = COALESCE(@Description + ', ', '') + Description
	FROM @tempDescription where FundClientPK = @FundClientPK

	insert into @tempReason
	select @FundClientPK,@Reason

	insert into @FinalDescription
	select @FundClientPK,@Description + ' ; ' + @DescTotalScore


END





-- TAMBAHAN UPDATE FUNDCLIENT UNTUK FIELD KYCRISKPROFILE
Declare @KYCRisk int
select @KYCRisk = case when sum(Score) > 7 then 3 when sum(Score) <= 1 then 1 else 2 end from @KYCRiskProfileScore

update FundClient set KYCRiskProfile = @KYCRisk  where FundClientPk = @FundClientPK and HistoryPK = @HistoryPK


Declare @PK int

select @PK = Max(HighRiskMonitoringPK) + 1 from HighRiskMonitoring
set @PK = isnull(@PK,1)

insert into HighRiskMonitoring( HighRiskMonitoringPK,HistoryPK,status,selected,Date,FundClientPK,HighRiskType,Reason,Description,EntryUsersID,EntryTime,LastUpdate)
Select @PK,1,1,0,CAST(@Lastupdate AS date),A.FundClientPK,case when Reason like '%PPATK%' then 98 else 99 end Type,A.Reason,C.Description,@UsersID,@LastUpdate,@LastUpdate from @tempReason A
left join @FinalDescription C on A.FundClientPK = C.FundClientPK
where A.FundClientPK = @FundClientPK and Reason <> ''





declare @Result nvarchar(100)
select @Result = isnull(Reason,'') from @tempReason                        
if (@Result <> '')
BEGIN
    select 'This Client is High Risk, Please Check HighRiskMonitoring !' Result
END
ELSE
BEGIN
    select '' Result
END



                                        ";

                        cmd.Parameters.AddWithValue("@FundClientPK", _fundClientPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _historyPK);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", DateTime.Now);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToString(dr["Result"]);

                            }
                            return "";
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public bool FundClient_SInvest(string _userID, string _category, int _fundClientPKFrom, int _fundClientPKTo, string _type, FundClient _FundClient)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string paramFundClientSelected = "";
                        if (_FundClient.FundClientSelected == "" || _FundClient.FundClientSelected == "0")
                        {
                            paramFundClientSelected = "";
                        }
                        else
                        {
                            paramFundClientSelected = "and FC.FundClientPK in (" + _FundClient.FundClientSelected + ") ";
                        }

                        string _paramFundClientPK = "";
                        if (_fundClientPKFrom == 0 || _fundClientPKTo == 0)
                        {
                            _paramFundClientPK = "";
                        }
                        else
                        {
                            _paramFundClientPK = " And FC.FundClientPK Between " + _fundClientPKFrom + @" and " + _fundClientPKTo;
                        }
                        if (_category == "1")
                        {

                            if (_type == "1")
                            {

                                cmd.CommandText = @"
declare @HighRisk table (
	FundClientPK int
)

insert into @HighRisk ( FundClientPK )
select FundClientPK from HighRiskMonitoring where status in (1,2) and HighRiskType = 98

insert into @HighRisk ( FundClientPK )
select FundClientPK from HighRiskMonitoring where status in (1) and HighRiskType = 99

BEGIN  
SET NOCOUNT ON         
select @Type  
+'|' + @CompanyID    
+ '|' + ''  

+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanInd,''))))      
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahInd,''))))      
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangInd,''))))    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(nationality,''))))  
+ '|' + (isnull(NoIdentitasInd1,''))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when IdentitasInd1 = 7 then '99981231' else case when CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) = '19000101' or CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) < '20160802' then '' else CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) end End),''))))          
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NPWP,''))))   
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), RegistrationNPWP, 112) <> '19000101' then CONVERT(VARCHAR(10), RegistrationNPWP, 112) else '' End),''))))          
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Countryofbirth,''))))    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TempatLahir,''))))   
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), TanggalLahir, 112) <> '19000101' then CONVERT(VARCHAR(10), TanggalLahir, 112) else '' End),''))))   
+ '|' + case when JenisKelamin = '0' then '' else isnull(cast(JenisKelamin as nvarchar(1)),'') end 
+ '|' + case when Pendidikan = '0' then '' else isnull(cast(Pendidikan as nvarchar(1)),'') end  
+ '|' + case when mothermaidenname = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(mothermaidenname ,'')))) end      
+ '|' + case when Agama = '0' then '' else isnull(cast(Agama as nvarchar(1)),'') end  
+ '|' + case when Pekerjaan = '0' then '' else isnull(cast(Pekerjaan as nvarchar(1)),'') end    
+ '|' + case when PenghasilanInd = '0' then '' else isnull(cast(PenghasilanInd as nvarchar(1)),'') end   
+ '|' + case when StatusPerkawinan = '0' then '' else isnull(cast(StatusPerkawinan as nvarchar(1)),'') end   
+ '|' + case when SpouseName = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SpouseName ,'')))) end      
+ '|' + case when KYCRiskProfile = '0' then '' else case when KYCRiskProfile = 2 then '3' when KYCRiskProfile = 3 then '5' else '1' end end  
+ '|' + case when MaksudTujuanInd = '0' then '' else isnull(cast(MaksudTujuanInd as nvarchar(1)),'') end   
+ '|' + case when SumberDanaInd = '0' then '' else isnull(cast(SumberDanaInd as nvarchar(2)),'') end   
+ '|' + case when AssetOwner = '0' then '' else isnull(cast(AssetOwner as nvarchar(1)),'') end  
+ '|' + case when OtherAlamatInd1 = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(OtherAlamatInd1,''))),char(13),''),char(10),'') end
+ '|' + case when OtherKodeKotaInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(OtherKodeKotaInd1 as nvarchar(4)),'')))) end     
+ '|' + case when OtherKodePosInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OtherKodePosInd1 ,'')))) end      
+ '|' + case when AlamatInd1 = '0' then '' else   REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatInd1,''))),char(13),''),char(10),'') end      
+ '|' + case when KodeKotaInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(KodeKotaInd1 as nvarchar(4)),'')))) end  
+ '|' + isnull(MV13.DescOne,'')                                    
+ '|' + case when KodePosInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosInd1 ,'')))) end    
+ '|' + isnull(CountryofCorrespondence,'')  
+ '|' + case when AlamatInd2 = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatInd2,''))),char(13),''),char(10),'') end   
+ '|' + case when KodeKotaInd2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(KodeKotaInd2 as nvarchar(4)),'')))) end  
+ '|' + isnull(MV14.DescOne,'')                                     
+ '|' + case when KodePosInd2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosInd2 ,'')))) end   
+ '|' + isnull(CountryofDomicile,'') 
+ '|' + case when TeleponRumah = '0' then '' else isnull(TeleponRumah ,'') end    
+ '|' + case when TeleponSelular = '0' then '' else isnull(TeleponSelular ,'') end    
+ '|' + case when fc.Fax = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.Fax ,'')))) end     
+ '|' + case when fc.Email = '0' then '' else isnull(fc.Email,'') end     
+ '|' + case when StatementType = '0' then '' else isnull(cast(StatementType as nvarchar(1)),'') end    
+ '|' + case when FATCA = '0' then '' else isnull(cast(FATCA as nvarchar(1)),'') end   
+ '|' + case when TIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TIN ,'')))) end    
+ '|' + case when TINIssuanceCountry = '0' then '' else isnull(cast(TINIssuanceCountry as nvarchar(2)),'') end                                   
+ '|' +  case when B1.Country = 'ID' then case when isnull(B1.SInvestID,'') <> '' and  isnull(B1.BICode,'') <> '' then '' else isnull(B1.SInvestID,'') end else '' end 
+ '|' + case when B1.Country = 'ID' then isnull(B1.BICode,'') else '' end                           
+ '|' + isnull(B1.Name,'') 
+ '|' + isnull(B1.Country,'') 
+ '|' + case when BankBranchName1 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName1 ,'')))) as nvarchar(100)),'') end 
+ '|' + isnull(MV15.DescOne,'') 
+ '|' + case when NomorRekening1 = '0' then '' else isnull(cast(NomorRekening1 as nvarchar(50)),'') end
+ '|' + case when NamaNasabah1 = '0' then '' else isnull(cast(NamaNasabah1 as nvarchar(100)),'') end 
+ '|' +  case when B2.Country = 'ID' then isnull(B2.SInvestID,'') else '' end  
+ '|' + case when B2.Country = 'ID' then isnull(B2.BICode,'') else '' end   
+ '|' + isnull(B2.Name,'') 
+ '|' + isnull(B2.Country,'') 
+ '|' + case when BankBranchName2 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName2 ,'')))) as nvarchar(100)),'') end 
+ '|' + isnull(MV16.DescOne,'') 
+ '|' + case when NomorRekening2 = '0' then '' else isnull(cast(NomorRekening2 as nvarchar(50)),'') end 
+ '|' + case when NamaNasabah2 = '0' then '' else isnull(cast(NamaNasabah2 as nvarchar(100)),'') end   
+ '|' +  case when B3.Country = 'ID' then isnull(B3.SInvestID,'') else '' end  
+ '|' + case when B3.Country = 'ID' then isnull(B3.BICode,'') else '' end   
+ '|' + isnull(B3.Name,'') 
+ '|' + isnull(B3.Country,'') 
+ '|' + case when BankBranchName3 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName3 ,'')))) as nvarchar(100)),'') end 
+ '|' + isnull(MV17.DescOne,'') 
+ '|' + case when NomorRekening3 = '0' then '' else isnull(cast(NomorRekening3 as nvarchar(50)),'') end 
+ '|' + case when NamaNasabah3 = '0' then '' else isnull(cast(NamaNasabah3 as nvarchar(100)),'') end                                      
+ '|' + isnull(FC.ID,'') ResultText                                     
from fundclient FC left join Agent A on FC.SellingAgentPK = A.AgentPK and A.Status = 2   
left join MasterValue MV3 on FC.JenisKelamin = MV3.Code and MV3.status =2  and MV3.ID ='Sex'   
left join MasterValue MV4 on FC.Pendidikan = MV4.Code and MV4.status =2  and MV4.ID ='EducationalBackground'   
left join MasterValue MV5 on FC.Agama = MV5.Code and MV5.status =2  and MV5.ID ='Religion'   
left join MasterValue MV6 on FC.Pekerjaan = MV6.Code and MV6.status =2  and MV6.ID ='Occupation'   
left join MasterValue MV7 on FC.PenghasilanInd = MV7.Code and MV7.status =2  and MV7.ID ='IncomeInd'   
left join MasterValue MV8 on FC.StatusPerkawinan = MV8.Code and MV8.status =2  and MV8.ID ='MaritalStatus'   
left join MasterValue MV9 on FC.KYCRiskProfile = MV9.Code and MV9.status =2  and MV9.ID ='KYCRiskProfile'  
left join MasterValue MV10 on FC.MaksudTujuanInd = MV10.Code and MV10.status =2  and MV10.ID ='InvestmentObjectivesIND'   
left join MasterValue MV11 on FC.SumberDanaInd = MV11.Code and MV11.status =2  and MV11.ID ='IncomeSourceIND'   
left join MasterValue MV12 on FC.AssetOwner = MV12.Code and MV12.status =2  and MV12.ID ='AssetOwner'   
left join MasterValue MV13 on FC.KodeKotaInd1 = MV13.Code and MV13.status =2  and MV13.ID ='CityRHB'   
left join MasterValue MV14 on FC.KodeKotaInd2 = MV14.Code and MV14.status =2  and MV14.ID ='CityRHB'   
left join MasterValue MV15 on FC.MataUang1 = MV15.Code and MV15.status =2  and MV15.ID ='MataUang'   
left join MasterValue MV16 on FC.MataUang2 = MV16.Code and MV16.status =2  and MV16.ID ='MataUang'   
left join MasterValue MV17 on FC.MataUang3 = MV17.Code and MV17.status =2  and MV17.ID ='MataUang' 
left join Bank B1 on fc.NamaBank1 = B1.BankPK and B1.status = 2   
left join Bank B2 on fc.NamaBank2 = B2.BankPK and B2.status = 2   
left join Bank B3 on fc.NamaBank3 = B3.BankPK and B3.status = 2 
where FC.Status = 2 and FC.InvestorType = 1  and 
FC.FundClientPK not in ( select FundClientPK from @HighRisk ) " + paramFundClientSelected + _paramFundClientPK + @" 
order by FC.name asc 

END    
";
                            }
                            else
                            {
                                cmd.CommandText = @"
declare @HighRisk table (
	FundClientPK int
)

insert into @HighRisk ( FundClientPK )
select FundClientPK from HighRiskMonitoring where status in (1,2) and HighRiskType = 98

insert into @HighRisk ( FundClientPK )
select FundClientPK from HighRiskMonitoring where status in (1) and HighRiskType = 99

BEGIN  
SET NOCOUNT ON         
select @Type  
+'|' + @CompanyID    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,'')))) 
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanInd,''))))      
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahInd,''))))      
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangInd,''))))    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(nationality,''))))  
+ '|' + (isnull(NoIdentitasInd1,''))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when IdentitasInd1 = 7 then '99981231' else case when CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) = '19000101' or CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) < '20160802' then '' else CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) end End),''))))          
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NPWP,''))))   
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), RegistrationNPWP, 112) <> '19000101' then CONVERT(VARCHAR(10), RegistrationNPWP, 112) else '' End),''))))          
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Countryofbirth,''))))    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TempatLahir,''))))   
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), TanggalLahir, 112) <> '19000101' then CONVERT(VARCHAR(10), TanggalLahir, 112) else '' End),''))))   
+ '|' + case when JenisKelamin = '0' then '' else isnull(cast(JenisKelamin as nvarchar(1)),'') end 
+ '|' + case when Pendidikan = '0' then '' else isnull(cast(Pendidikan as nvarchar(1)),'') end  
+ '|' + case when mothermaidenname = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(mothermaidenname ,'')))) end      
+ '|' + case when Agama = '0' then '' else isnull(cast(Agama as nvarchar(1)),'') end  
+ '|' + case when Pekerjaan = '0' then '' else isnull(cast(Pekerjaan as nvarchar(1)),'') end    
+ '|' + case when PenghasilanInd = '0' then '' else isnull(cast(PenghasilanInd as nvarchar(1)),'') end   
+ '|' + case when StatusPerkawinan = '0' then '' else isnull(cast(StatusPerkawinan as nvarchar(1)),'') end   
+ '|' + case when SpouseName = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SpouseName ,'')))) end      
+ '|' + case when KYCRiskProfile = '0' then '' else case when KYCRiskProfile = 2 then '3' when KYCRiskProfile = 3 then '5' else '1' end end  
+ '|' + case when MaksudTujuanInd = '0' then '' else isnull(cast(MaksudTujuanInd as nvarchar(1)),'') end   
+ '|' + case when SumberDanaInd = '0' then '' else isnull(cast(SumberDanaInd as nvarchar(2)),'') end   
+ '|' + case when AssetOwner = '0' then '' else isnull(cast(AssetOwner as nvarchar(1)),'') end  
+ '|' + case when OtherAlamatInd1 = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(OtherAlamatInd1,''))),char(13),''),char(10),'') end
+ '|' + case when OtherKodeKotaInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(OtherKodeKotaInd1 as nvarchar(4)),'')))) end     
+ '|' + case when OtherKodePosInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OtherKodePosInd1 ,'')))) end      
+ '|' + case when AlamatInd1 = '0' then '' else   REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatInd1,''))),char(13),''),char(10),'') end      
+ '|' + case when KodeKotaInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(KodeKotaInd1 as nvarchar(4)),'')))) end  
+ '|' + isnull(MV13.DescOne,'')                                    
+ '|' + case when KodePosInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosInd1 ,'')))) end    
+ '|' + isnull(CountryofCorrespondence,'')  
+ '|' + case when AlamatInd2 = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatInd2,''))),char(13),''),char(10),'') end   
+ '|' + case when KodeKotaInd2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(KodeKotaInd2 as nvarchar(4)),'')))) end  
+ '|' + isnull(MV14.DescOne,'')                                     
+ '|' + case when KodePosInd2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosInd2 ,'')))) end   
+ '|' + isnull(CountryofDomicile,'') 
+ '|' + case when TeleponRumah = '0' then '' else isnull(TeleponRumah ,'') end    
+ '|' + case when TeleponSelular = '0' then '' else isnull(TeleponSelular ,'') end    
+ '|' + case when fc.Fax = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.Fax ,'')))) end     
+ '|' + case when fc.Email = '0' then '' else isnull(fc.Email,'') end     
+ '|' + case when StatementType = '0' then '' else isnull(cast(StatementType as nvarchar(1)),'') end    
+ '|' + case when FATCA = '0' then '' else isnull(cast(FATCA as nvarchar(1)),'') end   
+ '|' + case when TIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TIN ,'')))) end    
+ '|' + case when TINIssuanceCountry = '0' then '' else isnull(cast(TINIssuanceCountry as nvarchar(2)),'') end
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''                                                                    
+ '|' + '' ResultText                                     
from fundclient FC left join Agent A on FC.SellingAgentPK = A.AgentPK and A.Status = 2   
left join MasterValue MV3 on FC.JenisKelamin = MV3.Code and MV3.status =2  and MV3.ID ='Sex'   
left join MasterValue MV4 on FC.Pendidikan = MV4.Code and MV4.status =2  and MV4.ID ='EducationalBackground'   
left join MasterValue MV5 on FC.Agama = MV5.Code and MV5.status =2  and MV5.ID ='Religion'   
left join MasterValue MV6 on FC.Pekerjaan = MV6.Code and MV6.status =2  and MV6.ID ='Occupation'   
left join MasterValue MV7 on FC.PenghasilanInd = MV7.Code and MV7.status =2  and MV7.ID ='IncomeInd'   
left join MasterValue MV8 on FC.StatusPerkawinan = MV8.Code and MV8.status =2  and MV8.ID ='MaritalStatus'   
left join MasterValue MV9 on FC.KYCRiskProfile = MV9.Code and MV9.status =2  and MV9.ID ='KYCRiskProfile'  
left join MasterValue MV10 on FC.MaksudTujuanInd = MV10.Code and MV10.status =2  and MV10.ID ='InvestmentObjectivesIND'   
left join MasterValue MV11 on FC.SumberDanaInd = MV11.Code and MV11.status =2  and MV11.ID ='IncomeSourceIND'   
left join MasterValue MV12 on FC.AssetOwner = MV12.Code and MV12.status =2  and MV12.ID ='AssetOwner'   
left join MasterValue MV13 on FC.KodeKotaInd1 = MV13.Code and MV13.status =2  and MV13.ID ='CityRHB'   
left join MasterValue MV14 on FC.KodeKotaInd2 = MV14.Code and MV14.status =2  and MV14.ID ='CityRHB'   
left join MasterValue MV15 on FC.MataUang1 = MV15.Code and MV15.status =2  and MV15.ID ='MataUang'   
left join MasterValue MV16 on FC.MataUang2 = MV16.Code and MV16.status =2  and MV16.ID ='MataUang'   
left join MasterValue MV17 on FC.MataUang3 = MV17.Code and MV17.status =2  and MV17.ID ='MataUang' 
left join Bank B1 on fc.NamaBank1 = B1.BankPK and B1.status = 2   
left join Bank B2 on fc.NamaBank2 = B2.BankPK and B2.status = 2   
left join Bank B3 on fc.NamaBank3 = B3.BankPK and B3.status = 2 
where FC.Status = 2 and FC.InvestorType = 1  and 
FC.FundClientPK not in ( select FundClientPK from @HighRisk ) " + paramFundClientSelected + _paramFundClientPK + @" 
order by FC.name asc 

END   

";
                            }




                            cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                            cmd.Parameters.AddWithValue("@Type", _type);
                            using (SqlDataReader dr1 = cmd.ExecuteReader())
                            {
                                if (dr1.HasRows)
                                {
                                    string filePath;
                                    filePath = Tools.SInvestTextPath + "SInvestIndividuTxtVersion.txt";
                                    FileInfo txtFile = new FileInfo(filePath);
                                    if (txtFile.Exists)
                                    {
                                        txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    }

                                    using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                    {
                                        file.WriteLine("");
                                        while (dr1.Read())
                                        {

                                            file.WriteLine(Convert.ToString(dr1["ResultText"]));
                                        }
                                        return true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (_type == "1")
                            {
                                cmd.CommandText = @"

declare @HighRisk table (
	FundClientPK int
)

insert into @HighRisk ( FundClientPK )
select FundClientPK from HighRiskMonitoring where status in (1,2) and HighRiskType = 98

insert into @HighRisk ( FundClientPK )
select FundClientPK from HighRiskMonitoring where status in (1) and HighRiskType = 99                            


BEGIN 
select @Type  
+'|' + @CompanyID     
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,''))))    
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FC.Name,''))))       
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Negara,''))))  
+'|' + RTRIM(LTRIM(case when NomorSIUP = '0' then '' else isnull(cast(NomorSIUP as nvarchar(40)),'') end))   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), SIUPExpirationDate, 112) <> '19000101' then CONVERT(VARCHAR(10), SIUPExpirationDate, 112) else '' End))) 
+'|' + case when NoSKD = '0' then '' else RTRIM(LTRIM(isnull(cast(NoSKD as nvarchar(40)),''))) end
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), ExpiredDateSKD, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateSKD, 112) else '' End))) 
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NPWP,'')))) 
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), RegistrationNPWP, 112) <> '19000101' then CONVERT(VARCHAR(10), RegistrationNPWP, 112) else '' End)))
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CountryofEstablishment,''))))  
+'|' + case when LokasiBerdiri = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(LokasiBerdiri ,'')))) end  
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), TanggalBerdiri, 112) <> '19000101' then CONVERT(VARCHAR(10), TanggalBerdiri, 112) else '' End),''))))         
+'|' + RTRIM(LTRIM((isnull(NomorAnggaran,''))))
+'|' + case when Tipe = '0' then '' else isnull(cast(Tipe as nvarchar(1)),'') end 
+'|' + case when Karakteristik = '0' then '' else isnull(cast(Karakteristik as nvarchar(1)),'') end 
+'|' + case when PenghasilanInstitusi = '0' then '' else isnull(cast(PenghasilanInstitusi as nvarchar(1)),'') end 
+'|' + case when KYCRiskProfile = '0' then '' else case when KYCRiskProfile = 2 then '3' when KYCRiskProfile = 3 then '5' else '1' end end 
+'|' + case when MaksudTujuanInstitusi = '0' then '' else isnull(cast(MaksudTujuanInstitusi as nvarchar(1)),'') end 
+'|' + case when SumberDanaInstitusi = '0' then '' else isnull(cast(SumberDanaInstitusi as nvarchar(1)),'') end 
+'|' + case when AssetOwner = '0' then '' else isnull(cast(AssetOwner as nvarchar(1)),'') end  
+'|' + case when AlamatPerusahaan = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatPerusahaan ,''))),char(13),''),char(10),'') end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CompanyCityName,'')))) 
+'|' + isnull(MV18.DescOne,'')                                    
+'|' + case when KodePosIns = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosIns ,'')))) end  
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CountryOfCompany,''))))   
+'|' + case when TeleponBisnis = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TeleponBisnis ,'')))) end    
+'|' + case when FC.Companyfax = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FC.Companyfax ,'')))) end    
+'|' + case when fc.CompanyMail = '0' then '' else isnull(fc.CompanyMail,'') end     
+'|' + case when StatementType = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(StatementType ,'')))) end   
+'|' + case when NamaDepanIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanIns1 ,'')))) end   
+'|' + case when NamaTengahIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahIns1 ,'')))) end  
+'|' + case when NamaBelakangIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangIns1 ,'')))) end  
+'|' + case when Jabatan1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Jabatan1 ,'')))) end   
+'|' + case when fc.PhoneIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.PhoneIns1 ,'')))) end   
+'|' + case when fc.EmailIns1 = '0' then '' else isnull(fc.EmailIns1,'') end    
+'|' + case when fc.NPWPPerson1 = '0' then '' else isnull(fc.NPWPPerson1,'') end  
+'|' + case when fc.NoIdentitasIns11 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.NoIdentitasIns11 ,'')))) end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), ExpiredDateIdentitasIns11, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateIdentitasIns11, 112) else '' End),''))))  
+'|' +  
+'|' +  
+'|' + case when NamaDepanIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanIns2 ,'')))) end   
+'|' + case when NamaTengahIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahIns2 ,'')))) end  
+'|' + case when NamaBelakangIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangIns2 ,'')))) end  
+'|' + case when Jabatan2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Jabatan2 ,'')))) end   
+'|' + case when fc.PhoneIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.PhoneIns2 ,'')))) end   
+'|' + case when fc.EmailIns2 = '0' then '' else isnull(fc.EmailIns2,'') end   
+'|' + case when fc.NPWPPerson2 = '0' then '' else isnull(fc.NPWPPerson2,'') end  
+'|' + case when fc.NoIdentitasIns21 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.NoIdentitasIns21 ,'')))) end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), ExpiredDateIdentitasIns21, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateIdentitasIns21, 112) else '' End),''))))   
+'|' +  
+'|' +  
+'|' + case when AssetFor1Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor1Year ,'')))) end  
+'|' + case when AssetFor2Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor2Year ,'')))) end   
+'|' + case when AssetFor3Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor3Year ,'')))) end 
+'|' + case when OperatingProfitFor1Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor1Year ,'')))) end   
+'|' + case when OperatingProfitFor2Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor2Year ,'')))) end   
+'|' + case when OperatingProfitFor3Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor3Year ,'')))) end 
+'|' + case when FATCA = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FATCA ,'')))) end 
+'|' + case when TIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TIN ,'')))) end  
+'|' + case when TINIssuanceCountry = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TINIssuanceCountry ,'')))) end  
+'|' + case when GIIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(GIIN ,'')))) end   
+'|' + case when SubstantialOwnerName = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerName ,'')))) end    
+'|' + case when SubstantialOwnerAddress = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerAddress ,'')))) end    
+'|' + case when SubstantialOwnerTIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerTIN ,'')))) end                                   
+ '|' + ''
+ '|' + isnull(B1.BICode,'')                        
+ '|' + isnull(B1.Name,'') 
+ '|' + isnull(B1.Country,'') 
+ '|' + case when BankBranchName1 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName1,''))))    as nvarchar(100)),'') end 
+ '|' + isnull(MV15.DescOne,'') 
+ '|' + case when NomorRekening1 = '0' then '' else isnull(cast(NomorRekening1 as nvarchar(30)),'') end
+ '|' + case when NamaNasabah1 = '0' then '' else isnull(cast(NamaNasabah1 as nvarchar(100)),'') end 
+ '|' +  ''
+ '|' + isnull(B2.BICode,'')                        
+ '|' + isnull(B2.Name,'') 
+ '|' + isnull(B2.Country,'') 
+ '|' + case when BankBranchName2 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName2,''))))    as nvarchar(100)),'') end 
+ '|' + isnull(MV16.DescOne,'') 
+ '|' + case when NomorRekening2 = '0' then '' else isnull(cast(NomorRekening2 as nvarchar(30)),'') end 
+ '|' + case when NamaNasabah2 = '0' then '' else isnull(cast(NamaNasabah2 as nvarchar(100)),'') end   
+ '|' + ''
+ '|' + isnull(B3.BICode,'')                        
+ '|' + isnull(B3.Name,'') 
+ '|' + isnull(B3.Country,'') 
+ '|' + case when BankBranchName3 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName3,''))))    as nvarchar(100)),'') end 
+ '|' + isnull(MV17.DescOne,'') 
+ '|' + case when NomorRekening3 = '0' then '' else isnull(cast(NomorRekening3 as nvarchar(30)),'') end 
+ '|' + case when NamaNasabah3 = '0' then '' else isnull(cast(NamaNasabah3 as nvarchar(100)),'') end                                      
+ '|' + isnull(FC.ID,'')   ResultText
from fundclient FC left join Agent A on FC.SellingAgentPK = A.AgentPK and A.Status = 2   
left join MasterValue MV3 on FC.Tipe = MV3.Code and MV3.status =2  and MV3.ID ='CompanyType'   
left join MasterValue MV4 on FC.Karakteristik = MV4.Code and MV4.status =2  and MV4.ID ='CompanyCharacteristic'   
left join MasterValue MV5 on FC.PenghasilanInstitusi = MV5.Code and MV5.status =2  and MV5.ID ='IncomeINS'   
left join MasterValue MV6 on FC.KYCRiskProfile = MV6.Code and MV6.status =2  and MV6.ID ='KYCRiskProfile'   
left join MasterValue MV7 on FC.MaksudTujuanInstitusi = MV7.Code and MV7.status =2  and MV7.ID ='InvestmentObjectivesINS'  
left join MasterValue MV8 on FC.SumberDanaInstitusi = MV8.Code and MV8.status =2  and MV8.ID ='IncomeSourceINS'   
left join MasterValue MV9 on FC.AssetOwner = MV9.Code and MV9.status =2  and MV9.ID ='AssetOwner'   
left join MasterValue MV10 on FC.KodeKotaIns = MV10.Code and MV10.status =2  and MV10.ID ='CityRHB'   
left join MasterValue MV15 on FC.MataUang1 = MV15.Code and MV15.status =2  and MV15.ID ='MataUang'   
left join MasterValue MV16 on FC.MataUang2 = MV16.Code and MV16.status =2  and MV16.ID ='MataUang'   
left join MasterValue MV17 on FC.MataUang3 = MV17.Code and MV17.status =2  and MV17.ID ='MataUang'   
left join MasterValue MV18 on CompanyCityName = MV18.Code and MV18.status =2  and MV18.ID ='CityRHB'  
left join Bank B1 on fc.NamaBank1 = B1.BankPK and B1.status = 2   
left join Bank B2 on fc.NamaBank2 = B2.BankPK and B2.status = 2   
left join Bank B3 on fc.NamaBank3 = B3.BankPK and B3.status = 2 
where FC.Status = 2 and FC.InvestorType = 2 and 
FC.FundClientPK not in ( select FundClientPK from @HighRisk ) " + paramFundClientSelected + _paramFundClientPK + @" 
order by FC.name asc  
END 

";
                            }
                            else
                            {
                                cmd.CommandText = @"

declare @HighRisk table (
	FundClientPK int
)

insert into @HighRisk ( FundClientPK )
select FundClientPK from HighRiskMonitoring where status in (1,2) and HighRiskType = 98

insert into @HighRisk ( FundClientPK )
select FundClientPK from HighRiskMonitoring where status in (1) and HighRiskType = 99                            


BEGIN 
select @Type  
+'|' + @CompanyID     
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,''))))    
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FC.Name,''))))       
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Negara,''))))  
+'|' + RTRIM(LTRIM(case when NomorSIUP = '0' then '' else isnull(cast(NomorSIUP as nvarchar(40)),'') end))   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), SIUPExpirationDate, 112) <> '19000101' then CONVERT(VARCHAR(10), SIUPExpirationDate, 112) else '' End))) 
+'|' + case when NoSKD = '0' then '' else RTRIM(LTRIM(isnull(cast(NoSKD as nvarchar(40)),''))) end
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), ExpiredDateSKD, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateSKD, 112) else '' End))) 
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NPWP,'')))) 
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), RegistrationNPWP, 112) <> '19000101' then CONVERT(VARCHAR(10), RegistrationNPWP, 112) else '' End)))
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CountryofEstablishment,''))))  
+'|' + case when LokasiBerdiri = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(LokasiBerdiri ,'')))) end  
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), TanggalBerdiri, 112) <> '19000101' then CONVERT(VARCHAR(10), TanggalBerdiri, 112) else '' End),''))))         
+'|' + RTRIM(LTRIM((isnull(NomorAnggaran,''))))
+'|' + case when Tipe = '0' then '' else isnull(cast(Tipe as nvarchar(1)),'') end 
+'|' + case when Karakteristik = '0' then '' else isnull(cast(Karakteristik as nvarchar(1)),'') end 
+'|' + case when PenghasilanInstitusi = '0' then '' else isnull(cast(PenghasilanInstitusi as nvarchar(1)),'') end 
+'|' + case when KYCRiskProfile = '0' then '' else case when KYCRiskProfile = 2 then '3' when KYCRiskProfile = 3 then '5' else '1' end end 
+'|' + case when MaksudTujuanInstitusi = '0' then '' else isnull(cast(MaksudTujuanInstitusi as nvarchar(1)),'') end 
+'|' + case when SumberDanaInstitusi = '0' then '' else isnull(cast(SumberDanaInstitusi as nvarchar(1)),'') end 
+'|' + case when AssetOwner = '0' then '' else isnull(cast(AssetOwner as nvarchar(1)),'') end  
+'|' + case when AlamatPerusahaan = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatPerusahaan ,''))),char(13),''),char(10),'') end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CompanyCityName,'')))) 
+'|' + isnull(MV18.DescOne,'')                                    
+'|' + case when KodePosIns = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosIns ,'')))) end  
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CountryOfCompany,''))))   
+'|' + case when TeleponBisnis = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TeleponBisnis ,'')))) end    
+'|' + case when FC.Companyfax = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FC.Companyfax ,'')))) end    
+'|' + case when fc.CompanyMail = '0' then '' else isnull(fc.CompanyMail,'') end     
+'|' + case when StatementType = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(StatementType ,'')))) end   
+'|' + case when NamaDepanIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanIns1 ,'')))) end   
+'|' + case when NamaTengahIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahIns1 ,'')))) end  
+'|' + case when NamaBelakangIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangIns1 ,'')))) end  
+'|' + case when Jabatan1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Jabatan1 ,'')))) end   
+'|' + case when fc.PhoneIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.PhoneIns1 ,'')))) end   
+'|' + case when fc.EmailIns1 = '0' then '' else isnull(fc.EmailIns1,'') end    
+'|' + case when fc.NPWPPerson1 = '0' then '' else isnull(fc.NPWPPerson1,'') end  
+'|' + case when fc.NoIdentitasIns11 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.NoIdentitasIns11 ,'')))) end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), ExpiredDateIdentitasIns11, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateIdentitasIns11, 112) else '' End),''))))  
+'|' +  
+'|' +  
+'|' + case when NamaDepanIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanIns2 ,'')))) end   
+'|' + case when NamaTengahIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahIns2 ,'')))) end  
+'|' + case when NamaBelakangIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangIns2 ,'')))) end  
+'|' + case when Jabatan2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Jabatan2 ,'')))) end   
+'|' + case when fc.PhoneIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.PhoneIns2 ,'')))) end   
+'|' + case when fc.EmailIns2 = '0' then '' else isnull(fc.EmailIns2,'') end   
+'|' + case when fc.NPWPPerson2 = '0' then '' else isnull(fc.NPWPPerson2,'') end  
+'|' + case when fc.NoIdentitasIns21 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.NoIdentitasIns21 ,'')))) end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), ExpiredDateIdentitasIns21, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateIdentitasIns21, 112) else '' End),''))))   
+'|' +  
+'|' +  
+'|' + case when AssetFor1Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor1Year ,'')))) end  
+'|' + case when AssetFor2Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor2Year ,'')))) end   
+'|' + case when AssetFor3Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor3Year ,'')))) end 
+'|' + case when OperatingProfitFor1Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor1Year ,'')))) end   
+'|' + case when OperatingProfitFor2Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor2Year ,'')))) end   
+'|' + case when OperatingProfitFor3Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor3Year ,'')))) end 
+'|' + case when FATCA = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FATCA ,'')))) end 
+'|' + case when TIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TIN ,'')))) end  
+'|' + case when TINIssuanceCountry = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TINIssuanceCountry ,'')))) end  
+'|' + case when GIIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(GIIN ,'')))) end   
+'|' + case when SubstantialOwnerName = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerName ,'')))) end    
+'|' + case when SubstantialOwnerAddress = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerAddress ,'')))) end    
+'|' + case when SubstantialOwnerTIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerTIN ,'')))) end                                   
+ '|' + ''
+ '|' + ''                        
+ '|' + '' 
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''                        
+ '|' + '' 
+ '|' + '' 
+ '|' + '' 
+ '|' + '' 
+ '|' + ''
+ '|' + ''   
+ '|' + ''
+ '|' + ''                        
+ '|' + '' 
+ '|' + '' 
+ '|' + ''
+ '|' + ''
+ '|' + '' 
+ '|' + ''                                     
+ '|' + ''  ResultText
from fundclient FC left join Agent A on FC.SellingAgentPK = A.AgentPK and A.Status = 2   
left join MasterValue MV3 on FC.Tipe = MV3.Code and MV3.status =2  and MV3.ID ='CompanyType'   
left join MasterValue MV4 on FC.Karakteristik = MV4.Code and MV4.status =2  and MV4.ID ='CompanyCharacteristic'   
left join MasterValue MV5 on FC.PenghasilanInstitusi = MV5.Code and MV5.status =2  and MV5.ID ='IncomeINS'   
left join MasterValue MV6 on FC.KYCRiskProfile = MV6.Code and MV6.status =2  and MV6.ID ='KYCRiskProfile'   
left join MasterValue MV7 on FC.MaksudTujuanInstitusi = MV7.Code and MV7.status =2  and MV7.ID ='InvestmentObjectivesINS'  
left join MasterValue MV8 on FC.SumberDanaInstitusi = MV8.Code and MV8.status =2  and MV8.ID ='IncomeSourceINS'   
left join MasterValue MV9 on FC.AssetOwner = MV9.Code and MV9.status =2  and MV9.ID ='AssetOwner'   
left join MasterValue MV10 on FC.KodeKotaIns = MV10.Code and MV10.status =2  and MV10.ID ='CityRHB'   
left join MasterValue MV15 on FC.MataUang1 = MV15.Code and MV15.status =2  and MV15.ID ='MataUang'   
left join MasterValue MV16 on FC.MataUang2 = MV16.Code and MV16.status =2  and MV16.ID ='MataUang'   
left join MasterValue MV17 on FC.MataUang3 = MV17.Code and MV17.status =2  and MV17.ID ='MataUang'   
left join MasterValue MV18 on CompanyCityName = MV18.Code and MV18.status =2  and MV18.ID ='CityRHB'  
left join Bank B1 on fc.NamaBank1 = B1.BankPK and B1.status = 2   
left join Bank B2 on fc.NamaBank2 = B2.BankPK and B2.status = 2   
left join Bank B3 on fc.NamaBank3 = B3.BankPK and B3.status = 2 
where FC.Status = 2 and FC.InvestorType = 2 and 
FC.FundClientPK not in ( select FundClientPK from @HighRisk ) " + paramFundClientSelected + _paramFundClientPK + @" 
order by FC.name asc  
END 

";
                            }




                            cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                            cmd.Parameters.AddWithValue("@Type", _type);
                            using (SqlDataReader dr1 = cmd.ExecuteReader())
                            {
                                if (dr1.HasRows)
                                {
                                    if (dr1.HasRows)
                                    {
                                        string filePath;
                                        filePath = Tools.SInvestTextPath + "SInvestInstitusiTxtVersion.txt";
                                        FileInfo txtFile = new FileInfo(filePath);
                                        if (txtFile.Exists)
                                        {
                                            txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        }

                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                        {
                                            file.WriteLine("");
                                            while (dr1.Read())
                                            {
                                                file.WriteLine(Convert.ToString(dr1["ResultText"]));
                                            }
                                            return true;
                                        }
                                    }
                                    return false;
                                }
                            }
                        }
                        return false;

                    }

                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public void InsertBlackListName(string _usersID)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText =
                            @"
 --DROP TABLE #FundClient
 --DROP TABLE #BlackListName
 --DROP TABLE  #tempTableBlackList

 --declare @LastUpdate datetime
 --declare @UsersID nvarchar(50)
 --set @UsersID = 'sa'
 --set @LastUpdate = getdate()
 
 
 CREATE TABLE #FundClient
 (
	FundClientPK int,
	HistoryPK int,
	Name nvarchar(500),
 )
 
  
 CREATE TABLE #BlackListName
 (
	BlackListName nvarchar(500),
	BlackListDesc nvarchar(500),
 )

 CREATE TABLE  #tempTableBlackList
 (
	FundClientPK int,
	Name nvarchar(500),
	BlackListName nvarchar(500),
	BlackListDesc nvarchar(500),
	Percentage numeric(19,4)
 )


Insert into #FundClient
select distinct A.FundClientPK,A.HistoryPK,Name from FundClient A
left join HighRiskMonitoring B on A.FundClientPK = B.FundClientPK and B.status in (1,2) and B.HighRiskType = 98
where A.status = 2 and B.FundClientPK is null 

Insert into #BlackListName
Select NameAlias,Description + ' || ' + NoDoc From BlackListName Where status = 2 and len(rtrim(ltrim(NameAlias))) > 1
Insert into #BlackListName
Select Name,Description + ' || ' + NoDoc From BlackListName A Where status = 2 and len(rtrim(ltrim(Name))) > 1 and isnull(A.Name,'') <> '' and len(rtrim(ltrim(a.Description))) > 3 and A.Type <> 0


Declare @BlackListName nvarchar(200)
Declare @BlackListDesc nvarchar(1000)
                    
Declare A Cursor For 
    select * from #BlackListName                  
Open A
                    
Fetch Next From A
into @BlackListName,@BlackListDesc
                    
WHILE @@FETCH_STATUS = 0
BEGIN
                    
    Insert into #tempTableBlackList
    select FundClientPK,Name,@BlackListName, @BlackListDesc, dbo.[FGetPercentageOfTwoStringMatching](Name,@BlackListName) Percentage
    from #FundClient A
                      
    FETCH NEXT FROM A 
    INTO @BlackListName,@BlackListDesc
                    
END 
CLOSE A;
DEALLOCATE A;



Declare @PK int
Declare @CFundClientPK int

Declare B Cursor For
	select distinct FundClientPK from #tempTableBlackList
	where Percentage >= 70

Open B
Fetch next From B
into @CFundClientPK

While @@Fetch_status = 0
BEGIN

select @PK = Max(HighRiskMonitoringPK) + 1 from HighRiskMonitoring
set @PK = isnull(@PK,1)
		
				
insert into HighRiskMonitoring( HighRiskMonitoringPK,HistoryPK,status,selected,Date,FundClientPK,HighRiskType,Reason,Description,EntryUsersID,EntryTime,LastUpdate)
Select @PK,1,1,0,CAST(@Lastupdate AS date),@CFundClientPK,98,'PPATK','Client under suspicion from Blacklist Name data',@UsersID,@LastUpdate,@LastUpdate

                                

fetch next From B into @CFundClientPK
end
Close B
Deallocate B











                             ";
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.CommandTimeout = 0;
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string SIDImport(string _fileSource, string _userID)
        {
            string _msg;
            DateTime _dateTime = DateTime.Now;
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //delete data yang lama
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table UpdateSIDIFUACodeTemp";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.UpdateSIDIFUACodeTemp";
                            bulkCopy.WriteToServer(CreateDataTableFromSIDTempExcelFile(_fileSource));
                            _msg = "Update SID/IFUA Success";
                        }

                        // logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"  
                                   
                               
                                update B set B.IFUACode = A.IFUACode, B.SID = A.SID,B.frontSync = 0, B.OpeningDateSinvest = A.OpeningDateSinvest
                                ,B.LastUpdate = @Lastupdate,B.UpdateTime = @Lastupdate,B.UpdateUsersID = @EntryUsersID 
                                from UpdateSIDIFUACodeTemp A 
                                left join FundClient B on A.ClientCode = B.ID
                                where B.status in (1,2)


                                ";
                                cmd1.CommandTimeout = 0;
                                cmd1.Parameters.AddWithValue("@EntryUsersID", _userID);
                                cmd1.Parameters.AddWithValue("@LastUpdate", _dateTime);
                                cmd1.ExecuteNonQuery();
                            }
                            _msg = "Import SID IFUA Done";

                        }



                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromSIDTempExcelFile(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.Int32");
            dc.ColumnName = "UpdateSIDIFUACodeTempPK";
            dc.Unique = false;
            dc.AutoIncrement = true;
            dc.AutoIncrementSeed = 1;
            dc.AutoIncrementStep = 1;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IFUACode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ClientCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "OpeningDateSinvest";
            dc.Unique = false;
            dt.Columns.Add(dc);

            StreamReader sr = new StreamReader(Tools.TxtFilePath + _fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });
                dr = dt.NewRow();
                dr["SID"] = s[2];
                dr["IFUACode"] = s[3];
                dr["ClientCode"] = s[5];
                dr["OpeningDateSinvest"] = s[53];
                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }




    }
}
